// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataFactories;
using Microsoft.Azure.Management.DataFactories.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataFactories
{
    /// <summary>
    /// Operations for managing pipelines.
    /// </summary>
    internal partial class PipelineOperations : IServiceOperations<DataPipelineManagementClient>, IPipelineOperations
    {
        /// <summary>
        /// Initializes a new instance of the PipelineOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal PipelineOperations(DataPipelineManagementClient client)
        {
            this._client = client;
        }
        
        private DataPipelineManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataFactories.DataPipelineManagementClient.
        /// </summary>
        public DataPipelineManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create or update a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> BeginCreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, PipelineCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Pipeline != null)
            {
                if (parameters.Pipeline.Name == null)
                {
                    throw new ArgumentNullException("parameters.Pipeline.Name");
                }
                if (parameters.Pipeline.Name != null && parameters.Pipeline.Name.Length > 260)
                {
                    throw new ArgumentOutOfRangeException("parameters.Pipeline.Name");
                }
                if (Regex.IsMatch(parameters.Pipeline.Name, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
                {
                    throw new ArgumentOutOfRangeException("parameters.Pipeline.Name");
                }
                if (parameters.Pipeline.Properties == null)
                {
                    throw new ArgumentNullException("parameters.Pipeline.Properties");
                }
                if (parameters.Pipeline.Properties.Activities == null)
                {
                    throw new ArgumentNullException("parameters.Pipeline.Properties.Activities");
                }
                if (parameters.Pipeline.Properties.Activities != null)
                {
                    foreach (BaseActivity activitiesParameterItem in parameters.Pipeline.Properties.Activities)
                    {
                        if (activitiesParameterItem.Inputs != null)
                        {
                            foreach (ActivityInput inputsParameterItem in activitiesParameterItem.Inputs)
                            {
                                if (inputsParameterItem.Name == null)
                                {
                                    throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.Inputs.Name");
                                }
                            }
                        }
                        if (activitiesParameterItem.Name == null)
                        {
                            throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.Name");
                        }
                        if (activitiesParameterItem.Outputs != null)
                        {
                            foreach (ActivityOutput outputsParameterItem in activitiesParameterItem.Outputs)
                            {
                                if (outputsParameterItem.Name == null)
                                {
                                    throw new ArgumentNullException("parameters.Pipeline.Properties.Activities.Outputs.Name");
                                }
                            }
                        }
                    }
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            if (parameters.Pipeline != null && parameters.Pipeline.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Pipeline.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject pipelineCreateOrUpdateParametersValue = new JObject();
                requestDoc = pipelineCreateOrUpdateParametersValue;
                
                if (parameters.Pipeline != null)
                {
                    pipelineCreateOrUpdateParametersValue["name"] = parameters.Pipeline.Name;
                    
                    JObject propertiesValue = new JObject();
                    pipelineCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Pipeline.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Pipeline.Properties.Description;
                    }
                    
                    if (parameters.Pipeline.Properties.Activities != null)
                    {
                        if (parameters.Pipeline.Properties.Activities is ILazyCollection == false || ((ILazyCollection)parameters.Pipeline.Properties.Activities).IsInitialized)
                        {
                            JArray activitiesArray = new JArray();
                            foreach (BaseActivity activitiesItem in parameters.Pipeline.Properties.Activities)
                            {
                                JObject baseActivityValue = new JObject();
                                activitiesArray.Add(baseActivityValue);
                                if (activitiesItem is CopyActivity)
                                {
                                    baseActivityValue["type"] = "CopyActivity";
                                    CopyActivity derived = ((CopyActivity)activitiesItem);
                                    
                                    if (derived.Transformation != null)
                                    {
                                        JObject transformationValue = new JObject();
                                        baseActivityValue["transformation"] = transformationValue;
                                        
                                        JObject sourceValue = new JObject();
                                        transformationValue["source"] = sourceValue;
                                        if (derived.Transformation.Source is AzureTableSource)
                                        {
                                            sourceValue["type"] = "AzureTableSource";
                                            AzureTableSource derived2 = ((AzureTableSource)derived.Transformation.Source);
                                            
                                            if (derived2.AzureTableSourceQuery != null)
                                            {
                                                sourceValue["azureTableSourceQuery"] = derived2.AzureTableSourceQuery;
                                            }
                                            
                                            if (derived2.AzureTableSourceIgnoreTableNotFound != null)
                                            {
                                                sourceValue["azureTableSourceIgnoreTableNotFound"] = derived2.AzureTableSourceIgnoreTableNotFound.Value;
                                            }
                                            
                                            if (derived2.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived2.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived2.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived2.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is BlobSource)
                                        {
                                            sourceValue["type"] = "BlobSource";
                                            BlobSource derived3 = ((BlobSource)derived.Transformation.Source);
                                            
                                            if (derived3.BlobColumnSeparators != null)
                                            {
                                                sourceValue["blobColumnSeparators"] = derived3.BlobColumnSeparators;
                                            }
                                            
                                            if (derived3.TreatEmptyAsNull != null)
                                            {
                                                sourceValue["treatEmptyAsNull"] = derived3.TreatEmptyAsNull.Value;
                                            }
                                            
                                            if (derived3.NullValues != null)
                                            {
                                                sourceValue["nullValues"] = derived3.NullValues;
                                            }
                                            
                                            if (derived3.SkipHeaderLineCount != null)
                                            {
                                                sourceValue["skipHeaderLineCount"] = derived3.SkipHeaderLineCount.Value;
                                            }
                                            
                                            if (derived3.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived3.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived3.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived3.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is DocumentDbCollectionSource)
                                        {
                                            sourceValue["type"] = "DocumentDbCollectionSource";
                                            DocumentDbCollectionSource derived4 = ((DocumentDbCollectionSource)derived.Transformation.Source);
                                            
                                            if (derived4.Query != null)
                                            {
                                                sourceValue["query"] = derived4.Query;
                                            }
                                            
                                            if (derived4.NestingSeparator != null)
                                            {
                                                sourceValue["nestingSeparator"] = derived4.NestingSeparator;
                                            }
                                            
                                            if (derived4.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived4.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived4.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived4.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is RelationalSource)
                                        {
                                            sourceValue["type"] = "RelationalSource";
                                            RelationalSource derived5 = ((RelationalSource)derived.Transformation.Source);
                                            
                                            if (derived5.Query != null)
                                            {
                                                sourceValue["query"] = derived5.Query;
                                            }
                                            
                                            if (derived5.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived5.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived5.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived5.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is RelationalSource.OdbcSource)
                                        {
                                            sourceValue["type"] = "OdbcSource";
                                            RelationalSource.OdbcSource derived6 = ((RelationalSource.OdbcSource)derived.Transformation.Source);
                                            
                                            sourceValue["odbcReaderQuery"] = derived6.OdbcReaderQuery;
                                            
                                            if (derived6.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived6.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived6.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived6.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is RelationalSource.ODataSource)
                                        {
                                            sourceValue["type"] = "ODataSource";
                                            RelationalSource.ODataSource derived7 = ((RelationalSource.ODataSource)derived.Transformation.Source);
                                            
                                            if (derived7.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived7.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived7.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived7.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is RelationalSource.HdfsSource)
                                        {
                                            sourceValue["type"] = "HdfsSource";
                                            RelationalSource.HdfsSource derived8 = ((RelationalSource.HdfsSource)derived.Transformation.Source);
                                            
                                            if (derived8.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived8.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived8.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived8.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is SqlSource)
                                        {
                                            sourceValue["type"] = "SqlSource";
                                            SqlSource derived9 = ((SqlSource)derived.Transformation.Source);
                                            
                                            if (derived9.SqlReaderQuery != null)
                                            {
                                                sourceValue["sqlReaderQuery"] = derived9.SqlReaderQuery;
                                            }
                                            
                                            if (derived9.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived9.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived9.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived9.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is FileSystemSource)
                                        {
                                            sourceValue["type"] = "FileSystemSource";
                                            FileSystemSource derived10 = ((FileSystemSource)derived.Transformation.Source);
                                            
                                            if (derived10.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived10.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived10.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived10.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        if (derived.Transformation.Source is OracleSource)
                                        {
                                            sourceValue["type"] = "OracleSource";
                                            OracleSource derived11 = ((OracleSource)derived.Transformation.Source);
                                            
                                            if (derived11.OracleReaderQuery != null)
                                            {
                                                sourceValue["oracleReaderQuery"] = derived11.OracleReaderQuery;
                                            }
                                            
                                            sourceValue["queryTimeout"] = derived11.QueryTimeout.ToString();
                                            
                                            if (derived11.SourceRetryCount != null)
                                            {
                                                sourceValue["sourceRetryCount"] = derived11.SourceRetryCount.Value;
                                            }
                                            
                                            if (derived11.SourceRetryWait != null)
                                            {
                                                sourceValue["sourceRetryWait"] = derived11.SourceRetryWait.Value.ToString();
                                            }
                                        }
                                        
                                        JObject sinkValue = new JObject();
                                        transformationValue["sink"] = sinkValue;
                                        if (derived.Transformation.Sink is AzureQueueSink)
                                        {
                                            sinkValue["type"] = "AzureQueueSink";
                                            AzureQueueSink derived12 = ((AzureQueueSink)derived.Transformation.Sink);
                                            
                                            sinkValue["writeBatchSize"] = derived12.WriteBatchSize;
                                            
                                            sinkValue["writeBatchTimeout"] = derived12.WriteBatchTimeout.ToString();
                                            
                                            if (derived12.SinkRetryCount != null)
                                            {
                                                sinkValue["sinkRetryCount"] = derived12.SinkRetryCount.Value;
                                            }
                                            
                                            if (derived12.SinkRetryWait != null)
                                            {
                                                sinkValue["sinkRetryWait"] = derived12.SinkRetryWait.Value.ToString();
                                            }
                                            
                                            if (derived12.SinkPartitionData != null)
                                            {
                                                sinkValue["sinkPartitionData"] = derived12.SinkPartitionData.Value;
                                            }
                                        }
                                        if (derived.Transformation.Sink is AzureTableSink)
                                        {
                                            sinkValue["type"] = "AzureTableSink";
                                            AzureTableSink derived13 = ((AzureTableSink)derived.Transformation.Sink);
                                            
                                            sinkValue["azureTableRetryIntervalInSec"] = derived13.AzureTableRetryIntervalInSec;
                                            
                                            sinkValue["azureTableRetryTimes"] = derived13.AzureTableRetryTimes;
                                            
                                            if (derived13.AzureTableDefaultPartitionKeyValue != null)
                                            {
                                                sinkValue["azureTableDefaultPartitionKeyValue"] = derived13.AzureTableDefaultPartitionKeyValue;
                                            }
                                            
                                            if (derived13.AzureTablePartitionKeyName != null)
                                            {
                                                sinkValue["azureTablePartitionKeyName"] = derived13.AzureTablePartitionKeyName;
                                            }
                                            
                                            if (derived13.AzureTableRowKeyName != null)
                                            {
                                                sinkValue["azureTableRowKeyName"] = derived13.AzureTableRowKeyName;
                                            }
                                            
                                            if (derived13.AzureTableInsertType != null)
                                            {
                                                sinkValue["azureTableInsertType"] = derived13.AzureTableInsertType;
                                            }
                                            
                                            sinkValue["writeBatchSize"] = derived13.WriteBatchSize;
                                            
                                            sinkValue["writeBatchTimeout"] = derived13.WriteBatchTimeout.ToString();
                                            
                                            if (derived13.SinkRetryCount != null)
                                            {
                                                sinkValue["sinkRetryCount"] = derived13.SinkRetryCount.Value;
                                            }
                                            
                                            if (derived13.SinkRetryWait != null)
                                            {
                                                sinkValue["sinkRetryWait"] = derived13.SinkRetryWait.Value.ToString();
                                            }
                                            
                                            if (derived13.SinkPartitionData != null)
                                            {
                                                sinkValue["sinkPartitionData"] = derived13.SinkPartitionData.Value;
                                            }
                                        }
                                        if (derived.Transformation.Sink is BlobSink)
                                        {
                                            sinkValue["type"] = "BlobSink";
                                            BlobSink derived14 = ((BlobSink)derived.Transformation.Sink);
                                            
                                            if (derived14.BlockWriterBlockSize != null)
                                            {
                                                sinkValue["blockWriterBlockSize"] = derived14.BlockWriterBlockSize.Value;
                                            }
                                            
                                            if (derived14.BlobWriterOverwriteFiles != null)
                                            {
                                                sinkValue["blobWriterOverwriteFiles"] = derived14.BlobWriterOverwriteFiles.Value;
                                            }
                                            
                                            if (derived14.BlobWriterPartitionColumns != null)
                                            {
                                                sinkValue["blobWriterPartitionColumns"] = derived14.BlobWriterPartitionColumns;
                                            }
                                            
                                            if (derived14.BlobWriterPartitionFormat != null)
                                            {
                                                sinkValue["blobWriterPartitionFormat"] = derived14.BlobWriterPartitionFormat;
                                            }
                                            
                                            if (derived14.BlobWriterDateTimeFormat != null)
                                            {
                                                sinkValue["blobWriterDateTimeFormat"] = derived14.BlobWriterDateTimeFormat;
                                            }
                                            
                                            if (derived14.BlobWriterSeparator != null)
                                            {
                                                sinkValue["blobWriterSeparator"] = derived14.BlobWriterSeparator;
                                            }
                                            
                                            if (derived14.BlobWriterRowSuffix != null)
                                            {
                                                sinkValue["blobWriterRowSuffix"] = derived14.BlobWriterRowSuffix;
                                            }
                                            
                                            if (derived14.BlobWriterAddHeader != null)
                                            {
                                                sinkValue["blobWriterAddHeader"] = derived14.BlobWriterAddHeader.Value;
                                            }
                                            
                                            sinkValue["writeBatchSize"] = derived14.WriteBatchSize;
                                            
                                            sinkValue["writeBatchTimeout"] = derived14.WriteBatchTimeout.ToString();
                                            
                                            if (derived14.SinkRetryCount != null)
                                            {
                                                sinkValue["sinkRetryCount"] = derived14.SinkRetryCount.Value;
                                            }
                                            
                                            if (derived14.SinkRetryWait != null)
                                            {
                                                sinkValue["sinkRetryWait"] = derived14.SinkRetryWait.Value.ToString();
                                            }
                                            
                                            if (derived14.SinkPartitionData != null)
                                            {
                                                sinkValue["sinkPartitionData"] = derived14.SinkPartitionData.Value;
                                            }
                                        }
                                        if (derived.Transformation.Sink is DocumentDbCollectionSink)
                                        {
                                            sinkValue["type"] = "DocumentDbCollectionSink";
                                            DocumentDbCollectionSink derived15 = ((DocumentDbCollectionSink)derived.Transformation.Sink);
                                            
                                            if (derived15.NestingSeparator != null)
                                            {
                                                sinkValue["nestingSeparator"] = derived15.NestingSeparator;
                                            }
                                            
                                            sinkValue["writeBatchSize"] = derived15.WriteBatchSize;
                                            
                                            sinkValue["writeBatchTimeout"] = derived15.WriteBatchTimeout.ToString();
                                            
                                            if (derived15.SinkRetryCount != null)
                                            {
                                                sinkValue["sinkRetryCount"] = derived15.SinkRetryCount.Value;
                                            }
                                            
                                            if (derived15.SinkRetryWait != null)
                                            {
                                                sinkValue["sinkRetryWait"] = derived15.SinkRetryWait.Value.ToString();
                                            }
                                            
                                            if (derived15.SinkPartitionData != null)
                                            {
                                                sinkValue["sinkPartitionData"] = derived15.SinkPartitionData.Value;
                                            }
                                        }
                                        if (derived.Transformation.Sink is SqlSink)
                                        {
                                            sinkValue["type"] = "SqlSink";
                                            SqlSink derived16 = ((SqlSink)derived.Transformation.Sink);
                                            
                                            if (derived16.SqlWriterStoredProcedureName != null)
                                            {
                                                sinkValue["sqlWriterStoredProcedureName"] = derived16.SqlWriterStoredProcedureName;
                                            }
                                            
                                            if (derived16.SqlWriterTableType != null)
                                            {
                                                sinkValue["sqlWriterTableType"] = derived16.SqlWriterTableType;
                                            }
                                            
                                            if (derived16.SqlWriterCleanupScript != null)
                                            {
                                                sinkValue["sqlWriterCleanupScript"] = derived16.SqlWriterCleanupScript;
                                            }
                                            
                                            if (derived16.SliceIdentifierColumnName != null)
                                            {
                                                sinkValue["sliceIdentifierColumnName"] = derived16.SliceIdentifierColumnName;
                                            }
                                            
                                            if (derived16.StoredProcedureParameters != null)
                                            {
                                                if (derived16.StoredProcedureParameters is ILazyCollection == false || ((ILazyCollection)derived16.StoredProcedureParameters).IsInitialized)
                                                {
                                                    JObject storedProcedureParametersDictionary = new JObject();
                                                    foreach (KeyValuePair<string, StoredProcedureParameter> pair in derived16.StoredProcedureParameters)
                                                    {
                                                        string storedProcedureParametersKey = pair.Key;
                                                        StoredProcedureParameter storedProcedureParametersValue = pair.Value;
                                                        JObject storedProcedureParameterValue = new JObject();
                                                        storedProcedureParametersDictionary[storedProcedureParametersKey] = storedProcedureParameterValue;
                                                        
                                                        storedProcedureParameterValue["value"] = storedProcedureParametersValue.Value;
                                                        
                                                        if (storedProcedureParametersValue.Type != null)
                                                        {
                                                            storedProcedureParameterValue["type"] = storedProcedureParametersValue.Type;
                                                        }
                                                    }
                                                    sinkValue["storedProcedureParameters"] = storedProcedureParametersDictionary;
                                                }
                                            }
                                            
                                            sinkValue["writeBatchSize"] = derived16.WriteBatchSize;
                                            
                                            sinkValue["writeBatchTimeout"] = derived16.WriteBatchTimeout.ToString();
                                            
                                            if (derived16.SinkRetryCount != null)
                                            {
                                                sinkValue["sinkRetryCount"] = derived16.SinkRetryCount.Value;
                                            }
                                            
                                            if (derived16.SinkRetryWait != null)
                                            {
                                                sinkValue["sinkRetryWait"] = derived16.SinkRetryWait.Value.ToString();
                                            }
                                            
                                            if (derived16.SinkPartitionData != null)
                                            {
                                                sinkValue["sinkPartitionData"] = derived16.SinkPartitionData.Value;
                                            }
                                        }
                                        if (derived.Transformation.Sink is OracleSink)
                                        {
                                            sinkValue["type"] = "OracleSink";
                                            OracleSink derived17 = ((OracleSink)derived.Transformation.Sink);
                                            
                                            if (derived17.OracleWriterStoredProcedureName != null)
                                            {
                                                sinkValue["oracleWriterStoredProcedureName"] = derived17.OracleWriterStoredProcedureName;
                                            }
                                            
                                            if (derived17.OracleWriterTableType != null)
                                            {
                                                sinkValue["oracleWriterTableType"] = derived17.OracleWriterTableType;
                                            }
                                            
                                            sinkValue["writeBatchSize"] = derived17.WriteBatchSize;
                                            
                                            sinkValue["writeBatchTimeout"] = derived17.WriteBatchTimeout.ToString();
                                            
                                            if (derived17.SinkRetryCount != null)
                                            {
                                                sinkValue["sinkRetryCount"] = derived17.SinkRetryCount.Value;
                                            }
                                            
                                            if (derived17.SinkRetryWait != null)
                                            {
                                                sinkValue["sinkRetryWait"] = derived17.SinkRetryWait.Value.ToString();
                                            }
                                            
                                            if (derived17.SinkPartitionData != null)
                                            {
                                                sinkValue["sinkPartitionData"] = derived17.SinkPartitionData.Value;
                                            }
                                        }
                                        
                                        if (derived.Transformation.Translator != null)
                                        {
                                            JObject translatorValue = new JObject();
                                            transformationValue["translator"] = translatorValue;
                                            if (derived.Transformation.Translator is TabularTranslator)
                                            {
                                                translatorValue["type"] = "TabularTranslator";
                                                TabularTranslator derived18 = ((TabularTranslator)derived.Transformation.Translator);
                                                
                                                if (derived18.ColumnMappings != null)
                                                {
                                                    translatorValue["columnMappings"] = derived18.ColumnMappings;
                                                }
                                            }
                                        }
                                    }
                                    
                                    baseActivityValue["name"] = derived.Name;
                                    
                                    if (derived.Description != null)
                                    {
                                        baseActivityValue["description"] = derived.Description;
                                    }
                                    
                                    if (derived.LinkedServiceName != null)
                                    {
                                        baseActivityValue["linkedServiceName"] = derived.LinkedServiceName;
                                    }
                                    
                                    if (derived.Policy != null)
                                    {
                                        JObject policyValue = new JObject();
                                        baseActivityValue["policy"] = policyValue;
                                        
                                        if (derived.Policy.Timeout != null)
                                        {
                                            policyValue["timeout"] = derived.Policy.Timeout.Value.ToString();
                                        }
                                        
                                        if (derived.Policy.Delay != null)
                                        {
                                            policyValue["delay"] = derived.Policy.Delay.Value.ToString();
                                        }
                                        
                                        if (derived.Policy.Concurrency != null)
                                        {
                                            policyValue["concurrency"] = derived.Policy.Concurrency.Value;
                                        }
                                        
                                        if (derived.Policy.ExecutionPriorityOrder != null)
                                        {
                                            policyValue["executionPriorityOrder"] = derived.Policy.ExecutionPriorityOrder;
                                        }
                                        
                                        if (derived.Policy.Retry != null)
                                        {
                                            policyValue["retry"] = derived.Policy.Retry.Value;
                                        }
                                        
                                        if (derived.Policy.LongRetry != null)
                                        {
                                            policyValue["longRetry"] = derived.Policy.LongRetry.Value;
                                        }
                                        
                                        if (derived.Policy.LongRetryInterval != null)
                                        {
                                            policyValue["longRetryInterval"] = derived.Policy.LongRetryInterval.Value.ToString();
                                        }
                                    }
                                    
                                    if (derived.Inputs != null)
                                    {
                                        JArray inputsArray = new JArray();
                                        foreach (ActivityInput inputsItem in derived.Inputs)
                                        {
                                            JObject activityInputValue = new JObject();
                                            inputsArray.Add(activityInputValue);
                                            
                                            if (inputsItem.StartTime != null)
                                            {
                                                activityInputValue["startTime"] = inputsItem.StartTime;
                                            }
                                            
                                            if (inputsItem.EndTime != null)
                                            {
                                                activityInputValue["endTime"] = inputsItem.EndTime;
                                            }
                                            
                                            if (inputsItem.Length != null)
                                            {
                                                activityInputValue["length"] = inputsItem.Length.Value.ToString();
                                            }
                                            
                                            activityInputValue["name"] = inputsItem.Name;
                                        }
                                        baseActivityValue["inputs"] = inputsArray;
                                    }
                                    
                                    if (derived.Outputs != null)
                                    {
                                        JArray outputsArray = new JArray();
                                        foreach (ActivityOutput outputsItem in derived.Outputs)
                                        {
                                            JObject activityOutputValue = new JObject();
                                            outputsArray.Add(activityOutputValue);
                                            
                                            activityOutputValue["name"] = outputsItem.Name;
                                        }
                                        baseActivityValue["outputs"] = outputsArray;
                                    }
                                }
                                if (activitiesItem is HDInsightActivity)
                                {
                                    baseActivityValue["type"] = "HDInsightActivity";
                                    HDInsightActivity derived19 = ((HDInsightActivity)activitiesItem);
                                    
                                    if (derived19.Transformation != null)
                                    {
                                        JObject transformationValue2 = new JObject();
                                        baseActivityValue["transformation"] = transformationValue2;
                                        if (derived19.Transformation is Hive)
                                        {
                                            transformationValue2["type"] = "Hive";
                                            Hive derived20 = ((Hive)derived19.Transformation);
                                            
                                            if (derived20.Script != null)
                                            {
                                                transformationValue2["script"] = derived20.Script;
                                            }
                                            
                                            if (derived20.ScriptPath != null)
                                            {
                                                transformationValue2["scriptPath"] = derived20.ScriptPath;
                                            }
                                            
                                            if (derived20.ScriptLinkedService != null)
                                            {
                                                transformationValue2["scriptLinkedService"] = derived20.ScriptLinkedService;
                                            }
                                            
                                            if (derived20.Defines != null)
                                            {
                                                if (derived20.Defines is ILazyCollection == false || ((ILazyCollection)derived20.Defines).IsInitialized)
                                                {
                                                    JObject definesDictionary = new JObject();
                                                    foreach (KeyValuePair<string, string> pair2 in derived20.Defines)
                                                    {
                                                        string definesKey = pair2.Key;
                                                        string definesValue = pair2.Value;
                                                        definesDictionary[definesKey] = definesValue;
                                                    }
                                                    transformationValue2["defines"] = definesDictionary;
                                                }
                                            }
                                            
                                            if (derived20.ExtendedProperties != null)
                                            {
                                                if (derived20.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived20.ExtendedProperties).IsInitialized)
                                                {
                                                    JObject extendedPropertiesDictionary = new JObject();
                                                    foreach (KeyValuePair<string, string> pair3 in derived20.ExtendedProperties)
                                                    {
                                                        string extendedPropertiesKey = pair3.Key;
                                                        string extendedPropertiesValue = pair3.Value;
                                                        extendedPropertiesDictionary[extendedPropertiesKey] = extendedPropertiesValue;
                                                    }
                                                    transformationValue2["extendedProperties"] = extendedPropertiesDictionary;
                                                }
                                            }
                                            
                                            if (derived20.StorageLinkedServices != null)
                                            {
                                                JArray storageLinkedServicesArray = new JArray();
                                                foreach (string storageLinkedServicesItem in derived20.StorageLinkedServices)
                                                {
                                                    storageLinkedServicesArray.Add(storageLinkedServicesItem);
                                                }
                                                transformationValue2["storageLinkedServices"] = storageLinkedServicesArray;
                                            }
                                            
                                            if (derived20.Arguments != null)
                                            {
                                                JArray argumentsArray = new JArray();
                                                foreach (string argumentsItem in derived20.Arguments)
                                                {
                                                    argumentsArray.Add(argumentsItem);
                                                }
                                                transformationValue2["arguments"] = argumentsArray;
                                            }
                                        }
                                        if (derived19.Transformation is Pig)
                                        {
                                            transformationValue2["type"] = "Pig";
                                            Pig derived21 = ((Pig)derived19.Transformation);
                                            
                                            if (derived21.Script != null)
                                            {
                                                transformationValue2["script"] = derived21.Script;
                                            }
                                            
                                            if (derived21.ScriptPath != null)
                                            {
                                                transformationValue2["scriptPath"] = derived21.ScriptPath;
                                            }
                                            
                                            if (derived21.ScriptLinkedService != null)
                                            {
                                                transformationValue2["scriptLinkedService"] = derived21.ScriptLinkedService;
                                            }
                                            
                                            if (derived21.ExtendedProperties != null)
                                            {
                                                if (derived21.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived21.ExtendedProperties).IsInitialized)
                                                {
                                                    JObject extendedPropertiesDictionary2 = new JObject();
                                                    foreach (KeyValuePair<string, string> pair4 in derived21.ExtendedProperties)
                                                    {
                                                        string extendedPropertiesKey2 = pair4.Key;
                                                        string extendedPropertiesValue2 = pair4.Value;
                                                        extendedPropertiesDictionary2[extendedPropertiesKey2] = extendedPropertiesValue2;
                                                    }
                                                    transformationValue2["extendedProperties"] = extendedPropertiesDictionary2;
                                                }
                                            }
                                            
                                            if (derived21.StorageLinkedServices != null)
                                            {
                                                JArray storageLinkedServicesArray2 = new JArray();
                                                foreach (string storageLinkedServicesItem2 in derived21.StorageLinkedServices)
                                                {
                                                    storageLinkedServicesArray2.Add(storageLinkedServicesItem2);
                                                }
                                                transformationValue2["storageLinkedServices"] = storageLinkedServicesArray2;
                                            }
                                            
                                            if (derived21.Arguments != null)
                                            {
                                                JArray argumentsArray2 = new JArray();
                                                foreach (string argumentsItem2 in derived21.Arguments)
                                                {
                                                    argumentsArray2.Add(argumentsItem2);
                                                }
                                                transformationValue2["arguments"] = argumentsArray2;
                                            }
                                        }
                                        if (derived19.Transformation is MapReduce)
                                        {
                                            transformationValue2["type"] = "MapReduce";
                                            MapReduce derived22 = ((MapReduce)derived19.Transformation);
                                            
                                            transformationValue2["className"] = derived22.ClassName;
                                            
                                            transformationValue2["jarFilePath"] = derived22.JarFilePath;
                                            
                                            if (derived22.JarLinkedService != null)
                                            {
                                                transformationValue2["jarLinkedService"] = derived22.JarLinkedService;
                                            }
                                            
                                            if (derived22.JarLibs != null)
                                            {
                                                if (derived22.JarLibs is ILazyCollection == false || ((ILazyCollection)derived22.JarLibs).IsInitialized)
                                                {
                                                    JArray jarLibsArray = new JArray();
                                                    foreach (string jarLibsItem in derived22.JarLibs)
                                                    {
                                                        jarLibsArray.Add(jarLibsItem);
                                                    }
                                                    transformationValue2["jarLibs"] = jarLibsArray;
                                                }
                                            }
                                            
                                            if (derived22.Defines != null)
                                            {
                                                if (derived22.Defines is ILazyCollection == false || ((ILazyCollection)derived22.Defines).IsInitialized)
                                                {
                                                    JObject definesDictionary2 = new JObject();
                                                    foreach (KeyValuePair<string, string> pair5 in derived22.Defines)
                                                    {
                                                        string definesKey2 = pair5.Key;
                                                        string definesValue2 = pair5.Value;
                                                        definesDictionary2[definesKey2] = definesValue2;
                                                    }
                                                    transformationValue2["defines"] = definesDictionary2;
                                                }
                                            }
                                            
                                            if (derived22.ExtendedProperties != null)
                                            {
                                                if (derived22.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived22.ExtendedProperties).IsInitialized)
                                                {
                                                    JObject extendedPropertiesDictionary3 = new JObject();
                                                    foreach (KeyValuePair<string, string> pair6 in derived22.ExtendedProperties)
                                                    {
                                                        string extendedPropertiesKey3 = pair6.Key;
                                                        string extendedPropertiesValue3 = pair6.Value;
                                                        extendedPropertiesDictionary3[extendedPropertiesKey3] = extendedPropertiesValue3;
                                                    }
                                                    transformationValue2["extendedProperties"] = extendedPropertiesDictionary3;
                                                }
                                            }
                                            
                                            if (derived22.StorageLinkedServices != null)
                                            {
                                                JArray storageLinkedServicesArray3 = new JArray();
                                                foreach (string storageLinkedServicesItem3 in derived22.StorageLinkedServices)
                                                {
                                                    storageLinkedServicesArray3.Add(storageLinkedServicesItem3);
                                                }
                                                transformationValue2["storageLinkedServices"] = storageLinkedServicesArray3;
                                            }
                                            
                                            if (derived22.Arguments != null)
                                            {
                                                JArray argumentsArray3 = new JArray();
                                                foreach (string argumentsItem3 in derived22.Arguments)
                                                {
                                                    argumentsArray3.Add(argumentsItem3);
                                                }
                                                transformationValue2["arguments"] = argumentsArray3;
                                            }
                                        }
                                        if (derived19.Transformation is Streaming)
                                        {
                                            transformationValue2["type"] = "Streaming";
                                            Streaming derived23 = ((Streaming)derived19.Transformation);
                                            
                                            transformationValue2["mapper"] = derived23.Mapper;
                                            
                                            transformationValue2["reducer"] = derived23.Reducer;
                                            
                                            transformationValue2["input"] = derived23.Input;
                                            
                                            transformationValue2["output"] = derived23.Output;
                                            
                                            if (derived23.FilePaths != null)
                                            {
                                                if (derived23.FilePaths is ILazyCollection == false || ((ILazyCollection)derived23.FilePaths).IsInitialized)
                                                {
                                                    JArray filePathsArray = new JArray();
                                                    foreach (string filePathsItem in derived23.FilePaths)
                                                    {
                                                        filePathsArray.Add(filePathsItem);
                                                    }
                                                    transformationValue2["filePaths"] = filePathsArray;
                                                }
                                            }
                                            
                                            if (derived23.FileLinkedService != null)
                                            {
                                                transformationValue2["fileLinkedService"] = derived23.FileLinkedService;
                                            }
                                            
                                            if (derived23.Combiner != null)
                                            {
                                                transformationValue2["combiner"] = derived23.Combiner;
                                            }
                                            
                                            if (derived23.CommandEnvironment != null)
                                            {
                                                if (derived23.CommandEnvironment is ILazyCollection == false || ((ILazyCollection)derived23.CommandEnvironment).IsInitialized)
                                                {
                                                    JArray commandEnvironmentArray = new JArray();
                                                    foreach (string commandEnvironmentItem in derived23.CommandEnvironment)
                                                    {
                                                        commandEnvironmentArray.Add(commandEnvironmentItem);
                                                    }
                                                    transformationValue2["commandEnvironment"] = commandEnvironmentArray;
                                                }
                                            }
                                            
                                            if (derived23.Defines != null)
                                            {
                                                if (derived23.Defines is ILazyCollection == false || ((ILazyCollection)derived23.Defines).IsInitialized)
                                                {
                                                    JObject definesDictionary3 = new JObject();
                                                    foreach (KeyValuePair<string, string> pair7 in derived23.Defines)
                                                    {
                                                        string definesKey3 = pair7.Key;
                                                        string definesValue3 = pair7.Value;
                                                        definesDictionary3[definesKey3] = definesValue3;
                                                    }
                                                    transformationValue2["defines"] = definesDictionary3;
                                                }
                                            }
                                            
                                            if (derived23.ExtendedProperties != null)
                                            {
                                                if (derived23.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived23.ExtendedProperties).IsInitialized)
                                                {
                                                    JObject extendedPropertiesDictionary4 = new JObject();
                                                    foreach (KeyValuePair<string, string> pair8 in derived23.ExtendedProperties)
                                                    {
                                                        string extendedPropertiesKey4 = pair8.Key;
                                                        string extendedPropertiesValue4 = pair8.Value;
                                                        extendedPropertiesDictionary4[extendedPropertiesKey4] = extendedPropertiesValue4;
                                                    }
                                                    transformationValue2["extendedProperties"] = extendedPropertiesDictionary4;
                                                }
                                            }
                                            
                                            if (derived23.StorageLinkedServices != null)
                                            {
                                                JArray storageLinkedServicesArray4 = new JArray();
                                                foreach (string storageLinkedServicesItem4 in derived23.StorageLinkedServices)
                                                {
                                                    storageLinkedServicesArray4.Add(storageLinkedServicesItem4);
                                                }
                                                transformationValue2["storageLinkedServices"] = storageLinkedServicesArray4;
                                            }
                                            
                                            if (derived23.Arguments != null)
                                            {
                                                JArray argumentsArray4 = new JArray();
                                                foreach (string argumentsItem4 in derived23.Arguments)
                                                {
                                                    argumentsArray4.Add(argumentsItem4);
                                                }
                                                transformationValue2["arguments"] = argumentsArray4;
                                            }
                                        }
                                    }
                                    
                                    baseActivityValue["name"] = derived19.Name;
                                    
                                    if (derived19.Description != null)
                                    {
                                        baseActivityValue["description"] = derived19.Description;
                                    }
                                    
                                    if (derived19.LinkedServiceName != null)
                                    {
                                        baseActivityValue["linkedServiceName"] = derived19.LinkedServiceName;
                                    }
                                    
                                    if (derived19.Policy != null)
                                    {
                                        JObject policyValue2 = new JObject();
                                        baseActivityValue["policy"] = policyValue2;
                                        
                                        if (derived19.Policy.Timeout != null)
                                        {
                                            policyValue2["timeout"] = derived19.Policy.Timeout.Value.ToString();
                                        }
                                        
                                        if (derived19.Policy.Delay != null)
                                        {
                                            policyValue2["delay"] = derived19.Policy.Delay.Value.ToString();
                                        }
                                        
                                        if (derived19.Policy.Concurrency != null)
                                        {
                                            policyValue2["concurrency"] = derived19.Policy.Concurrency.Value;
                                        }
                                        
                                        if (derived19.Policy.ExecutionPriorityOrder != null)
                                        {
                                            policyValue2["executionPriorityOrder"] = derived19.Policy.ExecutionPriorityOrder;
                                        }
                                        
                                        if (derived19.Policy.Retry != null)
                                        {
                                            policyValue2["retry"] = derived19.Policy.Retry.Value;
                                        }
                                        
                                        if (derived19.Policy.LongRetry != null)
                                        {
                                            policyValue2["longRetry"] = derived19.Policy.LongRetry.Value;
                                        }
                                        
                                        if (derived19.Policy.LongRetryInterval != null)
                                        {
                                            policyValue2["longRetryInterval"] = derived19.Policy.LongRetryInterval.Value.ToString();
                                        }
                                    }
                                    
                                    if (derived19.Inputs != null)
                                    {
                                        JArray inputsArray2 = new JArray();
                                        foreach (ActivityInput inputsItem2 in derived19.Inputs)
                                        {
                                            JObject activityInputValue2 = new JObject();
                                            inputsArray2.Add(activityInputValue2);
                                            
                                            if (inputsItem2.StartTime != null)
                                            {
                                                activityInputValue2["startTime"] = inputsItem2.StartTime;
                                            }
                                            
                                            if (inputsItem2.EndTime != null)
                                            {
                                                activityInputValue2["endTime"] = inputsItem2.EndTime;
                                            }
                                            
                                            if (inputsItem2.Length != null)
                                            {
                                                activityInputValue2["length"] = inputsItem2.Length.Value.ToString();
                                            }
                                            
                                            activityInputValue2["name"] = inputsItem2.Name;
                                        }
                                        baseActivityValue["inputs"] = inputsArray2;
                                    }
                                    
                                    if (derived19.Outputs != null)
                                    {
                                        JArray outputsArray2 = new JArray();
                                        foreach (ActivityOutput outputsItem2 in derived19.Outputs)
                                        {
                                            JObject activityOutputValue2 = new JObject();
                                            outputsArray2.Add(activityOutputValue2);
                                            
                                            activityOutputValue2["name"] = outputsItem2.Name;
                                        }
                                        baseActivityValue["outputs"] = outputsArray2;
                                    }
                                }
                                if (activitiesItem is DotNetActivity)
                                {
                                    baseActivityValue["type"] = "DotNetActivity";
                                    DotNetActivity derived24 = ((DotNetActivity)activitiesItem);
                                    
                                    if (derived24.Transformation != null)
                                    {
                                        JObject transformationValue3 = new JObject();
                                        baseActivityValue["transformation"] = transformationValue3;
                                        
                                        transformationValue3["assemblyName"] = derived24.Transformation.AssemblyName;
                                        
                                        transformationValue3["entryPoint"] = derived24.Transformation.EntryPoint;
                                        
                                        if (derived24.Transformation.PackageLinkedService != null)
                                        {
                                            transformationValue3["packageLinkedService"] = derived24.Transformation.PackageLinkedService;
                                        }
                                        
                                        transformationValue3["packageFile"] = derived24.Transformation.PackageFile;
                                        
                                        if (derived24.Transformation.ExtendedProperties != null)
                                        {
                                            if (derived24.Transformation.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived24.Transformation.ExtendedProperties).IsInitialized)
                                            {
                                                JObject extendedPropertiesDictionary5 = new JObject();
                                                foreach (KeyValuePair<string, string> pair9 in derived24.Transformation.ExtendedProperties)
                                                {
                                                    string extendedPropertiesKey5 = pair9.Key;
                                                    string extendedPropertiesValue5 = pair9.Value;
                                                    extendedPropertiesDictionary5[extendedPropertiesKey5] = extendedPropertiesValue5;
                                                }
                                                transformationValue3["extendedProperties"] = extendedPropertiesDictionary5;
                                            }
                                        }
                                    }
                                    
                                    baseActivityValue["name"] = derived24.Name;
                                    
                                    if (derived24.Description != null)
                                    {
                                        baseActivityValue["description"] = derived24.Description;
                                    }
                                    
                                    if (derived24.LinkedServiceName != null)
                                    {
                                        baseActivityValue["linkedServiceName"] = derived24.LinkedServiceName;
                                    }
                                    
                                    if (derived24.Policy != null)
                                    {
                                        JObject policyValue3 = new JObject();
                                        baseActivityValue["policy"] = policyValue3;
                                        
                                        if (derived24.Policy.Timeout != null)
                                        {
                                            policyValue3["timeout"] = derived24.Policy.Timeout.Value.ToString();
                                        }
                                        
                                        if (derived24.Policy.Delay != null)
                                        {
                                            policyValue3["delay"] = derived24.Policy.Delay.Value.ToString();
                                        }
                                        
                                        if (derived24.Policy.Concurrency != null)
                                        {
                                            policyValue3["concurrency"] = derived24.Policy.Concurrency.Value;
                                        }
                                        
                                        if (derived24.Policy.ExecutionPriorityOrder != null)
                                        {
                                            policyValue3["executionPriorityOrder"] = derived24.Policy.ExecutionPriorityOrder;
                                        }
                                        
                                        if (derived24.Policy.Retry != null)
                                        {
                                            policyValue3["retry"] = derived24.Policy.Retry.Value;
                                        }
                                        
                                        if (derived24.Policy.LongRetry != null)
                                        {
                                            policyValue3["longRetry"] = derived24.Policy.LongRetry.Value;
                                        }
                                        
                                        if (derived24.Policy.LongRetryInterval != null)
                                        {
                                            policyValue3["longRetryInterval"] = derived24.Policy.LongRetryInterval.Value.ToString();
                                        }
                                    }
                                    
                                    if (derived24.Inputs != null)
                                    {
                                        JArray inputsArray3 = new JArray();
                                        foreach (ActivityInput inputsItem3 in derived24.Inputs)
                                        {
                                            JObject activityInputValue3 = new JObject();
                                            inputsArray3.Add(activityInputValue3);
                                            
                                            if (inputsItem3.StartTime != null)
                                            {
                                                activityInputValue3["startTime"] = inputsItem3.StartTime;
                                            }
                                            
                                            if (inputsItem3.EndTime != null)
                                            {
                                                activityInputValue3["endTime"] = inputsItem3.EndTime;
                                            }
                                            
                                            if (inputsItem3.Length != null)
                                            {
                                                activityInputValue3["length"] = inputsItem3.Length.Value.ToString();
                                            }
                                            
                                            activityInputValue3["name"] = inputsItem3.Name;
                                        }
                                        baseActivityValue["inputs"] = inputsArray3;
                                    }
                                    
                                    if (derived24.Outputs != null)
                                    {
                                        JArray outputsArray3 = new JArray();
                                        foreach (ActivityOutput outputsItem3 in derived24.Outputs)
                                        {
                                            JObject activityOutputValue3 = new JObject();
                                            outputsArray3.Add(activityOutputValue3);
                                            
                                            activityOutputValue3["name"] = outputsItem3.Name;
                                        }
                                        baseActivityValue["outputs"] = outputsArray3;
                                    }
                                }
                                if (activitiesItem is StoredProcedureActivity)
                                {
                                    baseActivityValue["type"] = "StoredProcedureActivity";
                                    StoredProcedureActivity derived25 = ((StoredProcedureActivity)activitiesItem);
                                    
                                    if (derived25.Transformation != null)
                                    {
                                        JObject transformationValue4 = new JObject();
                                        baseActivityValue["transformation"] = transformationValue4;
                                        
                                        transformationValue4["storedProcedureName"] = derived25.Transformation.StoredProcedureName;
                                        
                                        if (derived25.Transformation.StoredProcedureActivityParameters != null)
                                        {
                                            if (derived25.Transformation.StoredProcedureActivityParameters is ILazyCollection == false || ((ILazyCollection)derived25.Transformation.StoredProcedureActivityParameters).IsInitialized)
                                            {
                                                JObject storedProcedureParametersDictionary2 = new JObject();
                                                foreach (KeyValuePair<string, string> pair10 in derived25.Transformation.StoredProcedureActivityParameters)
                                                {
                                                    string storedProcedureParametersKey2 = pair10.Key;
                                                    string storedProcedureParametersValue2 = pair10.Value;
                                                    storedProcedureParametersDictionary2[storedProcedureParametersKey2] = storedProcedureParametersValue2;
                                                }
                                                transformationValue4["storedProcedureParameters"] = storedProcedureParametersDictionary2;
                                            }
                                        }
                                    }
                                    
                                    baseActivityValue["name"] = derived25.Name;
                                    
                                    if (derived25.Description != null)
                                    {
                                        baseActivityValue["description"] = derived25.Description;
                                    }
                                    
                                    if (derived25.LinkedServiceName != null)
                                    {
                                        baseActivityValue["linkedServiceName"] = derived25.LinkedServiceName;
                                    }
                                    
                                    if (derived25.Policy != null)
                                    {
                                        JObject policyValue4 = new JObject();
                                        baseActivityValue["policy"] = policyValue4;
                                        
                                        if (derived25.Policy.Timeout != null)
                                        {
                                            policyValue4["timeout"] = derived25.Policy.Timeout.Value.ToString();
                                        }
                                        
                                        if (derived25.Policy.Delay != null)
                                        {
                                            policyValue4["delay"] = derived25.Policy.Delay.Value.ToString();
                                        }
                                        
                                        if (derived25.Policy.Concurrency != null)
                                        {
                                            policyValue4["concurrency"] = derived25.Policy.Concurrency.Value;
                                        }
                                        
                                        if (derived25.Policy.ExecutionPriorityOrder != null)
                                        {
                                            policyValue4["executionPriorityOrder"] = derived25.Policy.ExecutionPriorityOrder;
                                        }
                                        
                                        if (derived25.Policy.Retry != null)
                                        {
                                            policyValue4["retry"] = derived25.Policy.Retry.Value;
                                        }
                                        
                                        if (derived25.Policy.LongRetry != null)
                                        {
                                            policyValue4["longRetry"] = derived25.Policy.LongRetry.Value;
                                        }
                                        
                                        if (derived25.Policy.LongRetryInterval != null)
                                        {
                                            policyValue4["longRetryInterval"] = derived25.Policy.LongRetryInterval.Value.ToString();
                                        }
                                    }
                                    
                                    if (derived25.Inputs != null)
                                    {
                                        JArray inputsArray4 = new JArray();
                                        foreach (ActivityInput inputsItem4 in derived25.Inputs)
                                        {
                                            JObject activityInputValue4 = new JObject();
                                            inputsArray4.Add(activityInputValue4);
                                            
                                            if (inputsItem4.StartTime != null)
                                            {
                                                activityInputValue4["startTime"] = inputsItem4.StartTime;
                                            }
                                            
                                            if (inputsItem4.EndTime != null)
                                            {
                                                activityInputValue4["endTime"] = inputsItem4.EndTime;
                                            }
                                            
                                            if (inputsItem4.Length != null)
                                            {
                                                activityInputValue4["length"] = inputsItem4.Length.Value.ToString();
                                            }
                                            
                                            activityInputValue4["name"] = inputsItem4.Name;
                                        }
                                        baseActivityValue["inputs"] = inputsArray4;
                                    }
                                    
                                    if (derived25.Outputs != null)
                                    {
                                        JArray outputsArray4 = new JArray();
                                        foreach (ActivityOutput outputsItem4 in derived25.Outputs)
                                        {
                                            JObject activityOutputValue4 = new JObject();
                                            outputsArray4.Add(activityOutputValue4);
                                            
                                            activityOutputValue4["name"] = outputsItem4.Name;
                                        }
                                        baseActivityValue["outputs"] = outputsArray4;
                                    }
                                }
                                if (activitiesItem is AzureMLBatchScoringActivity)
                                {
                                    baseActivityValue["type"] = "AzureMLBatchScoringActivity";
                                    AzureMLBatchScoringActivity derived26 = ((AzureMLBatchScoringActivity)activitiesItem);
                                    
                                    if (derived26.Transformation != null)
                                    {
                                        JObject transformationValue5 = new JObject();
                                        baseActivityValue["transformation"] = transformationValue5;
                                        
                                        if (derived26.Transformation.WebServiceParameters != null)
                                        {
                                            if (derived26.Transformation.WebServiceParameters is ILazyCollection == false || ((ILazyCollection)derived26.Transformation.WebServiceParameters).IsInitialized)
                                            {
                                                JObject webServiceParametersDictionary = new JObject();
                                                foreach (KeyValuePair<string, string> pair11 in derived26.Transformation.WebServiceParameters)
                                                {
                                                    string webServiceParametersKey = pair11.Key;
                                                    string webServiceParametersValue = pair11.Value;
                                                    webServiceParametersDictionary[webServiceParametersKey] = webServiceParametersValue;
                                                }
                                                transformationValue5["webServiceParameters"] = webServiceParametersDictionary;
                                            }
                                        }
                                    }
                                    
                                    baseActivityValue["name"] = derived26.Name;
                                    
                                    if (derived26.Description != null)
                                    {
                                        baseActivityValue["description"] = derived26.Description;
                                    }
                                    
                                    if (derived26.LinkedServiceName != null)
                                    {
                                        baseActivityValue["linkedServiceName"] = derived26.LinkedServiceName;
                                    }
                                    
                                    if (derived26.Policy != null)
                                    {
                                        JObject policyValue5 = new JObject();
                                        baseActivityValue["policy"] = policyValue5;
                                        
                                        if (derived26.Policy.Timeout != null)
                                        {
                                            policyValue5["timeout"] = derived26.Policy.Timeout.Value.ToString();
                                        }
                                        
                                        if (derived26.Policy.Delay != null)
                                        {
                                            policyValue5["delay"] = derived26.Policy.Delay.Value.ToString();
                                        }
                                        
                                        if (derived26.Policy.Concurrency != null)
                                        {
                                            policyValue5["concurrency"] = derived26.Policy.Concurrency.Value;
                                        }
                                        
                                        if (derived26.Policy.ExecutionPriorityOrder != null)
                                        {
                                            policyValue5["executionPriorityOrder"] = derived26.Policy.ExecutionPriorityOrder;
                                        }
                                        
                                        if (derived26.Policy.Retry != null)
                                        {
                                            policyValue5["retry"] = derived26.Policy.Retry.Value;
                                        }
                                        
                                        if (derived26.Policy.LongRetry != null)
                                        {
                                            policyValue5["longRetry"] = derived26.Policy.LongRetry.Value;
                                        }
                                        
                                        if (derived26.Policy.LongRetryInterval != null)
                                        {
                                            policyValue5["longRetryInterval"] = derived26.Policy.LongRetryInterval.Value.ToString();
                                        }
                                    }
                                    
                                    if (derived26.Inputs != null)
                                    {
                                        JArray inputsArray5 = new JArray();
                                        foreach (ActivityInput inputsItem5 in derived26.Inputs)
                                        {
                                            JObject activityInputValue5 = new JObject();
                                            inputsArray5.Add(activityInputValue5);
                                            
                                            if (inputsItem5.StartTime != null)
                                            {
                                                activityInputValue5["startTime"] = inputsItem5.StartTime;
                                            }
                                            
                                            if (inputsItem5.EndTime != null)
                                            {
                                                activityInputValue5["endTime"] = inputsItem5.EndTime;
                                            }
                                            
                                            if (inputsItem5.Length != null)
                                            {
                                                activityInputValue5["length"] = inputsItem5.Length.Value.ToString();
                                            }
                                            
                                            activityInputValue5["name"] = inputsItem5.Name;
                                        }
                                        baseActivityValue["inputs"] = inputsArray5;
                                    }
                                    
                                    if (derived26.Outputs != null)
                                    {
                                        JArray outputsArray5 = new JArray();
                                        foreach (ActivityOutput outputsItem5 in derived26.Outputs)
                                        {
                                            JObject activityOutputValue5 = new JObject();
                                            outputsArray5.Add(activityOutputValue5);
                                            
                                            activityOutputValue5["name"] = outputsItem5.Name;
                                        }
                                        baseActivityValue["outputs"] = outputsArray5;
                                    }
                                }
                            }
                            propertiesValue["activities"] = activitiesArray;
                        }
                    }
                    
                    if (parameters.Pipeline.Properties.Start != null)
                    {
                        propertiesValue["start"] = parameters.Pipeline.Properties.Start.Value;
                    }
                    
                    if (parameters.Pipeline.Properties.End != null)
                    {
                        propertiesValue["end"] = parameters.Pipeline.Properties.End.Value;
                    }
                    
                    if (parameters.Pipeline.Properties.IsPaused != null)
                    {
                        propertiesValue["isPaused"] = parameters.Pipeline.Properties.IsPaused.Value;
                    }
                    
                    if (parameters.Pipeline.Properties.RuntimeInfo != null)
                    {
                        JObject runtimeInfoValue = new JObject();
                        propertiesValue["runtimeInfo"] = runtimeInfoValue;
                        
                        runtimeInfoValue["deploymentTime"] = parameters.Pipeline.Properties.RuntimeInfo.DeploymentTime;
                    }
                    
                    if (parameters.Pipeline.Properties.ProvisioningState != null)
                    {
                        propertiesValue["provisioningState"] = parameters.Pipeline.Properties.ProvisioningState;
                    }
                    
                    if (parameters.Pipeline.Properties.ErrorMessage != null)
                    {
                        propertiesValue["errorMessage"] = parameters.Pipeline.Properties.ErrorMessage;
                    }
                    
                    if (parameters.Pipeline.Properties.HubName != null)
                    {
                        propertiesValue["hubName"] = parameters.Pipeline.Properties.HubName;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Pipeline pipelineInstance = new Pipeline();
                            result.Pipeline = pipelineInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                pipelineInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                PipelineProperties propertiesInstance = new PipelineProperties();
                                pipelineInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue2["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken activitiesArray2 = propertiesValue2["activities"];
                                if (activitiesArray2 != null && activitiesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken activitiesValue in ((JArray)activitiesArray2))
                                    {
                                        string typeName = ((string)activitiesValue["type"]);
                                        if (typeName == "CopyActivity")
                                        {
                                            CopyActivity copyActivityInstance = new CopyActivity();
                                            
                                            JToken transformationValue6 = activitiesValue["transformation"];
                                            if (transformationValue6 != null && transformationValue6.Type != JTokenType.Null)
                                            {
                                                CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                                copyActivityInstance.Transformation = transformationInstance;
                                                
                                                JToken sourceValue2 = transformationValue6["source"];
                                                if (sourceValue2 != null && sourceValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)sourceValue2["type"]);
                                                    if (typeName2 == "AzureTableSource")
                                                    {
                                                        AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                        
                                                        JToken azureTableSourceQueryValue = sourceValue2["azureTableSourceQuery"];
                                                        if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                            azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                        }
                                                        
                                                        JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue2["azureTableSourceIgnoreTableNotFound"];
                                                        if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                        {
                                                            bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                            azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue = sourceValue2["sourceRetryCount"];
                                                        if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                            azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue = sourceValue2["sourceRetryWait"];
                                                        if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                            azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                        }
                                                        transformationInstance.Source = azureTableSourceInstance;
                                                    }
                                                    if (typeName2 == "BlobSource")
                                                    {
                                                        BlobSource blobSourceInstance = new BlobSource();
                                                        
                                                        JToken blobColumnSeparatorsValue = sourceValue2["blobColumnSeparators"];
                                                        if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                        {
                                                            string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                            blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                        }
                                                        
                                                        JToken treatEmptyAsNullValue = sourceValue2["treatEmptyAsNull"];
                                                        if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                        {
                                                            bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                            blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                        }
                                                        
                                                        JToken nullValuesValue = sourceValue2["nullValues"];
                                                        if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                        {
                                                            string nullValuesInstance = ((string)nullValuesValue);
                                                            blobSourceInstance.NullValues = nullValuesInstance;
                                                        }
                                                        
                                                        JToken skipHeaderLineCountValue = sourceValue2["skipHeaderLineCount"];
                                                        if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                        {
                                                            int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                            blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue2 = sourceValue2["sourceRetryCount"];
                                                        if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                            blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue2 = sourceValue2["sourceRetryWait"];
                                                        if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                            blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                        }
                                                        transformationInstance.Source = blobSourceInstance;
                                                    }
                                                    if (typeName2 == "DocumentDbCollectionSource")
                                                    {
                                                        DocumentDbCollectionSource documentDbCollectionSourceInstance = new DocumentDbCollectionSource();
                                                        
                                                        JToken queryValue = sourceValue2["query"];
                                                        if (queryValue != null && queryValue.Type != JTokenType.Null)
                                                        {
                                                            string queryInstance = ((string)queryValue);
                                                            documentDbCollectionSourceInstance.Query = queryInstance;
                                                        }
                                                        
                                                        JToken nestingSeparatorValue = sourceValue2["nestingSeparator"];
                                                        if (nestingSeparatorValue != null && nestingSeparatorValue.Type != JTokenType.Null)
                                                        {
                                                            string nestingSeparatorInstance = ((string)nestingSeparatorValue);
                                                            documentDbCollectionSourceInstance.NestingSeparator = nestingSeparatorInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue3 = sourceValue2["sourceRetryCount"];
                                                        if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                            documentDbCollectionSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue3 = sourceValue2["sourceRetryWait"];
                                                        if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                        }
                                                        transformationInstance.Source = documentDbCollectionSourceInstance;
                                                    }
                                                    if (typeName2 == "RelationalSource")
                                                    {
                                                        RelationalSource relationalSourceInstance = new RelationalSource();
                                                        
                                                        JToken queryValue2 = sourceValue2["query"];
                                                        if (queryValue2 != null && queryValue2.Type != JTokenType.Null)
                                                        {
                                                            string queryInstance2 = ((string)queryValue2);
                                                            relationalSourceInstance.Query = queryInstance2;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue4 = sourceValue2["sourceRetryCount"];
                                                        if (sourceRetryCountValue4 != null && sourceRetryCountValue4.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance4 = ((int)sourceRetryCountValue4);
                                                            relationalSourceInstance.SourceRetryCount = sourceRetryCountInstance4;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue4 = sourceValue2["sourceRetryWait"];
                                                        if (sourceRetryWaitValue4 != null && sourceRetryWaitValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance4 = TimeSpan.Parse(((string)sourceRetryWaitValue4), CultureInfo.InvariantCulture);
                                                            relationalSourceInstance.SourceRetryWait = sourceRetryWaitInstance4;
                                                        }
                                                        transformationInstance.Source = relationalSourceInstance;
                                                    }
                                                    if (typeName2 == "OdbcSource")
                                                    {
                                                        RelationalSource.OdbcSource odbcSourceInstance = new RelationalSource.OdbcSource();
                                                        
                                                        JToken odbcReaderQueryValue = sourceValue2["odbcReaderQuery"];
                                                        if (odbcReaderQueryValue != null && odbcReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string odbcReaderQueryInstance = ((string)odbcReaderQueryValue);
                                                            odbcSourceInstance.OdbcReaderQuery = odbcReaderQueryInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue5 = sourceValue2["sourceRetryCount"];
                                                        if (sourceRetryCountValue5 != null && sourceRetryCountValue5.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance5 = ((int)sourceRetryCountValue5);
                                                            odbcSourceInstance.SourceRetryCount = sourceRetryCountInstance5;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue5 = sourceValue2["sourceRetryWait"];
                                                        if (sourceRetryWaitValue5 != null && sourceRetryWaitValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance5 = TimeSpan.Parse(((string)sourceRetryWaitValue5), CultureInfo.InvariantCulture);
                                                            odbcSourceInstance.SourceRetryWait = sourceRetryWaitInstance5;
                                                        }
                                                        transformationInstance.Source = odbcSourceInstance;
                                                    }
                                                    if (typeName2 == "ODataSource")
                                                    {
                                                        RelationalSource.ODataSource oDataSourceInstance = new RelationalSource.ODataSource();
                                                        
                                                        JToken sourceRetryCountValue6 = sourceValue2["sourceRetryCount"];
                                                        if (sourceRetryCountValue6 != null && sourceRetryCountValue6.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance6 = ((int)sourceRetryCountValue6);
                                                            oDataSourceInstance.SourceRetryCount = sourceRetryCountInstance6;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue6 = sourceValue2["sourceRetryWait"];
                                                        if (sourceRetryWaitValue6 != null && sourceRetryWaitValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance6 = TimeSpan.Parse(((string)sourceRetryWaitValue6), CultureInfo.InvariantCulture);
                                                            oDataSourceInstance.SourceRetryWait = sourceRetryWaitInstance6;
                                                        }
                                                        transformationInstance.Source = oDataSourceInstance;
                                                    }
                                                    if (typeName2 == "HdfsSource")
                                                    {
                                                        RelationalSource.HdfsSource hdfsSourceInstance = new RelationalSource.HdfsSource();
                                                        
                                                        JToken sourceRetryCountValue7 = sourceValue2["sourceRetryCount"];
                                                        if (sourceRetryCountValue7 != null && sourceRetryCountValue7.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance7 = ((int)sourceRetryCountValue7);
                                                            hdfsSourceInstance.SourceRetryCount = sourceRetryCountInstance7;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue7 = sourceValue2["sourceRetryWait"];
                                                        if (sourceRetryWaitValue7 != null && sourceRetryWaitValue7.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance7 = TimeSpan.Parse(((string)sourceRetryWaitValue7), CultureInfo.InvariantCulture);
                                                            hdfsSourceInstance.SourceRetryWait = sourceRetryWaitInstance7;
                                                        }
                                                        transformationInstance.Source = hdfsSourceInstance;
                                                    }
                                                    if (typeName2 == "SqlSource")
                                                    {
                                                        SqlSource sqlSourceInstance = new SqlSource();
                                                        
                                                        JToken sqlReaderQueryValue = sourceValue2["sqlReaderQuery"];
                                                        if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                            sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue8 = sourceValue2["sourceRetryCount"];
                                                        if (sourceRetryCountValue8 != null && sourceRetryCountValue8.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance8 = ((int)sourceRetryCountValue8);
                                                            sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance8;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue8 = sourceValue2["sourceRetryWait"];
                                                        if (sourceRetryWaitValue8 != null && sourceRetryWaitValue8.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance8 = TimeSpan.Parse(((string)sourceRetryWaitValue8), CultureInfo.InvariantCulture);
                                                            sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance8;
                                                        }
                                                        transformationInstance.Source = sqlSourceInstance;
                                                    }
                                                    if (typeName2 == "FileSystemSource")
                                                    {
                                                        FileSystemSource fileSystemSourceInstance = new FileSystemSource();
                                                        
                                                        JToken sourceRetryCountValue9 = sourceValue2["sourceRetryCount"];
                                                        if (sourceRetryCountValue9 != null && sourceRetryCountValue9.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance9 = ((int)sourceRetryCountValue9);
                                                            fileSystemSourceInstance.SourceRetryCount = sourceRetryCountInstance9;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue9 = sourceValue2["sourceRetryWait"];
                                                        if (sourceRetryWaitValue9 != null && sourceRetryWaitValue9.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance9 = TimeSpan.Parse(((string)sourceRetryWaitValue9), CultureInfo.InvariantCulture);
                                                            fileSystemSourceInstance.SourceRetryWait = sourceRetryWaitInstance9;
                                                        }
                                                        transformationInstance.Source = fileSystemSourceInstance;
                                                    }
                                                    if (typeName2 == "OracleSource")
                                                    {
                                                        OracleSource oracleSourceInstance = new OracleSource();
                                                        
                                                        JToken oracleReaderQueryValue = sourceValue2["oracleReaderQuery"];
                                                        if (oracleReaderQueryValue != null && oracleReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleReaderQueryInstance = ((string)oracleReaderQueryValue);
                                                            oracleSourceInstance.OracleReaderQuery = oracleReaderQueryInstance;
                                                        }
                                                        
                                                        JToken queryTimeoutValue = sourceValue2["queryTimeout"];
                                                        if (queryTimeoutValue != null && queryTimeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan queryTimeoutInstance = TimeSpan.Parse(((string)queryTimeoutValue), CultureInfo.InvariantCulture);
                                                            oracleSourceInstance.QueryTimeout = queryTimeoutInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue10 = sourceValue2["sourceRetryCount"];
                                                        if (sourceRetryCountValue10 != null && sourceRetryCountValue10.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance10 = ((int)sourceRetryCountValue10);
                                                            oracleSourceInstance.SourceRetryCount = sourceRetryCountInstance10;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue10 = sourceValue2["sourceRetryWait"];
                                                        if (sourceRetryWaitValue10 != null && sourceRetryWaitValue10.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance10 = TimeSpan.Parse(((string)sourceRetryWaitValue10), CultureInfo.InvariantCulture);
                                                            oracleSourceInstance.SourceRetryWait = sourceRetryWaitInstance10;
                                                        }
                                                        transformationInstance.Source = oracleSourceInstance;
                                                    }
                                                }
                                                
                                                JToken sinkValue2 = transformationValue6["sink"];
                                                if (sinkValue2 != null && sinkValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName3 = ((string)sinkValue2["type"]);
                                                    if (typeName3 == "AzureQueueSink")
                                                    {
                                                        AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                        
                                                        JToken writeBatchSizeValue = sinkValue2["writeBatchSize"];
                                                        if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                            azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue = sinkValue2["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                            azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue = sinkValue2["sinkRetryCount"];
                                                        if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                            azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue = sinkValue2["sinkRetryWait"];
                                                        if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                            azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue = sinkValue2["sinkPartitionData"];
                                                        if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                            azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                        }
                                                        transformationInstance.Sink = azureQueueSinkInstance;
                                                    }
                                                    if (typeName3 == "AzureTableSink")
                                                    {
                                                        AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                        
                                                        JToken azureTableRetryIntervalInSecValue = sinkValue2["azureTableRetryIntervalInSec"];
                                                        if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                        {
                                                            int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                            azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                        }
                                                        
                                                        JToken azureTableRetryTimesValue = sinkValue2["azureTableRetryTimes"];
                                                        if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                        {
                                                            int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                            azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                        }
                                                        
                                                        JToken azureTableDefaultPartitionKeyValueValue = sinkValue2["azureTableDefaultPartitionKeyValue"];
                                                        if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                            azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                        }
                                                        
                                                        JToken azureTablePartitionKeyNameValue = sinkValue2["azureTablePartitionKeyName"];
                                                        if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                            azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                        }
                                                        
                                                        JToken azureTableRowKeyNameValue = sinkValue2["azureTableRowKeyName"];
                                                        if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                            azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                        }
                                                        
                                                        JToken azureTableInsertTypeValue = sinkValue2["azureTableInsertType"];
                                                        if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                            azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue2 = sinkValue2["writeBatchSize"];
                                                        if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                            azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue2 = sinkValue2["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                            azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue2 = sinkValue2["sinkRetryCount"];
                                                        if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                            azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue2 = sinkValue2["sinkRetryWait"];
                                                        if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                            azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue2 = sinkValue2["sinkPartitionData"];
                                                        if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                            azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                        }
                                                        transformationInstance.Sink = azureTableSinkInstance;
                                                    }
                                                    if (typeName3 == "BlobSink")
                                                    {
                                                        BlobSink blobSinkInstance = new BlobSink();
                                                        
                                                        JToken blockWriterBlockSizeValue = sinkValue2["blockWriterBlockSize"];
                                                        if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                        {
                                                            int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                            blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                        }
                                                        
                                                        JToken blobWriterOverwriteFilesValue = sinkValue2["blobWriterOverwriteFiles"];
                                                        if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                        {
                                                            bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                            blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                        }
                                                        
                                                        JToken blobWriterPartitionColumnsValue = sinkValue2["blobWriterPartitionColumns"];
                                                        if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                            blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                        }
                                                        
                                                        JToken blobWriterPartitionFormatValue = sinkValue2["blobWriterPartitionFormat"];
                                                        if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                            blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                        }
                                                        
                                                        JToken blobWriterDateTimeFormatValue = sinkValue2["blobWriterDateTimeFormat"];
                                                        if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                            blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                        }
                                                        
                                                        JToken blobWriterSeparatorValue = sinkValue2["blobWriterSeparator"];
                                                        if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                            blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                        }
                                                        
                                                        JToken blobWriterRowSuffixValue = sinkValue2["blobWriterRowSuffix"];
                                                        if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                            blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                        }
                                                        
                                                        JToken blobWriterAddHeaderValue = sinkValue2["blobWriterAddHeader"];
                                                        if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                        {
                                                            bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                            blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue3 = sinkValue2["writeBatchSize"];
                                                        if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                            blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue3 = sinkValue2["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                            blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue3 = sinkValue2["sinkRetryCount"];
                                                        if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                            blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue3 = sinkValue2["sinkRetryWait"];
                                                        if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                            blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue3 = sinkValue2["sinkPartitionData"];
                                                        if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                            blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                        }
                                                        transformationInstance.Sink = blobSinkInstance;
                                                    }
                                                    if (typeName3 == "DocumentDbCollectionSink")
                                                    {
                                                        DocumentDbCollectionSink documentDbCollectionSinkInstance = new DocumentDbCollectionSink();
                                                        
                                                        JToken nestingSeparatorValue2 = sinkValue2["nestingSeparator"];
                                                        if (nestingSeparatorValue2 != null && nestingSeparatorValue2.Type != JTokenType.Null)
                                                        {
                                                            string nestingSeparatorInstance2 = ((string)nestingSeparatorValue2);
                                                            documentDbCollectionSinkInstance.NestingSeparator = nestingSeparatorInstance2;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue4 = sinkValue2["writeBatchSize"];
                                                        if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                            documentDbCollectionSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue4 = sinkValue2["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue4 = sinkValue2["sinkRetryCount"];
                                                        if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                            documentDbCollectionSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue4 = sinkValue2["sinkRetryWait"];
                                                        if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue4 = sinkValue2["sinkPartitionData"];
                                                        if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                            documentDbCollectionSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                        }
                                                        transformationInstance.Sink = documentDbCollectionSinkInstance;
                                                    }
                                                    if (typeName3 == "SqlSink")
                                                    {
                                                        SqlSink sqlSinkInstance = new SqlSink();
                                                        
                                                        JToken sqlWriterStoredProcedureNameValue = sinkValue2["sqlWriterStoredProcedureName"];
                                                        if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                            sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                        }
                                                        
                                                        JToken sqlWriterTableTypeValue = sinkValue2["sqlWriterTableType"];
                                                        if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                            sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                        }
                                                        
                                                        JToken sqlWriterCleanupScriptValue = sinkValue2["sqlWriterCleanupScript"];
                                                        if (sqlWriterCleanupScriptValue != null && sqlWriterCleanupScriptValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterCleanupScriptInstance = ((string)sqlWriterCleanupScriptValue);
                                                            sqlSinkInstance.SqlWriterCleanupScript = sqlWriterCleanupScriptInstance;
                                                        }
                                                        
                                                        JToken sliceIdentifierColumnNameValue = sinkValue2["sliceIdentifierColumnName"];
                                                        if (sliceIdentifierColumnNameValue != null && sliceIdentifierColumnNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sliceIdentifierColumnNameInstance = ((string)sliceIdentifierColumnNameValue);
                                                            sqlSinkInstance.SliceIdentifierColumnName = sliceIdentifierColumnNameInstance;
                                                        }
                                                        
                                                        JToken storedProcedureParametersSequenceElement = ((JToken)sinkValue2["storedProcedureParameters"]);
                                                        if (storedProcedureParametersSequenceElement != null && storedProcedureParametersSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property in storedProcedureParametersSequenceElement)
                                                            {
                                                                string storedProcedureParametersKey3 = ((string)property.Name);
                                                                JObject varToken = ((JObject)property.Value);
                                                                StoredProcedureParameter storedProcedureParameterInstance = new StoredProcedureParameter();
                                                                sqlSinkInstance.StoredProcedureParameters.Add(storedProcedureParametersKey3, storedProcedureParameterInstance);
                                                                
                                                                JToken valueValue = varToken["value"];
                                                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                                {
                                                                    string valueInstance = ((string)valueValue);
                                                                    storedProcedureParameterInstance.Value = valueInstance;
                                                                }
                                                                
                                                                JToken typeValue = varToken["type"];
                                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                                {
                                                                    string typeInstance = ((string)typeValue);
                                                                    storedProcedureParameterInstance.Type = typeInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken writeBatchSizeValue5 = sinkValue2["writeBatchSize"];
                                                        if (writeBatchSizeValue5 != null && writeBatchSizeValue5.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance5 = ((int)writeBatchSizeValue5);
                                                            sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance5;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue5 = sinkValue2["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue5 != null && writeBatchTimeoutValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance5 = TimeSpan.Parse(((string)writeBatchTimeoutValue5), CultureInfo.InvariantCulture);
                                                            sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance5;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue5 = sinkValue2["sinkRetryCount"];
                                                        if (sinkRetryCountValue5 != null && sinkRetryCountValue5.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance5 = ((int)sinkRetryCountValue5);
                                                            sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance5;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue5 = sinkValue2["sinkRetryWait"];
                                                        if (sinkRetryWaitValue5 != null && sinkRetryWaitValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance5 = TimeSpan.Parse(((string)sinkRetryWaitValue5), CultureInfo.InvariantCulture);
                                                            sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance5;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue5 = sinkValue2["sinkPartitionData"];
                                                        if (sinkPartitionDataValue5 != null && sinkPartitionDataValue5.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance5 = ((bool)sinkPartitionDataValue5);
                                                            sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance5;
                                                        }
                                                        transformationInstance.Sink = sqlSinkInstance;
                                                    }
                                                    if (typeName3 == "OracleSink")
                                                    {
                                                        OracleSink oracleSinkInstance = new OracleSink();
                                                        
                                                        JToken oracleWriterStoredProcedureNameValue = sinkValue2["oracleWriterStoredProcedureName"];
                                                        if (oracleWriterStoredProcedureNameValue != null && oracleWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleWriterStoredProcedureNameInstance = ((string)oracleWriterStoredProcedureNameValue);
                                                            oracleSinkInstance.OracleWriterStoredProcedureName = oracleWriterStoredProcedureNameInstance;
                                                        }
                                                        
                                                        JToken oracleWriterTableTypeValue = sinkValue2["oracleWriterTableType"];
                                                        if (oracleWriterTableTypeValue != null && oracleWriterTableTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleWriterTableTypeInstance = ((string)oracleWriterTableTypeValue);
                                                            oracleSinkInstance.OracleWriterTableType = oracleWriterTableTypeInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue6 = sinkValue2["writeBatchSize"];
                                                        if (writeBatchSizeValue6 != null && writeBatchSizeValue6.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance6 = ((int)writeBatchSizeValue6);
                                                            oracleSinkInstance.WriteBatchSize = writeBatchSizeInstance6;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue6 = sinkValue2["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue6 != null && writeBatchTimeoutValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance6 = TimeSpan.Parse(((string)writeBatchTimeoutValue6), CultureInfo.InvariantCulture);
                                                            oracleSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance6;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue6 = sinkValue2["sinkRetryCount"];
                                                        if (sinkRetryCountValue6 != null && sinkRetryCountValue6.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance6 = ((int)sinkRetryCountValue6);
                                                            oracleSinkInstance.SinkRetryCount = sinkRetryCountInstance6;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue6 = sinkValue2["sinkRetryWait"];
                                                        if (sinkRetryWaitValue6 != null && sinkRetryWaitValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance6 = TimeSpan.Parse(((string)sinkRetryWaitValue6), CultureInfo.InvariantCulture);
                                                            oracleSinkInstance.SinkRetryWait = sinkRetryWaitInstance6;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue6 = sinkValue2["sinkPartitionData"];
                                                        if (sinkPartitionDataValue6 != null && sinkPartitionDataValue6.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance6 = ((bool)sinkPartitionDataValue6);
                                                            oracleSinkInstance.SinkPartitionData = sinkPartitionDataInstance6;
                                                        }
                                                        transformationInstance.Sink = oracleSinkInstance;
                                                    }
                                                }
                                                
                                                JToken translatorValue2 = transformationValue6["translator"];
                                                if (translatorValue2 != null && translatorValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName4 = ((string)translatorValue2["type"]);
                                                    if (typeName4 == "TabularTranslator")
                                                    {
                                                        TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                        
                                                        JToken columnMappingsValue = translatorValue2["columnMappings"];
                                                        if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                        {
                                                            string columnMappingsInstance = ((string)columnMappingsValue);
                                                            tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                        }
                                                        transformationInstance.Translator = tabularTranslatorInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue2 = activitiesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                copyActivityInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken descriptionValue2 = activitiesValue["description"];
                                            if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance2 = ((string)descriptionValue2);
                                                copyActivityInstance.Description = descriptionInstance2;
                                            }
                                            
                                            JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                            }
                                            
                                            JToken policyValue6 = activitiesValue["policy"];
                                            if (policyValue6 != null && policyValue6.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance = new ActivityPolicy();
                                                copyActivityInstance.Policy = policyInstance;
                                                
                                                JToken timeoutValue = policyValue6["timeout"];
                                                if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                    policyInstance.Timeout = timeoutInstance;
                                                }
                                                
                                                JToken delayValue = policyValue6["delay"];
                                                if (delayValue != null && delayValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                    policyInstance.Delay = delayInstance;
                                                }
                                                
                                                JToken concurrencyValue = policyValue6["concurrency"];
                                                if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance = ((uint)concurrencyValue);
                                                    policyInstance.Concurrency = concurrencyInstance;
                                                }
                                                
                                                JToken executionPriorityOrderValue = policyValue6["executionPriorityOrder"];
                                                if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                    policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                                }
                                                
                                                JToken retryValue = policyValue6["retry"];
                                                if (retryValue != null && retryValue.Type != JTokenType.Null)
                                                {
                                                    int retryInstance = ((int)retryValue);
                                                    policyInstance.Retry = retryInstance;
                                                }
                                                
                                                JToken longRetryValue = policyValue6["longRetry"];
                                                if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance = ((int)longRetryValue);
                                                    policyInstance.LongRetry = longRetryInstance;
                                                }
                                                
                                                JToken longRetryIntervalValue = policyValue6["longRetryInterval"];
                                                if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                    policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                                }
                                            }
                                            
                                            JToken inputsArray6 = activitiesValue["inputs"];
                                            if (inputsArray6 != null && inputsArray6.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue in ((JArray)inputsArray6))
                                                {
                                                    ActivityInput activityInputInstance = new ActivityInput();
                                                    copyActivityInstance.Inputs.Add(activityInputInstance);
                                                    
                                                    JToken startTimeValue = inputsValue["startTime"];
                                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance = ((string)startTimeValue);
                                                        activityInputInstance.StartTime = startTimeInstance;
                                                    }
                                                    
                                                    JToken endTimeValue = inputsValue["endTime"];
                                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance = ((string)endTimeValue);
                                                        activityInputInstance.EndTime = endTimeInstance;
                                                    }
                                                    
                                                    JToken lengthValue = inputsValue["length"];
                                                    if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                        activityInputInstance.Length = lengthInstance;
                                                    }
                                                    
                                                    JToken nameValue3 = inputsValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        activityInputInstance.Name = nameInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray6 = activitiesValue["outputs"];
                                            if (outputsArray6 != null && outputsArray6.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue in ((JArray)outputsArray6))
                                                {
                                                    ActivityOutput activityOutputInstance = new ActivityOutput();
                                                    copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                    
                                                    JToken nameValue4 = outputsValue["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        activityOutputInstance.Name = nameInstance4;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(copyActivityInstance);
                                        }
                                        if (typeName == "HDInsightActivity")
                                        {
                                            HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                            
                                            JToken transformationValue7 = activitiesValue["transformation"];
                                            if (transformationValue7 != null && transformationValue7.Type != JTokenType.Null)
                                            {
                                                string typeName5 = ((string)transformationValue7["type"]);
                                                if (typeName5 == "Hive")
                                                {
                                                    Hive hiveInstance = new Hive();
                                                    
                                                    JToken scriptValue = transformationValue7["script"];
                                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance = ((string)scriptValue);
                                                        hiveInstance.Script = scriptInstance;
                                                    }
                                                    
                                                    JToken scriptPathValue = transformationValue7["scriptPath"];
                                                    if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptPathInstance = ((string)scriptPathValue);
                                                        hiveInstance.ScriptPath = scriptPathInstance;
                                                    }
                                                    
                                                    JToken scriptLinkedServiceValue = transformationValue7["scriptLinkedService"];
                                                    if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                        hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken definesSequenceElement = ((JToken)transformationValue7["defines"]);
                                                    if (definesSequenceElement != null && definesSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property2 in definesSequenceElement)
                                                        {
                                                            string definesKey4 = ((string)property2.Name);
                                                            string definesValue4 = ((string)property2.Value);
                                                            hiveInstance.Defines.Add(definesKey4, definesValue4);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement = ((JToken)transformationValue7["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property3 in extendedPropertiesSequenceElement)
                                                        {
                                                            string extendedPropertiesKey6 = ((string)property3.Name);
                                                            string extendedPropertiesValue6 = ((string)property3.Value);
                                                            hiveInstance.ExtendedProperties.Add(extendedPropertiesKey6, extendedPropertiesValue6);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray5 = transformationValue7["storageLinkedServices"];
                                                    if (storageLinkedServicesArray5 != null && storageLinkedServicesArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray5))
                                                        {
                                                            hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray5 = transformationValue7["arguments"];
                                                    if (argumentsArray5 != null && argumentsArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue in ((JArray)argumentsArray5))
                                                        {
                                                            hiveInstance.Arguments.Add(((string)argumentsValue));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = hiveInstance;
                                                }
                                                if (typeName5 == "Pig")
                                                {
                                                    Pig pigInstance = new Pig();
                                                    
                                                    JToken scriptValue2 = transformationValue7["script"];
                                                    if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance2 = ((string)scriptValue2);
                                                        pigInstance.Script = scriptInstance2;
                                                    }
                                                    
                                                    JToken scriptPathValue2 = transformationValue7["scriptPath"];
                                                    if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptPathInstance2 = ((string)scriptPathValue2);
                                                        pigInstance.ScriptPath = scriptPathInstance2;
                                                    }
                                                    
                                                    JToken scriptLinkedServiceValue2 = transformationValue7["scriptLinkedService"];
                                                    if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                        pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue7["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property4 in extendedPropertiesSequenceElement2)
                                                        {
                                                            string extendedPropertiesKey7 = ((string)property4.Name);
                                                            string extendedPropertiesValue7 = ((string)property4.Value);
                                                            pigInstance.ExtendedProperties.Add(extendedPropertiesKey7, extendedPropertiesValue7);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray6 = transformationValue7["storageLinkedServices"];
                                                    if (storageLinkedServicesArray6 != null && storageLinkedServicesArray6.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray6))
                                                        {
                                                            pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray6 = transformationValue7["arguments"];
                                                    if (argumentsArray6 != null && argumentsArray6.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue2 in ((JArray)argumentsArray6))
                                                        {
                                                            pigInstance.Arguments.Add(((string)argumentsValue2));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = pigInstance;
                                                }
                                                if (typeName5 == "MapReduce")
                                                {
                                                    MapReduce mapReduceInstance = new MapReduce();
                                                    
                                                    JToken classNameValue = transformationValue7["className"];
                                                    if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                    {
                                                        string classNameInstance = ((string)classNameValue);
                                                        mapReduceInstance.ClassName = classNameInstance;
                                                    }
                                                    
                                                    JToken jarFilePathValue = transformationValue7["jarFilePath"];
                                                    if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                    {
                                                        string jarFilePathInstance = ((string)jarFilePathValue);
                                                        mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                    }
                                                    
                                                    JToken jarLinkedServiceValue = transformationValue7["jarLinkedService"];
                                                    if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                        mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken jarLibsArray2 = transformationValue7["jarLibs"];
                                                    if (jarLibsArray2 != null && jarLibsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken jarLibsValue in ((JArray)jarLibsArray2))
                                                        {
                                                            mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                        }
                                                    }
                                                    
                                                    JToken definesSequenceElement2 = ((JToken)transformationValue7["defines"]);
                                                    if (definesSequenceElement2 != null && definesSequenceElement2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property5 in definesSequenceElement2)
                                                        {
                                                            string definesKey5 = ((string)property5.Name);
                                                            string definesValue5 = ((string)property5.Value);
                                                            mapReduceInstance.Defines.Add(definesKey5, definesValue5);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue7["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property6 in extendedPropertiesSequenceElement3)
                                                        {
                                                            string extendedPropertiesKey8 = ((string)property6.Name);
                                                            string extendedPropertiesValue8 = ((string)property6.Value);
                                                            mapReduceInstance.ExtendedProperties.Add(extendedPropertiesKey8, extendedPropertiesValue8);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray7 = transformationValue7["storageLinkedServices"];
                                                    if (storageLinkedServicesArray7 != null && storageLinkedServicesArray7.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray7))
                                                        {
                                                            mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray7 = transformationValue7["arguments"];
                                                    if (argumentsArray7 != null && argumentsArray7.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue3 in ((JArray)argumentsArray7))
                                                        {
                                                            mapReduceInstance.Arguments.Add(((string)argumentsValue3));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = mapReduceInstance;
                                                }
                                                if (typeName5 == "Streaming")
                                                {
                                                    Streaming streamingInstance = new Streaming();
                                                    
                                                    JToken mapperValue = transformationValue7["mapper"];
                                                    if (mapperValue != null && mapperValue.Type != JTokenType.Null)
                                                    {
                                                        string mapperInstance = ((string)mapperValue);
                                                        streamingInstance.Mapper = mapperInstance;
                                                    }
                                                    
                                                    JToken reducerValue = transformationValue7["reducer"];
                                                    if (reducerValue != null && reducerValue.Type != JTokenType.Null)
                                                    {
                                                        string reducerInstance = ((string)reducerValue);
                                                        streamingInstance.Reducer = reducerInstance;
                                                    }
                                                    
                                                    JToken inputValue = transformationValue7["input"];
                                                    if (inputValue != null && inputValue.Type != JTokenType.Null)
                                                    {
                                                        string inputInstance = ((string)inputValue);
                                                        streamingInstance.Input = inputInstance;
                                                    }
                                                    
                                                    JToken outputValue = transformationValue7["output"];
                                                    if (outputValue != null && outputValue.Type != JTokenType.Null)
                                                    {
                                                        string outputInstance = ((string)outputValue);
                                                        streamingInstance.Output = outputInstance;
                                                    }
                                                    
                                                    JToken filePathsArray2 = transformationValue7["filePaths"];
                                                    if (filePathsArray2 != null && filePathsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken filePathsValue in ((JArray)filePathsArray2))
                                                        {
                                                            streamingInstance.FilePaths.Add(((string)filePathsValue));
                                                        }
                                                    }
                                                    
                                                    JToken fileLinkedServiceValue = transformationValue7["fileLinkedService"];
                                                    if (fileLinkedServiceValue != null && fileLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string fileLinkedServiceInstance = ((string)fileLinkedServiceValue);
                                                        streamingInstance.FileLinkedService = fileLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken combinerValue = transformationValue7["combiner"];
                                                    if (combinerValue != null && combinerValue.Type != JTokenType.Null)
                                                    {
                                                        string combinerInstance = ((string)combinerValue);
                                                        streamingInstance.Combiner = combinerInstance;
                                                    }
                                                    
                                                    JToken commandEnvironmentArray2 = transformationValue7["commandEnvironment"];
                                                    if (commandEnvironmentArray2 != null && commandEnvironmentArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken commandEnvironmentValue in ((JArray)commandEnvironmentArray2))
                                                        {
                                                            streamingInstance.CommandEnvironment.Add(((string)commandEnvironmentValue));
                                                        }
                                                    }
                                                    
                                                    JToken definesSequenceElement3 = ((JToken)transformationValue7["defines"]);
                                                    if (definesSequenceElement3 != null && definesSequenceElement3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property7 in definesSequenceElement3)
                                                        {
                                                            string definesKey6 = ((string)property7.Name);
                                                            string definesValue6 = ((string)property7.Value);
                                                            streamingInstance.Defines.Add(definesKey6, definesValue6);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement4 = ((JToken)transformationValue7["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement4 != null && extendedPropertiesSequenceElement4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property8 in extendedPropertiesSequenceElement4)
                                                        {
                                                            string extendedPropertiesKey9 = ((string)property8.Name);
                                                            string extendedPropertiesValue9 = ((string)property8.Value);
                                                            streamingInstance.ExtendedProperties.Add(extendedPropertiesKey9, extendedPropertiesValue9);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray8 = transformationValue7["storageLinkedServices"];
                                                    if (storageLinkedServicesArray8 != null && storageLinkedServicesArray8.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue4 in ((JArray)storageLinkedServicesArray8))
                                                        {
                                                            streamingInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue4));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray8 = transformationValue7["arguments"];
                                                    if (argumentsArray8 != null && argumentsArray8.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue4 in ((JArray)argumentsArray8))
                                                        {
                                                            streamingInstance.Arguments.Add(((string)argumentsValue4));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = streamingInstance;
                                                }
                                            }
                                            
                                            JToken nameValue5 = activitiesValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                hDInsightActivityInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken descriptionValue3 = activitiesValue["description"];
                                            if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance3 = ((string)descriptionValue3);
                                                hDInsightActivityInstance.Description = descriptionInstance3;
                                            }
                                            
                                            JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                            }
                                            
                                            JToken policyValue7 = activitiesValue["policy"];
                                            if (policyValue7 != null && policyValue7.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance2 = new ActivityPolicy();
                                                hDInsightActivityInstance.Policy = policyInstance2;
                                                
                                                JToken timeoutValue2 = policyValue7["timeout"];
                                                if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.Timeout = timeoutInstance2;
                                                }
                                                
                                                JToken delayValue2 = policyValue7["delay"];
                                                if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.Delay = delayInstance2;
                                                }
                                                
                                                JToken concurrencyValue2 = policyValue7["concurrency"];
                                                if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                    policyInstance2.Concurrency = concurrencyInstance2;
                                                }
                                                
                                                JToken executionPriorityOrderValue2 = policyValue7["executionPriorityOrder"];
                                                if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                    policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                                }
                                                
                                                JToken retryValue2 = policyValue7["retry"];
                                                if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                                {
                                                    int retryInstance2 = ((int)retryValue2);
                                                    policyInstance2.Retry = retryInstance2;
                                                }
                                                
                                                JToken longRetryValue2 = policyValue7["longRetry"];
                                                if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance2 = ((int)longRetryValue2);
                                                    policyInstance2.LongRetry = longRetryInstance2;
                                                }
                                                
                                                JToken longRetryIntervalValue2 = policyValue7["longRetryInterval"];
                                                if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                                }
                                            }
                                            
                                            JToken inputsArray7 = activitiesValue["inputs"];
                                            if (inputsArray7 != null && inputsArray7.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue2 in ((JArray)inputsArray7))
                                                {
                                                    ActivityInput activityInputInstance2 = new ActivityInput();
                                                    hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                    
                                                    JToken startTimeValue2 = inputsValue2["startTime"];
                                                    if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance2 = ((string)startTimeValue2);
                                                        activityInputInstance2.StartTime = startTimeInstance2;
                                                    }
                                                    
                                                    JToken endTimeValue2 = inputsValue2["endTime"];
                                                    if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance2 = ((string)endTimeValue2);
                                                        activityInputInstance2.EndTime = endTimeInstance2;
                                                    }
                                                    
                                                    JToken lengthValue2 = inputsValue2["length"];
                                                    if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                        activityInputInstance2.Length = lengthInstance2;
                                                    }
                                                    
                                                    JToken nameValue6 = inputsValue2["name"];
                                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance6 = ((string)nameValue6);
                                                        activityInputInstance2.Name = nameInstance6;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray7 = activitiesValue["outputs"];
                                            if (outputsArray7 != null && outputsArray7.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue2 in ((JArray)outputsArray7))
                                                {
                                                    ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                    hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                    
                                                    JToken nameValue7 = outputsValue2["name"];
                                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance7 = ((string)nameValue7);
                                                        activityOutputInstance2.Name = nameInstance7;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                        }
                                        if (typeName == "DotNetActivity")
                                        {
                                            DotNetActivity dotNetActivityInstance = new DotNetActivity();
                                            
                                            JToken transformationValue8 = activitiesValue["transformation"];
                                            if (transformationValue8 != null && transformationValue8.Type != JTokenType.Null)
                                            {
                                                DotNetActivityProperties transformationInstance2 = new DotNetActivityProperties();
                                                dotNetActivityInstance.Transformation = transformationInstance2;
                                                
                                                JToken assemblyNameValue = transformationValue8["assemblyName"];
                                                if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                                {
                                                    string assemblyNameInstance = ((string)assemblyNameValue);
                                                    transformationInstance2.AssemblyName = assemblyNameInstance;
                                                }
                                                
                                                JToken entryPointValue = transformationValue8["entryPoint"];
                                                if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                                {
                                                    string entryPointInstance = ((string)entryPointValue);
                                                    transformationInstance2.EntryPoint = entryPointInstance;
                                                }
                                                
                                                JToken packageLinkedServiceValue = transformationValue8["packageLinkedService"];
                                                if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                    transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                                }
                                                
                                                JToken packageFileValue = transformationValue8["packageFile"];
                                                if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                                {
                                                    string packageFileInstance = ((string)packageFileValue);
                                                    transformationInstance2.PackageFile = packageFileInstance;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement5 = ((JToken)transformationValue8["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement5 != null && extendedPropertiesSequenceElement5.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property9 in extendedPropertiesSequenceElement5)
                                                    {
                                                        string extendedPropertiesKey10 = ((string)property9.Name);
                                                        string extendedPropertiesValue10 = ((string)property9.Value);
                                                        transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey10, extendedPropertiesValue10);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue8 = activitiesValue["name"];
                                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                            {
                                                string nameInstance8 = ((string)nameValue8);
                                                dotNetActivityInstance.Name = nameInstance8;
                                            }
                                            
                                            JToken descriptionValue4 = activitiesValue["description"];
                                            if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance4 = ((string)descriptionValue4);
                                                dotNetActivityInstance.Description = descriptionInstance4;
                                            }
                                            
                                            JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                dotNetActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                            }
                                            
                                            JToken policyValue8 = activitiesValue["policy"];
                                            if (policyValue8 != null && policyValue8.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance3 = new ActivityPolicy();
                                                dotNetActivityInstance.Policy = policyInstance3;
                                                
                                                JToken timeoutValue3 = policyValue8["timeout"];
                                                if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.Timeout = timeoutInstance3;
                                                }
                                                
                                                JToken delayValue3 = policyValue8["delay"];
                                                if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.Delay = delayInstance3;
                                                }
                                                
                                                JToken concurrencyValue3 = policyValue8["concurrency"];
                                                if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                    policyInstance3.Concurrency = concurrencyInstance3;
                                                }
                                                
                                                JToken executionPriorityOrderValue3 = policyValue8["executionPriorityOrder"];
                                                if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                    policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                                }
                                                
                                                JToken retryValue3 = policyValue8["retry"];
                                                if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                                {
                                                    int retryInstance3 = ((int)retryValue3);
                                                    policyInstance3.Retry = retryInstance3;
                                                }
                                                
                                                JToken longRetryValue3 = policyValue8["longRetry"];
                                                if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance3 = ((int)longRetryValue3);
                                                    policyInstance3.LongRetry = longRetryInstance3;
                                                }
                                                
                                                JToken longRetryIntervalValue3 = policyValue8["longRetryInterval"];
                                                if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                                }
                                            }
                                            
                                            JToken inputsArray8 = activitiesValue["inputs"];
                                            if (inputsArray8 != null && inputsArray8.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue3 in ((JArray)inputsArray8))
                                                {
                                                    ActivityInput activityInputInstance3 = new ActivityInput();
                                                    dotNetActivityInstance.Inputs.Add(activityInputInstance3);
                                                    
                                                    JToken startTimeValue3 = inputsValue3["startTime"];
                                                    if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance3 = ((string)startTimeValue3);
                                                        activityInputInstance3.StartTime = startTimeInstance3;
                                                    }
                                                    
                                                    JToken endTimeValue3 = inputsValue3["endTime"];
                                                    if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance3 = ((string)endTimeValue3);
                                                        activityInputInstance3.EndTime = endTimeInstance3;
                                                    }
                                                    
                                                    JToken lengthValue3 = inputsValue3["length"];
                                                    if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                        activityInputInstance3.Length = lengthInstance3;
                                                    }
                                                    
                                                    JToken nameValue9 = inputsValue3["name"];
                                                    if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance9 = ((string)nameValue9);
                                                        activityInputInstance3.Name = nameInstance9;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray8 = activitiesValue["outputs"];
                                            if (outputsArray8 != null && outputsArray8.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue3 in ((JArray)outputsArray8))
                                                {
                                                    ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                    dotNetActivityInstance.Outputs.Add(activityOutputInstance3);
                                                    
                                                    JToken nameValue10 = outputsValue3["name"];
                                                    if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance10 = ((string)nameValue10);
                                                        activityOutputInstance3.Name = nameInstance10;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(dotNetActivityInstance);
                                        }
                                        if (typeName == "StoredProcedureActivity")
                                        {
                                            StoredProcedureActivity storedProcedureActivityInstance = new StoredProcedureActivity();
                                            
                                            JToken transformationValue9 = activitiesValue["transformation"];
                                            if (transformationValue9 != null && transformationValue9.Type != JTokenType.Null)
                                            {
                                                StoredProcedureActivityProperties transformationInstance3 = new StoredProcedureActivityProperties();
                                                storedProcedureActivityInstance.Transformation = transformationInstance3;
                                                
                                                JToken storedProcedureNameValue = transformationValue9["storedProcedureName"];
                                                if (storedProcedureNameValue != null && storedProcedureNameValue.Type != JTokenType.Null)
                                                {
                                                    string storedProcedureNameInstance = ((string)storedProcedureNameValue);
                                                    transformationInstance3.StoredProcedureName = storedProcedureNameInstance;
                                                }
                                                
                                                JToken storedProcedureParametersSequenceElement2 = ((JToken)transformationValue9["storedProcedureParameters"]);
                                                if (storedProcedureParametersSequenceElement2 != null && storedProcedureParametersSequenceElement2.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property10 in storedProcedureParametersSequenceElement2)
                                                    {
                                                        string storedProcedureParametersKey4 = ((string)property10.Name);
                                                        string storedProcedureParametersValue3 = ((string)property10.Value);
                                                        transformationInstance3.StoredProcedureActivityParameters.Add(storedProcedureParametersKey4, storedProcedureParametersValue3);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue11 = activitiesValue["name"];
                                            if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                            {
                                                string nameInstance11 = ((string)nameValue11);
                                                storedProcedureActivityInstance.Name = nameInstance11;
                                            }
                                            
                                            JToken descriptionValue5 = activitiesValue["description"];
                                            if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance5 = ((string)descriptionValue5);
                                                storedProcedureActivityInstance.Description = descriptionInstance5;
                                            }
                                            
                                            JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                storedProcedureActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                            }
                                            
                                            JToken policyValue9 = activitiesValue["policy"];
                                            if (policyValue9 != null && policyValue9.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance4 = new ActivityPolicy();
                                                storedProcedureActivityInstance.Policy = policyInstance4;
                                                
                                                JToken timeoutValue4 = policyValue9["timeout"];
                                                if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.Timeout = timeoutInstance4;
                                                }
                                                
                                                JToken delayValue4 = policyValue9["delay"];
                                                if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.Delay = delayInstance4;
                                                }
                                                
                                                JToken concurrencyValue4 = policyValue9["concurrency"];
                                                if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                    policyInstance4.Concurrency = concurrencyInstance4;
                                                }
                                                
                                                JToken executionPriorityOrderValue4 = policyValue9["executionPriorityOrder"];
                                                if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                    policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                                }
                                                
                                                JToken retryValue4 = policyValue9["retry"];
                                                if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                                {
                                                    int retryInstance4 = ((int)retryValue4);
                                                    policyInstance4.Retry = retryInstance4;
                                                }
                                                
                                                JToken longRetryValue4 = policyValue9["longRetry"];
                                                if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance4 = ((int)longRetryValue4);
                                                    policyInstance4.LongRetry = longRetryInstance4;
                                                }
                                                
                                                JToken longRetryIntervalValue4 = policyValue9["longRetryInterval"];
                                                if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                                }
                                            }
                                            
                                            JToken inputsArray9 = activitiesValue["inputs"];
                                            if (inputsArray9 != null && inputsArray9.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue4 in ((JArray)inputsArray9))
                                                {
                                                    ActivityInput activityInputInstance4 = new ActivityInput();
                                                    storedProcedureActivityInstance.Inputs.Add(activityInputInstance4);
                                                    
                                                    JToken startTimeValue4 = inputsValue4["startTime"];
                                                    if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance4 = ((string)startTimeValue4);
                                                        activityInputInstance4.StartTime = startTimeInstance4;
                                                    }
                                                    
                                                    JToken endTimeValue4 = inputsValue4["endTime"];
                                                    if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance4 = ((string)endTimeValue4);
                                                        activityInputInstance4.EndTime = endTimeInstance4;
                                                    }
                                                    
                                                    JToken lengthValue4 = inputsValue4["length"];
                                                    if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                        activityInputInstance4.Length = lengthInstance4;
                                                    }
                                                    
                                                    JToken nameValue12 = inputsValue4["name"];
                                                    if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance12 = ((string)nameValue12);
                                                        activityInputInstance4.Name = nameInstance12;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray9 = activitiesValue["outputs"];
                                            if (outputsArray9 != null && outputsArray9.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue4 in ((JArray)outputsArray9))
                                                {
                                                    ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                    storedProcedureActivityInstance.Outputs.Add(activityOutputInstance4);
                                                    
                                                    JToken nameValue13 = outputsValue4["name"];
                                                    if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance13 = ((string)nameValue13);
                                                        activityOutputInstance4.Name = nameInstance13;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(storedProcedureActivityInstance);
                                        }
                                        if (typeName == "AzureMLBatchScoringActivity")
                                        {
                                            AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                            
                                            JToken transformationValue10 = activitiesValue["transformation"];
                                            if (transformationValue10 != null && transformationValue10.Type != JTokenType.Null)
                                            {
                                                AzureMLActivityProperties transformationInstance4 = new AzureMLActivityProperties();
                                                azureMLBatchScoringActivityInstance.Transformation = transformationInstance4;
                                                
                                                JToken webServiceParametersSequenceElement = ((JToken)transformationValue10["webServiceParameters"]);
                                                if (webServiceParametersSequenceElement != null && webServiceParametersSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property11 in webServiceParametersSequenceElement)
                                                    {
                                                        string webServiceParametersKey2 = ((string)property11.Name);
                                                        string webServiceParametersValue2 = ((string)property11.Value);
                                                        transformationInstance4.WebServiceParameters.Add(webServiceParametersKey2, webServiceParametersValue2);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue14 = activitiesValue["name"];
                                            if (nameValue14 != null && nameValue14.Type != JTokenType.Null)
                                            {
                                                string nameInstance14 = ((string)nameValue14);
                                                azureMLBatchScoringActivityInstance.Name = nameInstance14;
                                            }
                                            
                                            JToken descriptionValue6 = activitiesValue["description"];
                                            if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance6 = ((string)descriptionValue6);
                                                azureMLBatchScoringActivityInstance.Description = descriptionInstance6;
                                            }
                                            
                                            JToken linkedServiceNameValue5 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance5;
                                            }
                                            
                                            JToken policyValue10 = activitiesValue["policy"];
                                            if (policyValue10 != null && policyValue10.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance5 = new ActivityPolicy();
                                                azureMLBatchScoringActivityInstance.Policy = policyInstance5;
                                                
                                                JToken timeoutValue5 = policyValue10["timeout"];
                                                if (timeoutValue5 != null && timeoutValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance5 = TimeSpan.Parse(((string)timeoutValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.Timeout = timeoutInstance5;
                                                }
                                                
                                                JToken delayValue5 = policyValue10["delay"];
                                                if (delayValue5 != null && delayValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance5 = TimeSpan.Parse(((string)delayValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.Delay = delayInstance5;
                                                }
                                                
                                                JToken concurrencyValue5 = policyValue10["concurrency"];
                                                if (concurrencyValue5 != null && concurrencyValue5.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance5 = ((uint)concurrencyValue5);
                                                    policyInstance5.Concurrency = concurrencyInstance5;
                                                }
                                                
                                                JToken executionPriorityOrderValue5 = policyValue10["executionPriorityOrder"];
                                                if (executionPriorityOrderValue5 != null && executionPriorityOrderValue5.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance5 = ((string)executionPriorityOrderValue5);
                                                    policyInstance5.ExecutionPriorityOrder = executionPriorityOrderInstance5;
                                                }
                                                
                                                JToken retryValue5 = policyValue10["retry"];
                                                if (retryValue5 != null && retryValue5.Type != JTokenType.Null)
                                                {
                                                    int retryInstance5 = ((int)retryValue5);
                                                    policyInstance5.Retry = retryInstance5;
                                                }
                                                
                                                JToken longRetryValue5 = policyValue10["longRetry"];
                                                if (longRetryValue5 != null && longRetryValue5.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance5 = ((int)longRetryValue5);
                                                    policyInstance5.LongRetry = longRetryInstance5;
                                                }
                                                
                                                JToken longRetryIntervalValue5 = policyValue10["longRetryInterval"];
                                                if (longRetryIntervalValue5 != null && longRetryIntervalValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance5 = TimeSpan.Parse(((string)longRetryIntervalValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.LongRetryInterval = longRetryIntervalInstance5;
                                                }
                                            }
                                            
                                            JToken inputsArray10 = activitiesValue["inputs"];
                                            if (inputsArray10 != null && inputsArray10.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue5 in ((JArray)inputsArray10))
                                                {
                                                    ActivityInput activityInputInstance5 = new ActivityInput();
                                                    azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance5);
                                                    
                                                    JToken startTimeValue5 = inputsValue5["startTime"];
                                                    if (startTimeValue5 != null && startTimeValue5.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance5 = ((string)startTimeValue5);
                                                        activityInputInstance5.StartTime = startTimeInstance5;
                                                    }
                                                    
                                                    JToken endTimeValue5 = inputsValue5["endTime"];
                                                    if (endTimeValue5 != null && endTimeValue5.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance5 = ((string)endTimeValue5);
                                                        activityInputInstance5.EndTime = endTimeInstance5;
                                                    }
                                                    
                                                    JToken lengthValue5 = inputsValue5["length"];
                                                    if (lengthValue5 != null && lengthValue5.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance5 = TimeSpan.Parse(((string)lengthValue5), CultureInfo.InvariantCulture);
                                                        activityInputInstance5.Length = lengthInstance5;
                                                    }
                                                    
                                                    JToken nameValue15 = inputsValue5["name"];
                                                    if (nameValue15 != null && nameValue15.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance15 = ((string)nameValue15);
                                                        activityInputInstance5.Name = nameInstance15;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray10 = activitiesValue["outputs"];
                                            if (outputsArray10 != null && outputsArray10.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue5 in ((JArray)outputsArray10))
                                                {
                                                    ActivityOutput activityOutputInstance5 = new ActivityOutput();
                                                    azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance5);
                                                    
                                                    JToken nameValue16 = outputsValue5["name"];
                                                    if (nameValue16 != null && nameValue16.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance16 = ((string)nameValue16);
                                                        activityOutputInstance5.Name = nameInstance16;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                        }
                                    }
                                }
                                
                                JToken startValue = propertiesValue2["start"];
                                if (startValue != null && startValue.Type != JTokenType.Null)
                                {
                                    DateTime startInstance = ((DateTime)startValue);
                                    propertiesInstance.Start = startInstance;
                                }
                                
                                JToken endValue = propertiesValue2["end"];
                                if (endValue != null && endValue.Type != JTokenType.Null)
                                {
                                    DateTime endInstance = ((DateTime)endValue);
                                    propertiesInstance.End = endInstance;
                                }
                                
                                JToken isPausedValue = propertiesValue2["isPaused"];
                                if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                {
                                    bool isPausedInstance = ((bool)isPausedValue);
                                    propertiesInstance.IsPaused = isPausedInstance;
                                }
                                
                                JToken runtimeInfoValue2 = propertiesValue2["runtimeInfo"];
                                if (runtimeInfoValue2 != null && runtimeInfoValue2.Type != JTokenType.Null)
                                {
                                    PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                    propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                    
                                    JToken deploymentTimeValue = runtimeInfoValue2["deploymentTime"];
                                    if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                        runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue2["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue2["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    propertiesInstance.HubName = hubNameInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new pipeline instance with raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. A unique pipeline instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> BeginCreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, PipelineCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Pipeline pipelineInstance = new Pipeline();
                            result.Pipeline = pipelineInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                pipelineInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                PipelineProperties propertiesInstance = new PipelineProperties();
                                pipelineInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken activitiesArray = propertiesValue["activities"];
                                if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                    {
                                        string typeName = ((string)activitiesValue["type"]);
                                        if (typeName == "CopyActivity")
                                        {
                                            CopyActivity copyActivityInstance = new CopyActivity();
                                            
                                            JToken transformationValue = activitiesValue["transformation"];
                                            if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                            {
                                                CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                                copyActivityInstance.Transformation = transformationInstance;
                                                
                                                JToken sourceValue = transformationValue["source"];
                                                if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)sourceValue["type"]);
                                                    if (typeName2 == "AzureTableSource")
                                                    {
                                                        AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                        
                                                        JToken azureTableSourceQueryValue = sourceValue["azureTableSourceQuery"];
                                                        if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                            azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                        }
                                                        
                                                        JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue["azureTableSourceIgnoreTableNotFound"];
                                                        if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                        {
                                                            bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                            azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                            azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                            azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                        }
                                                        transformationInstance.Source = azureTableSourceInstance;
                                                    }
                                                    if (typeName2 == "BlobSource")
                                                    {
                                                        BlobSource blobSourceInstance = new BlobSource();
                                                        
                                                        JToken blobColumnSeparatorsValue = sourceValue["blobColumnSeparators"];
                                                        if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                        {
                                                            string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                            blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                        }
                                                        
                                                        JToken treatEmptyAsNullValue = sourceValue["treatEmptyAsNull"];
                                                        if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                        {
                                                            bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                            blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                        }
                                                        
                                                        JToken nullValuesValue = sourceValue["nullValues"];
                                                        if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                        {
                                                            string nullValuesInstance = ((string)nullValuesValue);
                                                            blobSourceInstance.NullValues = nullValuesInstance;
                                                        }
                                                        
                                                        JToken skipHeaderLineCountValue = sourceValue["skipHeaderLineCount"];
                                                        if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                        {
                                                            int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                            blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue2 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                            blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue2 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                            blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                        }
                                                        transformationInstance.Source = blobSourceInstance;
                                                    }
                                                    if (typeName2 == "DocumentDbCollectionSource")
                                                    {
                                                        DocumentDbCollectionSource documentDbCollectionSourceInstance = new DocumentDbCollectionSource();
                                                        
                                                        JToken queryValue = sourceValue["query"];
                                                        if (queryValue != null && queryValue.Type != JTokenType.Null)
                                                        {
                                                            string queryInstance = ((string)queryValue);
                                                            documentDbCollectionSourceInstance.Query = queryInstance;
                                                        }
                                                        
                                                        JToken nestingSeparatorValue = sourceValue["nestingSeparator"];
                                                        if (nestingSeparatorValue != null && nestingSeparatorValue.Type != JTokenType.Null)
                                                        {
                                                            string nestingSeparatorInstance = ((string)nestingSeparatorValue);
                                                            documentDbCollectionSourceInstance.NestingSeparator = nestingSeparatorInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue3 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                            documentDbCollectionSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue3 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                        }
                                                        transformationInstance.Source = documentDbCollectionSourceInstance;
                                                    }
                                                    if (typeName2 == "RelationalSource")
                                                    {
                                                        RelationalSource relationalSourceInstance = new RelationalSource();
                                                        
                                                        JToken queryValue2 = sourceValue["query"];
                                                        if (queryValue2 != null && queryValue2.Type != JTokenType.Null)
                                                        {
                                                            string queryInstance2 = ((string)queryValue2);
                                                            relationalSourceInstance.Query = queryInstance2;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue4 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue4 != null && sourceRetryCountValue4.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance4 = ((int)sourceRetryCountValue4);
                                                            relationalSourceInstance.SourceRetryCount = sourceRetryCountInstance4;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue4 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue4 != null && sourceRetryWaitValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance4 = TimeSpan.Parse(((string)sourceRetryWaitValue4), CultureInfo.InvariantCulture);
                                                            relationalSourceInstance.SourceRetryWait = sourceRetryWaitInstance4;
                                                        }
                                                        transformationInstance.Source = relationalSourceInstance;
                                                    }
                                                    if (typeName2 == "OdbcSource")
                                                    {
                                                        RelationalSource.OdbcSource odbcSourceInstance = new RelationalSource.OdbcSource();
                                                        
                                                        JToken odbcReaderQueryValue = sourceValue["odbcReaderQuery"];
                                                        if (odbcReaderQueryValue != null && odbcReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string odbcReaderQueryInstance = ((string)odbcReaderQueryValue);
                                                            odbcSourceInstance.OdbcReaderQuery = odbcReaderQueryInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue5 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue5 != null && sourceRetryCountValue5.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance5 = ((int)sourceRetryCountValue5);
                                                            odbcSourceInstance.SourceRetryCount = sourceRetryCountInstance5;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue5 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue5 != null && sourceRetryWaitValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance5 = TimeSpan.Parse(((string)sourceRetryWaitValue5), CultureInfo.InvariantCulture);
                                                            odbcSourceInstance.SourceRetryWait = sourceRetryWaitInstance5;
                                                        }
                                                        transformationInstance.Source = odbcSourceInstance;
                                                    }
                                                    if (typeName2 == "ODataSource")
                                                    {
                                                        RelationalSource.ODataSource oDataSourceInstance = new RelationalSource.ODataSource();
                                                        
                                                        JToken sourceRetryCountValue6 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue6 != null && sourceRetryCountValue6.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance6 = ((int)sourceRetryCountValue6);
                                                            oDataSourceInstance.SourceRetryCount = sourceRetryCountInstance6;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue6 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue6 != null && sourceRetryWaitValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance6 = TimeSpan.Parse(((string)sourceRetryWaitValue6), CultureInfo.InvariantCulture);
                                                            oDataSourceInstance.SourceRetryWait = sourceRetryWaitInstance6;
                                                        }
                                                        transformationInstance.Source = oDataSourceInstance;
                                                    }
                                                    if (typeName2 == "HdfsSource")
                                                    {
                                                        RelationalSource.HdfsSource hdfsSourceInstance = new RelationalSource.HdfsSource();
                                                        
                                                        JToken sourceRetryCountValue7 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue7 != null && sourceRetryCountValue7.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance7 = ((int)sourceRetryCountValue7);
                                                            hdfsSourceInstance.SourceRetryCount = sourceRetryCountInstance7;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue7 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue7 != null && sourceRetryWaitValue7.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance7 = TimeSpan.Parse(((string)sourceRetryWaitValue7), CultureInfo.InvariantCulture);
                                                            hdfsSourceInstance.SourceRetryWait = sourceRetryWaitInstance7;
                                                        }
                                                        transformationInstance.Source = hdfsSourceInstance;
                                                    }
                                                    if (typeName2 == "SqlSource")
                                                    {
                                                        SqlSource sqlSourceInstance = new SqlSource();
                                                        
                                                        JToken sqlReaderQueryValue = sourceValue["sqlReaderQuery"];
                                                        if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                            sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue8 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue8 != null && sourceRetryCountValue8.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance8 = ((int)sourceRetryCountValue8);
                                                            sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance8;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue8 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue8 != null && sourceRetryWaitValue8.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance8 = TimeSpan.Parse(((string)sourceRetryWaitValue8), CultureInfo.InvariantCulture);
                                                            sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance8;
                                                        }
                                                        transformationInstance.Source = sqlSourceInstance;
                                                    }
                                                    if (typeName2 == "FileSystemSource")
                                                    {
                                                        FileSystemSource fileSystemSourceInstance = new FileSystemSource();
                                                        
                                                        JToken sourceRetryCountValue9 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue9 != null && sourceRetryCountValue9.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance9 = ((int)sourceRetryCountValue9);
                                                            fileSystemSourceInstance.SourceRetryCount = sourceRetryCountInstance9;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue9 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue9 != null && sourceRetryWaitValue9.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance9 = TimeSpan.Parse(((string)sourceRetryWaitValue9), CultureInfo.InvariantCulture);
                                                            fileSystemSourceInstance.SourceRetryWait = sourceRetryWaitInstance9;
                                                        }
                                                        transformationInstance.Source = fileSystemSourceInstance;
                                                    }
                                                    if (typeName2 == "OracleSource")
                                                    {
                                                        OracleSource oracleSourceInstance = new OracleSource();
                                                        
                                                        JToken oracleReaderQueryValue = sourceValue["oracleReaderQuery"];
                                                        if (oracleReaderQueryValue != null && oracleReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleReaderQueryInstance = ((string)oracleReaderQueryValue);
                                                            oracleSourceInstance.OracleReaderQuery = oracleReaderQueryInstance;
                                                        }
                                                        
                                                        JToken queryTimeoutValue = sourceValue["queryTimeout"];
                                                        if (queryTimeoutValue != null && queryTimeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan queryTimeoutInstance = TimeSpan.Parse(((string)queryTimeoutValue), CultureInfo.InvariantCulture);
                                                            oracleSourceInstance.QueryTimeout = queryTimeoutInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue10 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue10 != null && sourceRetryCountValue10.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance10 = ((int)sourceRetryCountValue10);
                                                            oracleSourceInstance.SourceRetryCount = sourceRetryCountInstance10;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue10 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue10 != null && sourceRetryWaitValue10.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance10 = TimeSpan.Parse(((string)sourceRetryWaitValue10), CultureInfo.InvariantCulture);
                                                            oracleSourceInstance.SourceRetryWait = sourceRetryWaitInstance10;
                                                        }
                                                        transformationInstance.Source = oracleSourceInstance;
                                                    }
                                                }
                                                
                                                JToken sinkValue = transformationValue["sink"];
                                                if (sinkValue != null && sinkValue.Type != JTokenType.Null)
                                                {
                                                    string typeName3 = ((string)sinkValue["type"]);
                                                    if (typeName3 == "AzureQueueSink")
                                                    {
                                                        AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                        
                                                        JToken writeBatchSizeValue = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                            azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                            azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                            azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                            azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                            azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                        }
                                                        transformationInstance.Sink = azureQueueSinkInstance;
                                                    }
                                                    if (typeName3 == "AzureTableSink")
                                                    {
                                                        AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                        
                                                        JToken azureTableRetryIntervalInSecValue = sinkValue["azureTableRetryIntervalInSec"];
                                                        if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                        {
                                                            int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                            azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                        }
                                                        
                                                        JToken azureTableRetryTimesValue = sinkValue["azureTableRetryTimes"];
                                                        if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                        {
                                                            int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                            azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                        }
                                                        
                                                        JToken azureTableDefaultPartitionKeyValueValue = sinkValue["azureTableDefaultPartitionKeyValue"];
                                                        if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                            azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                        }
                                                        
                                                        JToken azureTablePartitionKeyNameValue = sinkValue["azureTablePartitionKeyName"];
                                                        if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                            azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                        }
                                                        
                                                        JToken azureTableRowKeyNameValue = sinkValue["azureTableRowKeyName"];
                                                        if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                            azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                        }
                                                        
                                                        JToken azureTableInsertTypeValue = sinkValue["azureTableInsertType"];
                                                        if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                            azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue2 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                            azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue2 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                            azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue2 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                            azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue2 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                            azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue2 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                            azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                        }
                                                        transformationInstance.Sink = azureTableSinkInstance;
                                                    }
                                                    if (typeName3 == "BlobSink")
                                                    {
                                                        BlobSink blobSinkInstance = new BlobSink();
                                                        
                                                        JToken blockWriterBlockSizeValue = sinkValue["blockWriterBlockSize"];
                                                        if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                        {
                                                            int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                            blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                        }
                                                        
                                                        JToken blobWriterOverwriteFilesValue = sinkValue["blobWriterOverwriteFiles"];
                                                        if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                        {
                                                            bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                            blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                        }
                                                        
                                                        JToken blobWriterPartitionColumnsValue = sinkValue["blobWriterPartitionColumns"];
                                                        if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                            blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                        }
                                                        
                                                        JToken blobWriterPartitionFormatValue = sinkValue["blobWriterPartitionFormat"];
                                                        if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                            blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                        }
                                                        
                                                        JToken blobWriterDateTimeFormatValue = sinkValue["blobWriterDateTimeFormat"];
                                                        if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                            blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                        }
                                                        
                                                        JToken blobWriterSeparatorValue = sinkValue["blobWriterSeparator"];
                                                        if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                            blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                        }
                                                        
                                                        JToken blobWriterRowSuffixValue = sinkValue["blobWriterRowSuffix"];
                                                        if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                            blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                        }
                                                        
                                                        JToken blobWriterAddHeaderValue = sinkValue["blobWriterAddHeader"];
                                                        if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                        {
                                                            bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                            blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue3 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                            blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue3 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                            blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue3 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                            blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue3 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                            blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue3 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                            blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                        }
                                                        transformationInstance.Sink = blobSinkInstance;
                                                    }
                                                    if (typeName3 == "DocumentDbCollectionSink")
                                                    {
                                                        DocumentDbCollectionSink documentDbCollectionSinkInstance = new DocumentDbCollectionSink();
                                                        
                                                        JToken nestingSeparatorValue2 = sinkValue["nestingSeparator"];
                                                        if (nestingSeparatorValue2 != null && nestingSeparatorValue2.Type != JTokenType.Null)
                                                        {
                                                            string nestingSeparatorInstance2 = ((string)nestingSeparatorValue2);
                                                            documentDbCollectionSinkInstance.NestingSeparator = nestingSeparatorInstance2;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue4 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                            documentDbCollectionSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue4 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue4 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                            documentDbCollectionSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue4 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue4 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                            documentDbCollectionSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                        }
                                                        transformationInstance.Sink = documentDbCollectionSinkInstance;
                                                    }
                                                    if (typeName3 == "SqlSink")
                                                    {
                                                        SqlSink sqlSinkInstance = new SqlSink();
                                                        
                                                        JToken sqlWriterStoredProcedureNameValue = sinkValue["sqlWriterStoredProcedureName"];
                                                        if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                            sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                        }
                                                        
                                                        JToken sqlWriterTableTypeValue = sinkValue["sqlWriterTableType"];
                                                        if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                            sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                        }
                                                        
                                                        JToken sqlWriterCleanupScriptValue = sinkValue["sqlWriterCleanupScript"];
                                                        if (sqlWriterCleanupScriptValue != null && sqlWriterCleanupScriptValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterCleanupScriptInstance = ((string)sqlWriterCleanupScriptValue);
                                                            sqlSinkInstance.SqlWriterCleanupScript = sqlWriterCleanupScriptInstance;
                                                        }
                                                        
                                                        JToken sliceIdentifierColumnNameValue = sinkValue["sliceIdentifierColumnName"];
                                                        if (sliceIdentifierColumnNameValue != null && sliceIdentifierColumnNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sliceIdentifierColumnNameInstance = ((string)sliceIdentifierColumnNameValue);
                                                            sqlSinkInstance.SliceIdentifierColumnName = sliceIdentifierColumnNameInstance;
                                                        }
                                                        
                                                        JToken storedProcedureParametersSequenceElement = ((JToken)sinkValue["storedProcedureParameters"]);
                                                        if (storedProcedureParametersSequenceElement != null && storedProcedureParametersSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property in storedProcedureParametersSequenceElement)
                                                            {
                                                                string storedProcedureParametersKey = ((string)property.Name);
                                                                JObject varToken = ((JObject)property.Value);
                                                                StoredProcedureParameter storedProcedureParameterInstance = new StoredProcedureParameter();
                                                                sqlSinkInstance.StoredProcedureParameters.Add(storedProcedureParametersKey, storedProcedureParameterInstance);
                                                                
                                                                JToken valueValue = varToken["value"];
                                                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                                {
                                                                    string valueInstance = ((string)valueValue);
                                                                    storedProcedureParameterInstance.Value = valueInstance;
                                                                }
                                                                
                                                                JToken typeValue = varToken["type"];
                                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                                {
                                                                    string typeInstance = ((string)typeValue);
                                                                    storedProcedureParameterInstance.Type = typeInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken writeBatchSizeValue5 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue5 != null && writeBatchSizeValue5.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance5 = ((int)writeBatchSizeValue5);
                                                            sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance5;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue5 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue5 != null && writeBatchTimeoutValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance5 = TimeSpan.Parse(((string)writeBatchTimeoutValue5), CultureInfo.InvariantCulture);
                                                            sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance5;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue5 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue5 != null && sinkRetryCountValue5.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance5 = ((int)sinkRetryCountValue5);
                                                            sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance5;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue5 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue5 != null && sinkRetryWaitValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance5 = TimeSpan.Parse(((string)sinkRetryWaitValue5), CultureInfo.InvariantCulture);
                                                            sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance5;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue5 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue5 != null && sinkPartitionDataValue5.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance5 = ((bool)sinkPartitionDataValue5);
                                                            sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance5;
                                                        }
                                                        transformationInstance.Sink = sqlSinkInstance;
                                                    }
                                                    if (typeName3 == "OracleSink")
                                                    {
                                                        OracleSink oracleSinkInstance = new OracleSink();
                                                        
                                                        JToken oracleWriterStoredProcedureNameValue = sinkValue["oracleWriterStoredProcedureName"];
                                                        if (oracleWriterStoredProcedureNameValue != null && oracleWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleWriterStoredProcedureNameInstance = ((string)oracleWriterStoredProcedureNameValue);
                                                            oracleSinkInstance.OracleWriterStoredProcedureName = oracleWriterStoredProcedureNameInstance;
                                                        }
                                                        
                                                        JToken oracleWriterTableTypeValue = sinkValue["oracleWriterTableType"];
                                                        if (oracleWriterTableTypeValue != null && oracleWriterTableTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleWriterTableTypeInstance = ((string)oracleWriterTableTypeValue);
                                                            oracleSinkInstance.OracleWriterTableType = oracleWriterTableTypeInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue6 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue6 != null && writeBatchSizeValue6.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance6 = ((int)writeBatchSizeValue6);
                                                            oracleSinkInstance.WriteBatchSize = writeBatchSizeInstance6;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue6 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue6 != null && writeBatchTimeoutValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance6 = TimeSpan.Parse(((string)writeBatchTimeoutValue6), CultureInfo.InvariantCulture);
                                                            oracleSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance6;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue6 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue6 != null && sinkRetryCountValue6.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance6 = ((int)sinkRetryCountValue6);
                                                            oracleSinkInstance.SinkRetryCount = sinkRetryCountInstance6;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue6 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue6 != null && sinkRetryWaitValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance6 = TimeSpan.Parse(((string)sinkRetryWaitValue6), CultureInfo.InvariantCulture);
                                                            oracleSinkInstance.SinkRetryWait = sinkRetryWaitInstance6;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue6 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue6 != null && sinkPartitionDataValue6.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance6 = ((bool)sinkPartitionDataValue6);
                                                            oracleSinkInstance.SinkPartitionData = sinkPartitionDataInstance6;
                                                        }
                                                        transformationInstance.Sink = oracleSinkInstance;
                                                    }
                                                }
                                                
                                                JToken translatorValue = transformationValue["translator"];
                                                if (translatorValue != null && translatorValue.Type != JTokenType.Null)
                                                {
                                                    string typeName4 = ((string)translatorValue["type"]);
                                                    if (typeName4 == "TabularTranslator")
                                                    {
                                                        TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                        
                                                        JToken columnMappingsValue = translatorValue["columnMappings"];
                                                        if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                        {
                                                            string columnMappingsInstance = ((string)columnMappingsValue);
                                                            tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                        }
                                                        transformationInstance.Translator = tabularTranslatorInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue2 = activitiesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                copyActivityInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken descriptionValue2 = activitiesValue["description"];
                                            if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance2 = ((string)descriptionValue2);
                                                copyActivityInstance.Description = descriptionInstance2;
                                            }
                                            
                                            JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                            }
                                            
                                            JToken policyValue = activitiesValue["policy"];
                                            if (policyValue != null && policyValue.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance = new ActivityPolicy();
                                                copyActivityInstance.Policy = policyInstance;
                                                
                                                JToken timeoutValue = policyValue["timeout"];
                                                if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                    policyInstance.Timeout = timeoutInstance;
                                                }
                                                
                                                JToken delayValue = policyValue["delay"];
                                                if (delayValue != null && delayValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                    policyInstance.Delay = delayInstance;
                                                }
                                                
                                                JToken concurrencyValue = policyValue["concurrency"];
                                                if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance = ((uint)concurrencyValue);
                                                    policyInstance.Concurrency = concurrencyInstance;
                                                }
                                                
                                                JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                                if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                    policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                                }
                                                
                                                JToken retryValue = policyValue["retry"];
                                                if (retryValue != null && retryValue.Type != JTokenType.Null)
                                                {
                                                    int retryInstance = ((int)retryValue);
                                                    policyInstance.Retry = retryInstance;
                                                }
                                                
                                                JToken longRetryValue = policyValue["longRetry"];
                                                if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance = ((int)longRetryValue);
                                                    policyInstance.LongRetry = longRetryInstance;
                                                }
                                                
                                                JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                                if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                    policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                                }
                                            }
                                            
                                            JToken inputsArray = activitiesValue["inputs"];
                                            if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue in ((JArray)inputsArray))
                                                {
                                                    ActivityInput activityInputInstance = new ActivityInput();
                                                    copyActivityInstance.Inputs.Add(activityInputInstance);
                                                    
                                                    JToken startTimeValue = inputsValue["startTime"];
                                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance = ((string)startTimeValue);
                                                        activityInputInstance.StartTime = startTimeInstance;
                                                    }
                                                    
                                                    JToken endTimeValue = inputsValue["endTime"];
                                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance = ((string)endTimeValue);
                                                        activityInputInstance.EndTime = endTimeInstance;
                                                    }
                                                    
                                                    JToken lengthValue = inputsValue["length"];
                                                    if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                        activityInputInstance.Length = lengthInstance;
                                                    }
                                                    
                                                    JToken nameValue3 = inputsValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        activityInputInstance.Name = nameInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray = activitiesValue["outputs"];
                                            if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue in ((JArray)outputsArray))
                                                {
                                                    ActivityOutput activityOutputInstance = new ActivityOutput();
                                                    copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                    
                                                    JToken nameValue4 = outputsValue["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        activityOutputInstance.Name = nameInstance4;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(copyActivityInstance);
                                        }
                                        if (typeName == "HDInsightActivity")
                                        {
                                            HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                            
                                            JToken transformationValue2 = activitiesValue["transformation"];
                                            if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                                            {
                                                string typeName5 = ((string)transformationValue2["type"]);
                                                if (typeName5 == "Hive")
                                                {
                                                    Hive hiveInstance = new Hive();
                                                    
                                                    JToken scriptValue = transformationValue2["script"];
                                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance = ((string)scriptValue);
                                                        hiveInstance.Script = scriptInstance;
                                                    }
                                                    
                                                    JToken scriptPathValue = transformationValue2["scriptPath"];
                                                    if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptPathInstance = ((string)scriptPathValue);
                                                        hiveInstance.ScriptPath = scriptPathInstance;
                                                    }
                                                    
                                                    JToken scriptLinkedServiceValue = transformationValue2["scriptLinkedService"];
                                                    if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                        hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken definesSequenceElement = ((JToken)transformationValue2["defines"]);
                                                    if (definesSequenceElement != null && definesSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property2 in definesSequenceElement)
                                                        {
                                                            string definesKey = ((string)property2.Name);
                                                            string definesValue = ((string)property2.Value);
                                                            hiveInstance.Defines.Add(definesKey, definesValue);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property3 in extendedPropertiesSequenceElement)
                                                        {
                                                            string extendedPropertiesKey = ((string)property3.Name);
                                                            string extendedPropertiesValue = ((string)property3.Value);
                                                            hiveInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray != null && storageLinkedServicesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray))
                                                        {
                                                            hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray = transformationValue2["arguments"];
                                                    if (argumentsArray != null && argumentsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue in ((JArray)argumentsArray))
                                                        {
                                                            hiveInstance.Arguments.Add(((string)argumentsValue));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = hiveInstance;
                                                }
                                                if (typeName5 == "Pig")
                                                {
                                                    Pig pigInstance = new Pig();
                                                    
                                                    JToken scriptValue2 = transformationValue2["script"];
                                                    if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance2 = ((string)scriptValue2);
                                                        pigInstance.Script = scriptInstance2;
                                                    }
                                                    
                                                    JToken scriptPathValue2 = transformationValue2["scriptPath"];
                                                    if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptPathInstance2 = ((string)scriptPathValue2);
                                                        pigInstance.ScriptPath = scriptPathInstance2;
                                                    }
                                                    
                                                    JToken scriptLinkedServiceValue2 = transformationValue2["scriptLinkedService"];
                                                    if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                        pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property4 in extendedPropertiesSequenceElement2)
                                                        {
                                                            string extendedPropertiesKey2 = ((string)property4.Name);
                                                            string extendedPropertiesValue2 = ((string)property4.Value);
                                                            pigInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray2 = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray2 != null && storageLinkedServicesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray2))
                                                        {
                                                            pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray2 = transformationValue2["arguments"];
                                                    if (argumentsArray2 != null && argumentsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue2 in ((JArray)argumentsArray2))
                                                        {
                                                            pigInstance.Arguments.Add(((string)argumentsValue2));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = pigInstance;
                                                }
                                                if (typeName5 == "MapReduce")
                                                {
                                                    MapReduce mapReduceInstance = new MapReduce();
                                                    
                                                    JToken classNameValue = transformationValue2["className"];
                                                    if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                    {
                                                        string classNameInstance = ((string)classNameValue);
                                                        mapReduceInstance.ClassName = classNameInstance;
                                                    }
                                                    
                                                    JToken jarFilePathValue = transformationValue2["jarFilePath"];
                                                    if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                    {
                                                        string jarFilePathInstance = ((string)jarFilePathValue);
                                                        mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                    }
                                                    
                                                    JToken jarLinkedServiceValue = transformationValue2["jarLinkedService"];
                                                    if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                        mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken jarLibsArray = transformationValue2["jarLibs"];
                                                    if (jarLibsArray != null && jarLibsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken jarLibsValue in ((JArray)jarLibsArray))
                                                        {
                                                            mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                        }
                                                    }
                                                    
                                                    JToken definesSequenceElement2 = ((JToken)transformationValue2["defines"]);
                                                    if (definesSequenceElement2 != null && definesSequenceElement2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property5 in definesSequenceElement2)
                                                        {
                                                            string definesKey2 = ((string)property5.Name);
                                                            string definesValue2 = ((string)property5.Value);
                                                            mapReduceInstance.Defines.Add(definesKey2, definesValue2);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property6 in extendedPropertiesSequenceElement3)
                                                        {
                                                            string extendedPropertiesKey3 = ((string)property6.Name);
                                                            string extendedPropertiesValue3 = ((string)property6.Value);
                                                            mapReduceInstance.ExtendedProperties.Add(extendedPropertiesKey3, extendedPropertiesValue3);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray3 = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray3 != null && storageLinkedServicesArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray3))
                                                        {
                                                            mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray3 = transformationValue2["arguments"];
                                                    if (argumentsArray3 != null && argumentsArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue3 in ((JArray)argumentsArray3))
                                                        {
                                                            mapReduceInstance.Arguments.Add(((string)argumentsValue3));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = mapReduceInstance;
                                                }
                                                if (typeName5 == "Streaming")
                                                {
                                                    Streaming streamingInstance = new Streaming();
                                                    
                                                    JToken mapperValue = transformationValue2["mapper"];
                                                    if (mapperValue != null && mapperValue.Type != JTokenType.Null)
                                                    {
                                                        string mapperInstance = ((string)mapperValue);
                                                        streamingInstance.Mapper = mapperInstance;
                                                    }
                                                    
                                                    JToken reducerValue = transformationValue2["reducer"];
                                                    if (reducerValue != null && reducerValue.Type != JTokenType.Null)
                                                    {
                                                        string reducerInstance = ((string)reducerValue);
                                                        streamingInstance.Reducer = reducerInstance;
                                                    }
                                                    
                                                    JToken inputValue = transformationValue2["input"];
                                                    if (inputValue != null && inputValue.Type != JTokenType.Null)
                                                    {
                                                        string inputInstance = ((string)inputValue);
                                                        streamingInstance.Input = inputInstance;
                                                    }
                                                    
                                                    JToken outputValue = transformationValue2["output"];
                                                    if (outputValue != null && outputValue.Type != JTokenType.Null)
                                                    {
                                                        string outputInstance = ((string)outputValue);
                                                        streamingInstance.Output = outputInstance;
                                                    }
                                                    
                                                    JToken filePathsArray = transformationValue2["filePaths"];
                                                    if (filePathsArray != null && filePathsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken filePathsValue in ((JArray)filePathsArray))
                                                        {
                                                            streamingInstance.FilePaths.Add(((string)filePathsValue));
                                                        }
                                                    }
                                                    
                                                    JToken fileLinkedServiceValue = transformationValue2["fileLinkedService"];
                                                    if (fileLinkedServiceValue != null && fileLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string fileLinkedServiceInstance = ((string)fileLinkedServiceValue);
                                                        streamingInstance.FileLinkedService = fileLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken combinerValue = transformationValue2["combiner"];
                                                    if (combinerValue != null && combinerValue.Type != JTokenType.Null)
                                                    {
                                                        string combinerInstance = ((string)combinerValue);
                                                        streamingInstance.Combiner = combinerInstance;
                                                    }
                                                    
                                                    JToken commandEnvironmentArray = transformationValue2["commandEnvironment"];
                                                    if (commandEnvironmentArray != null && commandEnvironmentArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken commandEnvironmentValue in ((JArray)commandEnvironmentArray))
                                                        {
                                                            streamingInstance.CommandEnvironment.Add(((string)commandEnvironmentValue));
                                                        }
                                                    }
                                                    
                                                    JToken definesSequenceElement3 = ((JToken)transformationValue2["defines"]);
                                                    if (definesSequenceElement3 != null && definesSequenceElement3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property7 in definesSequenceElement3)
                                                        {
                                                            string definesKey3 = ((string)property7.Name);
                                                            string definesValue3 = ((string)property7.Value);
                                                            streamingInstance.Defines.Add(definesKey3, definesValue3);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement4 = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement4 != null && extendedPropertiesSequenceElement4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property8 in extendedPropertiesSequenceElement4)
                                                        {
                                                            string extendedPropertiesKey4 = ((string)property8.Name);
                                                            string extendedPropertiesValue4 = ((string)property8.Value);
                                                            streamingInstance.ExtendedProperties.Add(extendedPropertiesKey4, extendedPropertiesValue4);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray4 = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray4 != null && storageLinkedServicesArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue4 in ((JArray)storageLinkedServicesArray4))
                                                        {
                                                            streamingInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue4));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray4 = transformationValue2["arguments"];
                                                    if (argumentsArray4 != null && argumentsArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue4 in ((JArray)argumentsArray4))
                                                        {
                                                            streamingInstance.Arguments.Add(((string)argumentsValue4));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = streamingInstance;
                                                }
                                            }
                                            
                                            JToken nameValue5 = activitiesValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                hDInsightActivityInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken descriptionValue3 = activitiesValue["description"];
                                            if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance3 = ((string)descriptionValue3);
                                                hDInsightActivityInstance.Description = descriptionInstance3;
                                            }
                                            
                                            JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                            }
                                            
                                            JToken policyValue2 = activitiesValue["policy"];
                                            if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance2 = new ActivityPolicy();
                                                hDInsightActivityInstance.Policy = policyInstance2;
                                                
                                                JToken timeoutValue2 = policyValue2["timeout"];
                                                if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.Timeout = timeoutInstance2;
                                                }
                                                
                                                JToken delayValue2 = policyValue2["delay"];
                                                if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.Delay = delayInstance2;
                                                }
                                                
                                                JToken concurrencyValue2 = policyValue2["concurrency"];
                                                if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                    policyInstance2.Concurrency = concurrencyInstance2;
                                                }
                                                
                                                JToken executionPriorityOrderValue2 = policyValue2["executionPriorityOrder"];
                                                if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                    policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                                }
                                                
                                                JToken retryValue2 = policyValue2["retry"];
                                                if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                                {
                                                    int retryInstance2 = ((int)retryValue2);
                                                    policyInstance2.Retry = retryInstance2;
                                                }
                                                
                                                JToken longRetryValue2 = policyValue2["longRetry"];
                                                if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance2 = ((int)longRetryValue2);
                                                    policyInstance2.LongRetry = longRetryInstance2;
                                                }
                                                
                                                JToken longRetryIntervalValue2 = policyValue2["longRetryInterval"];
                                                if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                                }
                                            }
                                            
                                            JToken inputsArray2 = activitiesValue["inputs"];
                                            if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                                {
                                                    ActivityInput activityInputInstance2 = new ActivityInput();
                                                    hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                    
                                                    JToken startTimeValue2 = inputsValue2["startTime"];
                                                    if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance2 = ((string)startTimeValue2);
                                                        activityInputInstance2.StartTime = startTimeInstance2;
                                                    }
                                                    
                                                    JToken endTimeValue2 = inputsValue2["endTime"];
                                                    if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance2 = ((string)endTimeValue2);
                                                        activityInputInstance2.EndTime = endTimeInstance2;
                                                    }
                                                    
                                                    JToken lengthValue2 = inputsValue2["length"];
                                                    if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                        activityInputInstance2.Length = lengthInstance2;
                                                    }
                                                    
                                                    JToken nameValue6 = inputsValue2["name"];
                                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance6 = ((string)nameValue6);
                                                        activityInputInstance2.Name = nameInstance6;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray2 = activitiesValue["outputs"];
                                            if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue2 in ((JArray)outputsArray2))
                                                {
                                                    ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                    hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                    
                                                    JToken nameValue7 = outputsValue2["name"];
                                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance7 = ((string)nameValue7);
                                                        activityOutputInstance2.Name = nameInstance7;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                        }
                                        if (typeName == "DotNetActivity")
                                        {
                                            DotNetActivity dotNetActivityInstance = new DotNetActivity();
                                            
                                            JToken transformationValue3 = activitiesValue["transformation"];
                                            if (transformationValue3 != null && transformationValue3.Type != JTokenType.Null)
                                            {
                                                DotNetActivityProperties transformationInstance2 = new DotNetActivityProperties();
                                                dotNetActivityInstance.Transformation = transformationInstance2;
                                                
                                                JToken assemblyNameValue = transformationValue3["assemblyName"];
                                                if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                                {
                                                    string assemblyNameInstance = ((string)assemblyNameValue);
                                                    transformationInstance2.AssemblyName = assemblyNameInstance;
                                                }
                                                
                                                JToken entryPointValue = transformationValue3["entryPoint"];
                                                if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                                {
                                                    string entryPointInstance = ((string)entryPointValue);
                                                    transformationInstance2.EntryPoint = entryPointInstance;
                                                }
                                                
                                                JToken packageLinkedServiceValue = transformationValue3["packageLinkedService"];
                                                if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                    transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                                }
                                                
                                                JToken packageFileValue = transformationValue3["packageFile"];
                                                if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                                {
                                                    string packageFileInstance = ((string)packageFileValue);
                                                    transformationInstance2.PackageFile = packageFileInstance;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement5 = ((JToken)transformationValue3["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement5 != null && extendedPropertiesSequenceElement5.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property9 in extendedPropertiesSequenceElement5)
                                                    {
                                                        string extendedPropertiesKey5 = ((string)property9.Name);
                                                        string extendedPropertiesValue5 = ((string)property9.Value);
                                                        transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey5, extendedPropertiesValue5);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue8 = activitiesValue["name"];
                                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                            {
                                                string nameInstance8 = ((string)nameValue8);
                                                dotNetActivityInstance.Name = nameInstance8;
                                            }
                                            
                                            JToken descriptionValue4 = activitiesValue["description"];
                                            if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance4 = ((string)descriptionValue4);
                                                dotNetActivityInstance.Description = descriptionInstance4;
                                            }
                                            
                                            JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                dotNetActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                            }
                                            
                                            JToken policyValue3 = activitiesValue["policy"];
                                            if (policyValue3 != null && policyValue3.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance3 = new ActivityPolicy();
                                                dotNetActivityInstance.Policy = policyInstance3;
                                                
                                                JToken timeoutValue3 = policyValue3["timeout"];
                                                if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.Timeout = timeoutInstance3;
                                                }
                                                
                                                JToken delayValue3 = policyValue3["delay"];
                                                if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.Delay = delayInstance3;
                                                }
                                                
                                                JToken concurrencyValue3 = policyValue3["concurrency"];
                                                if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                    policyInstance3.Concurrency = concurrencyInstance3;
                                                }
                                                
                                                JToken executionPriorityOrderValue3 = policyValue3["executionPriorityOrder"];
                                                if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                    policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                                }
                                                
                                                JToken retryValue3 = policyValue3["retry"];
                                                if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                                {
                                                    int retryInstance3 = ((int)retryValue3);
                                                    policyInstance3.Retry = retryInstance3;
                                                }
                                                
                                                JToken longRetryValue3 = policyValue3["longRetry"];
                                                if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance3 = ((int)longRetryValue3);
                                                    policyInstance3.LongRetry = longRetryInstance3;
                                                }
                                                
                                                JToken longRetryIntervalValue3 = policyValue3["longRetryInterval"];
                                                if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                                }
                                            }
                                            
                                            JToken inputsArray3 = activitiesValue["inputs"];
                                            if (inputsArray3 != null && inputsArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue3 in ((JArray)inputsArray3))
                                                {
                                                    ActivityInput activityInputInstance3 = new ActivityInput();
                                                    dotNetActivityInstance.Inputs.Add(activityInputInstance3);
                                                    
                                                    JToken startTimeValue3 = inputsValue3["startTime"];
                                                    if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance3 = ((string)startTimeValue3);
                                                        activityInputInstance3.StartTime = startTimeInstance3;
                                                    }
                                                    
                                                    JToken endTimeValue3 = inputsValue3["endTime"];
                                                    if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance3 = ((string)endTimeValue3);
                                                        activityInputInstance3.EndTime = endTimeInstance3;
                                                    }
                                                    
                                                    JToken lengthValue3 = inputsValue3["length"];
                                                    if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                        activityInputInstance3.Length = lengthInstance3;
                                                    }
                                                    
                                                    JToken nameValue9 = inputsValue3["name"];
                                                    if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance9 = ((string)nameValue9);
                                                        activityInputInstance3.Name = nameInstance9;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray3 = activitiesValue["outputs"];
                                            if (outputsArray3 != null && outputsArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue3 in ((JArray)outputsArray3))
                                                {
                                                    ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                    dotNetActivityInstance.Outputs.Add(activityOutputInstance3);
                                                    
                                                    JToken nameValue10 = outputsValue3["name"];
                                                    if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance10 = ((string)nameValue10);
                                                        activityOutputInstance3.Name = nameInstance10;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(dotNetActivityInstance);
                                        }
                                        if (typeName == "StoredProcedureActivity")
                                        {
                                            StoredProcedureActivity storedProcedureActivityInstance = new StoredProcedureActivity();
                                            
                                            JToken transformationValue4 = activitiesValue["transformation"];
                                            if (transformationValue4 != null && transformationValue4.Type != JTokenType.Null)
                                            {
                                                StoredProcedureActivityProperties transformationInstance3 = new StoredProcedureActivityProperties();
                                                storedProcedureActivityInstance.Transformation = transformationInstance3;
                                                
                                                JToken storedProcedureNameValue = transformationValue4["storedProcedureName"];
                                                if (storedProcedureNameValue != null && storedProcedureNameValue.Type != JTokenType.Null)
                                                {
                                                    string storedProcedureNameInstance = ((string)storedProcedureNameValue);
                                                    transformationInstance3.StoredProcedureName = storedProcedureNameInstance;
                                                }
                                                
                                                JToken storedProcedureParametersSequenceElement2 = ((JToken)transformationValue4["storedProcedureParameters"]);
                                                if (storedProcedureParametersSequenceElement2 != null && storedProcedureParametersSequenceElement2.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property10 in storedProcedureParametersSequenceElement2)
                                                    {
                                                        string storedProcedureParametersKey2 = ((string)property10.Name);
                                                        string storedProcedureParametersValue = ((string)property10.Value);
                                                        transformationInstance3.StoredProcedureActivityParameters.Add(storedProcedureParametersKey2, storedProcedureParametersValue);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue11 = activitiesValue["name"];
                                            if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                            {
                                                string nameInstance11 = ((string)nameValue11);
                                                storedProcedureActivityInstance.Name = nameInstance11;
                                            }
                                            
                                            JToken descriptionValue5 = activitiesValue["description"];
                                            if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance5 = ((string)descriptionValue5);
                                                storedProcedureActivityInstance.Description = descriptionInstance5;
                                            }
                                            
                                            JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                storedProcedureActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                            }
                                            
                                            JToken policyValue4 = activitiesValue["policy"];
                                            if (policyValue4 != null && policyValue4.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance4 = new ActivityPolicy();
                                                storedProcedureActivityInstance.Policy = policyInstance4;
                                                
                                                JToken timeoutValue4 = policyValue4["timeout"];
                                                if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.Timeout = timeoutInstance4;
                                                }
                                                
                                                JToken delayValue4 = policyValue4["delay"];
                                                if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.Delay = delayInstance4;
                                                }
                                                
                                                JToken concurrencyValue4 = policyValue4["concurrency"];
                                                if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                    policyInstance4.Concurrency = concurrencyInstance4;
                                                }
                                                
                                                JToken executionPriorityOrderValue4 = policyValue4["executionPriorityOrder"];
                                                if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                    policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                                }
                                                
                                                JToken retryValue4 = policyValue4["retry"];
                                                if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                                {
                                                    int retryInstance4 = ((int)retryValue4);
                                                    policyInstance4.Retry = retryInstance4;
                                                }
                                                
                                                JToken longRetryValue4 = policyValue4["longRetry"];
                                                if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance4 = ((int)longRetryValue4);
                                                    policyInstance4.LongRetry = longRetryInstance4;
                                                }
                                                
                                                JToken longRetryIntervalValue4 = policyValue4["longRetryInterval"];
                                                if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                                }
                                            }
                                            
                                            JToken inputsArray4 = activitiesValue["inputs"];
                                            if (inputsArray4 != null && inputsArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue4 in ((JArray)inputsArray4))
                                                {
                                                    ActivityInput activityInputInstance4 = new ActivityInput();
                                                    storedProcedureActivityInstance.Inputs.Add(activityInputInstance4);
                                                    
                                                    JToken startTimeValue4 = inputsValue4["startTime"];
                                                    if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance4 = ((string)startTimeValue4);
                                                        activityInputInstance4.StartTime = startTimeInstance4;
                                                    }
                                                    
                                                    JToken endTimeValue4 = inputsValue4["endTime"];
                                                    if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance4 = ((string)endTimeValue4);
                                                        activityInputInstance4.EndTime = endTimeInstance4;
                                                    }
                                                    
                                                    JToken lengthValue4 = inputsValue4["length"];
                                                    if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                        activityInputInstance4.Length = lengthInstance4;
                                                    }
                                                    
                                                    JToken nameValue12 = inputsValue4["name"];
                                                    if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance12 = ((string)nameValue12);
                                                        activityInputInstance4.Name = nameInstance12;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray4 = activitiesValue["outputs"];
                                            if (outputsArray4 != null && outputsArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue4 in ((JArray)outputsArray4))
                                                {
                                                    ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                    storedProcedureActivityInstance.Outputs.Add(activityOutputInstance4);
                                                    
                                                    JToken nameValue13 = outputsValue4["name"];
                                                    if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance13 = ((string)nameValue13);
                                                        activityOutputInstance4.Name = nameInstance13;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(storedProcedureActivityInstance);
                                        }
                                        if (typeName == "AzureMLBatchScoringActivity")
                                        {
                                            AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                            
                                            JToken transformationValue5 = activitiesValue["transformation"];
                                            if (transformationValue5 != null && transformationValue5.Type != JTokenType.Null)
                                            {
                                                AzureMLActivityProperties transformationInstance4 = new AzureMLActivityProperties();
                                                azureMLBatchScoringActivityInstance.Transformation = transformationInstance4;
                                                
                                                JToken webServiceParametersSequenceElement = ((JToken)transformationValue5["webServiceParameters"]);
                                                if (webServiceParametersSequenceElement != null && webServiceParametersSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property11 in webServiceParametersSequenceElement)
                                                    {
                                                        string webServiceParametersKey = ((string)property11.Name);
                                                        string webServiceParametersValue = ((string)property11.Value);
                                                        transformationInstance4.WebServiceParameters.Add(webServiceParametersKey, webServiceParametersValue);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue14 = activitiesValue["name"];
                                            if (nameValue14 != null && nameValue14.Type != JTokenType.Null)
                                            {
                                                string nameInstance14 = ((string)nameValue14);
                                                azureMLBatchScoringActivityInstance.Name = nameInstance14;
                                            }
                                            
                                            JToken descriptionValue6 = activitiesValue["description"];
                                            if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance6 = ((string)descriptionValue6);
                                                azureMLBatchScoringActivityInstance.Description = descriptionInstance6;
                                            }
                                            
                                            JToken linkedServiceNameValue5 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance5;
                                            }
                                            
                                            JToken policyValue5 = activitiesValue["policy"];
                                            if (policyValue5 != null && policyValue5.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance5 = new ActivityPolicy();
                                                azureMLBatchScoringActivityInstance.Policy = policyInstance5;
                                                
                                                JToken timeoutValue5 = policyValue5["timeout"];
                                                if (timeoutValue5 != null && timeoutValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance5 = TimeSpan.Parse(((string)timeoutValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.Timeout = timeoutInstance5;
                                                }
                                                
                                                JToken delayValue5 = policyValue5["delay"];
                                                if (delayValue5 != null && delayValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance5 = TimeSpan.Parse(((string)delayValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.Delay = delayInstance5;
                                                }
                                                
                                                JToken concurrencyValue5 = policyValue5["concurrency"];
                                                if (concurrencyValue5 != null && concurrencyValue5.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance5 = ((uint)concurrencyValue5);
                                                    policyInstance5.Concurrency = concurrencyInstance5;
                                                }
                                                
                                                JToken executionPriorityOrderValue5 = policyValue5["executionPriorityOrder"];
                                                if (executionPriorityOrderValue5 != null && executionPriorityOrderValue5.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance5 = ((string)executionPriorityOrderValue5);
                                                    policyInstance5.ExecutionPriorityOrder = executionPriorityOrderInstance5;
                                                }
                                                
                                                JToken retryValue5 = policyValue5["retry"];
                                                if (retryValue5 != null && retryValue5.Type != JTokenType.Null)
                                                {
                                                    int retryInstance5 = ((int)retryValue5);
                                                    policyInstance5.Retry = retryInstance5;
                                                }
                                                
                                                JToken longRetryValue5 = policyValue5["longRetry"];
                                                if (longRetryValue5 != null && longRetryValue5.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance5 = ((int)longRetryValue5);
                                                    policyInstance5.LongRetry = longRetryInstance5;
                                                }
                                                
                                                JToken longRetryIntervalValue5 = policyValue5["longRetryInterval"];
                                                if (longRetryIntervalValue5 != null && longRetryIntervalValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance5 = TimeSpan.Parse(((string)longRetryIntervalValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.LongRetryInterval = longRetryIntervalInstance5;
                                                }
                                            }
                                            
                                            JToken inputsArray5 = activitiesValue["inputs"];
                                            if (inputsArray5 != null && inputsArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue5 in ((JArray)inputsArray5))
                                                {
                                                    ActivityInput activityInputInstance5 = new ActivityInput();
                                                    azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance5);
                                                    
                                                    JToken startTimeValue5 = inputsValue5["startTime"];
                                                    if (startTimeValue5 != null && startTimeValue5.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance5 = ((string)startTimeValue5);
                                                        activityInputInstance5.StartTime = startTimeInstance5;
                                                    }
                                                    
                                                    JToken endTimeValue5 = inputsValue5["endTime"];
                                                    if (endTimeValue5 != null && endTimeValue5.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance5 = ((string)endTimeValue5);
                                                        activityInputInstance5.EndTime = endTimeInstance5;
                                                    }
                                                    
                                                    JToken lengthValue5 = inputsValue5["length"];
                                                    if (lengthValue5 != null && lengthValue5.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance5 = TimeSpan.Parse(((string)lengthValue5), CultureInfo.InvariantCulture);
                                                        activityInputInstance5.Length = lengthInstance5;
                                                    }
                                                    
                                                    JToken nameValue15 = inputsValue5["name"];
                                                    if (nameValue15 != null && nameValue15.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance15 = ((string)nameValue15);
                                                        activityInputInstance5.Name = nameInstance15;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray5 = activitiesValue["outputs"];
                                            if (outputsArray5 != null && outputsArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue5 in ((JArray)outputsArray5))
                                                {
                                                    ActivityOutput activityOutputInstance5 = new ActivityOutput();
                                                    azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance5);
                                                    
                                                    JToken nameValue16 = outputsValue5["name"];
                                                    if (nameValue16 != null && nameValue16.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance16 = ((string)nameValue16);
                                                        activityOutputInstance5.Name = nameInstance16;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                        }
                                    }
                                }
                                
                                JToken startValue = propertiesValue["start"];
                                if (startValue != null && startValue.Type != JTokenType.Null)
                                {
                                    DateTime startInstance = ((DateTime)startValue);
                                    propertiesInstance.Start = startInstance;
                                }
                                
                                JToken endValue = propertiesValue["end"];
                                if (endValue != null && endValue.Type != JTokenType.Null)
                                {
                                    DateTime endInstance = ((DateTime)endValue);
                                    propertiesInstance.End = endInstance;
                                }
                                
                                JToken isPausedValue = propertiesValue["isPaused"];
                                if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                {
                                    bool isPausedInstance = ((bool)isPausedValue);
                                    propertiesInstance.IsPaused = isPausedInstance;
                                }
                                
                                JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                {
                                    PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                    propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                    
                                    JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                    if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                        runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    propertiesInstance.HubName = hubNameInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeleteAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create or update a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, PipelineCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            PipelineCreateOrUpdateResponse response = await client.Pipelines.BeginCreateOrUpdateAsync(resourceGroupName, dataFactoryName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            PipelineCreateOrUpdateResponse result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Create a new pipeline instance with raw json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. A unique pipeline instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, PipelineCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            PipelineCreateOrUpdateResponse response = await client.Pipelines.BeginCreateOrUpdateWithRawJsonContentAsync(resourceGroupName, dataFactoryName, dataPipelineName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            PipelineCreateOrUpdateResponse result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Pipelines.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Delete a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Pipelines.BeginDeleteAsync(resourceGroupName, dataFactoryName, dataPipelineName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Gets a pipeline instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get pipeline operation response.
        /// </returns>
        public async Task<PipelineGetResponse> GetAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Pipeline pipelineInstance = new Pipeline();
                            result.Pipeline = pipelineInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                pipelineInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                PipelineProperties propertiesInstance = new PipelineProperties();
                                pipelineInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken activitiesArray = propertiesValue["activities"];
                                if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                    {
                                        string typeName = ((string)activitiesValue["type"]);
                                        if (typeName == "CopyActivity")
                                        {
                                            CopyActivity copyActivityInstance = new CopyActivity();
                                            
                                            JToken transformationValue = activitiesValue["transformation"];
                                            if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                            {
                                                CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                                copyActivityInstance.Transformation = transformationInstance;
                                                
                                                JToken sourceValue = transformationValue["source"];
                                                if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)sourceValue["type"]);
                                                    if (typeName2 == "AzureTableSource")
                                                    {
                                                        AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                        
                                                        JToken azureTableSourceQueryValue = sourceValue["azureTableSourceQuery"];
                                                        if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                            azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                        }
                                                        
                                                        JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue["azureTableSourceIgnoreTableNotFound"];
                                                        if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                        {
                                                            bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                            azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                            azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                            azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                        }
                                                        transformationInstance.Source = azureTableSourceInstance;
                                                    }
                                                    if (typeName2 == "BlobSource")
                                                    {
                                                        BlobSource blobSourceInstance = new BlobSource();
                                                        
                                                        JToken blobColumnSeparatorsValue = sourceValue["blobColumnSeparators"];
                                                        if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                        {
                                                            string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                            blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                        }
                                                        
                                                        JToken treatEmptyAsNullValue = sourceValue["treatEmptyAsNull"];
                                                        if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                        {
                                                            bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                            blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                        }
                                                        
                                                        JToken nullValuesValue = sourceValue["nullValues"];
                                                        if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                        {
                                                            string nullValuesInstance = ((string)nullValuesValue);
                                                            blobSourceInstance.NullValues = nullValuesInstance;
                                                        }
                                                        
                                                        JToken skipHeaderLineCountValue = sourceValue["skipHeaderLineCount"];
                                                        if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                        {
                                                            int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                            blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue2 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                            blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue2 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                            blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                        }
                                                        transformationInstance.Source = blobSourceInstance;
                                                    }
                                                    if (typeName2 == "DocumentDbCollectionSource")
                                                    {
                                                        DocumentDbCollectionSource documentDbCollectionSourceInstance = new DocumentDbCollectionSource();
                                                        
                                                        JToken queryValue = sourceValue["query"];
                                                        if (queryValue != null && queryValue.Type != JTokenType.Null)
                                                        {
                                                            string queryInstance = ((string)queryValue);
                                                            documentDbCollectionSourceInstance.Query = queryInstance;
                                                        }
                                                        
                                                        JToken nestingSeparatorValue = sourceValue["nestingSeparator"];
                                                        if (nestingSeparatorValue != null && nestingSeparatorValue.Type != JTokenType.Null)
                                                        {
                                                            string nestingSeparatorInstance = ((string)nestingSeparatorValue);
                                                            documentDbCollectionSourceInstance.NestingSeparator = nestingSeparatorInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue3 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                            documentDbCollectionSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue3 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                        }
                                                        transformationInstance.Source = documentDbCollectionSourceInstance;
                                                    }
                                                    if (typeName2 == "RelationalSource")
                                                    {
                                                        RelationalSource relationalSourceInstance = new RelationalSource();
                                                        
                                                        JToken queryValue2 = sourceValue["query"];
                                                        if (queryValue2 != null && queryValue2.Type != JTokenType.Null)
                                                        {
                                                            string queryInstance2 = ((string)queryValue2);
                                                            relationalSourceInstance.Query = queryInstance2;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue4 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue4 != null && sourceRetryCountValue4.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance4 = ((int)sourceRetryCountValue4);
                                                            relationalSourceInstance.SourceRetryCount = sourceRetryCountInstance4;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue4 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue4 != null && sourceRetryWaitValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance4 = TimeSpan.Parse(((string)sourceRetryWaitValue4), CultureInfo.InvariantCulture);
                                                            relationalSourceInstance.SourceRetryWait = sourceRetryWaitInstance4;
                                                        }
                                                        transformationInstance.Source = relationalSourceInstance;
                                                    }
                                                    if (typeName2 == "OdbcSource")
                                                    {
                                                        RelationalSource.OdbcSource odbcSourceInstance = new RelationalSource.OdbcSource();
                                                        
                                                        JToken odbcReaderQueryValue = sourceValue["odbcReaderQuery"];
                                                        if (odbcReaderQueryValue != null && odbcReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string odbcReaderQueryInstance = ((string)odbcReaderQueryValue);
                                                            odbcSourceInstance.OdbcReaderQuery = odbcReaderQueryInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue5 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue5 != null && sourceRetryCountValue5.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance5 = ((int)sourceRetryCountValue5);
                                                            odbcSourceInstance.SourceRetryCount = sourceRetryCountInstance5;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue5 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue5 != null && sourceRetryWaitValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance5 = TimeSpan.Parse(((string)sourceRetryWaitValue5), CultureInfo.InvariantCulture);
                                                            odbcSourceInstance.SourceRetryWait = sourceRetryWaitInstance5;
                                                        }
                                                        transformationInstance.Source = odbcSourceInstance;
                                                    }
                                                    if (typeName2 == "ODataSource")
                                                    {
                                                        RelationalSource.ODataSource oDataSourceInstance = new RelationalSource.ODataSource();
                                                        
                                                        JToken sourceRetryCountValue6 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue6 != null && sourceRetryCountValue6.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance6 = ((int)sourceRetryCountValue6);
                                                            oDataSourceInstance.SourceRetryCount = sourceRetryCountInstance6;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue6 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue6 != null && sourceRetryWaitValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance6 = TimeSpan.Parse(((string)sourceRetryWaitValue6), CultureInfo.InvariantCulture);
                                                            oDataSourceInstance.SourceRetryWait = sourceRetryWaitInstance6;
                                                        }
                                                        transformationInstance.Source = oDataSourceInstance;
                                                    }
                                                    if (typeName2 == "HdfsSource")
                                                    {
                                                        RelationalSource.HdfsSource hdfsSourceInstance = new RelationalSource.HdfsSource();
                                                        
                                                        JToken sourceRetryCountValue7 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue7 != null && sourceRetryCountValue7.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance7 = ((int)sourceRetryCountValue7);
                                                            hdfsSourceInstance.SourceRetryCount = sourceRetryCountInstance7;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue7 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue7 != null && sourceRetryWaitValue7.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance7 = TimeSpan.Parse(((string)sourceRetryWaitValue7), CultureInfo.InvariantCulture);
                                                            hdfsSourceInstance.SourceRetryWait = sourceRetryWaitInstance7;
                                                        }
                                                        transformationInstance.Source = hdfsSourceInstance;
                                                    }
                                                    if (typeName2 == "SqlSource")
                                                    {
                                                        SqlSource sqlSourceInstance = new SqlSource();
                                                        
                                                        JToken sqlReaderQueryValue = sourceValue["sqlReaderQuery"];
                                                        if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                            sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue8 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue8 != null && sourceRetryCountValue8.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance8 = ((int)sourceRetryCountValue8);
                                                            sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance8;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue8 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue8 != null && sourceRetryWaitValue8.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance8 = TimeSpan.Parse(((string)sourceRetryWaitValue8), CultureInfo.InvariantCulture);
                                                            sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance8;
                                                        }
                                                        transformationInstance.Source = sqlSourceInstance;
                                                    }
                                                    if (typeName2 == "FileSystemSource")
                                                    {
                                                        FileSystemSource fileSystemSourceInstance = new FileSystemSource();
                                                        
                                                        JToken sourceRetryCountValue9 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue9 != null && sourceRetryCountValue9.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance9 = ((int)sourceRetryCountValue9);
                                                            fileSystemSourceInstance.SourceRetryCount = sourceRetryCountInstance9;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue9 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue9 != null && sourceRetryWaitValue9.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance9 = TimeSpan.Parse(((string)sourceRetryWaitValue9), CultureInfo.InvariantCulture);
                                                            fileSystemSourceInstance.SourceRetryWait = sourceRetryWaitInstance9;
                                                        }
                                                        transformationInstance.Source = fileSystemSourceInstance;
                                                    }
                                                    if (typeName2 == "OracleSource")
                                                    {
                                                        OracleSource oracleSourceInstance = new OracleSource();
                                                        
                                                        JToken oracleReaderQueryValue = sourceValue["oracleReaderQuery"];
                                                        if (oracleReaderQueryValue != null && oracleReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleReaderQueryInstance = ((string)oracleReaderQueryValue);
                                                            oracleSourceInstance.OracleReaderQuery = oracleReaderQueryInstance;
                                                        }
                                                        
                                                        JToken queryTimeoutValue = sourceValue["queryTimeout"];
                                                        if (queryTimeoutValue != null && queryTimeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan queryTimeoutInstance = TimeSpan.Parse(((string)queryTimeoutValue), CultureInfo.InvariantCulture);
                                                            oracleSourceInstance.QueryTimeout = queryTimeoutInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue10 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue10 != null && sourceRetryCountValue10.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance10 = ((int)sourceRetryCountValue10);
                                                            oracleSourceInstance.SourceRetryCount = sourceRetryCountInstance10;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue10 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue10 != null && sourceRetryWaitValue10.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance10 = TimeSpan.Parse(((string)sourceRetryWaitValue10), CultureInfo.InvariantCulture);
                                                            oracleSourceInstance.SourceRetryWait = sourceRetryWaitInstance10;
                                                        }
                                                        transformationInstance.Source = oracleSourceInstance;
                                                    }
                                                }
                                                
                                                JToken sinkValue = transformationValue["sink"];
                                                if (sinkValue != null && sinkValue.Type != JTokenType.Null)
                                                {
                                                    string typeName3 = ((string)sinkValue["type"]);
                                                    if (typeName3 == "AzureQueueSink")
                                                    {
                                                        AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                        
                                                        JToken writeBatchSizeValue = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                            azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                            azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                            azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                            azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                            azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                        }
                                                        transformationInstance.Sink = azureQueueSinkInstance;
                                                    }
                                                    if (typeName3 == "AzureTableSink")
                                                    {
                                                        AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                        
                                                        JToken azureTableRetryIntervalInSecValue = sinkValue["azureTableRetryIntervalInSec"];
                                                        if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                        {
                                                            int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                            azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                        }
                                                        
                                                        JToken azureTableRetryTimesValue = sinkValue["azureTableRetryTimes"];
                                                        if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                        {
                                                            int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                            azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                        }
                                                        
                                                        JToken azureTableDefaultPartitionKeyValueValue = sinkValue["azureTableDefaultPartitionKeyValue"];
                                                        if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                            azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                        }
                                                        
                                                        JToken azureTablePartitionKeyNameValue = sinkValue["azureTablePartitionKeyName"];
                                                        if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                            azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                        }
                                                        
                                                        JToken azureTableRowKeyNameValue = sinkValue["azureTableRowKeyName"];
                                                        if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                            azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                        }
                                                        
                                                        JToken azureTableInsertTypeValue = sinkValue["azureTableInsertType"];
                                                        if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                            azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue2 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                            azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue2 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                            azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue2 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                            azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue2 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                            azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue2 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                            azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                        }
                                                        transformationInstance.Sink = azureTableSinkInstance;
                                                    }
                                                    if (typeName3 == "BlobSink")
                                                    {
                                                        BlobSink blobSinkInstance = new BlobSink();
                                                        
                                                        JToken blockWriterBlockSizeValue = sinkValue["blockWriterBlockSize"];
                                                        if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                        {
                                                            int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                            blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                        }
                                                        
                                                        JToken blobWriterOverwriteFilesValue = sinkValue["blobWriterOverwriteFiles"];
                                                        if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                        {
                                                            bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                            blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                        }
                                                        
                                                        JToken blobWriterPartitionColumnsValue = sinkValue["blobWriterPartitionColumns"];
                                                        if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                            blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                        }
                                                        
                                                        JToken blobWriterPartitionFormatValue = sinkValue["blobWriterPartitionFormat"];
                                                        if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                            blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                        }
                                                        
                                                        JToken blobWriterDateTimeFormatValue = sinkValue["blobWriterDateTimeFormat"];
                                                        if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                            blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                        }
                                                        
                                                        JToken blobWriterSeparatorValue = sinkValue["blobWriterSeparator"];
                                                        if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                            blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                        }
                                                        
                                                        JToken blobWriterRowSuffixValue = sinkValue["blobWriterRowSuffix"];
                                                        if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                            blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                        }
                                                        
                                                        JToken blobWriterAddHeaderValue = sinkValue["blobWriterAddHeader"];
                                                        if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                        {
                                                            bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                            blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue3 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                            blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue3 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                            blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue3 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                            blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue3 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                            blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue3 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                            blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                        }
                                                        transformationInstance.Sink = blobSinkInstance;
                                                    }
                                                    if (typeName3 == "DocumentDbCollectionSink")
                                                    {
                                                        DocumentDbCollectionSink documentDbCollectionSinkInstance = new DocumentDbCollectionSink();
                                                        
                                                        JToken nestingSeparatorValue2 = sinkValue["nestingSeparator"];
                                                        if (nestingSeparatorValue2 != null && nestingSeparatorValue2.Type != JTokenType.Null)
                                                        {
                                                            string nestingSeparatorInstance2 = ((string)nestingSeparatorValue2);
                                                            documentDbCollectionSinkInstance.NestingSeparator = nestingSeparatorInstance2;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue4 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                            documentDbCollectionSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue4 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue4 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                            documentDbCollectionSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue4 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue4 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                            documentDbCollectionSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                        }
                                                        transformationInstance.Sink = documentDbCollectionSinkInstance;
                                                    }
                                                    if (typeName3 == "SqlSink")
                                                    {
                                                        SqlSink sqlSinkInstance = new SqlSink();
                                                        
                                                        JToken sqlWriterStoredProcedureNameValue = sinkValue["sqlWriterStoredProcedureName"];
                                                        if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                            sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                        }
                                                        
                                                        JToken sqlWriterTableTypeValue = sinkValue["sqlWriterTableType"];
                                                        if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                            sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                        }
                                                        
                                                        JToken sqlWriterCleanupScriptValue = sinkValue["sqlWriterCleanupScript"];
                                                        if (sqlWriterCleanupScriptValue != null && sqlWriterCleanupScriptValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterCleanupScriptInstance = ((string)sqlWriterCleanupScriptValue);
                                                            sqlSinkInstance.SqlWriterCleanupScript = sqlWriterCleanupScriptInstance;
                                                        }
                                                        
                                                        JToken sliceIdentifierColumnNameValue = sinkValue["sliceIdentifierColumnName"];
                                                        if (sliceIdentifierColumnNameValue != null && sliceIdentifierColumnNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sliceIdentifierColumnNameInstance = ((string)sliceIdentifierColumnNameValue);
                                                            sqlSinkInstance.SliceIdentifierColumnName = sliceIdentifierColumnNameInstance;
                                                        }
                                                        
                                                        JToken storedProcedureParametersSequenceElement = ((JToken)sinkValue["storedProcedureParameters"]);
                                                        if (storedProcedureParametersSequenceElement != null && storedProcedureParametersSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property in storedProcedureParametersSequenceElement)
                                                            {
                                                                string storedProcedureParametersKey = ((string)property.Name);
                                                                JObject varToken = ((JObject)property.Value);
                                                                StoredProcedureParameter storedProcedureParameterInstance = new StoredProcedureParameter();
                                                                sqlSinkInstance.StoredProcedureParameters.Add(storedProcedureParametersKey, storedProcedureParameterInstance);
                                                                
                                                                JToken valueValue = varToken["value"];
                                                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                                {
                                                                    string valueInstance = ((string)valueValue);
                                                                    storedProcedureParameterInstance.Value = valueInstance;
                                                                }
                                                                
                                                                JToken typeValue = varToken["type"];
                                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                                {
                                                                    string typeInstance = ((string)typeValue);
                                                                    storedProcedureParameterInstance.Type = typeInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken writeBatchSizeValue5 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue5 != null && writeBatchSizeValue5.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance5 = ((int)writeBatchSizeValue5);
                                                            sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance5;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue5 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue5 != null && writeBatchTimeoutValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance5 = TimeSpan.Parse(((string)writeBatchTimeoutValue5), CultureInfo.InvariantCulture);
                                                            sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance5;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue5 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue5 != null && sinkRetryCountValue5.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance5 = ((int)sinkRetryCountValue5);
                                                            sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance5;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue5 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue5 != null && sinkRetryWaitValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance5 = TimeSpan.Parse(((string)sinkRetryWaitValue5), CultureInfo.InvariantCulture);
                                                            sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance5;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue5 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue5 != null && sinkPartitionDataValue5.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance5 = ((bool)sinkPartitionDataValue5);
                                                            sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance5;
                                                        }
                                                        transformationInstance.Sink = sqlSinkInstance;
                                                    }
                                                    if (typeName3 == "OracleSink")
                                                    {
                                                        OracleSink oracleSinkInstance = new OracleSink();
                                                        
                                                        JToken oracleWriterStoredProcedureNameValue = sinkValue["oracleWriterStoredProcedureName"];
                                                        if (oracleWriterStoredProcedureNameValue != null && oracleWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleWriterStoredProcedureNameInstance = ((string)oracleWriterStoredProcedureNameValue);
                                                            oracleSinkInstance.OracleWriterStoredProcedureName = oracleWriterStoredProcedureNameInstance;
                                                        }
                                                        
                                                        JToken oracleWriterTableTypeValue = sinkValue["oracleWriterTableType"];
                                                        if (oracleWriterTableTypeValue != null && oracleWriterTableTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleWriterTableTypeInstance = ((string)oracleWriterTableTypeValue);
                                                            oracleSinkInstance.OracleWriterTableType = oracleWriterTableTypeInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue6 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue6 != null && writeBatchSizeValue6.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance6 = ((int)writeBatchSizeValue6);
                                                            oracleSinkInstance.WriteBatchSize = writeBatchSizeInstance6;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue6 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue6 != null && writeBatchTimeoutValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance6 = TimeSpan.Parse(((string)writeBatchTimeoutValue6), CultureInfo.InvariantCulture);
                                                            oracleSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance6;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue6 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue6 != null && sinkRetryCountValue6.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance6 = ((int)sinkRetryCountValue6);
                                                            oracleSinkInstance.SinkRetryCount = sinkRetryCountInstance6;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue6 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue6 != null && sinkRetryWaitValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance6 = TimeSpan.Parse(((string)sinkRetryWaitValue6), CultureInfo.InvariantCulture);
                                                            oracleSinkInstance.SinkRetryWait = sinkRetryWaitInstance6;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue6 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue6 != null && sinkPartitionDataValue6.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance6 = ((bool)sinkPartitionDataValue6);
                                                            oracleSinkInstance.SinkPartitionData = sinkPartitionDataInstance6;
                                                        }
                                                        transformationInstance.Sink = oracleSinkInstance;
                                                    }
                                                }
                                                
                                                JToken translatorValue = transformationValue["translator"];
                                                if (translatorValue != null && translatorValue.Type != JTokenType.Null)
                                                {
                                                    string typeName4 = ((string)translatorValue["type"]);
                                                    if (typeName4 == "TabularTranslator")
                                                    {
                                                        TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                        
                                                        JToken columnMappingsValue = translatorValue["columnMappings"];
                                                        if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                        {
                                                            string columnMappingsInstance = ((string)columnMappingsValue);
                                                            tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                        }
                                                        transformationInstance.Translator = tabularTranslatorInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue2 = activitiesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                copyActivityInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken descriptionValue2 = activitiesValue["description"];
                                            if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance2 = ((string)descriptionValue2);
                                                copyActivityInstance.Description = descriptionInstance2;
                                            }
                                            
                                            JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                            }
                                            
                                            JToken policyValue = activitiesValue["policy"];
                                            if (policyValue != null && policyValue.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance = new ActivityPolicy();
                                                copyActivityInstance.Policy = policyInstance;
                                                
                                                JToken timeoutValue = policyValue["timeout"];
                                                if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                    policyInstance.Timeout = timeoutInstance;
                                                }
                                                
                                                JToken delayValue = policyValue["delay"];
                                                if (delayValue != null && delayValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                    policyInstance.Delay = delayInstance;
                                                }
                                                
                                                JToken concurrencyValue = policyValue["concurrency"];
                                                if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance = ((uint)concurrencyValue);
                                                    policyInstance.Concurrency = concurrencyInstance;
                                                }
                                                
                                                JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                                if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                    policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                                }
                                                
                                                JToken retryValue = policyValue["retry"];
                                                if (retryValue != null && retryValue.Type != JTokenType.Null)
                                                {
                                                    int retryInstance = ((int)retryValue);
                                                    policyInstance.Retry = retryInstance;
                                                }
                                                
                                                JToken longRetryValue = policyValue["longRetry"];
                                                if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance = ((int)longRetryValue);
                                                    policyInstance.LongRetry = longRetryInstance;
                                                }
                                                
                                                JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                                if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                    policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                                }
                                            }
                                            
                                            JToken inputsArray = activitiesValue["inputs"];
                                            if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue in ((JArray)inputsArray))
                                                {
                                                    ActivityInput activityInputInstance = new ActivityInput();
                                                    copyActivityInstance.Inputs.Add(activityInputInstance);
                                                    
                                                    JToken startTimeValue = inputsValue["startTime"];
                                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance = ((string)startTimeValue);
                                                        activityInputInstance.StartTime = startTimeInstance;
                                                    }
                                                    
                                                    JToken endTimeValue = inputsValue["endTime"];
                                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance = ((string)endTimeValue);
                                                        activityInputInstance.EndTime = endTimeInstance;
                                                    }
                                                    
                                                    JToken lengthValue = inputsValue["length"];
                                                    if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                        activityInputInstance.Length = lengthInstance;
                                                    }
                                                    
                                                    JToken nameValue3 = inputsValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        activityInputInstance.Name = nameInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray = activitiesValue["outputs"];
                                            if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue in ((JArray)outputsArray))
                                                {
                                                    ActivityOutput activityOutputInstance = new ActivityOutput();
                                                    copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                    
                                                    JToken nameValue4 = outputsValue["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        activityOutputInstance.Name = nameInstance4;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(copyActivityInstance);
                                        }
                                        if (typeName == "HDInsightActivity")
                                        {
                                            HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                            
                                            JToken transformationValue2 = activitiesValue["transformation"];
                                            if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                                            {
                                                string typeName5 = ((string)transformationValue2["type"]);
                                                if (typeName5 == "Hive")
                                                {
                                                    Hive hiveInstance = new Hive();
                                                    
                                                    JToken scriptValue = transformationValue2["script"];
                                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance = ((string)scriptValue);
                                                        hiveInstance.Script = scriptInstance;
                                                    }
                                                    
                                                    JToken scriptPathValue = transformationValue2["scriptPath"];
                                                    if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptPathInstance = ((string)scriptPathValue);
                                                        hiveInstance.ScriptPath = scriptPathInstance;
                                                    }
                                                    
                                                    JToken scriptLinkedServiceValue = transformationValue2["scriptLinkedService"];
                                                    if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                        hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken definesSequenceElement = ((JToken)transformationValue2["defines"]);
                                                    if (definesSequenceElement != null && definesSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property2 in definesSequenceElement)
                                                        {
                                                            string definesKey = ((string)property2.Name);
                                                            string definesValue = ((string)property2.Value);
                                                            hiveInstance.Defines.Add(definesKey, definesValue);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property3 in extendedPropertiesSequenceElement)
                                                        {
                                                            string extendedPropertiesKey = ((string)property3.Name);
                                                            string extendedPropertiesValue = ((string)property3.Value);
                                                            hiveInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray != null && storageLinkedServicesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray))
                                                        {
                                                            hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray = transformationValue2["arguments"];
                                                    if (argumentsArray != null && argumentsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue in ((JArray)argumentsArray))
                                                        {
                                                            hiveInstance.Arguments.Add(((string)argumentsValue));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = hiveInstance;
                                                }
                                                if (typeName5 == "Pig")
                                                {
                                                    Pig pigInstance = new Pig();
                                                    
                                                    JToken scriptValue2 = transformationValue2["script"];
                                                    if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance2 = ((string)scriptValue2);
                                                        pigInstance.Script = scriptInstance2;
                                                    }
                                                    
                                                    JToken scriptPathValue2 = transformationValue2["scriptPath"];
                                                    if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptPathInstance2 = ((string)scriptPathValue2);
                                                        pigInstance.ScriptPath = scriptPathInstance2;
                                                    }
                                                    
                                                    JToken scriptLinkedServiceValue2 = transformationValue2["scriptLinkedService"];
                                                    if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                        pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property4 in extendedPropertiesSequenceElement2)
                                                        {
                                                            string extendedPropertiesKey2 = ((string)property4.Name);
                                                            string extendedPropertiesValue2 = ((string)property4.Value);
                                                            pigInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray2 = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray2 != null && storageLinkedServicesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray2))
                                                        {
                                                            pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray2 = transformationValue2["arguments"];
                                                    if (argumentsArray2 != null && argumentsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue2 in ((JArray)argumentsArray2))
                                                        {
                                                            pigInstance.Arguments.Add(((string)argumentsValue2));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = pigInstance;
                                                }
                                                if (typeName5 == "MapReduce")
                                                {
                                                    MapReduce mapReduceInstance = new MapReduce();
                                                    
                                                    JToken classNameValue = transformationValue2["className"];
                                                    if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                    {
                                                        string classNameInstance = ((string)classNameValue);
                                                        mapReduceInstance.ClassName = classNameInstance;
                                                    }
                                                    
                                                    JToken jarFilePathValue = transformationValue2["jarFilePath"];
                                                    if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                    {
                                                        string jarFilePathInstance = ((string)jarFilePathValue);
                                                        mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                    }
                                                    
                                                    JToken jarLinkedServiceValue = transformationValue2["jarLinkedService"];
                                                    if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                        mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken jarLibsArray = transformationValue2["jarLibs"];
                                                    if (jarLibsArray != null && jarLibsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken jarLibsValue in ((JArray)jarLibsArray))
                                                        {
                                                            mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                        }
                                                    }
                                                    
                                                    JToken definesSequenceElement2 = ((JToken)transformationValue2["defines"]);
                                                    if (definesSequenceElement2 != null && definesSequenceElement2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property5 in definesSequenceElement2)
                                                        {
                                                            string definesKey2 = ((string)property5.Name);
                                                            string definesValue2 = ((string)property5.Value);
                                                            mapReduceInstance.Defines.Add(definesKey2, definesValue2);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property6 in extendedPropertiesSequenceElement3)
                                                        {
                                                            string extendedPropertiesKey3 = ((string)property6.Name);
                                                            string extendedPropertiesValue3 = ((string)property6.Value);
                                                            mapReduceInstance.ExtendedProperties.Add(extendedPropertiesKey3, extendedPropertiesValue3);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray3 = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray3 != null && storageLinkedServicesArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray3))
                                                        {
                                                            mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray3 = transformationValue2["arguments"];
                                                    if (argumentsArray3 != null && argumentsArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue3 in ((JArray)argumentsArray3))
                                                        {
                                                            mapReduceInstance.Arguments.Add(((string)argumentsValue3));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = mapReduceInstance;
                                                }
                                                if (typeName5 == "Streaming")
                                                {
                                                    Streaming streamingInstance = new Streaming();
                                                    
                                                    JToken mapperValue = transformationValue2["mapper"];
                                                    if (mapperValue != null && mapperValue.Type != JTokenType.Null)
                                                    {
                                                        string mapperInstance = ((string)mapperValue);
                                                        streamingInstance.Mapper = mapperInstance;
                                                    }
                                                    
                                                    JToken reducerValue = transformationValue2["reducer"];
                                                    if (reducerValue != null && reducerValue.Type != JTokenType.Null)
                                                    {
                                                        string reducerInstance = ((string)reducerValue);
                                                        streamingInstance.Reducer = reducerInstance;
                                                    }
                                                    
                                                    JToken inputValue = transformationValue2["input"];
                                                    if (inputValue != null && inputValue.Type != JTokenType.Null)
                                                    {
                                                        string inputInstance = ((string)inputValue);
                                                        streamingInstance.Input = inputInstance;
                                                    }
                                                    
                                                    JToken outputValue = transformationValue2["output"];
                                                    if (outputValue != null && outputValue.Type != JTokenType.Null)
                                                    {
                                                        string outputInstance = ((string)outputValue);
                                                        streamingInstance.Output = outputInstance;
                                                    }
                                                    
                                                    JToken filePathsArray = transformationValue2["filePaths"];
                                                    if (filePathsArray != null && filePathsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken filePathsValue in ((JArray)filePathsArray))
                                                        {
                                                            streamingInstance.FilePaths.Add(((string)filePathsValue));
                                                        }
                                                    }
                                                    
                                                    JToken fileLinkedServiceValue = transformationValue2["fileLinkedService"];
                                                    if (fileLinkedServiceValue != null && fileLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string fileLinkedServiceInstance = ((string)fileLinkedServiceValue);
                                                        streamingInstance.FileLinkedService = fileLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken combinerValue = transformationValue2["combiner"];
                                                    if (combinerValue != null && combinerValue.Type != JTokenType.Null)
                                                    {
                                                        string combinerInstance = ((string)combinerValue);
                                                        streamingInstance.Combiner = combinerInstance;
                                                    }
                                                    
                                                    JToken commandEnvironmentArray = transformationValue2["commandEnvironment"];
                                                    if (commandEnvironmentArray != null && commandEnvironmentArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken commandEnvironmentValue in ((JArray)commandEnvironmentArray))
                                                        {
                                                            streamingInstance.CommandEnvironment.Add(((string)commandEnvironmentValue));
                                                        }
                                                    }
                                                    
                                                    JToken definesSequenceElement3 = ((JToken)transformationValue2["defines"]);
                                                    if (definesSequenceElement3 != null && definesSequenceElement3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property7 in definesSequenceElement3)
                                                        {
                                                            string definesKey3 = ((string)property7.Name);
                                                            string definesValue3 = ((string)property7.Value);
                                                            streamingInstance.Defines.Add(definesKey3, definesValue3);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement4 = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement4 != null && extendedPropertiesSequenceElement4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property8 in extendedPropertiesSequenceElement4)
                                                        {
                                                            string extendedPropertiesKey4 = ((string)property8.Name);
                                                            string extendedPropertiesValue4 = ((string)property8.Value);
                                                            streamingInstance.ExtendedProperties.Add(extendedPropertiesKey4, extendedPropertiesValue4);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray4 = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray4 != null && storageLinkedServicesArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue4 in ((JArray)storageLinkedServicesArray4))
                                                        {
                                                            streamingInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue4));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray4 = transformationValue2["arguments"];
                                                    if (argumentsArray4 != null && argumentsArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue4 in ((JArray)argumentsArray4))
                                                        {
                                                            streamingInstance.Arguments.Add(((string)argumentsValue4));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = streamingInstance;
                                                }
                                            }
                                            
                                            JToken nameValue5 = activitiesValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                hDInsightActivityInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken descriptionValue3 = activitiesValue["description"];
                                            if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance3 = ((string)descriptionValue3);
                                                hDInsightActivityInstance.Description = descriptionInstance3;
                                            }
                                            
                                            JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                            }
                                            
                                            JToken policyValue2 = activitiesValue["policy"];
                                            if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance2 = new ActivityPolicy();
                                                hDInsightActivityInstance.Policy = policyInstance2;
                                                
                                                JToken timeoutValue2 = policyValue2["timeout"];
                                                if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.Timeout = timeoutInstance2;
                                                }
                                                
                                                JToken delayValue2 = policyValue2["delay"];
                                                if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.Delay = delayInstance2;
                                                }
                                                
                                                JToken concurrencyValue2 = policyValue2["concurrency"];
                                                if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                    policyInstance2.Concurrency = concurrencyInstance2;
                                                }
                                                
                                                JToken executionPriorityOrderValue2 = policyValue2["executionPriorityOrder"];
                                                if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                    policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                                }
                                                
                                                JToken retryValue2 = policyValue2["retry"];
                                                if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                                {
                                                    int retryInstance2 = ((int)retryValue2);
                                                    policyInstance2.Retry = retryInstance2;
                                                }
                                                
                                                JToken longRetryValue2 = policyValue2["longRetry"];
                                                if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance2 = ((int)longRetryValue2);
                                                    policyInstance2.LongRetry = longRetryInstance2;
                                                }
                                                
                                                JToken longRetryIntervalValue2 = policyValue2["longRetryInterval"];
                                                if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                                }
                                            }
                                            
                                            JToken inputsArray2 = activitiesValue["inputs"];
                                            if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                                {
                                                    ActivityInput activityInputInstance2 = new ActivityInput();
                                                    hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                    
                                                    JToken startTimeValue2 = inputsValue2["startTime"];
                                                    if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance2 = ((string)startTimeValue2);
                                                        activityInputInstance2.StartTime = startTimeInstance2;
                                                    }
                                                    
                                                    JToken endTimeValue2 = inputsValue2["endTime"];
                                                    if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance2 = ((string)endTimeValue2);
                                                        activityInputInstance2.EndTime = endTimeInstance2;
                                                    }
                                                    
                                                    JToken lengthValue2 = inputsValue2["length"];
                                                    if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                        activityInputInstance2.Length = lengthInstance2;
                                                    }
                                                    
                                                    JToken nameValue6 = inputsValue2["name"];
                                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance6 = ((string)nameValue6);
                                                        activityInputInstance2.Name = nameInstance6;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray2 = activitiesValue["outputs"];
                                            if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue2 in ((JArray)outputsArray2))
                                                {
                                                    ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                    hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                    
                                                    JToken nameValue7 = outputsValue2["name"];
                                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance7 = ((string)nameValue7);
                                                        activityOutputInstance2.Name = nameInstance7;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                        }
                                        if (typeName == "DotNetActivity")
                                        {
                                            DotNetActivity dotNetActivityInstance = new DotNetActivity();
                                            
                                            JToken transformationValue3 = activitiesValue["transformation"];
                                            if (transformationValue3 != null && transformationValue3.Type != JTokenType.Null)
                                            {
                                                DotNetActivityProperties transformationInstance2 = new DotNetActivityProperties();
                                                dotNetActivityInstance.Transformation = transformationInstance2;
                                                
                                                JToken assemblyNameValue = transformationValue3["assemblyName"];
                                                if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                                {
                                                    string assemblyNameInstance = ((string)assemblyNameValue);
                                                    transformationInstance2.AssemblyName = assemblyNameInstance;
                                                }
                                                
                                                JToken entryPointValue = transformationValue3["entryPoint"];
                                                if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                                {
                                                    string entryPointInstance = ((string)entryPointValue);
                                                    transformationInstance2.EntryPoint = entryPointInstance;
                                                }
                                                
                                                JToken packageLinkedServiceValue = transformationValue3["packageLinkedService"];
                                                if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                    transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                                }
                                                
                                                JToken packageFileValue = transformationValue3["packageFile"];
                                                if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                                {
                                                    string packageFileInstance = ((string)packageFileValue);
                                                    transformationInstance2.PackageFile = packageFileInstance;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement5 = ((JToken)transformationValue3["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement5 != null && extendedPropertiesSequenceElement5.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property9 in extendedPropertiesSequenceElement5)
                                                    {
                                                        string extendedPropertiesKey5 = ((string)property9.Name);
                                                        string extendedPropertiesValue5 = ((string)property9.Value);
                                                        transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey5, extendedPropertiesValue5);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue8 = activitiesValue["name"];
                                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                            {
                                                string nameInstance8 = ((string)nameValue8);
                                                dotNetActivityInstance.Name = nameInstance8;
                                            }
                                            
                                            JToken descriptionValue4 = activitiesValue["description"];
                                            if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance4 = ((string)descriptionValue4);
                                                dotNetActivityInstance.Description = descriptionInstance4;
                                            }
                                            
                                            JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                dotNetActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                            }
                                            
                                            JToken policyValue3 = activitiesValue["policy"];
                                            if (policyValue3 != null && policyValue3.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance3 = new ActivityPolicy();
                                                dotNetActivityInstance.Policy = policyInstance3;
                                                
                                                JToken timeoutValue3 = policyValue3["timeout"];
                                                if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.Timeout = timeoutInstance3;
                                                }
                                                
                                                JToken delayValue3 = policyValue3["delay"];
                                                if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.Delay = delayInstance3;
                                                }
                                                
                                                JToken concurrencyValue3 = policyValue3["concurrency"];
                                                if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                    policyInstance3.Concurrency = concurrencyInstance3;
                                                }
                                                
                                                JToken executionPriorityOrderValue3 = policyValue3["executionPriorityOrder"];
                                                if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                    policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                                }
                                                
                                                JToken retryValue3 = policyValue3["retry"];
                                                if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                                {
                                                    int retryInstance3 = ((int)retryValue3);
                                                    policyInstance3.Retry = retryInstance3;
                                                }
                                                
                                                JToken longRetryValue3 = policyValue3["longRetry"];
                                                if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance3 = ((int)longRetryValue3);
                                                    policyInstance3.LongRetry = longRetryInstance3;
                                                }
                                                
                                                JToken longRetryIntervalValue3 = policyValue3["longRetryInterval"];
                                                if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                                }
                                            }
                                            
                                            JToken inputsArray3 = activitiesValue["inputs"];
                                            if (inputsArray3 != null && inputsArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue3 in ((JArray)inputsArray3))
                                                {
                                                    ActivityInput activityInputInstance3 = new ActivityInput();
                                                    dotNetActivityInstance.Inputs.Add(activityInputInstance3);
                                                    
                                                    JToken startTimeValue3 = inputsValue3["startTime"];
                                                    if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance3 = ((string)startTimeValue3);
                                                        activityInputInstance3.StartTime = startTimeInstance3;
                                                    }
                                                    
                                                    JToken endTimeValue3 = inputsValue3["endTime"];
                                                    if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance3 = ((string)endTimeValue3);
                                                        activityInputInstance3.EndTime = endTimeInstance3;
                                                    }
                                                    
                                                    JToken lengthValue3 = inputsValue3["length"];
                                                    if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                        activityInputInstance3.Length = lengthInstance3;
                                                    }
                                                    
                                                    JToken nameValue9 = inputsValue3["name"];
                                                    if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance9 = ((string)nameValue9);
                                                        activityInputInstance3.Name = nameInstance9;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray3 = activitiesValue["outputs"];
                                            if (outputsArray3 != null && outputsArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue3 in ((JArray)outputsArray3))
                                                {
                                                    ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                    dotNetActivityInstance.Outputs.Add(activityOutputInstance3);
                                                    
                                                    JToken nameValue10 = outputsValue3["name"];
                                                    if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance10 = ((string)nameValue10);
                                                        activityOutputInstance3.Name = nameInstance10;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(dotNetActivityInstance);
                                        }
                                        if (typeName == "StoredProcedureActivity")
                                        {
                                            StoredProcedureActivity storedProcedureActivityInstance = new StoredProcedureActivity();
                                            
                                            JToken transformationValue4 = activitiesValue["transformation"];
                                            if (transformationValue4 != null && transformationValue4.Type != JTokenType.Null)
                                            {
                                                StoredProcedureActivityProperties transformationInstance3 = new StoredProcedureActivityProperties();
                                                storedProcedureActivityInstance.Transformation = transformationInstance3;
                                                
                                                JToken storedProcedureNameValue = transformationValue4["storedProcedureName"];
                                                if (storedProcedureNameValue != null && storedProcedureNameValue.Type != JTokenType.Null)
                                                {
                                                    string storedProcedureNameInstance = ((string)storedProcedureNameValue);
                                                    transformationInstance3.StoredProcedureName = storedProcedureNameInstance;
                                                }
                                                
                                                JToken storedProcedureParametersSequenceElement2 = ((JToken)transformationValue4["storedProcedureParameters"]);
                                                if (storedProcedureParametersSequenceElement2 != null && storedProcedureParametersSequenceElement2.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property10 in storedProcedureParametersSequenceElement2)
                                                    {
                                                        string storedProcedureParametersKey2 = ((string)property10.Name);
                                                        string storedProcedureParametersValue = ((string)property10.Value);
                                                        transformationInstance3.StoredProcedureActivityParameters.Add(storedProcedureParametersKey2, storedProcedureParametersValue);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue11 = activitiesValue["name"];
                                            if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                            {
                                                string nameInstance11 = ((string)nameValue11);
                                                storedProcedureActivityInstance.Name = nameInstance11;
                                            }
                                            
                                            JToken descriptionValue5 = activitiesValue["description"];
                                            if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance5 = ((string)descriptionValue5);
                                                storedProcedureActivityInstance.Description = descriptionInstance5;
                                            }
                                            
                                            JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                storedProcedureActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                            }
                                            
                                            JToken policyValue4 = activitiesValue["policy"];
                                            if (policyValue4 != null && policyValue4.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance4 = new ActivityPolicy();
                                                storedProcedureActivityInstance.Policy = policyInstance4;
                                                
                                                JToken timeoutValue4 = policyValue4["timeout"];
                                                if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.Timeout = timeoutInstance4;
                                                }
                                                
                                                JToken delayValue4 = policyValue4["delay"];
                                                if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.Delay = delayInstance4;
                                                }
                                                
                                                JToken concurrencyValue4 = policyValue4["concurrency"];
                                                if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                    policyInstance4.Concurrency = concurrencyInstance4;
                                                }
                                                
                                                JToken executionPriorityOrderValue4 = policyValue4["executionPriorityOrder"];
                                                if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                    policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                                }
                                                
                                                JToken retryValue4 = policyValue4["retry"];
                                                if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                                {
                                                    int retryInstance4 = ((int)retryValue4);
                                                    policyInstance4.Retry = retryInstance4;
                                                }
                                                
                                                JToken longRetryValue4 = policyValue4["longRetry"];
                                                if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance4 = ((int)longRetryValue4);
                                                    policyInstance4.LongRetry = longRetryInstance4;
                                                }
                                                
                                                JToken longRetryIntervalValue4 = policyValue4["longRetryInterval"];
                                                if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                                }
                                            }
                                            
                                            JToken inputsArray4 = activitiesValue["inputs"];
                                            if (inputsArray4 != null && inputsArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue4 in ((JArray)inputsArray4))
                                                {
                                                    ActivityInput activityInputInstance4 = new ActivityInput();
                                                    storedProcedureActivityInstance.Inputs.Add(activityInputInstance4);
                                                    
                                                    JToken startTimeValue4 = inputsValue4["startTime"];
                                                    if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance4 = ((string)startTimeValue4);
                                                        activityInputInstance4.StartTime = startTimeInstance4;
                                                    }
                                                    
                                                    JToken endTimeValue4 = inputsValue4["endTime"];
                                                    if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance4 = ((string)endTimeValue4);
                                                        activityInputInstance4.EndTime = endTimeInstance4;
                                                    }
                                                    
                                                    JToken lengthValue4 = inputsValue4["length"];
                                                    if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                        activityInputInstance4.Length = lengthInstance4;
                                                    }
                                                    
                                                    JToken nameValue12 = inputsValue4["name"];
                                                    if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance12 = ((string)nameValue12);
                                                        activityInputInstance4.Name = nameInstance12;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray4 = activitiesValue["outputs"];
                                            if (outputsArray4 != null && outputsArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue4 in ((JArray)outputsArray4))
                                                {
                                                    ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                    storedProcedureActivityInstance.Outputs.Add(activityOutputInstance4);
                                                    
                                                    JToken nameValue13 = outputsValue4["name"];
                                                    if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance13 = ((string)nameValue13);
                                                        activityOutputInstance4.Name = nameInstance13;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(storedProcedureActivityInstance);
                                        }
                                        if (typeName == "AzureMLBatchScoringActivity")
                                        {
                                            AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                            
                                            JToken transformationValue5 = activitiesValue["transformation"];
                                            if (transformationValue5 != null && transformationValue5.Type != JTokenType.Null)
                                            {
                                                AzureMLActivityProperties transformationInstance4 = new AzureMLActivityProperties();
                                                azureMLBatchScoringActivityInstance.Transformation = transformationInstance4;
                                                
                                                JToken webServiceParametersSequenceElement = ((JToken)transformationValue5["webServiceParameters"]);
                                                if (webServiceParametersSequenceElement != null && webServiceParametersSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property11 in webServiceParametersSequenceElement)
                                                    {
                                                        string webServiceParametersKey = ((string)property11.Name);
                                                        string webServiceParametersValue = ((string)property11.Value);
                                                        transformationInstance4.WebServiceParameters.Add(webServiceParametersKey, webServiceParametersValue);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue14 = activitiesValue["name"];
                                            if (nameValue14 != null && nameValue14.Type != JTokenType.Null)
                                            {
                                                string nameInstance14 = ((string)nameValue14);
                                                azureMLBatchScoringActivityInstance.Name = nameInstance14;
                                            }
                                            
                                            JToken descriptionValue6 = activitiesValue["description"];
                                            if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance6 = ((string)descriptionValue6);
                                                azureMLBatchScoringActivityInstance.Description = descriptionInstance6;
                                            }
                                            
                                            JToken linkedServiceNameValue5 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance5;
                                            }
                                            
                                            JToken policyValue5 = activitiesValue["policy"];
                                            if (policyValue5 != null && policyValue5.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance5 = new ActivityPolicy();
                                                azureMLBatchScoringActivityInstance.Policy = policyInstance5;
                                                
                                                JToken timeoutValue5 = policyValue5["timeout"];
                                                if (timeoutValue5 != null && timeoutValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance5 = TimeSpan.Parse(((string)timeoutValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.Timeout = timeoutInstance5;
                                                }
                                                
                                                JToken delayValue5 = policyValue5["delay"];
                                                if (delayValue5 != null && delayValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance5 = TimeSpan.Parse(((string)delayValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.Delay = delayInstance5;
                                                }
                                                
                                                JToken concurrencyValue5 = policyValue5["concurrency"];
                                                if (concurrencyValue5 != null && concurrencyValue5.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance5 = ((uint)concurrencyValue5);
                                                    policyInstance5.Concurrency = concurrencyInstance5;
                                                }
                                                
                                                JToken executionPriorityOrderValue5 = policyValue5["executionPriorityOrder"];
                                                if (executionPriorityOrderValue5 != null && executionPriorityOrderValue5.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance5 = ((string)executionPriorityOrderValue5);
                                                    policyInstance5.ExecutionPriorityOrder = executionPriorityOrderInstance5;
                                                }
                                                
                                                JToken retryValue5 = policyValue5["retry"];
                                                if (retryValue5 != null && retryValue5.Type != JTokenType.Null)
                                                {
                                                    int retryInstance5 = ((int)retryValue5);
                                                    policyInstance5.Retry = retryInstance5;
                                                }
                                                
                                                JToken longRetryValue5 = policyValue5["longRetry"];
                                                if (longRetryValue5 != null && longRetryValue5.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance5 = ((int)longRetryValue5);
                                                    policyInstance5.LongRetry = longRetryInstance5;
                                                }
                                                
                                                JToken longRetryIntervalValue5 = policyValue5["longRetryInterval"];
                                                if (longRetryIntervalValue5 != null && longRetryIntervalValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance5 = TimeSpan.Parse(((string)longRetryIntervalValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.LongRetryInterval = longRetryIntervalInstance5;
                                                }
                                            }
                                            
                                            JToken inputsArray5 = activitiesValue["inputs"];
                                            if (inputsArray5 != null && inputsArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue5 in ((JArray)inputsArray5))
                                                {
                                                    ActivityInput activityInputInstance5 = new ActivityInput();
                                                    azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance5);
                                                    
                                                    JToken startTimeValue5 = inputsValue5["startTime"];
                                                    if (startTimeValue5 != null && startTimeValue5.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance5 = ((string)startTimeValue5);
                                                        activityInputInstance5.StartTime = startTimeInstance5;
                                                    }
                                                    
                                                    JToken endTimeValue5 = inputsValue5["endTime"];
                                                    if (endTimeValue5 != null && endTimeValue5.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance5 = ((string)endTimeValue5);
                                                        activityInputInstance5.EndTime = endTimeInstance5;
                                                    }
                                                    
                                                    JToken lengthValue5 = inputsValue5["length"];
                                                    if (lengthValue5 != null && lengthValue5.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance5 = TimeSpan.Parse(((string)lengthValue5), CultureInfo.InvariantCulture);
                                                        activityInputInstance5.Length = lengthInstance5;
                                                    }
                                                    
                                                    JToken nameValue15 = inputsValue5["name"];
                                                    if (nameValue15 != null && nameValue15.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance15 = ((string)nameValue15);
                                                        activityInputInstance5.Name = nameInstance15;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray5 = activitiesValue["outputs"];
                                            if (outputsArray5 != null && outputsArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue5 in ((JArray)outputsArray5))
                                                {
                                                    ActivityOutput activityOutputInstance5 = new ActivityOutput();
                                                    azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance5);
                                                    
                                                    JToken nameValue16 = outputsValue5["name"];
                                                    if (nameValue16 != null && nameValue16.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance16 = ((string)nameValue16);
                                                        activityOutputInstance5.Name = nameInstance16;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                        }
                                    }
                                }
                                
                                JToken startValue = propertiesValue["start"];
                                if (startValue != null && startValue.Type != JTokenType.Null)
                                {
                                    DateTime startInstance = ((DateTime)startValue);
                                    propertiesInstance.Start = startInstance;
                                }
                                
                                JToken endValue = propertiesValue["end"];
                                if (endValue != null && endValue.Type != JTokenType.Null)
                                {
                                    DateTime endInstance = ((DateTime)endValue);
                                    propertiesInstance.End = endInstance;
                                }
                                
                                JToken isPausedValue = propertiesValue["isPaused"];
                                if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                {
                                    bool isPausedInstance = ((bool)isPausedValue);
                                    propertiesInstance.IsPaused = isPausedInstance;
                                }
                                
                                JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                {
                                    PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                    propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                    
                                    JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                    if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                        runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    propertiesInstance.HubName = hubNameInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update pipeline operation response.
        /// </returns>
        public async Task<PipelineCreateOrUpdateResponse> GetCreateOrUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateOrUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Pipeline pipelineInstance = new Pipeline();
                            result.Pipeline = pipelineInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                pipelineInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                PipelineProperties propertiesInstance = new PipelineProperties();
                                pipelineInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken activitiesArray = propertiesValue["activities"];
                                if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                    {
                                        string typeName = ((string)activitiesValue["type"]);
                                        if (typeName == "CopyActivity")
                                        {
                                            CopyActivity copyActivityInstance = new CopyActivity();
                                            
                                            JToken transformationValue = activitiesValue["transformation"];
                                            if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                            {
                                                CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                                copyActivityInstance.Transformation = transformationInstance;
                                                
                                                JToken sourceValue = transformationValue["source"];
                                                if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)sourceValue["type"]);
                                                    if (typeName2 == "AzureTableSource")
                                                    {
                                                        AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                        
                                                        JToken azureTableSourceQueryValue = sourceValue["azureTableSourceQuery"];
                                                        if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                            azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                        }
                                                        
                                                        JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue["azureTableSourceIgnoreTableNotFound"];
                                                        if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                        {
                                                            bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                            azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                            azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                            azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                        }
                                                        transformationInstance.Source = azureTableSourceInstance;
                                                    }
                                                    if (typeName2 == "BlobSource")
                                                    {
                                                        BlobSource blobSourceInstance = new BlobSource();
                                                        
                                                        JToken blobColumnSeparatorsValue = sourceValue["blobColumnSeparators"];
                                                        if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                        {
                                                            string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                            blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                        }
                                                        
                                                        JToken treatEmptyAsNullValue = sourceValue["treatEmptyAsNull"];
                                                        if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                        {
                                                            bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                            blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                        }
                                                        
                                                        JToken nullValuesValue = sourceValue["nullValues"];
                                                        if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                        {
                                                            string nullValuesInstance = ((string)nullValuesValue);
                                                            blobSourceInstance.NullValues = nullValuesInstance;
                                                        }
                                                        
                                                        JToken skipHeaderLineCountValue = sourceValue["skipHeaderLineCount"];
                                                        if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                        {
                                                            int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                            blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue2 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                            blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue2 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                            blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                        }
                                                        transformationInstance.Source = blobSourceInstance;
                                                    }
                                                    if (typeName2 == "DocumentDbCollectionSource")
                                                    {
                                                        DocumentDbCollectionSource documentDbCollectionSourceInstance = new DocumentDbCollectionSource();
                                                        
                                                        JToken queryValue = sourceValue["query"];
                                                        if (queryValue != null && queryValue.Type != JTokenType.Null)
                                                        {
                                                            string queryInstance = ((string)queryValue);
                                                            documentDbCollectionSourceInstance.Query = queryInstance;
                                                        }
                                                        
                                                        JToken nestingSeparatorValue = sourceValue["nestingSeparator"];
                                                        if (nestingSeparatorValue != null && nestingSeparatorValue.Type != JTokenType.Null)
                                                        {
                                                            string nestingSeparatorInstance = ((string)nestingSeparatorValue);
                                                            documentDbCollectionSourceInstance.NestingSeparator = nestingSeparatorInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue3 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                            documentDbCollectionSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue3 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                        }
                                                        transformationInstance.Source = documentDbCollectionSourceInstance;
                                                    }
                                                    if (typeName2 == "RelationalSource")
                                                    {
                                                        RelationalSource relationalSourceInstance = new RelationalSource();
                                                        
                                                        JToken queryValue2 = sourceValue["query"];
                                                        if (queryValue2 != null && queryValue2.Type != JTokenType.Null)
                                                        {
                                                            string queryInstance2 = ((string)queryValue2);
                                                            relationalSourceInstance.Query = queryInstance2;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue4 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue4 != null && sourceRetryCountValue4.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance4 = ((int)sourceRetryCountValue4);
                                                            relationalSourceInstance.SourceRetryCount = sourceRetryCountInstance4;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue4 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue4 != null && sourceRetryWaitValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance4 = TimeSpan.Parse(((string)sourceRetryWaitValue4), CultureInfo.InvariantCulture);
                                                            relationalSourceInstance.SourceRetryWait = sourceRetryWaitInstance4;
                                                        }
                                                        transformationInstance.Source = relationalSourceInstance;
                                                    }
                                                    if (typeName2 == "OdbcSource")
                                                    {
                                                        RelationalSource.OdbcSource odbcSourceInstance = new RelationalSource.OdbcSource();
                                                        
                                                        JToken odbcReaderQueryValue = sourceValue["odbcReaderQuery"];
                                                        if (odbcReaderQueryValue != null && odbcReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string odbcReaderQueryInstance = ((string)odbcReaderQueryValue);
                                                            odbcSourceInstance.OdbcReaderQuery = odbcReaderQueryInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue5 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue5 != null && sourceRetryCountValue5.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance5 = ((int)sourceRetryCountValue5);
                                                            odbcSourceInstance.SourceRetryCount = sourceRetryCountInstance5;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue5 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue5 != null && sourceRetryWaitValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance5 = TimeSpan.Parse(((string)sourceRetryWaitValue5), CultureInfo.InvariantCulture);
                                                            odbcSourceInstance.SourceRetryWait = sourceRetryWaitInstance5;
                                                        }
                                                        transformationInstance.Source = odbcSourceInstance;
                                                    }
                                                    if (typeName2 == "ODataSource")
                                                    {
                                                        RelationalSource.ODataSource oDataSourceInstance = new RelationalSource.ODataSource();
                                                        
                                                        JToken sourceRetryCountValue6 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue6 != null && sourceRetryCountValue6.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance6 = ((int)sourceRetryCountValue6);
                                                            oDataSourceInstance.SourceRetryCount = sourceRetryCountInstance6;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue6 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue6 != null && sourceRetryWaitValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance6 = TimeSpan.Parse(((string)sourceRetryWaitValue6), CultureInfo.InvariantCulture);
                                                            oDataSourceInstance.SourceRetryWait = sourceRetryWaitInstance6;
                                                        }
                                                        transformationInstance.Source = oDataSourceInstance;
                                                    }
                                                    if (typeName2 == "HdfsSource")
                                                    {
                                                        RelationalSource.HdfsSource hdfsSourceInstance = new RelationalSource.HdfsSource();
                                                        
                                                        JToken sourceRetryCountValue7 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue7 != null && sourceRetryCountValue7.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance7 = ((int)sourceRetryCountValue7);
                                                            hdfsSourceInstance.SourceRetryCount = sourceRetryCountInstance7;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue7 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue7 != null && sourceRetryWaitValue7.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance7 = TimeSpan.Parse(((string)sourceRetryWaitValue7), CultureInfo.InvariantCulture);
                                                            hdfsSourceInstance.SourceRetryWait = sourceRetryWaitInstance7;
                                                        }
                                                        transformationInstance.Source = hdfsSourceInstance;
                                                    }
                                                    if (typeName2 == "SqlSource")
                                                    {
                                                        SqlSource sqlSourceInstance = new SqlSource();
                                                        
                                                        JToken sqlReaderQueryValue = sourceValue["sqlReaderQuery"];
                                                        if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                            sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue8 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue8 != null && sourceRetryCountValue8.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance8 = ((int)sourceRetryCountValue8);
                                                            sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance8;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue8 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue8 != null && sourceRetryWaitValue8.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance8 = TimeSpan.Parse(((string)sourceRetryWaitValue8), CultureInfo.InvariantCulture);
                                                            sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance8;
                                                        }
                                                        transformationInstance.Source = sqlSourceInstance;
                                                    }
                                                    if (typeName2 == "FileSystemSource")
                                                    {
                                                        FileSystemSource fileSystemSourceInstance = new FileSystemSource();
                                                        
                                                        JToken sourceRetryCountValue9 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue9 != null && sourceRetryCountValue9.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance9 = ((int)sourceRetryCountValue9);
                                                            fileSystemSourceInstance.SourceRetryCount = sourceRetryCountInstance9;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue9 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue9 != null && sourceRetryWaitValue9.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance9 = TimeSpan.Parse(((string)sourceRetryWaitValue9), CultureInfo.InvariantCulture);
                                                            fileSystemSourceInstance.SourceRetryWait = sourceRetryWaitInstance9;
                                                        }
                                                        transformationInstance.Source = fileSystemSourceInstance;
                                                    }
                                                    if (typeName2 == "OracleSource")
                                                    {
                                                        OracleSource oracleSourceInstance = new OracleSource();
                                                        
                                                        JToken oracleReaderQueryValue = sourceValue["oracleReaderQuery"];
                                                        if (oracleReaderQueryValue != null && oracleReaderQueryValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleReaderQueryInstance = ((string)oracleReaderQueryValue);
                                                            oracleSourceInstance.OracleReaderQuery = oracleReaderQueryInstance;
                                                        }
                                                        
                                                        JToken queryTimeoutValue = sourceValue["queryTimeout"];
                                                        if (queryTimeoutValue != null && queryTimeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan queryTimeoutInstance = TimeSpan.Parse(((string)queryTimeoutValue), CultureInfo.InvariantCulture);
                                                            oracleSourceInstance.QueryTimeout = queryTimeoutInstance;
                                                        }
                                                        
                                                        JToken sourceRetryCountValue10 = sourceValue["sourceRetryCount"];
                                                        if (sourceRetryCountValue10 != null && sourceRetryCountValue10.Type != JTokenType.Null)
                                                        {
                                                            int sourceRetryCountInstance10 = ((int)sourceRetryCountValue10);
                                                            oracleSourceInstance.SourceRetryCount = sourceRetryCountInstance10;
                                                        }
                                                        
                                                        JToken sourceRetryWaitValue10 = sourceValue["sourceRetryWait"];
                                                        if (sourceRetryWaitValue10 != null && sourceRetryWaitValue10.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sourceRetryWaitInstance10 = TimeSpan.Parse(((string)sourceRetryWaitValue10), CultureInfo.InvariantCulture);
                                                            oracleSourceInstance.SourceRetryWait = sourceRetryWaitInstance10;
                                                        }
                                                        transformationInstance.Source = oracleSourceInstance;
                                                    }
                                                }
                                                
                                                JToken sinkValue = transformationValue["sink"];
                                                if (sinkValue != null && sinkValue.Type != JTokenType.Null)
                                                {
                                                    string typeName3 = ((string)sinkValue["type"]);
                                                    if (typeName3 == "AzureQueueSink")
                                                    {
                                                        AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                        
                                                        JToken writeBatchSizeValue = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                            azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                            azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                            azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                            azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                            azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                        }
                                                        transformationInstance.Sink = azureQueueSinkInstance;
                                                    }
                                                    if (typeName3 == "AzureTableSink")
                                                    {
                                                        AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                        
                                                        JToken azureTableRetryIntervalInSecValue = sinkValue["azureTableRetryIntervalInSec"];
                                                        if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                        {
                                                            int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                            azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                        }
                                                        
                                                        JToken azureTableRetryTimesValue = sinkValue["azureTableRetryTimes"];
                                                        if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                        {
                                                            int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                            azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                        }
                                                        
                                                        JToken azureTableDefaultPartitionKeyValueValue = sinkValue["azureTableDefaultPartitionKeyValue"];
                                                        if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                            azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                        }
                                                        
                                                        JToken azureTablePartitionKeyNameValue = sinkValue["azureTablePartitionKeyName"];
                                                        if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                            azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                        }
                                                        
                                                        JToken azureTableRowKeyNameValue = sinkValue["azureTableRowKeyName"];
                                                        if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                            azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                        }
                                                        
                                                        JToken azureTableInsertTypeValue = sinkValue["azureTableInsertType"];
                                                        if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                            azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue2 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                            azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue2 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                            azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue2 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                            azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue2 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                            azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue2 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                            azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                        }
                                                        transformationInstance.Sink = azureTableSinkInstance;
                                                    }
                                                    if (typeName3 == "BlobSink")
                                                    {
                                                        BlobSink blobSinkInstance = new BlobSink();
                                                        
                                                        JToken blockWriterBlockSizeValue = sinkValue["blockWriterBlockSize"];
                                                        if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                        {
                                                            int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                            blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                        }
                                                        
                                                        JToken blobWriterOverwriteFilesValue = sinkValue["blobWriterOverwriteFiles"];
                                                        if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                        {
                                                            bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                            blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                        }
                                                        
                                                        JToken blobWriterPartitionColumnsValue = sinkValue["blobWriterPartitionColumns"];
                                                        if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                            blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                        }
                                                        
                                                        JToken blobWriterPartitionFormatValue = sinkValue["blobWriterPartitionFormat"];
                                                        if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                            blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                        }
                                                        
                                                        JToken blobWriterDateTimeFormatValue = sinkValue["blobWriterDateTimeFormat"];
                                                        if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                            blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                        }
                                                        
                                                        JToken blobWriterSeparatorValue = sinkValue["blobWriterSeparator"];
                                                        if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                            blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                        }
                                                        
                                                        JToken blobWriterRowSuffixValue = sinkValue["blobWriterRowSuffix"];
                                                        if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                        {
                                                            string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                            blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                        }
                                                        
                                                        JToken blobWriterAddHeaderValue = sinkValue["blobWriterAddHeader"];
                                                        if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                        {
                                                            bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                            blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue3 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                            blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue3 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                            blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue3 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                            blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue3 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                            blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue3 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                            blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                        }
                                                        transformationInstance.Sink = blobSinkInstance;
                                                    }
                                                    if (typeName3 == "DocumentDbCollectionSink")
                                                    {
                                                        DocumentDbCollectionSink documentDbCollectionSinkInstance = new DocumentDbCollectionSink();
                                                        
                                                        JToken nestingSeparatorValue2 = sinkValue["nestingSeparator"];
                                                        if (nestingSeparatorValue2 != null && nestingSeparatorValue2.Type != JTokenType.Null)
                                                        {
                                                            string nestingSeparatorInstance2 = ((string)nestingSeparatorValue2);
                                                            documentDbCollectionSinkInstance.NestingSeparator = nestingSeparatorInstance2;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue4 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                            documentDbCollectionSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue4 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue4 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                            documentDbCollectionSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue4 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                            documentDbCollectionSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue4 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                            documentDbCollectionSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                        }
                                                        transformationInstance.Sink = documentDbCollectionSinkInstance;
                                                    }
                                                    if (typeName3 == "SqlSink")
                                                    {
                                                        SqlSink sqlSinkInstance = new SqlSink();
                                                        
                                                        JToken sqlWriterStoredProcedureNameValue = sinkValue["sqlWriterStoredProcedureName"];
                                                        if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                            sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                        }
                                                        
                                                        JToken sqlWriterTableTypeValue = sinkValue["sqlWriterTableType"];
                                                        if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                            sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                        }
                                                        
                                                        JToken sqlWriterCleanupScriptValue = sinkValue["sqlWriterCleanupScript"];
                                                        if (sqlWriterCleanupScriptValue != null && sqlWriterCleanupScriptValue.Type != JTokenType.Null)
                                                        {
                                                            string sqlWriterCleanupScriptInstance = ((string)sqlWriterCleanupScriptValue);
                                                            sqlSinkInstance.SqlWriterCleanupScript = sqlWriterCleanupScriptInstance;
                                                        }
                                                        
                                                        JToken sliceIdentifierColumnNameValue = sinkValue["sliceIdentifierColumnName"];
                                                        if (sliceIdentifierColumnNameValue != null && sliceIdentifierColumnNameValue.Type != JTokenType.Null)
                                                        {
                                                            string sliceIdentifierColumnNameInstance = ((string)sliceIdentifierColumnNameValue);
                                                            sqlSinkInstance.SliceIdentifierColumnName = sliceIdentifierColumnNameInstance;
                                                        }
                                                        
                                                        JToken storedProcedureParametersSequenceElement = ((JToken)sinkValue["storedProcedureParameters"]);
                                                        if (storedProcedureParametersSequenceElement != null && storedProcedureParametersSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property in storedProcedureParametersSequenceElement)
                                                            {
                                                                string storedProcedureParametersKey = ((string)property.Name);
                                                                JObject varToken = ((JObject)property.Value);
                                                                StoredProcedureParameter storedProcedureParameterInstance = new StoredProcedureParameter();
                                                                sqlSinkInstance.StoredProcedureParameters.Add(storedProcedureParametersKey, storedProcedureParameterInstance);
                                                                
                                                                JToken valueValue = varToken["value"];
                                                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                                {
                                                                    string valueInstance = ((string)valueValue);
                                                                    storedProcedureParameterInstance.Value = valueInstance;
                                                                }
                                                                
                                                                JToken typeValue = varToken["type"];
                                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                                {
                                                                    string typeInstance = ((string)typeValue);
                                                                    storedProcedureParameterInstance.Type = typeInstance;
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken writeBatchSizeValue5 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue5 != null && writeBatchSizeValue5.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance5 = ((int)writeBatchSizeValue5);
                                                            sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance5;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue5 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue5 != null && writeBatchTimeoutValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance5 = TimeSpan.Parse(((string)writeBatchTimeoutValue5), CultureInfo.InvariantCulture);
                                                            sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance5;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue5 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue5 != null && sinkRetryCountValue5.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance5 = ((int)sinkRetryCountValue5);
                                                            sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance5;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue5 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue5 != null && sinkRetryWaitValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance5 = TimeSpan.Parse(((string)sinkRetryWaitValue5), CultureInfo.InvariantCulture);
                                                            sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance5;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue5 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue5 != null && sinkPartitionDataValue5.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance5 = ((bool)sinkPartitionDataValue5);
                                                            sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance5;
                                                        }
                                                        transformationInstance.Sink = sqlSinkInstance;
                                                    }
                                                    if (typeName3 == "OracleSink")
                                                    {
                                                        OracleSink oracleSinkInstance = new OracleSink();
                                                        
                                                        JToken oracleWriterStoredProcedureNameValue = sinkValue["oracleWriterStoredProcedureName"];
                                                        if (oracleWriterStoredProcedureNameValue != null && oracleWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleWriterStoredProcedureNameInstance = ((string)oracleWriterStoredProcedureNameValue);
                                                            oracleSinkInstance.OracleWriterStoredProcedureName = oracleWriterStoredProcedureNameInstance;
                                                        }
                                                        
                                                        JToken oracleWriterTableTypeValue = sinkValue["oracleWriterTableType"];
                                                        if (oracleWriterTableTypeValue != null && oracleWriterTableTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string oracleWriterTableTypeInstance = ((string)oracleWriterTableTypeValue);
                                                            oracleSinkInstance.OracleWriterTableType = oracleWriterTableTypeInstance;
                                                        }
                                                        
                                                        JToken writeBatchSizeValue6 = sinkValue["writeBatchSize"];
                                                        if (writeBatchSizeValue6 != null && writeBatchSizeValue6.Type != JTokenType.Null)
                                                        {
                                                            int writeBatchSizeInstance6 = ((int)writeBatchSizeValue6);
                                                            oracleSinkInstance.WriteBatchSize = writeBatchSizeInstance6;
                                                        }
                                                        
                                                        JToken writeBatchTimeoutValue6 = sinkValue["writeBatchTimeout"];
                                                        if (writeBatchTimeoutValue6 != null && writeBatchTimeoutValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan writeBatchTimeoutInstance6 = TimeSpan.Parse(((string)writeBatchTimeoutValue6), CultureInfo.InvariantCulture);
                                                            oracleSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance6;
                                                        }
                                                        
                                                        JToken sinkRetryCountValue6 = sinkValue["sinkRetryCount"];
                                                        if (sinkRetryCountValue6 != null && sinkRetryCountValue6.Type != JTokenType.Null)
                                                        {
                                                            int sinkRetryCountInstance6 = ((int)sinkRetryCountValue6);
                                                            oracleSinkInstance.SinkRetryCount = sinkRetryCountInstance6;
                                                        }
                                                        
                                                        JToken sinkRetryWaitValue6 = sinkValue["sinkRetryWait"];
                                                        if (sinkRetryWaitValue6 != null && sinkRetryWaitValue6.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan sinkRetryWaitInstance6 = TimeSpan.Parse(((string)sinkRetryWaitValue6), CultureInfo.InvariantCulture);
                                                            oracleSinkInstance.SinkRetryWait = sinkRetryWaitInstance6;
                                                        }
                                                        
                                                        JToken sinkPartitionDataValue6 = sinkValue["sinkPartitionData"];
                                                        if (sinkPartitionDataValue6 != null && sinkPartitionDataValue6.Type != JTokenType.Null)
                                                        {
                                                            bool sinkPartitionDataInstance6 = ((bool)sinkPartitionDataValue6);
                                                            oracleSinkInstance.SinkPartitionData = sinkPartitionDataInstance6;
                                                        }
                                                        transformationInstance.Sink = oracleSinkInstance;
                                                    }
                                                }
                                                
                                                JToken translatorValue = transformationValue["translator"];
                                                if (translatorValue != null && translatorValue.Type != JTokenType.Null)
                                                {
                                                    string typeName4 = ((string)translatorValue["type"]);
                                                    if (typeName4 == "TabularTranslator")
                                                    {
                                                        TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                        
                                                        JToken columnMappingsValue = translatorValue["columnMappings"];
                                                        if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                        {
                                                            string columnMappingsInstance = ((string)columnMappingsValue);
                                                            tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                        }
                                                        transformationInstance.Translator = tabularTranslatorInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue2 = activitiesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                copyActivityInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken descriptionValue2 = activitiesValue["description"];
                                            if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance2 = ((string)descriptionValue2);
                                                copyActivityInstance.Description = descriptionInstance2;
                                            }
                                            
                                            JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                            }
                                            
                                            JToken policyValue = activitiesValue["policy"];
                                            if (policyValue != null && policyValue.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance = new ActivityPolicy();
                                                copyActivityInstance.Policy = policyInstance;
                                                
                                                JToken timeoutValue = policyValue["timeout"];
                                                if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                    policyInstance.Timeout = timeoutInstance;
                                                }
                                                
                                                JToken delayValue = policyValue["delay"];
                                                if (delayValue != null && delayValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                    policyInstance.Delay = delayInstance;
                                                }
                                                
                                                JToken concurrencyValue = policyValue["concurrency"];
                                                if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance = ((uint)concurrencyValue);
                                                    policyInstance.Concurrency = concurrencyInstance;
                                                }
                                                
                                                JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                                if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                    policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                                }
                                                
                                                JToken retryValue = policyValue["retry"];
                                                if (retryValue != null && retryValue.Type != JTokenType.Null)
                                                {
                                                    int retryInstance = ((int)retryValue);
                                                    policyInstance.Retry = retryInstance;
                                                }
                                                
                                                JToken longRetryValue = policyValue["longRetry"];
                                                if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance = ((int)longRetryValue);
                                                    policyInstance.LongRetry = longRetryInstance;
                                                }
                                                
                                                JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                                if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                    policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                                }
                                            }
                                            
                                            JToken inputsArray = activitiesValue["inputs"];
                                            if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue in ((JArray)inputsArray))
                                                {
                                                    ActivityInput activityInputInstance = new ActivityInput();
                                                    copyActivityInstance.Inputs.Add(activityInputInstance);
                                                    
                                                    JToken startTimeValue = inputsValue["startTime"];
                                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance = ((string)startTimeValue);
                                                        activityInputInstance.StartTime = startTimeInstance;
                                                    }
                                                    
                                                    JToken endTimeValue = inputsValue["endTime"];
                                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance = ((string)endTimeValue);
                                                        activityInputInstance.EndTime = endTimeInstance;
                                                    }
                                                    
                                                    JToken lengthValue = inputsValue["length"];
                                                    if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                        activityInputInstance.Length = lengthInstance;
                                                    }
                                                    
                                                    JToken nameValue3 = inputsValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        activityInputInstance.Name = nameInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray = activitiesValue["outputs"];
                                            if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue in ((JArray)outputsArray))
                                                {
                                                    ActivityOutput activityOutputInstance = new ActivityOutput();
                                                    copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                    
                                                    JToken nameValue4 = outputsValue["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        activityOutputInstance.Name = nameInstance4;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(copyActivityInstance);
                                        }
                                        if (typeName == "HDInsightActivity")
                                        {
                                            HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                            
                                            JToken transformationValue2 = activitiesValue["transformation"];
                                            if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                                            {
                                                string typeName5 = ((string)transformationValue2["type"]);
                                                if (typeName5 == "Hive")
                                                {
                                                    Hive hiveInstance = new Hive();
                                                    
                                                    JToken scriptValue = transformationValue2["script"];
                                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance = ((string)scriptValue);
                                                        hiveInstance.Script = scriptInstance;
                                                    }
                                                    
                                                    JToken scriptPathValue = transformationValue2["scriptPath"];
                                                    if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptPathInstance = ((string)scriptPathValue);
                                                        hiveInstance.ScriptPath = scriptPathInstance;
                                                    }
                                                    
                                                    JToken scriptLinkedServiceValue = transformationValue2["scriptLinkedService"];
                                                    if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                        hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken definesSequenceElement = ((JToken)transformationValue2["defines"]);
                                                    if (definesSequenceElement != null && definesSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property2 in definesSequenceElement)
                                                        {
                                                            string definesKey = ((string)property2.Name);
                                                            string definesValue = ((string)property2.Value);
                                                            hiveInstance.Defines.Add(definesKey, definesValue);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property3 in extendedPropertiesSequenceElement)
                                                        {
                                                            string extendedPropertiesKey = ((string)property3.Name);
                                                            string extendedPropertiesValue = ((string)property3.Value);
                                                            hiveInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray != null && storageLinkedServicesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray))
                                                        {
                                                            hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray = transformationValue2["arguments"];
                                                    if (argumentsArray != null && argumentsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue in ((JArray)argumentsArray))
                                                        {
                                                            hiveInstance.Arguments.Add(((string)argumentsValue));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = hiveInstance;
                                                }
                                                if (typeName5 == "Pig")
                                                {
                                                    Pig pigInstance = new Pig();
                                                    
                                                    JToken scriptValue2 = transformationValue2["script"];
                                                    if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptInstance2 = ((string)scriptValue2);
                                                        pigInstance.Script = scriptInstance2;
                                                    }
                                                    
                                                    JToken scriptPathValue2 = transformationValue2["scriptPath"];
                                                    if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptPathInstance2 = ((string)scriptPathValue2);
                                                        pigInstance.ScriptPath = scriptPathInstance2;
                                                    }
                                                    
                                                    JToken scriptLinkedServiceValue2 = transformationValue2["scriptLinkedService"];
                                                    if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                    {
                                                        string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                        pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property4 in extendedPropertiesSequenceElement2)
                                                        {
                                                            string extendedPropertiesKey2 = ((string)property4.Name);
                                                            string extendedPropertiesValue2 = ((string)property4.Value);
                                                            pigInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray2 = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray2 != null && storageLinkedServicesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray2))
                                                        {
                                                            pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray2 = transformationValue2["arguments"];
                                                    if (argumentsArray2 != null && argumentsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue2 in ((JArray)argumentsArray2))
                                                        {
                                                            pigInstance.Arguments.Add(((string)argumentsValue2));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = pigInstance;
                                                }
                                                if (typeName5 == "MapReduce")
                                                {
                                                    MapReduce mapReduceInstance = new MapReduce();
                                                    
                                                    JToken classNameValue = transformationValue2["className"];
                                                    if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                    {
                                                        string classNameInstance = ((string)classNameValue);
                                                        mapReduceInstance.ClassName = classNameInstance;
                                                    }
                                                    
                                                    JToken jarFilePathValue = transformationValue2["jarFilePath"];
                                                    if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                    {
                                                        string jarFilePathInstance = ((string)jarFilePathValue);
                                                        mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                    }
                                                    
                                                    JToken jarLinkedServiceValue = transformationValue2["jarLinkedService"];
                                                    if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                        mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken jarLibsArray = transformationValue2["jarLibs"];
                                                    if (jarLibsArray != null && jarLibsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken jarLibsValue in ((JArray)jarLibsArray))
                                                        {
                                                            mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                        }
                                                    }
                                                    
                                                    JToken definesSequenceElement2 = ((JToken)transformationValue2["defines"]);
                                                    if (definesSequenceElement2 != null && definesSequenceElement2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property5 in definesSequenceElement2)
                                                        {
                                                            string definesKey2 = ((string)property5.Name);
                                                            string definesValue2 = ((string)property5.Value);
                                                            mapReduceInstance.Defines.Add(definesKey2, definesValue2);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property6 in extendedPropertiesSequenceElement3)
                                                        {
                                                            string extendedPropertiesKey3 = ((string)property6.Name);
                                                            string extendedPropertiesValue3 = ((string)property6.Value);
                                                            mapReduceInstance.ExtendedProperties.Add(extendedPropertiesKey3, extendedPropertiesValue3);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray3 = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray3 != null && storageLinkedServicesArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray3))
                                                        {
                                                            mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray3 = transformationValue2["arguments"];
                                                    if (argumentsArray3 != null && argumentsArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue3 in ((JArray)argumentsArray3))
                                                        {
                                                            mapReduceInstance.Arguments.Add(((string)argumentsValue3));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = mapReduceInstance;
                                                }
                                                if (typeName5 == "Streaming")
                                                {
                                                    Streaming streamingInstance = new Streaming();
                                                    
                                                    JToken mapperValue = transformationValue2["mapper"];
                                                    if (mapperValue != null && mapperValue.Type != JTokenType.Null)
                                                    {
                                                        string mapperInstance = ((string)mapperValue);
                                                        streamingInstance.Mapper = mapperInstance;
                                                    }
                                                    
                                                    JToken reducerValue = transformationValue2["reducer"];
                                                    if (reducerValue != null && reducerValue.Type != JTokenType.Null)
                                                    {
                                                        string reducerInstance = ((string)reducerValue);
                                                        streamingInstance.Reducer = reducerInstance;
                                                    }
                                                    
                                                    JToken inputValue = transformationValue2["input"];
                                                    if (inputValue != null && inputValue.Type != JTokenType.Null)
                                                    {
                                                        string inputInstance = ((string)inputValue);
                                                        streamingInstance.Input = inputInstance;
                                                    }
                                                    
                                                    JToken outputValue = transformationValue2["output"];
                                                    if (outputValue != null && outputValue.Type != JTokenType.Null)
                                                    {
                                                        string outputInstance = ((string)outputValue);
                                                        streamingInstance.Output = outputInstance;
                                                    }
                                                    
                                                    JToken filePathsArray = transformationValue2["filePaths"];
                                                    if (filePathsArray != null && filePathsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken filePathsValue in ((JArray)filePathsArray))
                                                        {
                                                            streamingInstance.FilePaths.Add(((string)filePathsValue));
                                                        }
                                                    }
                                                    
                                                    JToken fileLinkedServiceValue = transformationValue2["fileLinkedService"];
                                                    if (fileLinkedServiceValue != null && fileLinkedServiceValue.Type != JTokenType.Null)
                                                    {
                                                        string fileLinkedServiceInstance = ((string)fileLinkedServiceValue);
                                                        streamingInstance.FileLinkedService = fileLinkedServiceInstance;
                                                    }
                                                    
                                                    JToken combinerValue = transformationValue2["combiner"];
                                                    if (combinerValue != null && combinerValue.Type != JTokenType.Null)
                                                    {
                                                        string combinerInstance = ((string)combinerValue);
                                                        streamingInstance.Combiner = combinerInstance;
                                                    }
                                                    
                                                    JToken commandEnvironmentArray = transformationValue2["commandEnvironment"];
                                                    if (commandEnvironmentArray != null && commandEnvironmentArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken commandEnvironmentValue in ((JArray)commandEnvironmentArray))
                                                        {
                                                            streamingInstance.CommandEnvironment.Add(((string)commandEnvironmentValue));
                                                        }
                                                    }
                                                    
                                                    JToken definesSequenceElement3 = ((JToken)transformationValue2["defines"]);
                                                    if (definesSequenceElement3 != null && definesSequenceElement3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property7 in definesSequenceElement3)
                                                        {
                                                            string definesKey3 = ((string)property7.Name);
                                                            string definesValue3 = ((string)property7.Value);
                                                            streamingInstance.Defines.Add(definesKey3, definesValue3);
                                                        }
                                                    }
                                                    
                                                    JToken extendedPropertiesSequenceElement4 = ((JToken)transformationValue2["extendedProperties"]);
                                                    if (extendedPropertiesSequenceElement4 != null && extendedPropertiesSequenceElement4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property8 in extendedPropertiesSequenceElement4)
                                                        {
                                                            string extendedPropertiesKey4 = ((string)property8.Name);
                                                            string extendedPropertiesValue4 = ((string)property8.Value);
                                                            streamingInstance.ExtendedProperties.Add(extendedPropertiesKey4, extendedPropertiesValue4);
                                                        }
                                                    }
                                                    
                                                    JToken storageLinkedServicesArray4 = transformationValue2["storageLinkedServices"];
                                                    if (storageLinkedServicesArray4 != null && storageLinkedServicesArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken storageLinkedServicesValue4 in ((JArray)storageLinkedServicesArray4))
                                                        {
                                                            streamingInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue4));
                                                        }
                                                    }
                                                    
                                                    JToken argumentsArray4 = transformationValue2["arguments"];
                                                    if (argumentsArray4 != null && argumentsArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken argumentsValue4 in ((JArray)argumentsArray4))
                                                        {
                                                            streamingInstance.Arguments.Add(((string)argumentsValue4));
                                                        }
                                                    }
                                                    hDInsightActivityInstance.Transformation = streamingInstance;
                                                }
                                            }
                                            
                                            JToken nameValue5 = activitiesValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                string nameInstance5 = ((string)nameValue5);
                                                hDInsightActivityInstance.Name = nameInstance5;
                                            }
                                            
                                            JToken descriptionValue3 = activitiesValue["description"];
                                            if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance3 = ((string)descriptionValue3);
                                                hDInsightActivityInstance.Description = descriptionInstance3;
                                            }
                                            
                                            JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                            }
                                            
                                            JToken policyValue2 = activitiesValue["policy"];
                                            if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance2 = new ActivityPolicy();
                                                hDInsightActivityInstance.Policy = policyInstance2;
                                                
                                                JToken timeoutValue2 = policyValue2["timeout"];
                                                if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.Timeout = timeoutInstance2;
                                                }
                                                
                                                JToken delayValue2 = policyValue2["delay"];
                                                if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.Delay = delayInstance2;
                                                }
                                                
                                                JToken concurrencyValue2 = policyValue2["concurrency"];
                                                if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                    policyInstance2.Concurrency = concurrencyInstance2;
                                                }
                                                
                                                JToken executionPriorityOrderValue2 = policyValue2["executionPriorityOrder"];
                                                if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                    policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                                }
                                                
                                                JToken retryValue2 = policyValue2["retry"];
                                                if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                                {
                                                    int retryInstance2 = ((int)retryValue2);
                                                    policyInstance2.Retry = retryInstance2;
                                                }
                                                
                                                JToken longRetryValue2 = policyValue2["longRetry"];
                                                if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance2 = ((int)longRetryValue2);
                                                    policyInstance2.LongRetry = longRetryInstance2;
                                                }
                                                
                                                JToken longRetryIntervalValue2 = policyValue2["longRetryInterval"];
                                                if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                    policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                                }
                                            }
                                            
                                            JToken inputsArray2 = activitiesValue["inputs"];
                                            if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                                {
                                                    ActivityInput activityInputInstance2 = new ActivityInput();
                                                    hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                    
                                                    JToken startTimeValue2 = inputsValue2["startTime"];
                                                    if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance2 = ((string)startTimeValue2);
                                                        activityInputInstance2.StartTime = startTimeInstance2;
                                                    }
                                                    
                                                    JToken endTimeValue2 = inputsValue2["endTime"];
                                                    if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance2 = ((string)endTimeValue2);
                                                        activityInputInstance2.EndTime = endTimeInstance2;
                                                    }
                                                    
                                                    JToken lengthValue2 = inputsValue2["length"];
                                                    if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                        activityInputInstance2.Length = lengthInstance2;
                                                    }
                                                    
                                                    JToken nameValue6 = inputsValue2["name"];
                                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance6 = ((string)nameValue6);
                                                        activityInputInstance2.Name = nameInstance6;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray2 = activitiesValue["outputs"];
                                            if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue2 in ((JArray)outputsArray2))
                                                {
                                                    ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                    hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                    
                                                    JToken nameValue7 = outputsValue2["name"];
                                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance7 = ((string)nameValue7);
                                                        activityOutputInstance2.Name = nameInstance7;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                        }
                                        if (typeName == "DotNetActivity")
                                        {
                                            DotNetActivity dotNetActivityInstance = new DotNetActivity();
                                            
                                            JToken transformationValue3 = activitiesValue["transformation"];
                                            if (transformationValue3 != null && transformationValue3.Type != JTokenType.Null)
                                            {
                                                DotNetActivityProperties transformationInstance2 = new DotNetActivityProperties();
                                                dotNetActivityInstance.Transformation = transformationInstance2;
                                                
                                                JToken assemblyNameValue = transformationValue3["assemblyName"];
                                                if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                                {
                                                    string assemblyNameInstance = ((string)assemblyNameValue);
                                                    transformationInstance2.AssemblyName = assemblyNameInstance;
                                                }
                                                
                                                JToken entryPointValue = transformationValue3["entryPoint"];
                                                if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                                {
                                                    string entryPointInstance = ((string)entryPointValue);
                                                    transformationInstance2.EntryPoint = entryPointInstance;
                                                }
                                                
                                                JToken packageLinkedServiceValue = transformationValue3["packageLinkedService"];
                                                if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                                {
                                                    string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                    transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                                }
                                                
                                                JToken packageFileValue = transformationValue3["packageFile"];
                                                if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                                {
                                                    string packageFileInstance = ((string)packageFileValue);
                                                    transformationInstance2.PackageFile = packageFileInstance;
                                                }
                                                
                                                JToken extendedPropertiesSequenceElement5 = ((JToken)transformationValue3["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement5 != null && extendedPropertiesSequenceElement5.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property9 in extendedPropertiesSequenceElement5)
                                                    {
                                                        string extendedPropertiesKey5 = ((string)property9.Name);
                                                        string extendedPropertiesValue5 = ((string)property9.Value);
                                                        transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey5, extendedPropertiesValue5);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue8 = activitiesValue["name"];
                                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                            {
                                                string nameInstance8 = ((string)nameValue8);
                                                dotNetActivityInstance.Name = nameInstance8;
                                            }
                                            
                                            JToken descriptionValue4 = activitiesValue["description"];
                                            if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance4 = ((string)descriptionValue4);
                                                dotNetActivityInstance.Description = descriptionInstance4;
                                            }
                                            
                                            JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                dotNetActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                            }
                                            
                                            JToken policyValue3 = activitiesValue["policy"];
                                            if (policyValue3 != null && policyValue3.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance3 = new ActivityPolicy();
                                                dotNetActivityInstance.Policy = policyInstance3;
                                                
                                                JToken timeoutValue3 = policyValue3["timeout"];
                                                if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.Timeout = timeoutInstance3;
                                                }
                                                
                                                JToken delayValue3 = policyValue3["delay"];
                                                if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.Delay = delayInstance3;
                                                }
                                                
                                                JToken concurrencyValue3 = policyValue3["concurrency"];
                                                if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                    policyInstance3.Concurrency = concurrencyInstance3;
                                                }
                                                
                                                JToken executionPriorityOrderValue3 = policyValue3["executionPriorityOrder"];
                                                if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                    policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                                }
                                                
                                                JToken retryValue3 = policyValue3["retry"];
                                                if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                                {
                                                    int retryInstance3 = ((int)retryValue3);
                                                    policyInstance3.Retry = retryInstance3;
                                                }
                                                
                                                JToken longRetryValue3 = policyValue3["longRetry"];
                                                if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance3 = ((int)longRetryValue3);
                                                    policyInstance3.LongRetry = longRetryInstance3;
                                                }
                                                
                                                JToken longRetryIntervalValue3 = policyValue3["longRetryInterval"];
                                                if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                    policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                                }
                                            }
                                            
                                            JToken inputsArray3 = activitiesValue["inputs"];
                                            if (inputsArray3 != null && inputsArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue3 in ((JArray)inputsArray3))
                                                {
                                                    ActivityInput activityInputInstance3 = new ActivityInput();
                                                    dotNetActivityInstance.Inputs.Add(activityInputInstance3);
                                                    
                                                    JToken startTimeValue3 = inputsValue3["startTime"];
                                                    if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance3 = ((string)startTimeValue3);
                                                        activityInputInstance3.StartTime = startTimeInstance3;
                                                    }
                                                    
                                                    JToken endTimeValue3 = inputsValue3["endTime"];
                                                    if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance3 = ((string)endTimeValue3);
                                                        activityInputInstance3.EndTime = endTimeInstance3;
                                                    }
                                                    
                                                    JToken lengthValue3 = inputsValue3["length"];
                                                    if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                        activityInputInstance3.Length = lengthInstance3;
                                                    }
                                                    
                                                    JToken nameValue9 = inputsValue3["name"];
                                                    if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance9 = ((string)nameValue9);
                                                        activityInputInstance3.Name = nameInstance9;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray3 = activitiesValue["outputs"];
                                            if (outputsArray3 != null && outputsArray3.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue3 in ((JArray)outputsArray3))
                                                {
                                                    ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                    dotNetActivityInstance.Outputs.Add(activityOutputInstance3);
                                                    
                                                    JToken nameValue10 = outputsValue3["name"];
                                                    if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance10 = ((string)nameValue10);
                                                        activityOutputInstance3.Name = nameInstance10;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(dotNetActivityInstance);
                                        }
                                        if (typeName == "StoredProcedureActivity")
                                        {
                                            StoredProcedureActivity storedProcedureActivityInstance = new StoredProcedureActivity();
                                            
                                            JToken transformationValue4 = activitiesValue["transformation"];
                                            if (transformationValue4 != null && transformationValue4.Type != JTokenType.Null)
                                            {
                                                StoredProcedureActivityProperties transformationInstance3 = new StoredProcedureActivityProperties();
                                                storedProcedureActivityInstance.Transformation = transformationInstance3;
                                                
                                                JToken storedProcedureNameValue = transformationValue4["storedProcedureName"];
                                                if (storedProcedureNameValue != null && storedProcedureNameValue.Type != JTokenType.Null)
                                                {
                                                    string storedProcedureNameInstance = ((string)storedProcedureNameValue);
                                                    transformationInstance3.StoredProcedureName = storedProcedureNameInstance;
                                                }
                                                
                                                JToken storedProcedureParametersSequenceElement2 = ((JToken)transformationValue4["storedProcedureParameters"]);
                                                if (storedProcedureParametersSequenceElement2 != null && storedProcedureParametersSequenceElement2.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property10 in storedProcedureParametersSequenceElement2)
                                                    {
                                                        string storedProcedureParametersKey2 = ((string)property10.Name);
                                                        string storedProcedureParametersValue = ((string)property10.Value);
                                                        transformationInstance3.StoredProcedureActivityParameters.Add(storedProcedureParametersKey2, storedProcedureParametersValue);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue11 = activitiesValue["name"];
                                            if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                            {
                                                string nameInstance11 = ((string)nameValue11);
                                                storedProcedureActivityInstance.Name = nameInstance11;
                                            }
                                            
                                            JToken descriptionValue5 = activitiesValue["description"];
                                            if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance5 = ((string)descriptionValue5);
                                                storedProcedureActivityInstance.Description = descriptionInstance5;
                                            }
                                            
                                            JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                storedProcedureActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                            }
                                            
                                            JToken policyValue4 = activitiesValue["policy"];
                                            if (policyValue4 != null && policyValue4.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance4 = new ActivityPolicy();
                                                storedProcedureActivityInstance.Policy = policyInstance4;
                                                
                                                JToken timeoutValue4 = policyValue4["timeout"];
                                                if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.Timeout = timeoutInstance4;
                                                }
                                                
                                                JToken delayValue4 = policyValue4["delay"];
                                                if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.Delay = delayInstance4;
                                                }
                                                
                                                JToken concurrencyValue4 = policyValue4["concurrency"];
                                                if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                    policyInstance4.Concurrency = concurrencyInstance4;
                                                }
                                                
                                                JToken executionPriorityOrderValue4 = policyValue4["executionPriorityOrder"];
                                                if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                    policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                                }
                                                
                                                JToken retryValue4 = policyValue4["retry"];
                                                if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                                {
                                                    int retryInstance4 = ((int)retryValue4);
                                                    policyInstance4.Retry = retryInstance4;
                                                }
                                                
                                                JToken longRetryValue4 = policyValue4["longRetry"];
                                                if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance4 = ((int)longRetryValue4);
                                                    policyInstance4.LongRetry = longRetryInstance4;
                                                }
                                                
                                                JToken longRetryIntervalValue4 = policyValue4["longRetryInterval"];
                                                if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                    policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                                }
                                            }
                                            
                                            JToken inputsArray4 = activitiesValue["inputs"];
                                            if (inputsArray4 != null && inputsArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue4 in ((JArray)inputsArray4))
                                                {
                                                    ActivityInput activityInputInstance4 = new ActivityInput();
                                                    storedProcedureActivityInstance.Inputs.Add(activityInputInstance4);
                                                    
                                                    JToken startTimeValue4 = inputsValue4["startTime"];
                                                    if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance4 = ((string)startTimeValue4);
                                                        activityInputInstance4.StartTime = startTimeInstance4;
                                                    }
                                                    
                                                    JToken endTimeValue4 = inputsValue4["endTime"];
                                                    if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance4 = ((string)endTimeValue4);
                                                        activityInputInstance4.EndTime = endTimeInstance4;
                                                    }
                                                    
                                                    JToken lengthValue4 = inputsValue4["length"];
                                                    if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                        activityInputInstance4.Length = lengthInstance4;
                                                    }
                                                    
                                                    JToken nameValue12 = inputsValue4["name"];
                                                    if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance12 = ((string)nameValue12);
                                                        activityInputInstance4.Name = nameInstance12;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray4 = activitiesValue["outputs"];
                                            if (outputsArray4 != null && outputsArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue4 in ((JArray)outputsArray4))
                                                {
                                                    ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                    storedProcedureActivityInstance.Outputs.Add(activityOutputInstance4);
                                                    
                                                    JToken nameValue13 = outputsValue4["name"];
                                                    if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance13 = ((string)nameValue13);
                                                        activityOutputInstance4.Name = nameInstance13;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(storedProcedureActivityInstance);
                                        }
                                        if (typeName == "AzureMLBatchScoringActivity")
                                        {
                                            AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                            
                                            JToken transformationValue5 = activitiesValue["transformation"];
                                            if (transformationValue5 != null && transformationValue5.Type != JTokenType.Null)
                                            {
                                                AzureMLActivityProperties transformationInstance4 = new AzureMLActivityProperties();
                                                azureMLBatchScoringActivityInstance.Transformation = transformationInstance4;
                                                
                                                JToken webServiceParametersSequenceElement = ((JToken)transformationValue5["webServiceParameters"]);
                                                if (webServiceParametersSequenceElement != null && webServiceParametersSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property11 in webServiceParametersSequenceElement)
                                                    {
                                                        string webServiceParametersKey = ((string)property11.Name);
                                                        string webServiceParametersValue = ((string)property11.Value);
                                                        transformationInstance4.WebServiceParameters.Add(webServiceParametersKey, webServiceParametersValue);
                                                    }
                                                }
                                            }
                                            
                                            JToken nameValue14 = activitiesValue["name"];
                                            if (nameValue14 != null && nameValue14.Type != JTokenType.Null)
                                            {
                                                string nameInstance14 = ((string)nameValue14);
                                                azureMLBatchScoringActivityInstance.Name = nameInstance14;
                                            }
                                            
                                            JToken descriptionValue6 = activitiesValue["description"];
                                            if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance6 = ((string)descriptionValue6);
                                                azureMLBatchScoringActivityInstance.Description = descriptionInstance6;
                                            }
                                            
                                            JToken linkedServiceNameValue5 = activitiesValue["linkedServiceName"];
                                            if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                            {
                                                string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance5;
                                            }
                                            
                                            JToken policyValue5 = activitiesValue["policy"];
                                            if (policyValue5 != null && policyValue5.Type != JTokenType.Null)
                                            {
                                                ActivityPolicy policyInstance5 = new ActivityPolicy();
                                                azureMLBatchScoringActivityInstance.Policy = policyInstance5;
                                                
                                                JToken timeoutValue5 = policyValue5["timeout"];
                                                if (timeoutValue5 != null && timeoutValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance5 = TimeSpan.Parse(((string)timeoutValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.Timeout = timeoutInstance5;
                                                }
                                                
                                                JToken delayValue5 = policyValue5["delay"];
                                                if (delayValue5 != null && delayValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan delayInstance5 = TimeSpan.Parse(((string)delayValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.Delay = delayInstance5;
                                                }
                                                
                                                JToken concurrencyValue5 = policyValue5["concurrency"];
                                                if (concurrencyValue5 != null && concurrencyValue5.Type != JTokenType.Null)
                                                {
                                                    uint concurrencyInstance5 = ((uint)concurrencyValue5);
                                                    policyInstance5.Concurrency = concurrencyInstance5;
                                                }
                                                
                                                JToken executionPriorityOrderValue5 = policyValue5["executionPriorityOrder"];
                                                if (executionPriorityOrderValue5 != null && executionPriorityOrderValue5.Type != JTokenType.Null)
                                                {
                                                    string executionPriorityOrderInstance5 = ((string)executionPriorityOrderValue5);
                                                    policyInstance5.ExecutionPriorityOrder = executionPriorityOrderInstance5;
                                                }
                                                
                                                JToken retryValue5 = policyValue5["retry"];
                                                if (retryValue5 != null && retryValue5.Type != JTokenType.Null)
                                                {
                                                    int retryInstance5 = ((int)retryValue5);
                                                    policyInstance5.Retry = retryInstance5;
                                                }
                                                
                                                JToken longRetryValue5 = policyValue5["longRetry"];
                                                if (longRetryValue5 != null && longRetryValue5.Type != JTokenType.Null)
                                                {
                                                    int longRetryInstance5 = ((int)longRetryValue5);
                                                    policyInstance5.LongRetry = longRetryInstance5;
                                                }
                                                
                                                JToken longRetryIntervalValue5 = policyValue5["longRetryInterval"];
                                                if (longRetryIntervalValue5 != null && longRetryIntervalValue5.Type != JTokenType.Null)
                                                {
                                                    TimeSpan longRetryIntervalInstance5 = TimeSpan.Parse(((string)longRetryIntervalValue5), CultureInfo.InvariantCulture);
                                                    policyInstance5.LongRetryInterval = longRetryIntervalInstance5;
                                                }
                                            }
                                            
                                            JToken inputsArray5 = activitiesValue["inputs"];
                                            if (inputsArray5 != null && inputsArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken inputsValue5 in ((JArray)inputsArray5))
                                                {
                                                    ActivityInput activityInputInstance5 = new ActivityInput();
                                                    azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance5);
                                                    
                                                    JToken startTimeValue5 = inputsValue5["startTime"];
                                                    if (startTimeValue5 != null && startTimeValue5.Type != JTokenType.Null)
                                                    {
                                                        string startTimeInstance5 = ((string)startTimeValue5);
                                                        activityInputInstance5.StartTime = startTimeInstance5;
                                                    }
                                                    
                                                    JToken endTimeValue5 = inputsValue5["endTime"];
                                                    if (endTimeValue5 != null && endTimeValue5.Type != JTokenType.Null)
                                                    {
                                                        string endTimeInstance5 = ((string)endTimeValue5);
                                                        activityInputInstance5.EndTime = endTimeInstance5;
                                                    }
                                                    
                                                    JToken lengthValue5 = inputsValue5["length"];
                                                    if (lengthValue5 != null && lengthValue5.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan lengthInstance5 = TimeSpan.Parse(((string)lengthValue5), CultureInfo.InvariantCulture);
                                                        activityInputInstance5.Length = lengthInstance5;
                                                    }
                                                    
                                                    JToken nameValue15 = inputsValue5["name"];
                                                    if (nameValue15 != null && nameValue15.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance15 = ((string)nameValue15);
                                                        activityInputInstance5.Name = nameInstance15;
                                                    }
                                                }
                                            }
                                            
                                            JToken outputsArray5 = activitiesValue["outputs"];
                                            if (outputsArray5 != null && outputsArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken outputsValue5 in ((JArray)outputsArray5))
                                                {
                                                    ActivityOutput activityOutputInstance5 = new ActivityOutput();
                                                    azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance5);
                                                    
                                                    JToken nameValue16 = outputsValue5["name"];
                                                    if (nameValue16 != null && nameValue16.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance16 = ((string)nameValue16);
                                                        activityOutputInstance5.Name = nameInstance16;
                                                    }
                                                }
                                            }
                                            propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                        }
                                    }
                                }
                                
                                JToken startValue = propertiesValue["start"];
                                if (startValue != null && startValue.Type != JTokenType.Null)
                                {
                                    DateTime startInstance = ((DateTime)startValue);
                                    propertiesInstance.Start = startInstance;
                                }
                                
                                JToken endValue = propertiesValue["end"];
                                if (endValue != null && endValue.Type != JTokenType.Null)
                                {
                                    DateTime endInstance = ((DateTime)endValue);
                                    propertiesInstance.End = endInstance;
                                }
                                
                                JToken isPausedValue = propertiesValue["isPaused"];
                                if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                {
                                    bool isPausedInstance = ((bool)isPausedValue);
                                    propertiesInstance.IsPaused = isPausedInstance;
                                }
                                
                                JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                {
                                    PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                    propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                    
                                    JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                    if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                        runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                                
                                JToken hubNameValue = propertiesValue["hubName"];
                                if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                {
                                    string hubNameInstance = ((string)hubNameValue);
                                    propertiesInstance.HubName = hubNameInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    if (result.Pipeline != null && result.Pipeline.Properties != null && result.Pipeline.Properties.ProvisioningState == "Failed")
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (result.Pipeline != null && result.Pipeline.Properties != null && result.Pipeline.Properties.ProvisioningState == "Succeeded")
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of pipeline instances with the link to the next
        /// page.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List pipeline operation response.
        /// </returns>
        public async Task<PipelineListResponse> ListAsync(string resourceGroupName, string dataFactoryName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Pipeline pipelineInstance = new Pipeline();
                                    result.Pipelines.Add(pipelineInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        pipelineInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        PipelineProperties propertiesInstance = new PipelineProperties();
                                        pipelineInstance.Properties = propertiesInstance;
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken activitiesArray = propertiesValue["activities"];
                                        if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                            {
                                                string typeName = ((string)activitiesValue["type"]);
                                                if (typeName == "CopyActivity")
                                                {
                                                    CopyActivity copyActivityInstance = new CopyActivity();
                                                    
                                                    JToken transformationValue = activitiesValue["transformation"];
                                                    if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                                    {
                                                        CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                                        copyActivityInstance.Transformation = transformationInstance;
                                                        
                                                        JToken sourceValue = transformationValue["source"];
                                                        if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                                        {
                                                            string typeName2 = ((string)sourceValue["type"]);
                                                            if (typeName2 == "AzureTableSource")
                                                            {
                                                                AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                                
                                                                JToken azureTableSourceQueryValue = sourceValue["azureTableSourceQuery"];
                                                                if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                                {
                                                                    string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                                    azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                                }
                                                                
                                                                JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue["azureTableSourceIgnoreTableNotFound"];
                                                                if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                                {
                                                                    bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                                    azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                                    azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                                    azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                                }
                                                                transformationInstance.Source = azureTableSourceInstance;
                                                            }
                                                            if (typeName2 == "BlobSource")
                                                            {
                                                                BlobSource blobSourceInstance = new BlobSource();
                                                                
                                                                JToken blobColumnSeparatorsValue = sourceValue["blobColumnSeparators"];
                                                                if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                                    blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                                }
                                                                
                                                                JToken treatEmptyAsNullValue = sourceValue["treatEmptyAsNull"];
                                                                if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                                {
                                                                    bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                                    blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                                }
                                                                
                                                                JToken nullValuesValue = sourceValue["nullValues"];
                                                                if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                                {
                                                                    string nullValuesInstance = ((string)nullValuesValue);
                                                                    blobSourceInstance.NullValues = nullValuesInstance;
                                                                }
                                                                
                                                                JToken skipHeaderLineCountValue = sourceValue["skipHeaderLineCount"];
                                                                if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                                {
                                                                    int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                                    blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue2 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                                    blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue2 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                                    blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                                }
                                                                transformationInstance.Source = blobSourceInstance;
                                                            }
                                                            if (typeName2 == "DocumentDbCollectionSource")
                                                            {
                                                                DocumentDbCollectionSource documentDbCollectionSourceInstance = new DocumentDbCollectionSource();
                                                                
                                                                JToken queryValue = sourceValue["query"];
                                                                if (queryValue != null && queryValue.Type != JTokenType.Null)
                                                                {
                                                                    string queryInstance = ((string)queryValue);
                                                                    documentDbCollectionSourceInstance.Query = queryInstance;
                                                                }
                                                                
                                                                JToken nestingSeparatorValue = sourceValue["nestingSeparator"];
                                                                if (nestingSeparatorValue != null && nestingSeparatorValue.Type != JTokenType.Null)
                                                                {
                                                                    string nestingSeparatorInstance = ((string)nestingSeparatorValue);
                                                                    documentDbCollectionSourceInstance.NestingSeparator = nestingSeparatorInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue3 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                                    documentDbCollectionSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue3 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                                    documentDbCollectionSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                                }
                                                                transformationInstance.Source = documentDbCollectionSourceInstance;
                                                            }
                                                            if (typeName2 == "RelationalSource")
                                                            {
                                                                RelationalSource relationalSourceInstance = new RelationalSource();
                                                                
                                                                JToken queryValue2 = sourceValue["query"];
                                                                if (queryValue2 != null && queryValue2.Type != JTokenType.Null)
                                                                {
                                                                    string queryInstance2 = ((string)queryValue2);
                                                                    relationalSourceInstance.Query = queryInstance2;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue4 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue4 != null && sourceRetryCountValue4.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance4 = ((int)sourceRetryCountValue4);
                                                                    relationalSourceInstance.SourceRetryCount = sourceRetryCountInstance4;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue4 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue4 != null && sourceRetryWaitValue4.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance4 = TimeSpan.Parse(((string)sourceRetryWaitValue4), CultureInfo.InvariantCulture);
                                                                    relationalSourceInstance.SourceRetryWait = sourceRetryWaitInstance4;
                                                                }
                                                                transformationInstance.Source = relationalSourceInstance;
                                                            }
                                                            if (typeName2 == "OdbcSource")
                                                            {
                                                                RelationalSource.OdbcSource odbcSourceInstance = new RelationalSource.OdbcSource();
                                                                
                                                                JToken odbcReaderQueryValue = sourceValue["odbcReaderQuery"];
                                                                if (odbcReaderQueryValue != null && odbcReaderQueryValue.Type != JTokenType.Null)
                                                                {
                                                                    string odbcReaderQueryInstance = ((string)odbcReaderQueryValue);
                                                                    odbcSourceInstance.OdbcReaderQuery = odbcReaderQueryInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue5 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue5 != null && sourceRetryCountValue5.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance5 = ((int)sourceRetryCountValue5);
                                                                    odbcSourceInstance.SourceRetryCount = sourceRetryCountInstance5;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue5 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue5 != null && sourceRetryWaitValue5.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance5 = TimeSpan.Parse(((string)sourceRetryWaitValue5), CultureInfo.InvariantCulture);
                                                                    odbcSourceInstance.SourceRetryWait = sourceRetryWaitInstance5;
                                                                }
                                                                transformationInstance.Source = odbcSourceInstance;
                                                            }
                                                            if (typeName2 == "ODataSource")
                                                            {
                                                                RelationalSource.ODataSource oDataSourceInstance = new RelationalSource.ODataSource();
                                                                
                                                                JToken sourceRetryCountValue6 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue6 != null && sourceRetryCountValue6.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance6 = ((int)sourceRetryCountValue6);
                                                                    oDataSourceInstance.SourceRetryCount = sourceRetryCountInstance6;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue6 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue6 != null && sourceRetryWaitValue6.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance6 = TimeSpan.Parse(((string)sourceRetryWaitValue6), CultureInfo.InvariantCulture);
                                                                    oDataSourceInstance.SourceRetryWait = sourceRetryWaitInstance6;
                                                                }
                                                                transformationInstance.Source = oDataSourceInstance;
                                                            }
                                                            if (typeName2 == "HdfsSource")
                                                            {
                                                                RelationalSource.HdfsSource hdfsSourceInstance = new RelationalSource.HdfsSource();
                                                                
                                                                JToken sourceRetryCountValue7 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue7 != null && sourceRetryCountValue7.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance7 = ((int)sourceRetryCountValue7);
                                                                    hdfsSourceInstance.SourceRetryCount = sourceRetryCountInstance7;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue7 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue7 != null && sourceRetryWaitValue7.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance7 = TimeSpan.Parse(((string)sourceRetryWaitValue7), CultureInfo.InvariantCulture);
                                                                    hdfsSourceInstance.SourceRetryWait = sourceRetryWaitInstance7;
                                                                }
                                                                transformationInstance.Source = hdfsSourceInstance;
                                                            }
                                                            if (typeName2 == "SqlSource")
                                                            {
                                                                SqlSource sqlSourceInstance = new SqlSource();
                                                                
                                                                JToken sqlReaderQueryValue = sourceValue["sqlReaderQuery"];
                                                                if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                                {
                                                                    string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                                    sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue8 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue8 != null && sourceRetryCountValue8.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance8 = ((int)sourceRetryCountValue8);
                                                                    sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance8;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue8 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue8 != null && sourceRetryWaitValue8.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance8 = TimeSpan.Parse(((string)sourceRetryWaitValue8), CultureInfo.InvariantCulture);
                                                                    sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance8;
                                                                }
                                                                transformationInstance.Source = sqlSourceInstance;
                                                            }
                                                            if (typeName2 == "FileSystemSource")
                                                            {
                                                                FileSystemSource fileSystemSourceInstance = new FileSystemSource();
                                                                
                                                                JToken sourceRetryCountValue9 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue9 != null && sourceRetryCountValue9.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance9 = ((int)sourceRetryCountValue9);
                                                                    fileSystemSourceInstance.SourceRetryCount = sourceRetryCountInstance9;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue9 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue9 != null && sourceRetryWaitValue9.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance9 = TimeSpan.Parse(((string)sourceRetryWaitValue9), CultureInfo.InvariantCulture);
                                                                    fileSystemSourceInstance.SourceRetryWait = sourceRetryWaitInstance9;
                                                                }
                                                                transformationInstance.Source = fileSystemSourceInstance;
                                                            }
                                                            if (typeName2 == "OracleSource")
                                                            {
                                                                OracleSource oracleSourceInstance = new OracleSource();
                                                                
                                                                JToken oracleReaderQueryValue = sourceValue["oracleReaderQuery"];
                                                                if (oracleReaderQueryValue != null && oracleReaderQueryValue.Type != JTokenType.Null)
                                                                {
                                                                    string oracleReaderQueryInstance = ((string)oracleReaderQueryValue);
                                                                    oracleSourceInstance.OracleReaderQuery = oracleReaderQueryInstance;
                                                                }
                                                                
                                                                JToken queryTimeoutValue = sourceValue["queryTimeout"];
                                                                if (queryTimeoutValue != null && queryTimeoutValue.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan queryTimeoutInstance = TimeSpan.Parse(((string)queryTimeoutValue), CultureInfo.InvariantCulture);
                                                                    oracleSourceInstance.QueryTimeout = queryTimeoutInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue10 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue10 != null && sourceRetryCountValue10.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance10 = ((int)sourceRetryCountValue10);
                                                                    oracleSourceInstance.SourceRetryCount = sourceRetryCountInstance10;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue10 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue10 != null && sourceRetryWaitValue10.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance10 = TimeSpan.Parse(((string)sourceRetryWaitValue10), CultureInfo.InvariantCulture);
                                                                    oracleSourceInstance.SourceRetryWait = sourceRetryWaitInstance10;
                                                                }
                                                                transformationInstance.Source = oracleSourceInstance;
                                                            }
                                                        }
                                                        
                                                        JToken sinkValue = transformationValue["sink"];
                                                        if (sinkValue != null && sinkValue.Type != JTokenType.Null)
                                                        {
                                                            string typeName3 = ((string)sinkValue["type"]);
                                                            if (typeName3 == "AzureQueueSink")
                                                            {
                                                                AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                                
                                                                JToken writeBatchSizeValue = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                                    azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                                    azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                                    azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                                    azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                                    azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                                }
                                                                transformationInstance.Sink = azureQueueSinkInstance;
                                                            }
                                                            if (typeName3 == "AzureTableSink")
                                                            {
                                                                AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                                
                                                                JToken azureTableRetryIntervalInSecValue = sinkValue["azureTableRetryIntervalInSec"];
                                                                if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                                {
                                                                    int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                                    azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                                }
                                                                
                                                                JToken azureTableRetryTimesValue = sinkValue["azureTableRetryTimes"];
                                                                if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                                {
                                                                    int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                                    azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                                }
                                                                
                                                                JToken azureTableDefaultPartitionKeyValueValue = sinkValue["azureTableDefaultPartitionKeyValue"];
                                                                if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                                {
                                                                    string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                                    azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                                }
                                                                
                                                                JToken azureTablePartitionKeyNameValue = sinkValue["azureTablePartitionKeyName"];
                                                                if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                                    azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                                }
                                                                
                                                                JToken azureTableRowKeyNameValue = sinkValue["azureTableRowKeyName"];
                                                                if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                                    azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                                }
                                                                
                                                                JToken azureTableInsertTypeValue = sinkValue["azureTableInsertType"];
                                                                if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                                {
                                                                    string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                                    azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                                }
                                                                
                                                                JToken writeBatchSizeValue2 = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                                    azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue2 = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                                    azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue2 = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                                    azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue2 = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                                    azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue2 = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                                    azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                                }
                                                                transformationInstance.Sink = azureTableSinkInstance;
                                                            }
                                                            if (typeName3 == "BlobSink")
                                                            {
                                                                BlobSink blobSinkInstance = new BlobSink();
                                                                
                                                                JToken blockWriterBlockSizeValue = sinkValue["blockWriterBlockSize"];
                                                                if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                                {
                                                                    int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                                    blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                                }
                                                                
                                                                JToken blobWriterOverwriteFilesValue = sinkValue["blobWriterOverwriteFiles"];
                                                                if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                                {
                                                                    bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                                    blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                                }
                                                                
                                                                JToken blobWriterPartitionColumnsValue = sinkValue["blobWriterPartitionColumns"];
                                                                if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                                    blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                                }
                                                                
                                                                JToken blobWriterPartitionFormatValue = sinkValue["blobWriterPartitionFormat"];
                                                                if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                                    blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                                }
                                                                
                                                                JToken blobWriterDateTimeFormatValue = sinkValue["blobWriterDateTimeFormat"];
                                                                if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                                    blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                                }
                                                                
                                                                JToken blobWriterSeparatorValue = sinkValue["blobWriterSeparator"];
                                                                if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                                    blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                                }
                                                                
                                                                JToken blobWriterRowSuffixValue = sinkValue["blobWriterRowSuffix"];
                                                                if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                                    blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                                }
                                                                
                                                                JToken blobWriterAddHeaderValue = sinkValue["blobWriterAddHeader"];
                                                                if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                                {
                                                                    bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                                    blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                                }
                                                                
                                                                JToken writeBatchSizeValue3 = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                                    blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue3 = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                                    blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue3 = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                                    blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue3 = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                                    blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue3 = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                                    blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                                }
                                                                transformationInstance.Sink = blobSinkInstance;
                                                            }
                                                            if (typeName3 == "DocumentDbCollectionSink")
                                                            {
                                                                DocumentDbCollectionSink documentDbCollectionSinkInstance = new DocumentDbCollectionSink();
                                                                
                                                                JToken nestingSeparatorValue2 = sinkValue["nestingSeparator"];
                                                                if (nestingSeparatorValue2 != null && nestingSeparatorValue2.Type != JTokenType.Null)
                                                                {
                                                                    string nestingSeparatorInstance2 = ((string)nestingSeparatorValue2);
                                                                    documentDbCollectionSinkInstance.NestingSeparator = nestingSeparatorInstance2;
                                                                }
                                                                
                                                                JToken writeBatchSizeValue4 = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                                    documentDbCollectionSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue4 = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                                    documentDbCollectionSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue4 = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                                    documentDbCollectionSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue4 = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                                    documentDbCollectionSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue4 = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                                    documentDbCollectionSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                                }
                                                                transformationInstance.Sink = documentDbCollectionSinkInstance;
                                                            }
                                                            if (typeName3 == "SqlSink")
                                                            {
                                                                SqlSink sqlSinkInstance = new SqlSink();
                                                                
                                                                JToken sqlWriterStoredProcedureNameValue = sinkValue["sqlWriterStoredProcedureName"];
                                                                if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                                    sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                                }
                                                                
                                                                JToken sqlWriterTableTypeValue = sinkValue["sqlWriterTableType"];
                                                                if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                                {
                                                                    string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                                    sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                                }
                                                                
                                                                JToken sqlWriterCleanupScriptValue = sinkValue["sqlWriterCleanupScript"];
                                                                if (sqlWriterCleanupScriptValue != null && sqlWriterCleanupScriptValue.Type != JTokenType.Null)
                                                                {
                                                                    string sqlWriterCleanupScriptInstance = ((string)sqlWriterCleanupScriptValue);
                                                                    sqlSinkInstance.SqlWriterCleanupScript = sqlWriterCleanupScriptInstance;
                                                                }
                                                                
                                                                JToken sliceIdentifierColumnNameValue = sinkValue["sliceIdentifierColumnName"];
                                                                if (sliceIdentifierColumnNameValue != null && sliceIdentifierColumnNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string sliceIdentifierColumnNameInstance = ((string)sliceIdentifierColumnNameValue);
                                                                    sqlSinkInstance.SliceIdentifierColumnName = sliceIdentifierColumnNameInstance;
                                                                }
                                                                
                                                                JToken storedProcedureParametersSequenceElement = ((JToken)sinkValue["storedProcedureParameters"]);
                                                                if (storedProcedureParametersSequenceElement != null && storedProcedureParametersSequenceElement.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JProperty property in storedProcedureParametersSequenceElement)
                                                                    {
                                                                        string storedProcedureParametersKey = ((string)property.Name);
                                                                        JObject varToken = ((JObject)property.Value);
                                                                        StoredProcedureParameter storedProcedureParameterInstance = new StoredProcedureParameter();
                                                                        sqlSinkInstance.StoredProcedureParameters.Add(storedProcedureParametersKey, storedProcedureParameterInstance);
                                                                        
                                                                        JToken valueValue2 = varToken["value"];
                                                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                                        {
                                                                            string valueInstance = ((string)valueValue2);
                                                                            storedProcedureParameterInstance.Value = valueInstance;
                                                                        }
                                                                        
                                                                        JToken typeValue = varToken["type"];
                                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                                        {
                                                                            string typeInstance = ((string)typeValue);
                                                                            storedProcedureParameterInstance.Type = typeInstance;
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                JToken writeBatchSizeValue5 = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue5 != null && writeBatchSizeValue5.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance5 = ((int)writeBatchSizeValue5);
                                                                    sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance5;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue5 = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue5 != null && writeBatchTimeoutValue5.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance5 = TimeSpan.Parse(((string)writeBatchTimeoutValue5), CultureInfo.InvariantCulture);
                                                                    sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance5;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue5 = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue5 != null && sinkRetryCountValue5.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance5 = ((int)sinkRetryCountValue5);
                                                                    sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance5;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue5 = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue5 != null && sinkRetryWaitValue5.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance5 = TimeSpan.Parse(((string)sinkRetryWaitValue5), CultureInfo.InvariantCulture);
                                                                    sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance5;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue5 = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue5 != null && sinkPartitionDataValue5.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance5 = ((bool)sinkPartitionDataValue5);
                                                                    sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance5;
                                                                }
                                                                transformationInstance.Sink = sqlSinkInstance;
                                                            }
                                                            if (typeName3 == "OracleSink")
                                                            {
                                                                OracleSink oracleSinkInstance = new OracleSink();
                                                                
                                                                JToken oracleWriterStoredProcedureNameValue = sinkValue["oracleWriterStoredProcedureName"];
                                                                if (oracleWriterStoredProcedureNameValue != null && oracleWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string oracleWriterStoredProcedureNameInstance = ((string)oracleWriterStoredProcedureNameValue);
                                                                    oracleSinkInstance.OracleWriterStoredProcedureName = oracleWriterStoredProcedureNameInstance;
                                                                }
                                                                
                                                                JToken oracleWriterTableTypeValue = sinkValue["oracleWriterTableType"];
                                                                if (oracleWriterTableTypeValue != null && oracleWriterTableTypeValue.Type != JTokenType.Null)
                                                                {
                                                                    string oracleWriterTableTypeInstance = ((string)oracleWriterTableTypeValue);
                                                                    oracleSinkInstance.OracleWriterTableType = oracleWriterTableTypeInstance;
                                                                }
                                                                
                                                                JToken writeBatchSizeValue6 = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue6 != null && writeBatchSizeValue6.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance6 = ((int)writeBatchSizeValue6);
                                                                    oracleSinkInstance.WriteBatchSize = writeBatchSizeInstance6;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue6 = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue6 != null && writeBatchTimeoutValue6.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance6 = TimeSpan.Parse(((string)writeBatchTimeoutValue6), CultureInfo.InvariantCulture);
                                                                    oracleSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance6;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue6 = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue6 != null && sinkRetryCountValue6.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance6 = ((int)sinkRetryCountValue6);
                                                                    oracleSinkInstance.SinkRetryCount = sinkRetryCountInstance6;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue6 = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue6 != null && sinkRetryWaitValue6.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance6 = TimeSpan.Parse(((string)sinkRetryWaitValue6), CultureInfo.InvariantCulture);
                                                                    oracleSinkInstance.SinkRetryWait = sinkRetryWaitInstance6;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue6 = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue6 != null && sinkPartitionDataValue6.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance6 = ((bool)sinkPartitionDataValue6);
                                                                    oracleSinkInstance.SinkPartitionData = sinkPartitionDataInstance6;
                                                                }
                                                                transformationInstance.Sink = oracleSinkInstance;
                                                            }
                                                        }
                                                        
                                                        JToken translatorValue = transformationValue["translator"];
                                                        if (translatorValue != null && translatorValue.Type != JTokenType.Null)
                                                        {
                                                            string typeName4 = ((string)translatorValue["type"]);
                                                            if (typeName4 == "TabularTranslator")
                                                            {
                                                                TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                                
                                                                JToken columnMappingsValue = translatorValue["columnMappings"];
                                                                if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                                {
                                                                    string columnMappingsInstance = ((string)columnMappingsValue);
                                                                    tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                                }
                                                                transformationInstance.Translator = tabularTranslatorInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken nameValue2 = activitiesValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        copyActivityInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken descriptionValue2 = activitiesValue["description"];
                                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                    {
                                                        string descriptionInstance2 = ((string)descriptionValue2);
                                                        copyActivityInstance.Description = descriptionInstance2;
                                                    }
                                                    
                                                    JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                                    if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                                    {
                                                        string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                        copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                                    }
                                                    
                                                    JToken policyValue = activitiesValue["policy"];
                                                    if (policyValue != null && policyValue.Type != JTokenType.Null)
                                                    {
                                                        ActivityPolicy policyInstance = new ActivityPolicy();
                                                        copyActivityInstance.Policy = policyInstance;
                                                        
                                                        JToken timeoutValue = policyValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            policyInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken delayValue = policyValue["delay"];
                                                        if (delayValue != null && delayValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                            policyInstance.Delay = delayInstance;
                                                        }
                                                        
                                                        JToken concurrencyValue = policyValue["concurrency"];
                                                        if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                                        {
                                                            uint concurrencyInstance = ((uint)concurrencyValue);
                                                            policyInstance.Concurrency = concurrencyInstance;
                                                        }
                                                        
                                                        JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                                        if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                                        {
                                                            string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                            policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                                        }
                                                        
                                                        JToken retryValue = policyValue["retry"];
                                                        if (retryValue != null && retryValue.Type != JTokenType.Null)
                                                        {
                                                            int retryInstance = ((int)retryValue);
                                                            policyInstance.Retry = retryInstance;
                                                        }
                                                        
                                                        JToken longRetryValue = policyValue["longRetry"];
                                                        if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                                        {
                                                            int longRetryInstance = ((int)longRetryValue);
                                                            policyInstance.LongRetry = longRetryInstance;
                                                        }
                                                        
                                                        JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                                        if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                            policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                                        }
                                                    }
                                                    
                                                    JToken inputsArray = activitiesValue["inputs"];
                                                    if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inputsValue in ((JArray)inputsArray))
                                                        {
                                                            ActivityInput activityInputInstance = new ActivityInput();
                                                            copyActivityInstance.Inputs.Add(activityInputInstance);
                                                            
                                                            JToken startTimeValue = inputsValue["startTime"];
                                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                            {
                                                                string startTimeInstance = ((string)startTimeValue);
                                                                activityInputInstance.StartTime = startTimeInstance;
                                                            }
                                                            
                                                            JToken endTimeValue = inputsValue["endTime"];
                                                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                            {
                                                                string endTimeInstance = ((string)endTimeValue);
                                                                activityInputInstance.EndTime = endTimeInstance;
                                                            }
                                                            
                                                            JToken lengthValue = inputsValue["length"];
                                                            if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                                activityInputInstance.Length = lengthInstance;
                                                            }
                                                            
                                                            JToken nameValue3 = inputsValue["name"];
                                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance3 = ((string)nameValue3);
                                                                activityInputInstance.Name = nameInstance3;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray = activitiesValue["outputs"];
                                                    if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken outputsValue in ((JArray)outputsArray))
                                                        {
                                                            ActivityOutput activityOutputInstance = new ActivityOutput();
                                                            copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                            
                                                            JToken nameValue4 = outputsValue["name"];
                                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance4 = ((string)nameValue4);
                                                                activityOutputInstance.Name = nameInstance4;
                                                            }
                                                        }
                                                    }
                                                    propertiesInstance.Activities.Add(copyActivityInstance);
                                                }
                                                if (typeName == "HDInsightActivity")
                                                {
                                                    HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                                    
                                                    JToken transformationValue2 = activitiesValue["transformation"];
                                                    if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeName5 = ((string)transformationValue2["type"]);
                                                        if (typeName5 == "Hive")
                                                        {
                                                            Hive hiveInstance = new Hive();
                                                            
                                                            JToken scriptValue = transformationValue2["script"];
                                                            if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                            {
                                                                string scriptInstance = ((string)scriptValue);
                                                                hiveInstance.Script = scriptInstance;
                                                            }
                                                            
                                                            JToken scriptPathValue = transformationValue2["scriptPath"];
                                                            if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                            {
                                                                string scriptPathInstance = ((string)scriptPathValue);
                                                                hiveInstance.ScriptPath = scriptPathInstance;
                                                            }
                                                            
                                                            JToken scriptLinkedServiceValue = transformationValue2["scriptLinkedService"];
                                                            if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                            {
                                                                string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                                hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                            }
                                                            
                                                            JToken definesSequenceElement = ((JToken)transformationValue2["defines"]);
                                                            if (definesSequenceElement != null && definesSequenceElement.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property2 in definesSequenceElement)
                                                                {
                                                                    string definesKey = ((string)property2.Name);
                                                                    string definesValue = ((string)property2.Value);
                                                                    hiveInstance.Defines.Add(definesKey, definesValue);
                                                                }
                                                            }
                                                            
                                                            JToken extendedPropertiesSequenceElement = ((JToken)transformationValue2["extendedProperties"]);
                                                            if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property3 in extendedPropertiesSequenceElement)
                                                                {
                                                                    string extendedPropertiesKey = ((string)property3.Name);
                                                                    string extendedPropertiesValue = ((string)property3.Value);
                                                                    hiveInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                                }
                                                            }
                                                            
                                                            JToken storageLinkedServicesArray = transformationValue2["storageLinkedServices"];
                                                            if (storageLinkedServicesArray != null && storageLinkedServicesArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray))
                                                                {
                                                                    hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                                }
                                                            }
                                                            
                                                            JToken argumentsArray = transformationValue2["arguments"];
                                                            if (argumentsArray != null && argumentsArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken argumentsValue in ((JArray)argumentsArray))
                                                                {
                                                                    hiveInstance.Arguments.Add(((string)argumentsValue));
                                                                }
                                                            }
                                                            hDInsightActivityInstance.Transformation = hiveInstance;
                                                        }
                                                        if (typeName5 == "Pig")
                                                        {
                                                            Pig pigInstance = new Pig();
                                                            
                                                            JToken scriptValue2 = transformationValue2["script"];
                                                            if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                            {
                                                                string scriptInstance2 = ((string)scriptValue2);
                                                                pigInstance.Script = scriptInstance2;
                                                            }
                                                            
                                                            JToken scriptPathValue2 = transformationValue2["scriptPath"];
                                                            if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                            {
                                                                string scriptPathInstance2 = ((string)scriptPathValue2);
                                                                pigInstance.ScriptPath = scriptPathInstance2;
                                                            }
                                                            
                                                            JToken scriptLinkedServiceValue2 = transformationValue2["scriptLinkedService"];
                                                            if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                            {
                                                                string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                                pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                            }
                                                            
                                                            JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue2["extendedProperties"]);
                                                            if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property4 in extendedPropertiesSequenceElement2)
                                                                {
                                                                    string extendedPropertiesKey2 = ((string)property4.Name);
                                                                    string extendedPropertiesValue2 = ((string)property4.Value);
                                                                    pigInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                                                }
                                                            }
                                                            
                                                            JToken storageLinkedServicesArray2 = transformationValue2["storageLinkedServices"];
                                                            if (storageLinkedServicesArray2 != null && storageLinkedServicesArray2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray2))
                                                                {
                                                                    pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                                }
                                                            }
                                                            
                                                            JToken argumentsArray2 = transformationValue2["arguments"];
                                                            if (argumentsArray2 != null && argumentsArray2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken argumentsValue2 in ((JArray)argumentsArray2))
                                                                {
                                                                    pigInstance.Arguments.Add(((string)argumentsValue2));
                                                                }
                                                            }
                                                            hDInsightActivityInstance.Transformation = pigInstance;
                                                        }
                                                        if (typeName5 == "MapReduce")
                                                        {
                                                            MapReduce mapReduceInstance = new MapReduce();
                                                            
                                                            JToken classNameValue = transformationValue2["className"];
                                                            if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                            {
                                                                string classNameInstance = ((string)classNameValue);
                                                                mapReduceInstance.ClassName = classNameInstance;
                                                            }
                                                            
                                                            JToken jarFilePathValue = transformationValue2["jarFilePath"];
                                                            if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                            {
                                                                string jarFilePathInstance = ((string)jarFilePathValue);
                                                                mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                            }
                                                            
                                                            JToken jarLinkedServiceValue = transformationValue2["jarLinkedService"];
                                                            if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                            {
                                                                string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                                mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                            }
                                                            
                                                            JToken jarLibsArray = transformationValue2["jarLibs"];
                                                            if (jarLibsArray != null && jarLibsArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken jarLibsValue in ((JArray)jarLibsArray))
                                                                {
                                                                    mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                                }
                                                            }
                                                            
                                                            JToken definesSequenceElement2 = ((JToken)transformationValue2["defines"]);
                                                            if (definesSequenceElement2 != null && definesSequenceElement2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property5 in definesSequenceElement2)
                                                                {
                                                                    string definesKey2 = ((string)property5.Name);
                                                                    string definesValue2 = ((string)property5.Value);
                                                                    mapReduceInstance.Defines.Add(definesKey2, definesValue2);
                                                                }
                                                            }
                                                            
                                                            JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue2["extendedProperties"]);
                                                            if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property6 in extendedPropertiesSequenceElement3)
                                                                {
                                                                    string extendedPropertiesKey3 = ((string)property6.Name);
                                                                    string extendedPropertiesValue3 = ((string)property6.Value);
                                                                    mapReduceInstance.ExtendedProperties.Add(extendedPropertiesKey3, extendedPropertiesValue3);
                                                                }
                                                            }
                                                            
                                                            JToken storageLinkedServicesArray3 = transformationValue2["storageLinkedServices"];
                                                            if (storageLinkedServicesArray3 != null && storageLinkedServicesArray3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray3))
                                                                {
                                                                    mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                                }
                                                            }
                                                            
                                                            JToken argumentsArray3 = transformationValue2["arguments"];
                                                            if (argumentsArray3 != null && argumentsArray3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken argumentsValue3 in ((JArray)argumentsArray3))
                                                                {
                                                                    mapReduceInstance.Arguments.Add(((string)argumentsValue3));
                                                                }
                                                            }
                                                            hDInsightActivityInstance.Transformation = mapReduceInstance;
                                                        }
                                                        if (typeName5 == "Streaming")
                                                        {
                                                            Streaming streamingInstance = new Streaming();
                                                            
                                                            JToken mapperValue = transformationValue2["mapper"];
                                                            if (mapperValue != null && mapperValue.Type != JTokenType.Null)
                                                            {
                                                                string mapperInstance = ((string)mapperValue);
                                                                streamingInstance.Mapper = mapperInstance;
                                                            }
                                                            
                                                            JToken reducerValue = transformationValue2["reducer"];
                                                            if (reducerValue != null && reducerValue.Type != JTokenType.Null)
                                                            {
                                                                string reducerInstance = ((string)reducerValue);
                                                                streamingInstance.Reducer = reducerInstance;
                                                            }
                                                            
                                                            JToken inputValue = transformationValue2["input"];
                                                            if (inputValue != null && inputValue.Type != JTokenType.Null)
                                                            {
                                                                string inputInstance = ((string)inputValue);
                                                                streamingInstance.Input = inputInstance;
                                                            }
                                                            
                                                            JToken outputValue = transformationValue2["output"];
                                                            if (outputValue != null && outputValue.Type != JTokenType.Null)
                                                            {
                                                                string outputInstance = ((string)outputValue);
                                                                streamingInstance.Output = outputInstance;
                                                            }
                                                            
                                                            JToken filePathsArray = transformationValue2["filePaths"];
                                                            if (filePathsArray != null && filePathsArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken filePathsValue in ((JArray)filePathsArray))
                                                                {
                                                                    streamingInstance.FilePaths.Add(((string)filePathsValue));
                                                                }
                                                            }
                                                            
                                                            JToken fileLinkedServiceValue = transformationValue2["fileLinkedService"];
                                                            if (fileLinkedServiceValue != null && fileLinkedServiceValue.Type != JTokenType.Null)
                                                            {
                                                                string fileLinkedServiceInstance = ((string)fileLinkedServiceValue);
                                                                streamingInstance.FileLinkedService = fileLinkedServiceInstance;
                                                            }
                                                            
                                                            JToken combinerValue = transformationValue2["combiner"];
                                                            if (combinerValue != null && combinerValue.Type != JTokenType.Null)
                                                            {
                                                                string combinerInstance = ((string)combinerValue);
                                                                streamingInstance.Combiner = combinerInstance;
                                                            }
                                                            
                                                            JToken commandEnvironmentArray = transformationValue2["commandEnvironment"];
                                                            if (commandEnvironmentArray != null && commandEnvironmentArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken commandEnvironmentValue in ((JArray)commandEnvironmentArray))
                                                                {
                                                                    streamingInstance.CommandEnvironment.Add(((string)commandEnvironmentValue));
                                                                }
                                                            }
                                                            
                                                            JToken definesSequenceElement3 = ((JToken)transformationValue2["defines"]);
                                                            if (definesSequenceElement3 != null && definesSequenceElement3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property7 in definesSequenceElement3)
                                                                {
                                                                    string definesKey3 = ((string)property7.Name);
                                                                    string definesValue3 = ((string)property7.Value);
                                                                    streamingInstance.Defines.Add(definesKey3, definesValue3);
                                                                }
                                                            }
                                                            
                                                            JToken extendedPropertiesSequenceElement4 = ((JToken)transformationValue2["extendedProperties"]);
                                                            if (extendedPropertiesSequenceElement4 != null && extendedPropertiesSequenceElement4.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property8 in extendedPropertiesSequenceElement4)
                                                                {
                                                                    string extendedPropertiesKey4 = ((string)property8.Name);
                                                                    string extendedPropertiesValue4 = ((string)property8.Value);
                                                                    streamingInstance.ExtendedProperties.Add(extendedPropertiesKey4, extendedPropertiesValue4);
                                                                }
                                                            }
                                                            
                                                            JToken storageLinkedServicesArray4 = transformationValue2["storageLinkedServices"];
                                                            if (storageLinkedServicesArray4 != null && storageLinkedServicesArray4.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken storageLinkedServicesValue4 in ((JArray)storageLinkedServicesArray4))
                                                                {
                                                                    streamingInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue4));
                                                                }
                                                            }
                                                            
                                                            JToken argumentsArray4 = transformationValue2["arguments"];
                                                            if (argumentsArray4 != null && argumentsArray4.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken argumentsValue4 in ((JArray)argumentsArray4))
                                                                {
                                                                    streamingInstance.Arguments.Add(((string)argumentsValue4));
                                                                }
                                                            }
                                                            hDInsightActivityInstance.Transformation = streamingInstance;
                                                        }
                                                    }
                                                    
                                                    JToken nameValue5 = activitiesValue["name"];
                                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance5 = ((string)nameValue5);
                                                        hDInsightActivityInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    JToken descriptionValue3 = activitiesValue["description"];
                                                    if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                                    {
                                                        string descriptionInstance3 = ((string)descriptionValue3);
                                                        hDInsightActivityInstance.Description = descriptionInstance3;
                                                    }
                                                    
                                                    JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                                    if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                        hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                                    }
                                                    
                                                    JToken policyValue2 = activitiesValue["policy"];
                                                    if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                                    {
                                                        ActivityPolicy policyInstance2 = new ActivityPolicy();
                                                        hDInsightActivityInstance.Policy = policyInstance2;
                                                        
                                                        JToken timeoutValue2 = policyValue2["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            policyInstance2.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken delayValue2 = policyValue2["delay"];
                                                        if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                            policyInstance2.Delay = delayInstance2;
                                                        }
                                                        
                                                        JToken concurrencyValue2 = policyValue2["concurrency"];
                                                        if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                                        {
                                                            uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                            policyInstance2.Concurrency = concurrencyInstance2;
                                                        }
                                                        
                                                        JToken executionPriorityOrderValue2 = policyValue2["executionPriorityOrder"];
                                                        if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                                        {
                                                            string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                            policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                                        }
                                                        
                                                        JToken retryValue2 = policyValue2["retry"];
                                                        if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                                        {
                                                            int retryInstance2 = ((int)retryValue2);
                                                            policyInstance2.Retry = retryInstance2;
                                                        }
                                                        
                                                        JToken longRetryValue2 = policyValue2["longRetry"];
                                                        if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                                        {
                                                            int longRetryInstance2 = ((int)longRetryValue2);
                                                            policyInstance2.LongRetry = longRetryInstance2;
                                                        }
                                                        
                                                        JToken longRetryIntervalValue2 = policyValue2["longRetryInterval"];
                                                        if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                            policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                                        }
                                                    }
                                                    
                                                    JToken inputsArray2 = activitiesValue["inputs"];
                                                    if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                                        {
                                                            ActivityInput activityInputInstance2 = new ActivityInput();
                                                            hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                            
                                                            JToken startTimeValue2 = inputsValue2["startTime"];
                                                            if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                            {
                                                                string startTimeInstance2 = ((string)startTimeValue2);
                                                                activityInputInstance2.StartTime = startTimeInstance2;
                                                            }
                                                            
                                                            JToken endTimeValue2 = inputsValue2["endTime"];
                                                            if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                            {
                                                                string endTimeInstance2 = ((string)endTimeValue2);
                                                                activityInputInstance2.EndTime = endTimeInstance2;
                                                            }
                                                            
                                                            JToken lengthValue2 = inputsValue2["length"];
                                                            if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                                activityInputInstance2.Length = lengthInstance2;
                                                            }
                                                            
                                                            JToken nameValue6 = inputsValue2["name"];
                                                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance6 = ((string)nameValue6);
                                                                activityInputInstance2.Name = nameInstance6;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray2 = activitiesValue["outputs"];
                                                    if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken outputsValue2 in ((JArray)outputsArray2))
                                                        {
                                                            ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                            hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                            
                                                            JToken nameValue7 = outputsValue2["name"];
                                                            if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance7 = ((string)nameValue7);
                                                                activityOutputInstance2.Name = nameInstance7;
                                                            }
                                                        }
                                                    }
                                                    propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                                }
                                                if (typeName == "DotNetActivity")
                                                {
                                                    DotNetActivity dotNetActivityInstance = new DotNetActivity();
                                                    
                                                    JToken transformationValue3 = activitiesValue["transformation"];
                                                    if (transformationValue3 != null && transformationValue3.Type != JTokenType.Null)
                                                    {
                                                        DotNetActivityProperties transformationInstance2 = new DotNetActivityProperties();
                                                        dotNetActivityInstance.Transformation = transformationInstance2;
                                                        
                                                        JToken assemblyNameValue = transformationValue3["assemblyName"];
                                                        if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string assemblyNameInstance = ((string)assemblyNameValue);
                                                            transformationInstance2.AssemblyName = assemblyNameInstance;
                                                        }
                                                        
                                                        JToken entryPointValue = transformationValue3["entryPoint"];
                                                        if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                                        {
                                                            string entryPointInstance = ((string)entryPointValue);
                                                            transformationInstance2.EntryPoint = entryPointInstance;
                                                        }
                                                        
                                                        JToken packageLinkedServiceValue = transformationValue3["packageLinkedService"];
                                                        if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                                        {
                                                            string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                            transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                                        }
                                                        
                                                        JToken packageFileValue = transformationValue3["packageFile"];
                                                        if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                                        {
                                                            string packageFileInstance = ((string)packageFileValue);
                                                            transformationInstance2.PackageFile = packageFileInstance;
                                                        }
                                                        
                                                        JToken extendedPropertiesSequenceElement5 = ((JToken)transformationValue3["extendedProperties"]);
                                                        if (extendedPropertiesSequenceElement5 != null && extendedPropertiesSequenceElement5.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property9 in extendedPropertiesSequenceElement5)
                                                            {
                                                                string extendedPropertiesKey5 = ((string)property9.Name);
                                                                string extendedPropertiesValue5 = ((string)property9.Value);
                                                                transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey5, extendedPropertiesValue5);
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken nameValue8 = activitiesValue["name"];
                                                    if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance8 = ((string)nameValue8);
                                                        dotNetActivityInstance.Name = nameInstance8;
                                                    }
                                                    
                                                    JToken descriptionValue4 = activitiesValue["description"];
                                                    if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                                    {
                                                        string descriptionInstance4 = ((string)descriptionValue4);
                                                        dotNetActivityInstance.Description = descriptionInstance4;
                                                    }
                                                    
                                                    JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                                    if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                                    {
                                                        string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                        dotNetActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                                    }
                                                    
                                                    JToken policyValue3 = activitiesValue["policy"];
                                                    if (policyValue3 != null && policyValue3.Type != JTokenType.Null)
                                                    {
                                                        ActivityPolicy policyInstance3 = new ActivityPolicy();
                                                        dotNetActivityInstance.Policy = policyInstance3;
                                                        
                                                        JToken timeoutValue3 = policyValue3["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            policyInstance3.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken delayValue3 = policyValue3["delay"];
                                                        if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                            policyInstance3.Delay = delayInstance3;
                                                        }
                                                        
                                                        JToken concurrencyValue3 = policyValue3["concurrency"];
                                                        if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                                        {
                                                            uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                            policyInstance3.Concurrency = concurrencyInstance3;
                                                        }
                                                        
                                                        JToken executionPriorityOrderValue3 = policyValue3["executionPriorityOrder"];
                                                        if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                                        {
                                                            string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                            policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                                        }
                                                        
                                                        JToken retryValue3 = policyValue3["retry"];
                                                        if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                                        {
                                                            int retryInstance3 = ((int)retryValue3);
                                                            policyInstance3.Retry = retryInstance3;
                                                        }
                                                        
                                                        JToken longRetryValue3 = policyValue3["longRetry"];
                                                        if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                                        {
                                                            int longRetryInstance3 = ((int)longRetryValue3);
                                                            policyInstance3.LongRetry = longRetryInstance3;
                                                        }
                                                        
                                                        JToken longRetryIntervalValue3 = policyValue3["longRetryInterval"];
                                                        if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                            policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken inputsArray3 = activitiesValue["inputs"];
                                                    if (inputsArray3 != null && inputsArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inputsValue3 in ((JArray)inputsArray3))
                                                        {
                                                            ActivityInput activityInputInstance3 = new ActivityInput();
                                                            dotNetActivityInstance.Inputs.Add(activityInputInstance3);
                                                            
                                                            JToken startTimeValue3 = inputsValue3["startTime"];
                                                            if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                            {
                                                                string startTimeInstance3 = ((string)startTimeValue3);
                                                                activityInputInstance3.StartTime = startTimeInstance3;
                                                            }
                                                            
                                                            JToken endTimeValue3 = inputsValue3["endTime"];
                                                            if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                            {
                                                                string endTimeInstance3 = ((string)endTimeValue3);
                                                                activityInputInstance3.EndTime = endTimeInstance3;
                                                            }
                                                            
                                                            JToken lengthValue3 = inputsValue3["length"];
                                                            if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                                activityInputInstance3.Length = lengthInstance3;
                                                            }
                                                            
                                                            JToken nameValue9 = inputsValue3["name"];
                                                            if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance9 = ((string)nameValue9);
                                                                activityInputInstance3.Name = nameInstance9;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray3 = activitiesValue["outputs"];
                                                    if (outputsArray3 != null && outputsArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken outputsValue3 in ((JArray)outputsArray3))
                                                        {
                                                            ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                            dotNetActivityInstance.Outputs.Add(activityOutputInstance3);
                                                            
                                                            JToken nameValue10 = outputsValue3["name"];
                                                            if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance10 = ((string)nameValue10);
                                                                activityOutputInstance3.Name = nameInstance10;
                                                            }
                                                        }
                                                    }
                                                    propertiesInstance.Activities.Add(dotNetActivityInstance);
                                                }
                                                if (typeName == "StoredProcedureActivity")
                                                {
                                                    StoredProcedureActivity storedProcedureActivityInstance = new StoredProcedureActivity();
                                                    
                                                    JToken transformationValue4 = activitiesValue["transformation"];
                                                    if (transformationValue4 != null && transformationValue4.Type != JTokenType.Null)
                                                    {
                                                        StoredProcedureActivityProperties transformationInstance3 = new StoredProcedureActivityProperties();
                                                        storedProcedureActivityInstance.Transformation = transformationInstance3;
                                                        
                                                        JToken storedProcedureNameValue = transformationValue4["storedProcedureName"];
                                                        if (storedProcedureNameValue != null && storedProcedureNameValue.Type != JTokenType.Null)
                                                        {
                                                            string storedProcedureNameInstance = ((string)storedProcedureNameValue);
                                                            transformationInstance3.StoredProcedureName = storedProcedureNameInstance;
                                                        }
                                                        
                                                        JToken storedProcedureParametersSequenceElement2 = ((JToken)transformationValue4["storedProcedureParameters"]);
                                                        if (storedProcedureParametersSequenceElement2 != null && storedProcedureParametersSequenceElement2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property10 in storedProcedureParametersSequenceElement2)
                                                            {
                                                                string storedProcedureParametersKey2 = ((string)property10.Name);
                                                                string storedProcedureParametersValue = ((string)property10.Value);
                                                                transformationInstance3.StoredProcedureActivityParameters.Add(storedProcedureParametersKey2, storedProcedureParametersValue);
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken nameValue11 = activitiesValue["name"];
                                                    if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance11 = ((string)nameValue11);
                                                        storedProcedureActivityInstance.Name = nameInstance11;
                                                    }
                                                    
                                                    JToken descriptionValue5 = activitiesValue["description"];
                                                    if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                                    {
                                                        string descriptionInstance5 = ((string)descriptionValue5);
                                                        storedProcedureActivityInstance.Description = descriptionInstance5;
                                                    }
                                                    
                                                    JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                                    if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                                    {
                                                        string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                        storedProcedureActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                                    }
                                                    
                                                    JToken policyValue4 = activitiesValue["policy"];
                                                    if (policyValue4 != null && policyValue4.Type != JTokenType.Null)
                                                    {
                                                        ActivityPolicy policyInstance4 = new ActivityPolicy();
                                                        storedProcedureActivityInstance.Policy = policyInstance4;
                                                        
                                                        JToken timeoutValue4 = policyValue4["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            policyInstance4.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken delayValue4 = policyValue4["delay"];
                                                        if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                            policyInstance4.Delay = delayInstance4;
                                                        }
                                                        
                                                        JToken concurrencyValue4 = policyValue4["concurrency"];
                                                        if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                                        {
                                                            uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                            policyInstance4.Concurrency = concurrencyInstance4;
                                                        }
                                                        
                                                        JToken executionPriorityOrderValue4 = policyValue4["executionPriorityOrder"];
                                                        if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                                        {
                                                            string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                            policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                                        }
                                                        
                                                        JToken retryValue4 = policyValue4["retry"];
                                                        if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                                        {
                                                            int retryInstance4 = ((int)retryValue4);
                                                            policyInstance4.Retry = retryInstance4;
                                                        }
                                                        
                                                        JToken longRetryValue4 = policyValue4["longRetry"];
                                                        if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                                        {
                                                            int longRetryInstance4 = ((int)longRetryValue4);
                                                            policyInstance4.LongRetry = longRetryInstance4;
                                                        }
                                                        
                                                        JToken longRetryIntervalValue4 = policyValue4["longRetryInterval"];
                                                        if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                            policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                                        }
                                                    }
                                                    
                                                    JToken inputsArray4 = activitiesValue["inputs"];
                                                    if (inputsArray4 != null && inputsArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inputsValue4 in ((JArray)inputsArray4))
                                                        {
                                                            ActivityInput activityInputInstance4 = new ActivityInput();
                                                            storedProcedureActivityInstance.Inputs.Add(activityInputInstance4);
                                                            
                                                            JToken startTimeValue4 = inputsValue4["startTime"];
                                                            if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                            {
                                                                string startTimeInstance4 = ((string)startTimeValue4);
                                                                activityInputInstance4.StartTime = startTimeInstance4;
                                                            }
                                                            
                                                            JToken endTimeValue4 = inputsValue4["endTime"];
                                                            if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                            {
                                                                string endTimeInstance4 = ((string)endTimeValue4);
                                                                activityInputInstance4.EndTime = endTimeInstance4;
                                                            }
                                                            
                                                            JToken lengthValue4 = inputsValue4["length"];
                                                            if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                                activityInputInstance4.Length = lengthInstance4;
                                                            }
                                                            
                                                            JToken nameValue12 = inputsValue4["name"];
                                                            if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance12 = ((string)nameValue12);
                                                                activityInputInstance4.Name = nameInstance12;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray4 = activitiesValue["outputs"];
                                                    if (outputsArray4 != null && outputsArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken outputsValue4 in ((JArray)outputsArray4))
                                                        {
                                                            ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                            storedProcedureActivityInstance.Outputs.Add(activityOutputInstance4);
                                                            
                                                            JToken nameValue13 = outputsValue4["name"];
                                                            if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance13 = ((string)nameValue13);
                                                                activityOutputInstance4.Name = nameInstance13;
                                                            }
                                                        }
                                                    }
                                                    propertiesInstance.Activities.Add(storedProcedureActivityInstance);
                                                }
                                                if (typeName == "AzureMLBatchScoringActivity")
                                                {
                                                    AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                                    
                                                    JToken transformationValue5 = activitiesValue["transformation"];
                                                    if (transformationValue5 != null && transformationValue5.Type != JTokenType.Null)
                                                    {
                                                        AzureMLActivityProperties transformationInstance4 = new AzureMLActivityProperties();
                                                        azureMLBatchScoringActivityInstance.Transformation = transformationInstance4;
                                                        
                                                        JToken webServiceParametersSequenceElement = ((JToken)transformationValue5["webServiceParameters"]);
                                                        if (webServiceParametersSequenceElement != null && webServiceParametersSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property11 in webServiceParametersSequenceElement)
                                                            {
                                                                string webServiceParametersKey = ((string)property11.Name);
                                                                string webServiceParametersValue = ((string)property11.Value);
                                                                transformationInstance4.WebServiceParameters.Add(webServiceParametersKey, webServiceParametersValue);
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken nameValue14 = activitiesValue["name"];
                                                    if (nameValue14 != null && nameValue14.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance14 = ((string)nameValue14);
                                                        azureMLBatchScoringActivityInstance.Name = nameInstance14;
                                                    }
                                                    
                                                    JToken descriptionValue6 = activitiesValue["description"];
                                                    if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                                    {
                                                        string descriptionInstance6 = ((string)descriptionValue6);
                                                        azureMLBatchScoringActivityInstance.Description = descriptionInstance6;
                                                    }
                                                    
                                                    JToken linkedServiceNameValue5 = activitiesValue["linkedServiceName"];
                                                    if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                                    {
                                                        string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                        azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance5;
                                                    }
                                                    
                                                    JToken policyValue5 = activitiesValue["policy"];
                                                    if (policyValue5 != null && policyValue5.Type != JTokenType.Null)
                                                    {
                                                        ActivityPolicy policyInstance5 = new ActivityPolicy();
                                                        azureMLBatchScoringActivityInstance.Policy = policyInstance5;
                                                        
                                                        JToken timeoutValue5 = policyValue5["timeout"];
                                                        if (timeoutValue5 != null && timeoutValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance5 = TimeSpan.Parse(((string)timeoutValue5), CultureInfo.InvariantCulture);
                                                            policyInstance5.Timeout = timeoutInstance5;
                                                        }
                                                        
                                                        JToken delayValue5 = policyValue5["delay"];
                                                        if (delayValue5 != null && delayValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan delayInstance5 = TimeSpan.Parse(((string)delayValue5), CultureInfo.InvariantCulture);
                                                            policyInstance5.Delay = delayInstance5;
                                                        }
                                                        
                                                        JToken concurrencyValue5 = policyValue5["concurrency"];
                                                        if (concurrencyValue5 != null && concurrencyValue5.Type != JTokenType.Null)
                                                        {
                                                            uint concurrencyInstance5 = ((uint)concurrencyValue5);
                                                            policyInstance5.Concurrency = concurrencyInstance5;
                                                        }
                                                        
                                                        JToken executionPriorityOrderValue5 = policyValue5["executionPriorityOrder"];
                                                        if (executionPriorityOrderValue5 != null && executionPriorityOrderValue5.Type != JTokenType.Null)
                                                        {
                                                            string executionPriorityOrderInstance5 = ((string)executionPriorityOrderValue5);
                                                            policyInstance5.ExecutionPriorityOrder = executionPriorityOrderInstance5;
                                                        }
                                                        
                                                        JToken retryValue5 = policyValue5["retry"];
                                                        if (retryValue5 != null && retryValue5.Type != JTokenType.Null)
                                                        {
                                                            int retryInstance5 = ((int)retryValue5);
                                                            policyInstance5.Retry = retryInstance5;
                                                        }
                                                        
                                                        JToken longRetryValue5 = policyValue5["longRetry"];
                                                        if (longRetryValue5 != null && longRetryValue5.Type != JTokenType.Null)
                                                        {
                                                            int longRetryInstance5 = ((int)longRetryValue5);
                                                            policyInstance5.LongRetry = longRetryInstance5;
                                                        }
                                                        
                                                        JToken longRetryIntervalValue5 = policyValue5["longRetryInterval"];
                                                        if (longRetryIntervalValue5 != null && longRetryIntervalValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan longRetryIntervalInstance5 = TimeSpan.Parse(((string)longRetryIntervalValue5), CultureInfo.InvariantCulture);
                                                            policyInstance5.LongRetryInterval = longRetryIntervalInstance5;
                                                        }
                                                    }
                                                    
                                                    JToken inputsArray5 = activitiesValue["inputs"];
                                                    if (inputsArray5 != null && inputsArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inputsValue5 in ((JArray)inputsArray5))
                                                        {
                                                            ActivityInput activityInputInstance5 = new ActivityInput();
                                                            azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance5);
                                                            
                                                            JToken startTimeValue5 = inputsValue5["startTime"];
                                                            if (startTimeValue5 != null && startTimeValue5.Type != JTokenType.Null)
                                                            {
                                                                string startTimeInstance5 = ((string)startTimeValue5);
                                                                activityInputInstance5.StartTime = startTimeInstance5;
                                                            }
                                                            
                                                            JToken endTimeValue5 = inputsValue5["endTime"];
                                                            if (endTimeValue5 != null && endTimeValue5.Type != JTokenType.Null)
                                                            {
                                                                string endTimeInstance5 = ((string)endTimeValue5);
                                                                activityInputInstance5.EndTime = endTimeInstance5;
                                                            }
                                                            
                                                            JToken lengthValue5 = inputsValue5["length"];
                                                            if (lengthValue5 != null && lengthValue5.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan lengthInstance5 = TimeSpan.Parse(((string)lengthValue5), CultureInfo.InvariantCulture);
                                                                activityInputInstance5.Length = lengthInstance5;
                                                            }
                                                            
                                                            JToken nameValue15 = inputsValue5["name"];
                                                            if (nameValue15 != null && nameValue15.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance15 = ((string)nameValue15);
                                                                activityInputInstance5.Name = nameInstance15;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray5 = activitiesValue["outputs"];
                                                    if (outputsArray5 != null && outputsArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken outputsValue5 in ((JArray)outputsArray5))
                                                        {
                                                            ActivityOutput activityOutputInstance5 = new ActivityOutput();
                                                            azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance5);
                                                            
                                                            JToken nameValue16 = outputsValue5["name"];
                                                            if (nameValue16 != null && nameValue16.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance16 = ((string)nameValue16);
                                                                activityOutputInstance5.Name = nameInstance16;
                                                            }
                                                        }
                                                    }
                                                    propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                                }
                                            }
                                        }
                                        
                                        JToken startValue = propertiesValue["start"];
                                        if (startValue != null && startValue.Type != JTokenType.Null)
                                        {
                                            DateTime startInstance = ((DateTime)startValue);
                                            propertiesInstance.Start = startInstance;
                                        }
                                        
                                        JToken endValue = propertiesValue["end"];
                                        if (endValue != null && endValue.Type != JTokenType.Null)
                                        {
                                            DateTime endInstance = ((DateTime)endValue);
                                            propertiesInstance.End = endInstance;
                                        }
                                        
                                        JToken isPausedValue = propertiesValue["isPaused"];
                                        if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                        {
                                            bool isPausedInstance = ((bool)isPausedValue);
                                            propertiesInstance.IsPaused = isPausedInstance;
                                        }
                                        
                                        JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                        if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                        {
                                            PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                            propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                            
                                            JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                            if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                                runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken errorMessageValue = propertiesValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            propertiesInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken hubNameValue = propertiesValue["hubName"];
                                        if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance = ((string)hubNameValue);
                                            propertiesInstance.HubName = hubNameInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of pipeline instances with the link to the next
        /// page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next pipelines page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List pipeline operation response.
        /// </returns>
        public async Task<PipelineListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    PipelineListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new PipelineListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Pipeline pipelineInstance = new Pipeline();
                                    result.Pipelines.Add(pipelineInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        pipelineInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        PipelineProperties propertiesInstance = new PipelineProperties();
                                        pipelineInstance.Properties = propertiesInstance;
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken activitiesArray = propertiesValue["activities"];
                                        if (activitiesArray != null && activitiesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken activitiesValue in ((JArray)activitiesArray))
                                            {
                                                string typeName = ((string)activitiesValue["type"]);
                                                if (typeName == "CopyActivity")
                                                {
                                                    CopyActivity copyActivityInstance = new CopyActivity();
                                                    
                                                    JToken transformationValue = activitiesValue["transformation"];
                                                    if (transformationValue != null && transformationValue.Type != JTokenType.Null)
                                                    {
                                                        CopyActivityProperties transformationInstance = new CopyActivityProperties();
                                                        copyActivityInstance.Transformation = transformationInstance;
                                                        
                                                        JToken sourceValue = transformationValue["source"];
                                                        if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                                        {
                                                            string typeName2 = ((string)sourceValue["type"]);
                                                            if (typeName2 == "AzureTableSource")
                                                            {
                                                                AzureTableSource azureTableSourceInstance = new AzureTableSource();
                                                                
                                                                JToken azureTableSourceQueryValue = sourceValue["azureTableSourceQuery"];
                                                                if (azureTableSourceQueryValue != null && azureTableSourceQueryValue.Type != JTokenType.Null)
                                                                {
                                                                    string azureTableSourceQueryInstance = ((string)azureTableSourceQueryValue);
                                                                    azureTableSourceInstance.AzureTableSourceQuery = azureTableSourceQueryInstance;
                                                                }
                                                                
                                                                JToken azureTableSourceIgnoreTableNotFoundValue = sourceValue["azureTableSourceIgnoreTableNotFound"];
                                                                if (azureTableSourceIgnoreTableNotFoundValue != null && azureTableSourceIgnoreTableNotFoundValue.Type != JTokenType.Null)
                                                                {
                                                                    bool azureTableSourceIgnoreTableNotFoundInstance = ((bool)azureTableSourceIgnoreTableNotFoundValue);
                                                                    azureTableSourceInstance.AzureTableSourceIgnoreTableNotFound = azureTableSourceIgnoreTableNotFoundInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue != null && sourceRetryCountValue.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance = ((int)sourceRetryCountValue);
                                                                    azureTableSourceInstance.SourceRetryCount = sourceRetryCountInstance;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue != null && sourceRetryWaitValue.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance = TimeSpan.Parse(((string)sourceRetryWaitValue), CultureInfo.InvariantCulture);
                                                                    azureTableSourceInstance.SourceRetryWait = sourceRetryWaitInstance;
                                                                }
                                                                transformationInstance.Source = azureTableSourceInstance;
                                                            }
                                                            if (typeName2 == "BlobSource")
                                                            {
                                                                BlobSource blobSourceInstance = new BlobSource();
                                                                
                                                                JToken blobColumnSeparatorsValue = sourceValue["blobColumnSeparators"];
                                                                if (blobColumnSeparatorsValue != null && blobColumnSeparatorsValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobColumnSeparatorsInstance = ((string)blobColumnSeparatorsValue);
                                                                    blobSourceInstance.BlobColumnSeparators = blobColumnSeparatorsInstance;
                                                                }
                                                                
                                                                JToken treatEmptyAsNullValue = sourceValue["treatEmptyAsNull"];
                                                                if (treatEmptyAsNullValue != null && treatEmptyAsNullValue.Type != JTokenType.Null)
                                                                {
                                                                    bool treatEmptyAsNullInstance = ((bool)treatEmptyAsNullValue);
                                                                    blobSourceInstance.TreatEmptyAsNull = treatEmptyAsNullInstance;
                                                                }
                                                                
                                                                JToken nullValuesValue = sourceValue["nullValues"];
                                                                if (nullValuesValue != null && nullValuesValue.Type != JTokenType.Null)
                                                                {
                                                                    string nullValuesInstance = ((string)nullValuesValue);
                                                                    blobSourceInstance.NullValues = nullValuesInstance;
                                                                }
                                                                
                                                                JToken skipHeaderLineCountValue = sourceValue["skipHeaderLineCount"];
                                                                if (skipHeaderLineCountValue != null && skipHeaderLineCountValue.Type != JTokenType.Null)
                                                                {
                                                                    int skipHeaderLineCountInstance = ((int)skipHeaderLineCountValue);
                                                                    blobSourceInstance.SkipHeaderLineCount = skipHeaderLineCountInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue2 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue2 != null && sourceRetryCountValue2.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance2 = ((int)sourceRetryCountValue2);
                                                                    blobSourceInstance.SourceRetryCount = sourceRetryCountInstance2;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue2 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue2 != null && sourceRetryWaitValue2.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance2 = TimeSpan.Parse(((string)sourceRetryWaitValue2), CultureInfo.InvariantCulture);
                                                                    blobSourceInstance.SourceRetryWait = sourceRetryWaitInstance2;
                                                                }
                                                                transformationInstance.Source = blobSourceInstance;
                                                            }
                                                            if (typeName2 == "DocumentDbCollectionSource")
                                                            {
                                                                DocumentDbCollectionSource documentDbCollectionSourceInstance = new DocumentDbCollectionSource();
                                                                
                                                                JToken queryValue = sourceValue["query"];
                                                                if (queryValue != null && queryValue.Type != JTokenType.Null)
                                                                {
                                                                    string queryInstance = ((string)queryValue);
                                                                    documentDbCollectionSourceInstance.Query = queryInstance;
                                                                }
                                                                
                                                                JToken nestingSeparatorValue = sourceValue["nestingSeparator"];
                                                                if (nestingSeparatorValue != null && nestingSeparatorValue.Type != JTokenType.Null)
                                                                {
                                                                    string nestingSeparatorInstance = ((string)nestingSeparatorValue);
                                                                    documentDbCollectionSourceInstance.NestingSeparator = nestingSeparatorInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue3 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue3 != null && sourceRetryCountValue3.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance3 = ((int)sourceRetryCountValue3);
                                                                    documentDbCollectionSourceInstance.SourceRetryCount = sourceRetryCountInstance3;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue3 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue3 != null && sourceRetryWaitValue3.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance3 = TimeSpan.Parse(((string)sourceRetryWaitValue3), CultureInfo.InvariantCulture);
                                                                    documentDbCollectionSourceInstance.SourceRetryWait = sourceRetryWaitInstance3;
                                                                }
                                                                transformationInstance.Source = documentDbCollectionSourceInstance;
                                                            }
                                                            if (typeName2 == "RelationalSource")
                                                            {
                                                                RelationalSource relationalSourceInstance = new RelationalSource();
                                                                
                                                                JToken queryValue2 = sourceValue["query"];
                                                                if (queryValue2 != null && queryValue2.Type != JTokenType.Null)
                                                                {
                                                                    string queryInstance2 = ((string)queryValue2);
                                                                    relationalSourceInstance.Query = queryInstance2;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue4 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue4 != null && sourceRetryCountValue4.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance4 = ((int)sourceRetryCountValue4);
                                                                    relationalSourceInstance.SourceRetryCount = sourceRetryCountInstance4;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue4 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue4 != null && sourceRetryWaitValue4.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance4 = TimeSpan.Parse(((string)sourceRetryWaitValue4), CultureInfo.InvariantCulture);
                                                                    relationalSourceInstance.SourceRetryWait = sourceRetryWaitInstance4;
                                                                }
                                                                transformationInstance.Source = relationalSourceInstance;
                                                            }
                                                            if (typeName2 == "OdbcSource")
                                                            {
                                                                RelationalSource.OdbcSource odbcSourceInstance = new RelationalSource.OdbcSource();
                                                                
                                                                JToken odbcReaderQueryValue = sourceValue["odbcReaderQuery"];
                                                                if (odbcReaderQueryValue != null && odbcReaderQueryValue.Type != JTokenType.Null)
                                                                {
                                                                    string odbcReaderQueryInstance = ((string)odbcReaderQueryValue);
                                                                    odbcSourceInstance.OdbcReaderQuery = odbcReaderQueryInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue5 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue5 != null && sourceRetryCountValue5.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance5 = ((int)sourceRetryCountValue5);
                                                                    odbcSourceInstance.SourceRetryCount = sourceRetryCountInstance5;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue5 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue5 != null && sourceRetryWaitValue5.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance5 = TimeSpan.Parse(((string)sourceRetryWaitValue5), CultureInfo.InvariantCulture);
                                                                    odbcSourceInstance.SourceRetryWait = sourceRetryWaitInstance5;
                                                                }
                                                                transformationInstance.Source = odbcSourceInstance;
                                                            }
                                                            if (typeName2 == "ODataSource")
                                                            {
                                                                RelationalSource.ODataSource oDataSourceInstance = new RelationalSource.ODataSource();
                                                                
                                                                JToken sourceRetryCountValue6 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue6 != null && sourceRetryCountValue6.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance6 = ((int)sourceRetryCountValue6);
                                                                    oDataSourceInstance.SourceRetryCount = sourceRetryCountInstance6;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue6 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue6 != null && sourceRetryWaitValue6.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance6 = TimeSpan.Parse(((string)sourceRetryWaitValue6), CultureInfo.InvariantCulture);
                                                                    oDataSourceInstance.SourceRetryWait = sourceRetryWaitInstance6;
                                                                }
                                                                transformationInstance.Source = oDataSourceInstance;
                                                            }
                                                            if (typeName2 == "HdfsSource")
                                                            {
                                                                RelationalSource.HdfsSource hdfsSourceInstance = new RelationalSource.HdfsSource();
                                                                
                                                                JToken sourceRetryCountValue7 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue7 != null && sourceRetryCountValue7.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance7 = ((int)sourceRetryCountValue7);
                                                                    hdfsSourceInstance.SourceRetryCount = sourceRetryCountInstance7;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue7 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue7 != null && sourceRetryWaitValue7.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance7 = TimeSpan.Parse(((string)sourceRetryWaitValue7), CultureInfo.InvariantCulture);
                                                                    hdfsSourceInstance.SourceRetryWait = sourceRetryWaitInstance7;
                                                                }
                                                                transformationInstance.Source = hdfsSourceInstance;
                                                            }
                                                            if (typeName2 == "SqlSource")
                                                            {
                                                                SqlSource sqlSourceInstance = new SqlSource();
                                                                
                                                                JToken sqlReaderQueryValue = sourceValue["sqlReaderQuery"];
                                                                if (sqlReaderQueryValue != null && sqlReaderQueryValue.Type != JTokenType.Null)
                                                                {
                                                                    string sqlReaderQueryInstance = ((string)sqlReaderQueryValue);
                                                                    sqlSourceInstance.SqlReaderQuery = sqlReaderQueryInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue8 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue8 != null && sourceRetryCountValue8.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance8 = ((int)sourceRetryCountValue8);
                                                                    sqlSourceInstance.SourceRetryCount = sourceRetryCountInstance8;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue8 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue8 != null && sourceRetryWaitValue8.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance8 = TimeSpan.Parse(((string)sourceRetryWaitValue8), CultureInfo.InvariantCulture);
                                                                    sqlSourceInstance.SourceRetryWait = sourceRetryWaitInstance8;
                                                                }
                                                                transformationInstance.Source = sqlSourceInstance;
                                                            }
                                                            if (typeName2 == "FileSystemSource")
                                                            {
                                                                FileSystemSource fileSystemSourceInstance = new FileSystemSource();
                                                                
                                                                JToken sourceRetryCountValue9 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue9 != null && sourceRetryCountValue9.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance9 = ((int)sourceRetryCountValue9);
                                                                    fileSystemSourceInstance.SourceRetryCount = sourceRetryCountInstance9;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue9 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue9 != null && sourceRetryWaitValue9.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance9 = TimeSpan.Parse(((string)sourceRetryWaitValue9), CultureInfo.InvariantCulture);
                                                                    fileSystemSourceInstance.SourceRetryWait = sourceRetryWaitInstance9;
                                                                }
                                                                transformationInstance.Source = fileSystemSourceInstance;
                                                            }
                                                            if (typeName2 == "OracleSource")
                                                            {
                                                                OracleSource oracleSourceInstance = new OracleSource();
                                                                
                                                                JToken oracleReaderQueryValue = sourceValue["oracleReaderQuery"];
                                                                if (oracleReaderQueryValue != null && oracleReaderQueryValue.Type != JTokenType.Null)
                                                                {
                                                                    string oracleReaderQueryInstance = ((string)oracleReaderQueryValue);
                                                                    oracleSourceInstance.OracleReaderQuery = oracleReaderQueryInstance;
                                                                }
                                                                
                                                                JToken queryTimeoutValue = sourceValue["queryTimeout"];
                                                                if (queryTimeoutValue != null && queryTimeoutValue.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan queryTimeoutInstance = TimeSpan.Parse(((string)queryTimeoutValue), CultureInfo.InvariantCulture);
                                                                    oracleSourceInstance.QueryTimeout = queryTimeoutInstance;
                                                                }
                                                                
                                                                JToken sourceRetryCountValue10 = sourceValue["sourceRetryCount"];
                                                                if (sourceRetryCountValue10 != null && sourceRetryCountValue10.Type != JTokenType.Null)
                                                                {
                                                                    int sourceRetryCountInstance10 = ((int)sourceRetryCountValue10);
                                                                    oracleSourceInstance.SourceRetryCount = sourceRetryCountInstance10;
                                                                }
                                                                
                                                                JToken sourceRetryWaitValue10 = sourceValue["sourceRetryWait"];
                                                                if (sourceRetryWaitValue10 != null && sourceRetryWaitValue10.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sourceRetryWaitInstance10 = TimeSpan.Parse(((string)sourceRetryWaitValue10), CultureInfo.InvariantCulture);
                                                                    oracleSourceInstance.SourceRetryWait = sourceRetryWaitInstance10;
                                                                }
                                                                transformationInstance.Source = oracleSourceInstance;
                                                            }
                                                        }
                                                        
                                                        JToken sinkValue = transformationValue["sink"];
                                                        if (sinkValue != null && sinkValue.Type != JTokenType.Null)
                                                        {
                                                            string typeName3 = ((string)sinkValue["type"]);
                                                            if (typeName3 == "AzureQueueSink")
                                                            {
                                                                AzureQueueSink azureQueueSinkInstance = new AzureQueueSink();
                                                                
                                                                JToken writeBatchSizeValue = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue != null && writeBatchSizeValue.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance = ((int)writeBatchSizeValue);
                                                                    azureQueueSinkInstance.WriteBatchSize = writeBatchSizeInstance;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue != null && writeBatchTimeoutValue.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance = TimeSpan.Parse(((string)writeBatchTimeoutValue), CultureInfo.InvariantCulture);
                                                                    azureQueueSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue != null && sinkRetryCountValue.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance = ((int)sinkRetryCountValue);
                                                                    azureQueueSinkInstance.SinkRetryCount = sinkRetryCountInstance;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue != null && sinkRetryWaitValue.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance = TimeSpan.Parse(((string)sinkRetryWaitValue), CultureInfo.InvariantCulture);
                                                                    azureQueueSinkInstance.SinkRetryWait = sinkRetryWaitInstance;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue != null && sinkPartitionDataValue.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance = ((bool)sinkPartitionDataValue);
                                                                    azureQueueSinkInstance.SinkPartitionData = sinkPartitionDataInstance;
                                                                }
                                                                transformationInstance.Sink = azureQueueSinkInstance;
                                                            }
                                                            if (typeName3 == "AzureTableSink")
                                                            {
                                                                AzureTableSink azureTableSinkInstance = new AzureTableSink();
                                                                
                                                                JToken azureTableRetryIntervalInSecValue = sinkValue["azureTableRetryIntervalInSec"];
                                                                if (azureTableRetryIntervalInSecValue != null && azureTableRetryIntervalInSecValue.Type != JTokenType.Null)
                                                                {
                                                                    int azureTableRetryIntervalInSecInstance = ((int)azureTableRetryIntervalInSecValue);
                                                                    azureTableSinkInstance.AzureTableRetryIntervalInSec = azureTableRetryIntervalInSecInstance;
                                                                }
                                                                
                                                                JToken azureTableRetryTimesValue = sinkValue["azureTableRetryTimes"];
                                                                if (azureTableRetryTimesValue != null && azureTableRetryTimesValue.Type != JTokenType.Null)
                                                                {
                                                                    int azureTableRetryTimesInstance = ((int)azureTableRetryTimesValue);
                                                                    azureTableSinkInstance.AzureTableRetryTimes = azureTableRetryTimesInstance;
                                                                }
                                                                
                                                                JToken azureTableDefaultPartitionKeyValueValue = sinkValue["azureTableDefaultPartitionKeyValue"];
                                                                if (azureTableDefaultPartitionKeyValueValue != null && azureTableDefaultPartitionKeyValueValue.Type != JTokenType.Null)
                                                                {
                                                                    string azureTableDefaultPartitionKeyValueInstance = ((string)azureTableDefaultPartitionKeyValueValue);
                                                                    azureTableSinkInstance.AzureTableDefaultPartitionKeyValue = azureTableDefaultPartitionKeyValueInstance;
                                                                }
                                                                
                                                                JToken azureTablePartitionKeyNameValue = sinkValue["azureTablePartitionKeyName"];
                                                                if (azureTablePartitionKeyNameValue != null && azureTablePartitionKeyNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string azureTablePartitionKeyNameInstance = ((string)azureTablePartitionKeyNameValue);
                                                                    azureTableSinkInstance.AzureTablePartitionKeyName = azureTablePartitionKeyNameInstance;
                                                                }
                                                                
                                                                JToken azureTableRowKeyNameValue = sinkValue["azureTableRowKeyName"];
                                                                if (azureTableRowKeyNameValue != null && azureTableRowKeyNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string azureTableRowKeyNameInstance = ((string)azureTableRowKeyNameValue);
                                                                    azureTableSinkInstance.AzureTableRowKeyName = azureTableRowKeyNameInstance;
                                                                }
                                                                
                                                                JToken azureTableInsertTypeValue = sinkValue["azureTableInsertType"];
                                                                if (azureTableInsertTypeValue != null && azureTableInsertTypeValue.Type != JTokenType.Null)
                                                                {
                                                                    string azureTableInsertTypeInstance = ((string)azureTableInsertTypeValue);
                                                                    azureTableSinkInstance.AzureTableInsertType = azureTableInsertTypeInstance;
                                                                }
                                                                
                                                                JToken writeBatchSizeValue2 = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue2 != null && writeBatchSizeValue2.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance2 = ((int)writeBatchSizeValue2);
                                                                    azureTableSinkInstance.WriteBatchSize = writeBatchSizeInstance2;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue2 = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue2 != null && writeBatchTimeoutValue2.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance2 = TimeSpan.Parse(((string)writeBatchTimeoutValue2), CultureInfo.InvariantCulture);
                                                                    azureTableSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance2;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue2 = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue2 != null && sinkRetryCountValue2.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance2 = ((int)sinkRetryCountValue2);
                                                                    azureTableSinkInstance.SinkRetryCount = sinkRetryCountInstance2;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue2 = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue2 != null && sinkRetryWaitValue2.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance2 = TimeSpan.Parse(((string)sinkRetryWaitValue2), CultureInfo.InvariantCulture);
                                                                    azureTableSinkInstance.SinkRetryWait = sinkRetryWaitInstance2;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue2 = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue2 != null && sinkPartitionDataValue2.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance2 = ((bool)sinkPartitionDataValue2);
                                                                    azureTableSinkInstance.SinkPartitionData = sinkPartitionDataInstance2;
                                                                }
                                                                transformationInstance.Sink = azureTableSinkInstance;
                                                            }
                                                            if (typeName3 == "BlobSink")
                                                            {
                                                                BlobSink blobSinkInstance = new BlobSink();
                                                                
                                                                JToken blockWriterBlockSizeValue = sinkValue["blockWriterBlockSize"];
                                                                if (blockWriterBlockSizeValue != null && blockWriterBlockSizeValue.Type != JTokenType.Null)
                                                                {
                                                                    int blockWriterBlockSizeInstance = ((int)blockWriterBlockSizeValue);
                                                                    blobSinkInstance.BlockWriterBlockSize = blockWriterBlockSizeInstance;
                                                                }
                                                                
                                                                JToken blobWriterOverwriteFilesValue = sinkValue["blobWriterOverwriteFiles"];
                                                                if (blobWriterOverwriteFilesValue != null && blobWriterOverwriteFilesValue.Type != JTokenType.Null)
                                                                {
                                                                    bool blobWriterOverwriteFilesInstance = ((bool)blobWriterOverwriteFilesValue);
                                                                    blobSinkInstance.BlobWriterOverwriteFiles = blobWriterOverwriteFilesInstance;
                                                                }
                                                                
                                                                JToken blobWriterPartitionColumnsValue = sinkValue["blobWriterPartitionColumns"];
                                                                if (blobWriterPartitionColumnsValue != null && blobWriterPartitionColumnsValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobWriterPartitionColumnsInstance = ((string)blobWriterPartitionColumnsValue);
                                                                    blobSinkInstance.BlobWriterPartitionColumns = blobWriterPartitionColumnsInstance;
                                                                }
                                                                
                                                                JToken blobWriterPartitionFormatValue = sinkValue["blobWriterPartitionFormat"];
                                                                if (blobWriterPartitionFormatValue != null && blobWriterPartitionFormatValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobWriterPartitionFormatInstance = ((string)blobWriterPartitionFormatValue);
                                                                    blobSinkInstance.BlobWriterPartitionFormat = blobWriterPartitionFormatInstance;
                                                                }
                                                                
                                                                JToken blobWriterDateTimeFormatValue = sinkValue["blobWriterDateTimeFormat"];
                                                                if (blobWriterDateTimeFormatValue != null && blobWriterDateTimeFormatValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobWriterDateTimeFormatInstance = ((string)blobWriterDateTimeFormatValue);
                                                                    blobSinkInstance.BlobWriterDateTimeFormat = blobWriterDateTimeFormatInstance;
                                                                }
                                                                
                                                                JToken blobWriterSeparatorValue = sinkValue["blobWriterSeparator"];
                                                                if (blobWriterSeparatorValue != null && blobWriterSeparatorValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobWriterSeparatorInstance = ((string)blobWriterSeparatorValue);
                                                                    blobSinkInstance.BlobWriterSeparator = blobWriterSeparatorInstance;
                                                                }
                                                                
                                                                JToken blobWriterRowSuffixValue = sinkValue["blobWriterRowSuffix"];
                                                                if (blobWriterRowSuffixValue != null && blobWriterRowSuffixValue.Type != JTokenType.Null)
                                                                {
                                                                    string blobWriterRowSuffixInstance = ((string)blobWriterRowSuffixValue);
                                                                    blobSinkInstance.BlobWriterRowSuffix = blobWriterRowSuffixInstance;
                                                                }
                                                                
                                                                JToken blobWriterAddHeaderValue = sinkValue["blobWriterAddHeader"];
                                                                if (blobWriterAddHeaderValue != null && blobWriterAddHeaderValue.Type != JTokenType.Null)
                                                                {
                                                                    bool blobWriterAddHeaderInstance = ((bool)blobWriterAddHeaderValue);
                                                                    blobSinkInstance.BlobWriterAddHeader = blobWriterAddHeaderInstance;
                                                                }
                                                                
                                                                JToken writeBatchSizeValue3 = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue3 != null && writeBatchSizeValue3.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance3 = ((int)writeBatchSizeValue3);
                                                                    blobSinkInstance.WriteBatchSize = writeBatchSizeInstance3;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue3 = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue3 != null && writeBatchTimeoutValue3.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance3 = TimeSpan.Parse(((string)writeBatchTimeoutValue3), CultureInfo.InvariantCulture);
                                                                    blobSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance3;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue3 = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue3 != null && sinkRetryCountValue3.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance3 = ((int)sinkRetryCountValue3);
                                                                    blobSinkInstance.SinkRetryCount = sinkRetryCountInstance3;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue3 = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue3 != null && sinkRetryWaitValue3.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance3 = TimeSpan.Parse(((string)sinkRetryWaitValue3), CultureInfo.InvariantCulture);
                                                                    blobSinkInstance.SinkRetryWait = sinkRetryWaitInstance3;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue3 = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue3 != null && sinkPartitionDataValue3.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance3 = ((bool)sinkPartitionDataValue3);
                                                                    blobSinkInstance.SinkPartitionData = sinkPartitionDataInstance3;
                                                                }
                                                                transformationInstance.Sink = blobSinkInstance;
                                                            }
                                                            if (typeName3 == "DocumentDbCollectionSink")
                                                            {
                                                                DocumentDbCollectionSink documentDbCollectionSinkInstance = new DocumentDbCollectionSink();
                                                                
                                                                JToken nestingSeparatorValue2 = sinkValue["nestingSeparator"];
                                                                if (nestingSeparatorValue2 != null && nestingSeparatorValue2.Type != JTokenType.Null)
                                                                {
                                                                    string nestingSeparatorInstance2 = ((string)nestingSeparatorValue2);
                                                                    documentDbCollectionSinkInstance.NestingSeparator = nestingSeparatorInstance2;
                                                                }
                                                                
                                                                JToken writeBatchSizeValue4 = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue4 != null && writeBatchSizeValue4.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance4 = ((int)writeBatchSizeValue4);
                                                                    documentDbCollectionSinkInstance.WriteBatchSize = writeBatchSizeInstance4;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue4 = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue4 != null && writeBatchTimeoutValue4.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance4 = TimeSpan.Parse(((string)writeBatchTimeoutValue4), CultureInfo.InvariantCulture);
                                                                    documentDbCollectionSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance4;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue4 = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue4 != null && sinkRetryCountValue4.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance4 = ((int)sinkRetryCountValue4);
                                                                    documentDbCollectionSinkInstance.SinkRetryCount = sinkRetryCountInstance4;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue4 = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue4 != null && sinkRetryWaitValue4.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance4 = TimeSpan.Parse(((string)sinkRetryWaitValue4), CultureInfo.InvariantCulture);
                                                                    documentDbCollectionSinkInstance.SinkRetryWait = sinkRetryWaitInstance4;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue4 = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue4 != null && sinkPartitionDataValue4.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance4 = ((bool)sinkPartitionDataValue4);
                                                                    documentDbCollectionSinkInstance.SinkPartitionData = sinkPartitionDataInstance4;
                                                                }
                                                                transformationInstance.Sink = documentDbCollectionSinkInstance;
                                                            }
                                                            if (typeName3 == "SqlSink")
                                                            {
                                                                SqlSink sqlSinkInstance = new SqlSink();
                                                                
                                                                JToken sqlWriterStoredProcedureNameValue = sinkValue["sqlWriterStoredProcedureName"];
                                                                if (sqlWriterStoredProcedureNameValue != null && sqlWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string sqlWriterStoredProcedureNameInstance = ((string)sqlWriterStoredProcedureNameValue);
                                                                    sqlSinkInstance.SqlWriterStoredProcedureName = sqlWriterStoredProcedureNameInstance;
                                                                }
                                                                
                                                                JToken sqlWriterTableTypeValue = sinkValue["sqlWriterTableType"];
                                                                if (sqlWriterTableTypeValue != null && sqlWriterTableTypeValue.Type != JTokenType.Null)
                                                                {
                                                                    string sqlWriterTableTypeInstance = ((string)sqlWriterTableTypeValue);
                                                                    sqlSinkInstance.SqlWriterTableType = sqlWriterTableTypeInstance;
                                                                }
                                                                
                                                                JToken sqlWriterCleanupScriptValue = sinkValue["sqlWriterCleanupScript"];
                                                                if (sqlWriterCleanupScriptValue != null && sqlWriterCleanupScriptValue.Type != JTokenType.Null)
                                                                {
                                                                    string sqlWriterCleanupScriptInstance = ((string)sqlWriterCleanupScriptValue);
                                                                    sqlSinkInstance.SqlWriterCleanupScript = sqlWriterCleanupScriptInstance;
                                                                }
                                                                
                                                                JToken sliceIdentifierColumnNameValue = sinkValue["sliceIdentifierColumnName"];
                                                                if (sliceIdentifierColumnNameValue != null && sliceIdentifierColumnNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string sliceIdentifierColumnNameInstance = ((string)sliceIdentifierColumnNameValue);
                                                                    sqlSinkInstance.SliceIdentifierColumnName = sliceIdentifierColumnNameInstance;
                                                                }
                                                                
                                                                JToken storedProcedureParametersSequenceElement = ((JToken)sinkValue["storedProcedureParameters"]);
                                                                if (storedProcedureParametersSequenceElement != null && storedProcedureParametersSequenceElement.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JProperty property in storedProcedureParametersSequenceElement)
                                                                    {
                                                                        string storedProcedureParametersKey = ((string)property.Name);
                                                                        JObject varToken = ((JObject)property.Value);
                                                                        StoredProcedureParameter storedProcedureParameterInstance = new StoredProcedureParameter();
                                                                        sqlSinkInstance.StoredProcedureParameters.Add(storedProcedureParametersKey, storedProcedureParameterInstance);
                                                                        
                                                                        JToken valueValue2 = varToken["value"];
                                                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                                        {
                                                                            string valueInstance = ((string)valueValue2);
                                                                            storedProcedureParameterInstance.Value = valueInstance;
                                                                        }
                                                                        
                                                                        JToken typeValue = varToken["type"];
                                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                                        {
                                                                            string typeInstance = ((string)typeValue);
                                                                            storedProcedureParameterInstance.Type = typeInstance;
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                JToken writeBatchSizeValue5 = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue5 != null && writeBatchSizeValue5.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance5 = ((int)writeBatchSizeValue5);
                                                                    sqlSinkInstance.WriteBatchSize = writeBatchSizeInstance5;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue5 = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue5 != null && writeBatchTimeoutValue5.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance5 = TimeSpan.Parse(((string)writeBatchTimeoutValue5), CultureInfo.InvariantCulture);
                                                                    sqlSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance5;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue5 = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue5 != null && sinkRetryCountValue5.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance5 = ((int)sinkRetryCountValue5);
                                                                    sqlSinkInstance.SinkRetryCount = sinkRetryCountInstance5;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue5 = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue5 != null && sinkRetryWaitValue5.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance5 = TimeSpan.Parse(((string)sinkRetryWaitValue5), CultureInfo.InvariantCulture);
                                                                    sqlSinkInstance.SinkRetryWait = sinkRetryWaitInstance5;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue5 = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue5 != null && sinkPartitionDataValue5.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance5 = ((bool)sinkPartitionDataValue5);
                                                                    sqlSinkInstance.SinkPartitionData = sinkPartitionDataInstance5;
                                                                }
                                                                transformationInstance.Sink = sqlSinkInstance;
                                                            }
                                                            if (typeName3 == "OracleSink")
                                                            {
                                                                OracleSink oracleSinkInstance = new OracleSink();
                                                                
                                                                JToken oracleWriterStoredProcedureNameValue = sinkValue["oracleWriterStoredProcedureName"];
                                                                if (oracleWriterStoredProcedureNameValue != null && oracleWriterStoredProcedureNameValue.Type != JTokenType.Null)
                                                                {
                                                                    string oracleWriterStoredProcedureNameInstance = ((string)oracleWriterStoredProcedureNameValue);
                                                                    oracleSinkInstance.OracleWriterStoredProcedureName = oracleWriterStoredProcedureNameInstance;
                                                                }
                                                                
                                                                JToken oracleWriterTableTypeValue = sinkValue["oracleWriterTableType"];
                                                                if (oracleWriterTableTypeValue != null && oracleWriterTableTypeValue.Type != JTokenType.Null)
                                                                {
                                                                    string oracleWriterTableTypeInstance = ((string)oracleWriterTableTypeValue);
                                                                    oracleSinkInstance.OracleWriterTableType = oracleWriterTableTypeInstance;
                                                                }
                                                                
                                                                JToken writeBatchSizeValue6 = sinkValue["writeBatchSize"];
                                                                if (writeBatchSizeValue6 != null && writeBatchSizeValue6.Type != JTokenType.Null)
                                                                {
                                                                    int writeBatchSizeInstance6 = ((int)writeBatchSizeValue6);
                                                                    oracleSinkInstance.WriteBatchSize = writeBatchSizeInstance6;
                                                                }
                                                                
                                                                JToken writeBatchTimeoutValue6 = sinkValue["writeBatchTimeout"];
                                                                if (writeBatchTimeoutValue6 != null && writeBatchTimeoutValue6.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan writeBatchTimeoutInstance6 = TimeSpan.Parse(((string)writeBatchTimeoutValue6), CultureInfo.InvariantCulture);
                                                                    oracleSinkInstance.WriteBatchTimeout = writeBatchTimeoutInstance6;
                                                                }
                                                                
                                                                JToken sinkRetryCountValue6 = sinkValue["sinkRetryCount"];
                                                                if (sinkRetryCountValue6 != null && sinkRetryCountValue6.Type != JTokenType.Null)
                                                                {
                                                                    int sinkRetryCountInstance6 = ((int)sinkRetryCountValue6);
                                                                    oracleSinkInstance.SinkRetryCount = sinkRetryCountInstance6;
                                                                }
                                                                
                                                                JToken sinkRetryWaitValue6 = sinkValue["sinkRetryWait"];
                                                                if (sinkRetryWaitValue6 != null && sinkRetryWaitValue6.Type != JTokenType.Null)
                                                                {
                                                                    TimeSpan sinkRetryWaitInstance6 = TimeSpan.Parse(((string)sinkRetryWaitValue6), CultureInfo.InvariantCulture);
                                                                    oracleSinkInstance.SinkRetryWait = sinkRetryWaitInstance6;
                                                                }
                                                                
                                                                JToken sinkPartitionDataValue6 = sinkValue["sinkPartitionData"];
                                                                if (sinkPartitionDataValue6 != null && sinkPartitionDataValue6.Type != JTokenType.Null)
                                                                {
                                                                    bool sinkPartitionDataInstance6 = ((bool)sinkPartitionDataValue6);
                                                                    oracleSinkInstance.SinkPartitionData = sinkPartitionDataInstance6;
                                                                }
                                                                transformationInstance.Sink = oracleSinkInstance;
                                                            }
                                                        }
                                                        
                                                        JToken translatorValue = transformationValue["translator"];
                                                        if (translatorValue != null && translatorValue.Type != JTokenType.Null)
                                                        {
                                                            string typeName4 = ((string)translatorValue["type"]);
                                                            if (typeName4 == "TabularTranslator")
                                                            {
                                                                TabularTranslator tabularTranslatorInstance = new TabularTranslator();
                                                                
                                                                JToken columnMappingsValue = translatorValue["columnMappings"];
                                                                if (columnMappingsValue != null && columnMappingsValue.Type != JTokenType.Null)
                                                                {
                                                                    string columnMappingsInstance = ((string)columnMappingsValue);
                                                                    tabularTranslatorInstance.ColumnMappings = columnMappingsInstance;
                                                                }
                                                                transformationInstance.Translator = tabularTranslatorInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken nameValue2 = activitiesValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        copyActivityInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken descriptionValue2 = activitiesValue["description"];
                                                    if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                    {
                                                        string descriptionInstance2 = ((string)descriptionValue2);
                                                        copyActivityInstance.Description = descriptionInstance2;
                                                    }
                                                    
                                                    JToken linkedServiceNameValue = activitiesValue["linkedServiceName"];
                                                    if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                                    {
                                                        string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                        copyActivityInstance.LinkedServiceName = linkedServiceNameInstance;
                                                    }
                                                    
                                                    JToken policyValue = activitiesValue["policy"];
                                                    if (policyValue != null && policyValue.Type != JTokenType.Null)
                                                    {
                                                        ActivityPolicy policyInstance = new ActivityPolicy();
                                                        copyActivityInstance.Policy = policyInstance;
                                                        
                                                        JToken timeoutValue = policyValue["timeout"];
                                                        if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance = TimeSpan.Parse(((string)timeoutValue), CultureInfo.InvariantCulture);
                                                            policyInstance.Timeout = timeoutInstance;
                                                        }
                                                        
                                                        JToken delayValue = policyValue["delay"];
                                                        if (delayValue != null && delayValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan delayInstance = TimeSpan.Parse(((string)delayValue), CultureInfo.InvariantCulture);
                                                            policyInstance.Delay = delayInstance;
                                                        }
                                                        
                                                        JToken concurrencyValue = policyValue["concurrency"];
                                                        if (concurrencyValue != null && concurrencyValue.Type != JTokenType.Null)
                                                        {
                                                            uint concurrencyInstance = ((uint)concurrencyValue);
                                                            policyInstance.Concurrency = concurrencyInstance;
                                                        }
                                                        
                                                        JToken executionPriorityOrderValue = policyValue["executionPriorityOrder"];
                                                        if (executionPriorityOrderValue != null && executionPriorityOrderValue.Type != JTokenType.Null)
                                                        {
                                                            string executionPriorityOrderInstance = ((string)executionPriorityOrderValue);
                                                            policyInstance.ExecutionPriorityOrder = executionPriorityOrderInstance;
                                                        }
                                                        
                                                        JToken retryValue = policyValue["retry"];
                                                        if (retryValue != null && retryValue.Type != JTokenType.Null)
                                                        {
                                                            int retryInstance = ((int)retryValue);
                                                            policyInstance.Retry = retryInstance;
                                                        }
                                                        
                                                        JToken longRetryValue = policyValue["longRetry"];
                                                        if (longRetryValue != null && longRetryValue.Type != JTokenType.Null)
                                                        {
                                                            int longRetryInstance = ((int)longRetryValue);
                                                            policyInstance.LongRetry = longRetryInstance;
                                                        }
                                                        
                                                        JToken longRetryIntervalValue = policyValue["longRetryInterval"];
                                                        if (longRetryIntervalValue != null && longRetryIntervalValue.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan longRetryIntervalInstance = TimeSpan.Parse(((string)longRetryIntervalValue), CultureInfo.InvariantCulture);
                                                            policyInstance.LongRetryInterval = longRetryIntervalInstance;
                                                        }
                                                    }
                                                    
                                                    JToken inputsArray = activitiesValue["inputs"];
                                                    if (inputsArray != null && inputsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inputsValue in ((JArray)inputsArray))
                                                        {
                                                            ActivityInput activityInputInstance = new ActivityInput();
                                                            copyActivityInstance.Inputs.Add(activityInputInstance);
                                                            
                                                            JToken startTimeValue = inputsValue["startTime"];
                                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                            {
                                                                string startTimeInstance = ((string)startTimeValue);
                                                                activityInputInstance.StartTime = startTimeInstance;
                                                            }
                                                            
                                                            JToken endTimeValue = inputsValue["endTime"];
                                                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                                            {
                                                                string endTimeInstance = ((string)endTimeValue);
                                                                activityInputInstance.EndTime = endTimeInstance;
                                                            }
                                                            
                                                            JToken lengthValue = inputsValue["length"];
                                                            if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan lengthInstance = TimeSpan.Parse(((string)lengthValue), CultureInfo.InvariantCulture);
                                                                activityInputInstance.Length = lengthInstance;
                                                            }
                                                            
                                                            JToken nameValue3 = inputsValue["name"];
                                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance3 = ((string)nameValue3);
                                                                activityInputInstance.Name = nameInstance3;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray = activitiesValue["outputs"];
                                                    if (outputsArray != null && outputsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken outputsValue in ((JArray)outputsArray))
                                                        {
                                                            ActivityOutput activityOutputInstance = new ActivityOutput();
                                                            copyActivityInstance.Outputs.Add(activityOutputInstance);
                                                            
                                                            JToken nameValue4 = outputsValue["name"];
                                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance4 = ((string)nameValue4);
                                                                activityOutputInstance.Name = nameInstance4;
                                                            }
                                                        }
                                                    }
                                                    propertiesInstance.Activities.Add(copyActivityInstance);
                                                }
                                                if (typeName == "HDInsightActivity")
                                                {
                                                    HDInsightActivity hDInsightActivityInstance = new HDInsightActivity();
                                                    
                                                    JToken transformationValue2 = activitiesValue["transformation"];
                                                    if (transformationValue2 != null && transformationValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeName5 = ((string)transformationValue2["type"]);
                                                        if (typeName5 == "Hive")
                                                        {
                                                            Hive hiveInstance = new Hive();
                                                            
                                                            JToken scriptValue = transformationValue2["script"];
                                                            if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                            {
                                                                string scriptInstance = ((string)scriptValue);
                                                                hiveInstance.Script = scriptInstance;
                                                            }
                                                            
                                                            JToken scriptPathValue = transformationValue2["scriptPath"];
                                                            if (scriptPathValue != null && scriptPathValue.Type != JTokenType.Null)
                                                            {
                                                                string scriptPathInstance = ((string)scriptPathValue);
                                                                hiveInstance.ScriptPath = scriptPathInstance;
                                                            }
                                                            
                                                            JToken scriptLinkedServiceValue = transformationValue2["scriptLinkedService"];
                                                            if (scriptLinkedServiceValue != null && scriptLinkedServiceValue.Type != JTokenType.Null)
                                                            {
                                                                string scriptLinkedServiceInstance = ((string)scriptLinkedServiceValue);
                                                                hiveInstance.ScriptLinkedService = scriptLinkedServiceInstance;
                                                            }
                                                            
                                                            JToken definesSequenceElement = ((JToken)transformationValue2["defines"]);
                                                            if (definesSequenceElement != null && definesSequenceElement.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property2 in definesSequenceElement)
                                                                {
                                                                    string definesKey = ((string)property2.Name);
                                                                    string definesValue = ((string)property2.Value);
                                                                    hiveInstance.Defines.Add(definesKey, definesValue);
                                                                }
                                                            }
                                                            
                                                            JToken extendedPropertiesSequenceElement = ((JToken)transformationValue2["extendedProperties"]);
                                                            if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property3 in extendedPropertiesSequenceElement)
                                                                {
                                                                    string extendedPropertiesKey = ((string)property3.Name);
                                                                    string extendedPropertiesValue = ((string)property3.Value);
                                                                    hiveInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                                }
                                                            }
                                                            
                                                            JToken storageLinkedServicesArray = transformationValue2["storageLinkedServices"];
                                                            if (storageLinkedServicesArray != null && storageLinkedServicesArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken storageLinkedServicesValue in ((JArray)storageLinkedServicesArray))
                                                                {
                                                                    hiveInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue));
                                                                }
                                                            }
                                                            
                                                            JToken argumentsArray = transformationValue2["arguments"];
                                                            if (argumentsArray != null && argumentsArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken argumentsValue in ((JArray)argumentsArray))
                                                                {
                                                                    hiveInstance.Arguments.Add(((string)argumentsValue));
                                                                }
                                                            }
                                                            hDInsightActivityInstance.Transformation = hiveInstance;
                                                        }
                                                        if (typeName5 == "Pig")
                                                        {
                                                            Pig pigInstance = new Pig();
                                                            
                                                            JToken scriptValue2 = transformationValue2["script"];
                                                            if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                                            {
                                                                string scriptInstance2 = ((string)scriptValue2);
                                                                pigInstance.Script = scriptInstance2;
                                                            }
                                                            
                                                            JToken scriptPathValue2 = transformationValue2["scriptPath"];
                                                            if (scriptPathValue2 != null && scriptPathValue2.Type != JTokenType.Null)
                                                            {
                                                                string scriptPathInstance2 = ((string)scriptPathValue2);
                                                                pigInstance.ScriptPath = scriptPathInstance2;
                                                            }
                                                            
                                                            JToken scriptLinkedServiceValue2 = transformationValue2["scriptLinkedService"];
                                                            if (scriptLinkedServiceValue2 != null && scriptLinkedServiceValue2.Type != JTokenType.Null)
                                                            {
                                                                string scriptLinkedServiceInstance2 = ((string)scriptLinkedServiceValue2);
                                                                pigInstance.ScriptLinkedService = scriptLinkedServiceInstance2;
                                                            }
                                                            
                                                            JToken extendedPropertiesSequenceElement2 = ((JToken)transformationValue2["extendedProperties"]);
                                                            if (extendedPropertiesSequenceElement2 != null && extendedPropertiesSequenceElement2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property4 in extendedPropertiesSequenceElement2)
                                                                {
                                                                    string extendedPropertiesKey2 = ((string)property4.Name);
                                                                    string extendedPropertiesValue2 = ((string)property4.Value);
                                                                    pigInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                                                }
                                                            }
                                                            
                                                            JToken storageLinkedServicesArray2 = transformationValue2["storageLinkedServices"];
                                                            if (storageLinkedServicesArray2 != null && storageLinkedServicesArray2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken storageLinkedServicesValue2 in ((JArray)storageLinkedServicesArray2))
                                                                {
                                                                    pigInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue2));
                                                                }
                                                            }
                                                            
                                                            JToken argumentsArray2 = transformationValue2["arguments"];
                                                            if (argumentsArray2 != null && argumentsArray2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken argumentsValue2 in ((JArray)argumentsArray2))
                                                                {
                                                                    pigInstance.Arguments.Add(((string)argumentsValue2));
                                                                }
                                                            }
                                                            hDInsightActivityInstance.Transformation = pigInstance;
                                                        }
                                                        if (typeName5 == "MapReduce")
                                                        {
                                                            MapReduce mapReduceInstance = new MapReduce();
                                                            
                                                            JToken classNameValue = transformationValue2["className"];
                                                            if (classNameValue != null && classNameValue.Type != JTokenType.Null)
                                                            {
                                                                string classNameInstance = ((string)classNameValue);
                                                                mapReduceInstance.ClassName = classNameInstance;
                                                            }
                                                            
                                                            JToken jarFilePathValue = transformationValue2["jarFilePath"];
                                                            if (jarFilePathValue != null && jarFilePathValue.Type != JTokenType.Null)
                                                            {
                                                                string jarFilePathInstance = ((string)jarFilePathValue);
                                                                mapReduceInstance.JarFilePath = jarFilePathInstance;
                                                            }
                                                            
                                                            JToken jarLinkedServiceValue = transformationValue2["jarLinkedService"];
                                                            if (jarLinkedServiceValue != null && jarLinkedServiceValue.Type != JTokenType.Null)
                                                            {
                                                                string jarLinkedServiceInstance = ((string)jarLinkedServiceValue);
                                                                mapReduceInstance.JarLinkedService = jarLinkedServiceInstance;
                                                            }
                                                            
                                                            JToken jarLibsArray = transformationValue2["jarLibs"];
                                                            if (jarLibsArray != null && jarLibsArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken jarLibsValue in ((JArray)jarLibsArray))
                                                                {
                                                                    mapReduceInstance.JarLibs.Add(((string)jarLibsValue));
                                                                }
                                                            }
                                                            
                                                            JToken definesSequenceElement2 = ((JToken)transformationValue2["defines"]);
                                                            if (definesSequenceElement2 != null && definesSequenceElement2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property5 in definesSequenceElement2)
                                                                {
                                                                    string definesKey2 = ((string)property5.Name);
                                                                    string definesValue2 = ((string)property5.Value);
                                                                    mapReduceInstance.Defines.Add(definesKey2, definesValue2);
                                                                }
                                                            }
                                                            
                                                            JToken extendedPropertiesSequenceElement3 = ((JToken)transformationValue2["extendedProperties"]);
                                                            if (extendedPropertiesSequenceElement3 != null && extendedPropertiesSequenceElement3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property6 in extendedPropertiesSequenceElement3)
                                                                {
                                                                    string extendedPropertiesKey3 = ((string)property6.Name);
                                                                    string extendedPropertiesValue3 = ((string)property6.Value);
                                                                    mapReduceInstance.ExtendedProperties.Add(extendedPropertiesKey3, extendedPropertiesValue3);
                                                                }
                                                            }
                                                            
                                                            JToken storageLinkedServicesArray3 = transformationValue2["storageLinkedServices"];
                                                            if (storageLinkedServicesArray3 != null && storageLinkedServicesArray3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken storageLinkedServicesValue3 in ((JArray)storageLinkedServicesArray3))
                                                                {
                                                                    mapReduceInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue3));
                                                                }
                                                            }
                                                            
                                                            JToken argumentsArray3 = transformationValue2["arguments"];
                                                            if (argumentsArray3 != null && argumentsArray3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken argumentsValue3 in ((JArray)argumentsArray3))
                                                                {
                                                                    mapReduceInstance.Arguments.Add(((string)argumentsValue3));
                                                                }
                                                            }
                                                            hDInsightActivityInstance.Transformation = mapReduceInstance;
                                                        }
                                                        if (typeName5 == "Streaming")
                                                        {
                                                            Streaming streamingInstance = new Streaming();
                                                            
                                                            JToken mapperValue = transformationValue2["mapper"];
                                                            if (mapperValue != null && mapperValue.Type != JTokenType.Null)
                                                            {
                                                                string mapperInstance = ((string)mapperValue);
                                                                streamingInstance.Mapper = mapperInstance;
                                                            }
                                                            
                                                            JToken reducerValue = transformationValue2["reducer"];
                                                            if (reducerValue != null && reducerValue.Type != JTokenType.Null)
                                                            {
                                                                string reducerInstance = ((string)reducerValue);
                                                                streamingInstance.Reducer = reducerInstance;
                                                            }
                                                            
                                                            JToken inputValue = transformationValue2["input"];
                                                            if (inputValue != null && inputValue.Type != JTokenType.Null)
                                                            {
                                                                string inputInstance = ((string)inputValue);
                                                                streamingInstance.Input = inputInstance;
                                                            }
                                                            
                                                            JToken outputValue = transformationValue2["output"];
                                                            if (outputValue != null && outputValue.Type != JTokenType.Null)
                                                            {
                                                                string outputInstance = ((string)outputValue);
                                                                streamingInstance.Output = outputInstance;
                                                            }
                                                            
                                                            JToken filePathsArray = transformationValue2["filePaths"];
                                                            if (filePathsArray != null && filePathsArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken filePathsValue in ((JArray)filePathsArray))
                                                                {
                                                                    streamingInstance.FilePaths.Add(((string)filePathsValue));
                                                                }
                                                            }
                                                            
                                                            JToken fileLinkedServiceValue = transformationValue2["fileLinkedService"];
                                                            if (fileLinkedServiceValue != null && fileLinkedServiceValue.Type != JTokenType.Null)
                                                            {
                                                                string fileLinkedServiceInstance = ((string)fileLinkedServiceValue);
                                                                streamingInstance.FileLinkedService = fileLinkedServiceInstance;
                                                            }
                                                            
                                                            JToken combinerValue = transformationValue2["combiner"];
                                                            if (combinerValue != null && combinerValue.Type != JTokenType.Null)
                                                            {
                                                                string combinerInstance = ((string)combinerValue);
                                                                streamingInstance.Combiner = combinerInstance;
                                                            }
                                                            
                                                            JToken commandEnvironmentArray = transformationValue2["commandEnvironment"];
                                                            if (commandEnvironmentArray != null && commandEnvironmentArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken commandEnvironmentValue in ((JArray)commandEnvironmentArray))
                                                                {
                                                                    streamingInstance.CommandEnvironment.Add(((string)commandEnvironmentValue));
                                                                }
                                                            }
                                                            
                                                            JToken definesSequenceElement3 = ((JToken)transformationValue2["defines"]);
                                                            if (definesSequenceElement3 != null && definesSequenceElement3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property7 in definesSequenceElement3)
                                                                {
                                                                    string definesKey3 = ((string)property7.Name);
                                                                    string definesValue3 = ((string)property7.Value);
                                                                    streamingInstance.Defines.Add(definesKey3, definesValue3);
                                                                }
                                                            }
                                                            
                                                            JToken extendedPropertiesSequenceElement4 = ((JToken)transformationValue2["extendedProperties"]);
                                                            if (extendedPropertiesSequenceElement4 != null && extendedPropertiesSequenceElement4.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property8 in extendedPropertiesSequenceElement4)
                                                                {
                                                                    string extendedPropertiesKey4 = ((string)property8.Name);
                                                                    string extendedPropertiesValue4 = ((string)property8.Value);
                                                                    streamingInstance.ExtendedProperties.Add(extendedPropertiesKey4, extendedPropertiesValue4);
                                                                }
                                                            }
                                                            
                                                            JToken storageLinkedServicesArray4 = transformationValue2["storageLinkedServices"];
                                                            if (storageLinkedServicesArray4 != null && storageLinkedServicesArray4.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken storageLinkedServicesValue4 in ((JArray)storageLinkedServicesArray4))
                                                                {
                                                                    streamingInstance.StorageLinkedServices.Add(((string)storageLinkedServicesValue4));
                                                                }
                                                            }
                                                            
                                                            JToken argumentsArray4 = transformationValue2["arguments"];
                                                            if (argumentsArray4 != null && argumentsArray4.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken argumentsValue4 in ((JArray)argumentsArray4))
                                                                {
                                                                    streamingInstance.Arguments.Add(((string)argumentsValue4));
                                                                }
                                                            }
                                                            hDInsightActivityInstance.Transformation = streamingInstance;
                                                        }
                                                    }
                                                    
                                                    JToken nameValue5 = activitiesValue["name"];
                                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance5 = ((string)nameValue5);
                                                        hDInsightActivityInstance.Name = nameInstance5;
                                                    }
                                                    
                                                    JToken descriptionValue3 = activitiesValue["description"];
                                                    if (descriptionValue3 != null && descriptionValue3.Type != JTokenType.Null)
                                                    {
                                                        string descriptionInstance3 = ((string)descriptionValue3);
                                                        hDInsightActivityInstance.Description = descriptionInstance3;
                                                    }
                                                    
                                                    JToken linkedServiceNameValue2 = activitiesValue["linkedServiceName"];
                                                    if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                        hDInsightActivityInstance.LinkedServiceName = linkedServiceNameInstance2;
                                                    }
                                                    
                                                    JToken policyValue2 = activitiesValue["policy"];
                                                    if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                                    {
                                                        ActivityPolicy policyInstance2 = new ActivityPolicy();
                                                        hDInsightActivityInstance.Policy = policyInstance2;
                                                        
                                                        JToken timeoutValue2 = policyValue2["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = TimeSpan.Parse(((string)timeoutValue2), CultureInfo.InvariantCulture);
                                                            policyInstance2.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken delayValue2 = policyValue2["delay"];
                                                        if (delayValue2 != null && delayValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan delayInstance2 = TimeSpan.Parse(((string)delayValue2), CultureInfo.InvariantCulture);
                                                            policyInstance2.Delay = delayInstance2;
                                                        }
                                                        
                                                        JToken concurrencyValue2 = policyValue2["concurrency"];
                                                        if (concurrencyValue2 != null && concurrencyValue2.Type != JTokenType.Null)
                                                        {
                                                            uint concurrencyInstance2 = ((uint)concurrencyValue2);
                                                            policyInstance2.Concurrency = concurrencyInstance2;
                                                        }
                                                        
                                                        JToken executionPriorityOrderValue2 = policyValue2["executionPriorityOrder"];
                                                        if (executionPriorityOrderValue2 != null && executionPriorityOrderValue2.Type != JTokenType.Null)
                                                        {
                                                            string executionPriorityOrderInstance2 = ((string)executionPriorityOrderValue2);
                                                            policyInstance2.ExecutionPriorityOrder = executionPriorityOrderInstance2;
                                                        }
                                                        
                                                        JToken retryValue2 = policyValue2["retry"];
                                                        if (retryValue2 != null && retryValue2.Type != JTokenType.Null)
                                                        {
                                                            int retryInstance2 = ((int)retryValue2);
                                                            policyInstance2.Retry = retryInstance2;
                                                        }
                                                        
                                                        JToken longRetryValue2 = policyValue2["longRetry"];
                                                        if (longRetryValue2 != null && longRetryValue2.Type != JTokenType.Null)
                                                        {
                                                            int longRetryInstance2 = ((int)longRetryValue2);
                                                            policyInstance2.LongRetry = longRetryInstance2;
                                                        }
                                                        
                                                        JToken longRetryIntervalValue2 = policyValue2["longRetryInterval"];
                                                        if (longRetryIntervalValue2 != null && longRetryIntervalValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan longRetryIntervalInstance2 = TimeSpan.Parse(((string)longRetryIntervalValue2), CultureInfo.InvariantCulture);
                                                            policyInstance2.LongRetryInterval = longRetryIntervalInstance2;
                                                        }
                                                    }
                                                    
                                                    JToken inputsArray2 = activitiesValue["inputs"];
                                                    if (inputsArray2 != null && inputsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inputsValue2 in ((JArray)inputsArray2))
                                                        {
                                                            ActivityInput activityInputInstance2 = new ActivityInput();
                                                            hDInsightActivityInstance.Inputs.Add(activityInputInstance2);
                                                            
                                                            JToken startTimeValue2 = inputsValue2["startTime"];
                                                            if (startTimeValue2 != null && startTimeValue2.Type != JTokenType.Null)
                                                            {
                                                                string startTimeInstance2 = ((string)startTimeValue2);
                                                                activityInputInstance2.StartTime = startTimeInstance2;
                                                            }
                                                            
                                                            JToken endTimeValue2 = inputsValue2["endTime"];
                                                            if (endTimeValue2 != null && endTimeValue2.Type != JTokenType.Null)
                                                            {
                                                                string endTimeInstance2 = ((string)endTimeValue2);
                                                                activityInputInstance2.EndTime = endTimeInstance2;
                                                            }
                                                            
                                                            JToken lengthValue2 = inputsValue2["length"];
                                                            if (lengthValue2 != null && lengthValue2.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan lengthInstance2 = TimeSpan.Parse(((string)lengthValue2), CultureInfo.InvariantCulture);
                                                                activityInputInstance2.Length = lengthInstance2;
                                                            }
                                                            
                                                            JToken nameValue6 = inputsValue2["name"];
                                                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance6 = ((string)nameValue6);
                                                                activityInputInstance2.Name = nameInstance6;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray2 = activitiesValue["outputs"];
                                                    if (outputsArray2 != null && outputsArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken outputsValue2 in ((JArray)outputsArray2))
                                                        {
                                                            ActivityOutput activityOutputInstance2 = new ActivityOutput();
                                                            hDInsightActivityInstance.Outputs.Add(activityOutputInstance2);
                                                            
                                                            JToken nameValue7 = outputsValue2["name"];
                                                            if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance7 = ((string)nameValue7);
                                                                activityOutputInstance2.Name = nameInstance7;
                                                            }
                                                        }
                                                    }
                                                    propertiesInstance.Activities.Add(hDInsightActivityInstance);
                                                }
                                                if (typeName == "DotNetActivity")
                                                {
                                                    DotNetActivity dotNetActivityInstance = new DotNetActivity();
                                                    
                                                    JToken transformationValue3 = activitiesValue["transformation"];
                                                    if (transformationValue3 != null && transformationValue3.Type != JTokenType.Null)
                                                    {
                                                        DotNetActivityProperties transformationInstance2 = new DotNetActivityProperties();
                                                        dotNetActivityInstance.Transformation = transformationInstance2;
                                                        
                                                        JToken assemblyNameValue = transformationValue3["assemblyName"];
                                                        if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                                                        {
                                                            string assemblyNameInstance = ((string)assemblyNameValue);
                                                            transformationInstance2.AssemblyName = assemblyNameInstance;
                                                        }
                                                        
                                                        JToken entryPointValue = transformationValue3["entryPoint"];
                                                        if (entryPointValue != null && entryPointValue.Type != JTokenType.Null)
                                                        {
                                                            string entryPointInstance = ((string)entryPointValue);
                                                            transformationInstance2.EntryPoint = entryPointInstance;
                                                        }
                                                        
                                                        JToken packageLinkedServiceValue = transformationValue3["packageLinkedService"];
                                                        if (packageLinkedServiceValue != null && packageLinkedServiceValue.Type != JTokenType.Null)
                                                        {
                                                            string packageLinkedServiceInstance = ((string)packageLinkedServiceValue);
                                                            transformationInstance2.PackageLinkedService = packageLinkedServiceInstance;
                                                        }
                                                        
                                                        JToken packageFileValue = transformationValue3["packageFile"];
                                                        if (packageFileValue != null && packageFileValue.Type != JTokenType.Null)
                                                        {
                                                            string packageFileInstance = ((string)packageFileValue);
                                                            transformationInstance2.PackageFile = packageFileInstance;
                                                        }
                                                        
                                                        JToken extendedPropertiesSequenceElement5 = ((JToken)transformationValue3["extendedProperties"]);
                                                        if (extendedPropertiesSequenceElement5 != null && extendedPropertiesSequenceElement5.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property9 in extendedPropertiesSequenceElement5)
                                                            {
                                                                string extendedPropertiesKey5 = ((string)property9.Name);
                                                                string extendedPropertiesValue5 = ((string)property9.Value);
                                                                transformationInstance2.ExtendedProperties.Add(extendedPropertiesKey5, extendedPropertiesValue5);
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken nameValue8 = activitiesValue["name"];
                                                    if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance8 = ((string)nameValue8);
                                                        dotNetActivityInstance.Name = nameInstance8;
                                                    }
                                                    
                                                    JToken descriptionValue4 = activitiesValue["description"];
                                                    if (descriptionValue4 != null && descriptionValue4.Type != JTokenType.Null)
                                                    {
                                                        string descriptionInstance4 = ((string)descriptionValue4);
                                                        dotNetActivityInstance.Description = descriptionInstance4;
                                                    }
                                                    
                                                    JToken linkedServiceNameValue3 = activitiesValue["linkedServiceName"];
                                                    if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                                    {
                                                        string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                        dotNetActivityInstance.LinkedServiceName = linkedServiceNameInstance3;
                                                    }
                                                    
                                                    JToken policyValue3 = activitiesValue["policy"];
                                                    if (policyValue3 != null && policyValue3.Type != JTokenType.Null)
                                                    {
                                                        ActivityPolicy policyInstance3 = new ActivityPolicy();
                                                        dotNetActivityInstance.Policy = policyInstance3;
                                                        
                                                        JToken timeoutValue3 = policyValue3["timeout"];
                                                        if (timeoutValue3 != null && timeoutValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance3 = TimeSpan.Parse(((string)timeoutValue3), CultureInfo.InvariantCulture);
                                                            policyInstance3.Timeout = timeoutInstance3;
                                                        }
                                                        
                                                        JToken delayValue3 = policyValue3["delay"];
                                                        if (delayValue3 != null && delayValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan delayInstance3 = TimeSpan.Parse(((string)delayValue3), CultureInfo.InvariantCulture);
                                                            policyInstance3.Delay = delayInstance3;
                                                        }
                                                        
                                                        JToken concurrencyValue3 = policyValue3["concurrency"];
                                                        if (concurrencyValue3 != null && concurrencyValue3.Type != JTokenType.Null)
                                                        {
                                                            uint concurrencyInstance3 = ((uint)concurrencyValue3);
                                                            policyInstance3.Concurrency = concurrencyInstance3;
                                                        }
                                                        
                                                        JToken executionPriorityOrderValue3 = policyValue3["executionPriorityOrder"];
                                                        if (executionPriorityOrderValue3 != null && executionPriorityOrderValue3.Type != JTokenType.Null)
                                                        {
                                                            string executionPriorityOrderInstance3 = ((string)executionPriorityOrderValue3);
                                                            policyInstance3.ExecutionPriorityOrder = executionPriorityOrderInstance3;
                                                        }
                                                        
                                                        JToken retryValue3 = policyValue3["retry"];
                                                        if (retryValue3 != null && retryValue3.Type != JTokenType.Null)
                                                        {
                                                            int retryInstance3 = ((int)retryValue3);
                                                            policyInstance3.Retry = retryInstance3;
                                                        }
                                                        
                                                        JToken longRetryValue3 = policyValue3["longRetry"];
                                                        if (longRetryValue3 != null && longRetryValue3.Type != JTokenType.Null)
                                                        {
                                                            int longRetryInstance3 = ((int)longRetryValue3);
                                                            policyInstance3.LongRetry = longRetryInstance3;
                                                        }
                                                        
                                                        JToken longRetryIntervalValue3 = policyValue3["longRetryInterval"];
                                                        if (longRetryIntervalValue3 != null && longRetryIntervalValue3.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan longRetryIntervalInstance3 = TimeSpan.Parse(((string)longRetryIntervalValue3), CultureInfo.InvariantCulture);
                                                            policyInstance3.LongRetryInterval = longRetryIntervalInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken inputsArray3 = activitiesValue["inputs"];
                                                    if (inputsArray3 != null && inputsArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inputsValue3 in ((JArray)inputsArray3))
                                                        {
                                                            ActivityInput activityInputInstance3 = new ActivityInput();
                                                            dotNetActivityInstance.Inputs.Add(activityInputInstance3);
                                                            
                                                            JToken startTimeValue3 = inputsValue3["startTime"];
                                                            if (startTimeValue3 != null && startTimeValue3.Type != JTokenType.Null)
                                                            {
                                                                string startTimeInstance3 = ((string)startTimeValue3);
                                                                activityInputInstance3.StartTime = startTimeInstance3;
                                                            }
                                                            
                                                            JToken endTimeValue3 = inputsValue3["endTime"];
                                                            if (endTimeValue3 != null && endTimeValue3.Type != JTokenType.Null)
                                                            {
                                                                string endTimeInstance3 = ((string)endTimeValue3);
                                                                activityInputInstance3.EndTime = endTimeInstance3;
                                                            }
                                                            
                                                            JToken lengthValue3 = inputsValue3["length"];
                                                            if (lengthValue3 != null && lengthValue3.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan lengthInstance3 = TimeSpan.Parse(((string)lengthValue3), CultureInfo.InvariantCulture);
                                                                activityInputInstance3.Length = lengthInstance3;
                                                            }
                                                            
                                                            JToken nameValue9 = inputsValue3["name"];
                                                            if (nameValue9 != null && nameValue9.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance9 = ((string)nameValue9);
                                                                activityInputInstance3.Name = nameInstance9;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray3 = activitiesValue["outputs"];
                                                    if (outputsArray3 != null && outputsArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken outputsValue3 in ((JArray)outputsArray3))
                                                        {
                                                            ActivityOutput activityOutputInstance3 = new ActivityOutput();
                                                            dotNetActivityInstance.Outputs.Add(activityOutputInstance3);
                                                            
                                                            JToken nameValue10 = outputsValue3["name"];
                                                            if (nameValue10 != null && nameValue10.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance10 = ((string)nameValue10);
                                                                activityOutputInstance3.Name = nameInstance10;
                                                            }
                                                        }
                                                    }
                                                    propertiesInstance.Activities.Add(dotNetActivityInstance);
                                                }
                                                if (typeName == "StoredProcedureActivity")
                                                {
                                                    StoredProcedureActivity storedProcedureActivityInstance = new StoredProcedureActivity();
                                                    
                                                    JToken transformationValue4 = activitiesValue["transformation"];
                                                    if (transformationValue4 != null && transformationValue4.Type != JTokenType.Null)
                                                    {
                                                        StoredProcedureActivityProperties transformationInstance3 = new StoredProcedureActivityProperties();
                                                        storedProcedureActivityInstance.Transformation = transformationInstance3;
                                                        
                                                        JToken storedProcedureNameValue = transformationValue4["storedProcedureName"];
                                                        if (storedProcedureNameValue != null && storedProcedureNameValue.Type != JTokenType.Null)
                                                        {
                                                            string storedProcedureNameInstance = ((string)storedProcedureNameValue);
                                                            transformationInstance3.StoredProcedureName = storedProcedureNameInstance;
                                                        }
                                                        
                                                        JToken storedProcedureParametersSequenceElement2 = ((JToken)transformationValue4["storedProcedureParameters"]);
                                                        if (storedProcedureParametersSequenceElement2 != null && storedProcedureParametersSequenceElement2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property10 in storedProcedureParametersSequenceElement2)
                                                            {
                                                                string storedProcedureParametersKey2 = ((string)property10.Name);
                                                                string storedProcedureParametersValue = ((string)property10.Value);
                                                                transformationInstance3.StoredProcedureActivityParameters.Add(storedProcedureParametersKey2, storedProcedureParametersValue);
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken nameValue11 = activitiesValue["name"];
                                                    if (nameValue11 != null && nameValue11.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance11 = ((string)nameValue11);
                                                        storedProcedureActivityInstance.Name = nameInstance11;
                                                    }
                                                    
                                                    JToken descriptionValue5 = activitiesValue["description"];
                                                    if (descriptionValue5 != null && descriptionValue5.Type != JTokenType.Null)
                                                    {
                                                        string descriptionInstance5 = ((string)descriptionValue5);
                                                        storedProcedureActivityInstance.Description = descriptionInstance5;
                                                    }
                                                    
                                                    JToken linkedServiceNameValue4 = activitiesValue["linkedServiceName"];
                                                    if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                                    {
                                                        string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                        storedProcedureActivityInstance.LinkedServiceName = linkedServiceNameInstance4;
                                                    }
                                                    
                                                    JToken policyValue4 = activitiesValue["policy"];
                                                    if (policyValue4 != null && policyValue4.Type != JTokenType.Null)
                                                    {
                                                        ActivityPolicy policyInstance4 = new ActivityPolicy();
                                                        storedProcedureActivityInstance.Policy = policyInstance4;
                                                        
                                                        JToken timeoutValue4 = policyValue4["timeout"];
                                                        if (timeoutValue4 != null && timeoutValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance4 = TimeSpan.Parse(((string)timeoutValue4), CultureInfo.InvariantCulture);
                                                            policyInstance4.Timeout = timeoutInstance4;
                                                        }
                                                        
                                                        JToken delayValue4 = policyValue4["delay"];
                                                        if (delayValue4 != null && delayValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan delayInstance4 = TimeSpan.Parse(((string)delayValue4), CultureInfo.InvariantCulture);
                                                            policyInstance4.Delay = delayInstance4;
                                                        }
                                                        
                                                        JToken concurrencyValue4 = policyValue4["concurrency"];
                                                        if (concurrencyValue4 != null && concurrencyValue4.Type != JTokenType.Null)
                                                        {
                                                            uint concurrencyInstance4 = ((uint)concurrencyValue4);
                                                            policyInstance4.Concurrency = concurrencyInstance4;
                                                        }
                                                        
                                                        JToken executionPriorityOrderValue4 = policyValue4["executionPriorityOrder"];
                                                        if (executionPriorityOrderValue4 != null && executionPriorityOrderValue4.Type != JTokenType.Null)
                                                        {
                                                            string executionPriorityOrderInstance4 = ((string)executionPriorityOrderValue4);
                                                            policyInstance4.ExecutionPriorityOrder = executionPriorityOrderInstance4;
                                                        }
                                                        
                                                        JToken retryValue4 = policyValue4["retry"];
                                                        if (retryValue4 != null && retryValue4.Type != JTokenType.Null)
                                                        {
                                                            int retryInstance4 = ((int)retryValue4);
                                                            policyInstance4.Retry = retryInstance4;
                                                        }
                                                        
                                                        JToken longRetryValue4 = policyValue4["longRetry"];
                                                        if (longRetryValue4 != null && longRetryValue4.Type != JTokenType.Null)
                                                        {
                                                            int longRetryInstance4 = ((int)longRetryValue4);
                                                            policyInstance4.LongRetry = longRetryInstance4;
                                                        }
                                                        
                                                        JToken longRetryIntervalValue4 = policyValue4["longRetryInterval"];
                                                        if (longRetryIntervalValue4 != null && longRetryIntervalValue4.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan longRetryIntervalInstance4 = TimeSpan.Parse(((string)longRetryIntervalValue4), CultureInfo.InvariantCulture);
                                                            policyInstance4.LongRetryInterval = longRetryIntervalInstance4;
                                                        }
                                                    }
                                                    
                                                    JToken inputsArray4 = activitiesValue["inputs"];
                                                    if (inputsArray4 != null && inputsArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inputsValue4 in ((JArray)inputsArray4))
                                                        {
                                                            ActivityInput activityInputInstance4 = new ActivityInput();
                                                            storedProcedureActivityInstance.Inputs.Add(activityInputInstance4);
                                                            
                                                            JToken startTimeValue4 = inputsValue4["startTime"];
                                                            if (startTimeValue4 != null && startTimeValue4.Type != JTokenType.Null)
                                                            {
                                                                string startTimeInstance4 = ((string)startTimeValue4);
                                                                activityInputInstance4.StartTime = startTimeInstance4;
                                                            }
                                                            
                                                            JToken endTimeValue4 = inputsValue4["endTime"];
                                                            if (endTimeValue4 != null && endTimeValue4.Type != JTokenType.Null)
                                                            {
                                                                string endTimeInstance4 = ((string)endTimeValue4);
                                                                activityInputInstance4.EndTime = endTimeInstance4;
                                                            }
                                                            
                                                            JToken lengthValue4 = inputsValue4["length"];
                                                            if (lengthValue4 != null && lengthValue4.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan lengthInstance4 = TimeSpan.Parse(((string)lengthValue4), CultureInfo.InvariantCulture);
                                                                activityInputInstance4.Length = lengthInstance4;
                                                            }
                                                            
                                                            JToken nameValue12 = inputsValue4["name"];
                                                            if (nameValue12 != null && nameValue12.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance12 = ((string)nameValue12);
                                                                activityInputInstance4.Name = nameInstance12;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray4 = activitiesValue["outputs"];
                                                    if (outputsArray4 != null && outputsArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken outputsValue4 in ((JArray)outputsArray4))
                                                        {
                                                            ActivityOutput activityOutputInstance4 = new ActivityOutput();
                                                            storedProcedureActivityInstance.Outputs.Add(activityOutputInstance4);
                                                            
                                                            JToken nameValue13 = outputsValue4["name"];
                                                            if (nameValue13 != null && nameValue13.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance13 = ((string)nameValue13);
                                                                activityOutputInstance4.Name = nameInstance13;
                                                            }
                                                        }
                                                    }
                                                    propertiesInstance.Activities.Add(storedProcedureActivityInstance);
                                                }
                                                if (typeName == "AzureMLBatchScoringActivity")
                                                {
                                                    AzureMLBatchScoringActivity azureMLBatchScoringActivityInstance = new AzureMLBatchScoringActivity();
                                                    
                                                    JToken transformationValue5 = activitiesValue["transformation"];
                                                    if (transformationValue5 != null && transformationValue5.Type != JTokenType.Null)
                                                    {
                                                        AzureMLActivityProperties transformationInstance4 = new AzureMLActivityProperties();
                                                        azureMLBatchScoringActivityInstance.Transformation = transformationInstance4;
                                                        
                                                        JToken webServiceParametersSequenceElement = ((JToken)transformationValue5["webServiceParameters"]);
                                                        if (webServiceParametersSequenceElement != null && webServiceParametersSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property11 in webServiceParametersSequenceElement)
                                                            {
                                                                string webServiceParametersKey = ((string)property11.Name);
                                                                string webServiceParametersValue = ((string)property11.Value);
                                                                transformationInstance4.WebServiceParameters.Add(webServiceParametersKey, webServiceParametersValue);
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken nameValue14 = activitiesValue["name"];
                                                    if (nameValue14 != null && nameValue14.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance14 = ((string)nameValue14);
                                                        azureMLBatchScoringActivityInstance.Name = nameInstance14;
                                                    }
                                                    
                                                    JToken descriptionValue6 = activitiesValue["description"];
                                                    if (descriptionValue6 != null && descriptionValue6.Type != JTokenType.Null)
                                                    {
                                                        string descriptionInstance6 = ((string)descriptionValue6);
                                                        azureMLBatchScoringActivityInstance.Description = descriptionInstance6;
                                                    }
                                                    
                                                    JToken linkedServiceNameValue5 = activitiesValue["linkedServiceName"];
                                                    if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                                    {
                                                        string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                        azureMLBatchScoringActivityInstance.LinkedServiceName = linkedServiceNameInstance5;
                                                    }
                                                    
                                                    JToken policyValue5 = activitiesValue["policy"];
                                                    if (policyValue5 != null && policyValue5.Type != JTokenType.Null)
                                                    {
                                                        ActivityPolicy policyInstance5 = new ActivityPolicy();
                                                        azureMLBatchScoringActivityInstance.Policy = policyInstance5;
                                                        
                                                        JToken timeoutValue5 = policyValue5["timeout"];
                                                        if (timeoutValue5 != null && timeoutValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance5 = TimeSpan.Parse(((string)timeoutValue5), CultureInfo.InvariantCulture);
                                                            policyInstance5.Timeout = timeoutInstance5;
                                                        }
                                                        
                                                        JToken delayValue5 = policyValue5["delay"];
                                                        if (delayValue5 != null && delayValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan delayInstance5 = TimeSpan.Parse(((string)delayValue5), CultureInfo.InvariantCulture);
                                                            policyInstance5.Delay = delayInstance5;
                                                        }
                                                        
                                                        JToken concurrencyValue5 = policyValue5["concurrency"];
                                                        if (concurrencyValue5 != null && concurrencyValue5.Type != JTokenType.Null)
                                                        {
                                                            uint concurrencyInstance5 = ((uint)concurrencyValue5);
                                                            policyInstance5.Concurrency = concurrencyInstance5;
                                                        }
                                                        
                                                        JToken executionPriorityOrderValue5 = policyValue5["executionPriorityOrder"];
                                                        if (executionPriorityOrderValue5 != null && executionPriorityOrderValue5.Type != JTokenType.Null)
                                                        {
                                                            string executionPriorityOrderInstance5 = ((string)executionPriorityOrderValue5);
                                                            policyInstance5.ExecutionPriorityOrder = executionPriorityOrderInstance5;
                                                        }
                                                        
                                                        JToken retryValue5 = policyValue5["retry"];
                                                        if (retryValue5 != null && retryValue5.Type != JTokenType.Null)
                                                        {
                                                            int retryInstance5 = ((int)retryValue5);
                                                            policyInstance5.Retry = retryInstance5;
                                                        }
                                                        
                                                        JToken longRetryValue5 = policyValue5["longRetry"];
                                                        if (longRetryValue5 != null && longRetryValue5.Type != JTokenType.Null)
                                                        {
                                                            int longRetryInstance5 = ((int)longRetryValue5);
                                                            policyInstance5.LongRetry = longRetryInstance5;
                                                        }
                                                        
                                                        JToken longRetryIntervalValue5 = policyValue5["longRetryInterval"];
                                                        if (longRetryIntervalValue5 != null && longRetryIntervalValue5.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan longRetryIntervalInstance5 = TimeSpan.Parse(((string)longRetryIntervalValue5), CultureInfo.InvariantCulture);
                                                            policyInstance5.LongRetryInterval = longRetryIntervalInstance5;
                                                        }
                                                    }
                                                    
                                                    JToken inputsArray5 = activitiesValue["inputs"];
                                                    if (inputsArray5 != null && inputsArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken inputsValue5 in ((JArray)inputsArray5))
                                                        {
                                                            ActivityInput activityInputInstance5 = new ActivityInput();
                                                            azureMLBatchScoringActivityInstance.Inputs.Add(activityInputInstance5);
                                                            
                                                            JToken startTimeValue5 = inputsValue5["startTime"];
                                                            if (startTimeValue5 != null && startTimeValue5.Type != JTokenType.Null)
                                                            {
                                                                string startTimeInstance5 = ((string)startTimeValue5);
                                                                activityInputInstance5.StartTime = startTimeInstance5;
                                                            }
                                                            
                                                            JToken endTimeValue5 = inputsValue5["endTime"];
                                                            if (endTimeValue5 != null && endTimeValue5.Type != JTokenType.Null)
                                                            {
                                                                string endTimeInstance5 = ((string)endTimeValue5);
                                                                activityInputInstance5.EndTime = endTimeInstance5;
                                                            }
                                                            
                                                            JToken lengthValue5 = inputsValue5["length"];
                                                            if (lengthValue5 != null && lengthValue5.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan lengthInstance5 = TimeSpan.Parse(((string)lengthValue5), CultureInfo.InvariantCulture);
                                                                activityInputInstance5.Length = lengthInstance5;
                                                            }
                                                            
                                                            JToken nameValue15 = inputsValue5["name"];
                                                            if (nameValue15 != null && nameValue15.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance15 = ((string)nameValue15);
                                                                activityInputInstance5.Name = nameInstance15;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken outputsArray5 = activitiesValue["outputs"];
                                                    if (outputsArray5 != null && outputsArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken outputsValue5 in ((JArray)outputsArray5))
                                                        {
                                                            ActivityOutput activityOutputInstance5 = new ActivityOutput();
                                                            azureMLBatchScoringActivityInstance.Outputs.Add(activityOutputInstance5);
                                                            
                                                            JToken nameValue16 = outputsValue5["name"];
                                                            if (nameValue16 != null && nameValue16.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance16 = ((string)nameValue16);
                                                                activityOutputInstance5.Name = nameInstance16;
                                                            }
                                                        }
                                                    }
                                                    propertiesInstance.Activities.Add(azureMLBatchScoringActivityInstance);
                                                }
                                            }
                                        }
                                        
                                        JToken startValue = propertiesValue["start"];
                                        if (startValue != null && startValue.Type != JTokenType.Null)
                                        {
                                            DateTime startInstance = ((DateTime)startValue);
                                            propertiesInstance.Start = startInstance;
                                        }
                                        
                                        JToken endValue = propertiesValue["end"];
                                        if (endValue != null && endValue.Type != JTokenType.Null)
                                        {
                                            DateTime endInstance = ((DateTime)endValue);
                                            propertiesInstance.End = endInstance;
                                        }
                                        
                                        JToken isPausedValue = propertiesValue["isPaused"];
                                        if (isPausedValue != null && isPausedValue.Type != JTokenType.Null)
                                        {
                                            bool isPausedInstance = ((bool)isPausedValue);
                                            propertiesInstance.IsPaused = isPausedInstance;
                                        }
                                        
                                        JToken runtimeInfoValue = propertiesValue["runtimeInfo"];
                                        if (runtimeInfoValue != null && runtimeInfoValue.Type != JTokenType.Null)
                                        {
                                            PipelineRuntimeInfo runtimeInfoInstance = new PipelineRuntimeInfo();
                                            propertiesInstance.RuntimeInfo = runtimeInfoInstance;
                                            
                                            JToken deploymentTimeValue = runtimeInfoValue["deploymentTime"];
                                            if (deploymentTimeValue != null && deploymentTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime deploymentTimeInstance = ((DateTime)deploymentTimeValue);
                                                runtimeInfoInstance.DeploymentTime = deploymentTimeInstance;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken errorMessageValue = propertiesValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            propertiesInstance.ErrorMessage = errorMessageInstance;
                                        }
                                        
                                        JToken hubNameValue = propertiesValue["hubName"];
                                        if (hubNameValue != null && hubNameValue.Type != JTokenType.Null)
                                        {
                                            string hubNameInstance = ((string)hubNameValue);
                                            propertiesInstance.HubName = hubNameInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Resume a suspended pipeline.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> ResumeAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                TracingAdapter.Enter(invocationId, this, "ResumeAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            url = url + "/resume";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets the active period of a pipeline.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters required to set the active period of a
        /// pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SetActivePeriodAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, PipelineSetActivePeriodParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ActivePeriodEndTime == null)
            {
                throw new ArgumentNullException("parameters.ActivePeriodEndTime");
            }
            if (parameters.ActivePeriodStartTime == null)
            {
                throw new ArgumentNullException("parameters.ActivePeriodStartTime");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SetActivePeriodAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            url = url + "/update";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("start=" + Uri.EscapeDataString(parameters.ActivePeriodStartTime));
            queryParameters.Add("end=" + Uri.EscapeDataString(parameters.ActivePeriodEndTime));
            queryParameters.Add("autoResolve=" + Uri.EscapeDataString(parameters.AutoResolve.ToString().ToLower()));
            queryParameters.Add("forceRecalc=" + Uri.EscapeDataString(parameters.ForceRecalc.ToString().ToLower()));
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Suspend a running pipeline.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='dataPipelineName'>
        /// Required. Name of the data pipeline.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SuspendAsync(string resourceGroupName, string dataFactoryName, string dataPipelineName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (dataPipelineName == null)
            {
                throw new ArgumentNullException("dataPipelineName");
            }
            if (dataPipelineName != null && dataPipelineName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            if (Regex.IsMatch(dataPipelineName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataPipelineName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("dataPipelineName", dataPipelineName);
                TracingAdapter.Enter(invocationId, this, "SuspendAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/datapipelines/";
            url = url + Uri.EscapeDataString(dataPipelineName);
            url = url + "/pause";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
