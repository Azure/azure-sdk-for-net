// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using Microsoft.Azure.Management.DataFactories.Models;

namespace Microsoft.Azure.Management.DataFactories.Models
{
    /// <summary>
    /// A copy activity blob sink.
    /// </summary>
    public partial class BlobSink : CopySink
    {
        private bool? _blobWriterAddHeader;
        
        /// <summary>
        /// Optional. Blob writer add header.
        /// </summary>
        public bool? BlobWriterAddHeader
        {
            get { return this._blobWriterAddHeader; }
            set { this._blobWriterAddHeader = value; }
        }
        
        private string _blobWriterDateTimeFormat;
        
        /// <summary>
        /// Optional. Blob writer date time format.
        /// </summary>
        public string BlobWriterDateTimeFormat
        {
            get { return this._blobWriterDateTimeFormat; }
            set { this._blobWriterDateTimeFormat = value; }
        }
        
        private bool? _blobWriterOverwriteFiles;
        
        /// <summary>
        /// Optional. Blob writer overwrite files.
        /// </summary>
        public bool? BlobWriterOverwriteFiles
        {
            get { return this._blobWriterOverwriteFiles; }
            set { this._blobWriterOverwriteFiles = value; }
        }
        
        private string _blobWriterPartitionColumns;
        
        /// <summary>
        /// Optional. Blob writer partition columns.
        /// </summary>
        public string BlobWriterPartitionColumns
        {
            get { return this._blobWriterPartitionColumns; }
            set { this._blobWriterPartitionColumns = value; }
        }
        
        private string _blobWriterPartitionFormat;
        
        /// <summary>
        /// Optional. Blob writer partition format.
        /// </summary>
        public string BlobWriterPartitionFormat
        {
            get { return this._blobWriterPartitionFormat; }
            set { this._blobWriterPartitionFormat = value; }
        }
        
        private string _blobWriterRowSuffix;
        
        /// <summary>
        /// Optional. Blob writer row suffix.
        /// </summary>
        public string BlobWriterRowSuffix
        {
            get { return this._blobWriterRowSuffix; }
            set { this._blobWriterRowSuffix = value; }
        }
        
        private string _blobWriterSeparator;
        
        /// <summary>
        /// Optional. Blob writer separator.
        /// </summary>
        public string BlobWriterSeparator
        {
            get { return this._blobWriterSeparator; }
            set { this._blobWriterSeparator = value; }
        }
        
        private int? _blockWriterBlockSize;
        
        /// <summary>
        /// Optional. block writer block size.
        /// </summary>
        public int? BlockWriterBlockSize
        {
            get { return this._blockWriterBlockSize; }
            set { this._blockWriterBlockSize = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobSink class.
        /// </summary>
        public BlobSink()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the BlobSink class with required
        /// arguments.
        /// </summary>
        public BlobSink(int writeBatchSize, TimeSpan writeBatchTimeout)
            : this()
        {
            this.WriteBatchSize = writeBatchSize;
            this.WriteBatchTimeout = writeBatchTimeout;
        }
    }
}
