// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;

namespace Microsoft.Azure.Management.DataFactories.Models
{
    /// <summary>
    /// Specifying a schedule for the activity creates a series of tumbling
    /// windows. Tumbling windows are series of fixed-sized, non-overlapping
    /// and contiguous time intervals. Activity window is an instance of
    /// these logical tumbling windows for the activity.
    /// </summary>
    public partial class ActivityWindow
    {
        private string _activityName;
        
        /// <summary>
        /// Required. Pipeline activity name.
        /// </summary>
        public string ActivityName
        {
            get { return this._activityName; }
            set { this._activityName = value; }
        }
        
        private string _activityType;
        
        /// <summary>
        /// Required. The activity type which can be either user defined or
        /// registered.
        /// </summary>
        public string ActivityType
        {
            get { return this._activityType; }
            set { this._activityType = value; }
        }
        
        private string _dataFactoryName;
        
        /// <summary>
        /// Required. Data factory name.
        /// </summary>
        public string DataFactoryName
        {
            get { return this._dataFactoryName; }
            set { this._dataFactoryName = value; }
        }
        
        private System.TimeSpan? _duration;
        
        /// <summary>
        /// Optional. Duration of run.
        /// </summary>
        public System.TimeSpan? Duration
        {
            get { return this._duration; }
            set { this._duration = value; }
        }
        
        private IList<string> _inputDatasets;
        
        /// <summary>
        /// Required. The input datasets corresponding to the activity window.
        /// </summary>
        public IList<string> InputDatasets
        {
            get { return this._inputDatasets; }
            set { this._inputDatasets = value; }
        }
        
        private string _linkedServiceName;
        
        /// <summary>
        /// Required. The linked service the activity window is run on.
        /// </summary>
        public string LinkedServiceName
        {
            get { return this._linkedServiceName; }
            set { this._linkedServiceName = value; }
        }
        
        private IList<string> _outputDatasets;
        
        /// <summary>
        /// Required. The output datasets corresponding to the activity window.
        /// </summary>
        public IList<string> OutputDatasets
        {
            get { return this._outputDatasets; }
            set { this._outputDatasets = value; }
        }
        
        private int? _percentComplete;
        
        /// <summary>
        /// Optional. Pecent completion of activity window execution.
        /// </summary>
        public int? PercentComplete
        {
            get { return this._percentComplete; }
            set { this._percentComplete = value; }
        }
        
        private string _pipelineName;
        
        /// <summary>
        /// Required. Pipeline name.
        /// </summary>
        public string PipelineName
        {
            get { return this._pipelineName; }
            set { this._pipelineName = value; }
        }
        
        private string _resourceGroupName;
        
        /// <summary>
        /// Required. Resource group name.
        /// </summary>
        public string ResourceGroupName
        {
            get { return this._resourceGroupName; }
            set { this._resourceGroupName = value; }
        }
        
        private int _runAttempts;
        
        /// <summary>
        /// Required. Number of activity run attempts.
        /// </summary>
        public int RunAttempts
        {
            get { return this._runAttempts; }
            set { this._runAttempts = value; }
        }
        
        private System.DateTime? _runEnd;
        
        /// <summary>
        /// Optional. End time of the last run.
        /// </summary>
        public System.DateTime? RunEnd
        {
            get { return this._runEnd; }
            set { this._runEnd = value; }
        }
        
        private System.DateTime? _runStart;
        
        /// <summary>
        /// Optional. Start time of the last run.
        /// </summary>
        public System.DateTime? RunStart
        {
            get { return this._runStart; }
            set { this._runStart = value; }
        }
        
        private DateTime _windowEnd;
        
        /// <summary>
        /// Required. Start time of the activity window.
        /// </summary>
        public DateTime WindowEnd
        {
            get { return this._windowEnd; }
            set { this._windowEnd = value; }
        }
        
        private DateTime _windowStart;
        
        /// <summary>
        /// Required. Start time of the activity window.
        /// </summary>
        public DateTime WindowStart
        {
            get { return this._windowStart; }
            set { this._windowStart = value; }
        }
        
        private string _windowState;
        
        /// <summary>
        /// Required. Window state.
        /// </summary>
        public string WindowState
        {
            get { return this._windowState; }
            set { this._windowState = value; }
        }
        
        private string _windowSubstate;
        
        /// <summary>
        /// Required. Window substate.
        /// </summary>
        public string WindowSubstate
        {
            get { return this._windowSubstate; }
            set { this._windowSubstate = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the ActivityWindow class.
        /// </summary>
        public ActivityWindow()
        {
            this.InputDatasets = new LazyList<string>();
            this.OutputDatasets = new LazyList<string>();
        }
    }
}
