// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataFactories;
using Microsoft.Azure.Management.DataFactories.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataFactories
{
    /// <summary>
    /// Operations for managing tables.
    /// </summary>
    internal partial class TableOperations : IServiceOperations<DataPipelineManagementClient>, ITableOperations
    {
        /// <summary>
        /// Initializes a new instance of the TableOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal TableOperations(DataPipelineManagementClient client)
        {
            this._client = client;
        }
        
        private DataPipelineManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataFactories.DataPipelineManagementClient.
        /// </summary>
        public DataPipelineManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a new table instance or update an existing instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate table operation response.
        /// </returns>
        public async Task<TableCreateOrUpdateResponse> BeginCreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, TableCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Table != null)
            {
                if (parameters.Table.Name == null)
                {
                    throw new ArgumentNullException("parameters.Table.Name");
                }
                if (parameters.Table.Name != null && parameters.Table.Name.Length > 260)
                {
                    throw new ArgumentOutOfRangeException("parameters.Table.Name");
                }
                if (Regex.IsMatch(parameters.Table.Name, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
                {
                    throw new ArgumentOutOfRangeException("parameters.Table.Name");
                }
                if (parameters.Table.Properties == null)
                {
                    throw new ArgumentNullException("parameters.Table.Properties");
                }
                if (parameters.Table.Properties.Availability == null)
                {
                    throw new ArgumentNullException("parameters.Table.Properties.Availability");
                }
                if (parameters.Table.Properties.Availability.Frequency == null)
                {
                    throw new ArgumentNullException("parameters.Table.Properties.Availability.Frequency");
                }
                if (parameters.Table.Properties.Location == null)
                {
                    throw new ArgumentNullException("parameters.Table.Properties.Location");
                }
                if (parameters.Table.Properties.Location.LinkedServiceName == null)
                {
                    throw new ArgumentNullException("parameters.Table.Properties.Location.LinkedServiceName");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/tables/";
            if (parameters.Table != null && parameters.Table.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Table.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject tableCreateOrUpdateParametersValue = new JObject();
                requestDoc = tableCreateOrUpdateParametersValue;
                
                if (parameters.Table != null)
                {
                    tableCreateOrUpdateParametersValue["name"] = parameters.Table.Name;
                    
                    JObject propertiesValue = new JObject();
                    tableCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Table.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Table.Properties.Description;
                    }
                    
                    if (parameters.Table.Properties.Structure != null)
                    {
                        if (parameters.Table.Properties.Structure is ILazyCollection == false || ((ILazyCollection)parameters.Table.Properties.Structure).IsInitialized)
                        {
                            JArray structureArray = new JArray();
                            foreach (DataElement structureItem in parameters.Table.Properties.Structure)
                            {
                                JObject dataElementValue = new JObject();
                                structureArray.Add(dataElementValue);
                                
                                if (structureItem.Name != null)
                                {
                                    dataElementValue["name"] = structureItem.Name;
                                }
                                
                                if (structureItem.Description != null)
                                {
                                    dataElementValue["description"] = structureItem.Description;
                                }
                                
                                dataElementValue["position"] = structureItem.Position;
                                
                                if (structureItem.Type != null)
                                {
                                    dataElementValue["type"] = structureItem.Type;
                                }
                            }
                            propertiesValue["structure"] = structureArray;
                        }
                    }
                    
                    JObject locationValue = new JObject();
                    propertiesValue["location"] = locationValue;
                    if (parameters.Table.Properties.Location is AzureBlobLocation)
                    {
                        locationValue["type"] = "AzureBlobLocation";
                        AzureBlobLocation derived = ((AzureBlobLocation)parameters.Table.Properties.Location);
                        
                        if (derived.FolderPath != null)
                        {
                            locationValue["folderPath"] = derived.FolderPath;
                        }
                        
                        if (derived.TableRootLocation != null)
                        {
                            locationValue["tableRootLocation"] = derived.TableRootLocation;
                        }
                        
                        if (derived.FileName != null)
                        {
                            locationValue["fileName"] = derived.FileName;
                        }
                        
                        if (derived.PartitionedBy != null)
                        {
                            if (derived.PartitionedBy is ILazyCollection == false || ((ILazyCollection)derived.PartitionedBy).IsInitialized)
                            {
                                JArray partitionedByArray = new JArray();
                                foreach (Partition partitionedByItem in derived.PartitionedBy)
                                {
                                    JObject partitionValue = new JObject();
                                    partitionedByArray.Add(partitionValue);
                                    
                                    if (partitionedByItem.Name != null)
                                    {
                                        partitionValue["name"] = partitionedByItem.Name;
                                    }
                                    
                                    if (partitionedByItem.Value != null)
                                    {
                                        JObject valueValue = new JObject();
                                        partitionValue["value"] = valueValue;
                                        if (partitionedByItem.Value is DateTimePartitionValue)
                                        {
                                            valueValue["type"] = "DateTime";
                                            DateTimePartitionValue derived2 = ((DateTimePartitionValue)partitionedByItem.Value);
                                            
                                            if (derived2.Date != null)
                                            {
                                                valueValue["date"] = derived2.Date;
                                            }
                                            
                                            if (derived2.Format != null)
                                            {
                                                valueValue["format"] = derived2.Format;
                                            }
                                        }
                                    }
                                }
                                locationValue["partitionedBy"] = partitionedByArray;
                            }
                        }
                        
                        if (derived.Format != null)
                        {
                            JObject formatValue = new JObject();
                            locationValue["format"] = formatValue;
                            if (derived.Format is TextFormat)
                            {
                                formatValue["type"] = "TextFormat";
                                TextFormat derived3 = ((TextFormat)derived.Format);
                                
                                if (derived3.ColumnDelimiter != null)
                                {
                                    formatValue["columnDelimiter"] = derived3.ColumnDelimiter;
                                }
                                
                                if (derived3.RowDelimiter != null)
                                {
                                    formatValue["rowDelimiter"] = derived3.RowDelimiter;
                                }
                                
                                if (derived3.EscapeChar != null)
                                {
                                    formatValue["escapeChar"] = derived3.EscapeChar;
                                }
                                
                                if (derived3.QuoteChar != null)
                                {
                                    formatValue["quoteChar"] = derived3.QuoteChar;
                                }
                                
                                if (derived3.NullValue != null)
                                {
                                    formatValue["nullValue"] = derived3.NullValue;
                                }
                                
                                if (derived3.EncodingName != null)
                                {
                                    formatValue["encodingName"] = derived3.EncodingName;
                                }
                                
                                if (derived3.Serializer != null)
                                {
                                    formatValue["serializer"] = derived3.Serializer;
                                }
                                
                                if (derived3.Deserializer != null)
                                {
                                    formatValue["deserializer"] = derived3.Deserializer;
                                }
                            }
                            if (derived.Format is AvroFormat)
                            {
                                formatValue["type"] = "AvroFormat";
                                AvroFormat derived4 = ((AvroFormat)derived.Format);
                                
                                if (derived4.Serializer != null)
                                {
                                    formatValue["serializer"] = derived4.Serializer;
                                }
                                
                                if (derived4.Deserializer != null)
                                {
                                    formatValue["deserializer"] = derived4.Deserializer;
                                }
                            }
                        }
                        
                        if (derived.Compression != null)
                        {
                            JObject compressionValue = new JObject();
                            locationValue["compression"] = compressionValue;
                            if (derived.Compression is DeflateCompression)
                            {
                                compressionValue["type"] = "Deflate";
                                DeflateCompression derived5 = ((DeflateCompression)derived.Compression);
                                
                                if (derived5.Level != null)
                                {
                                    compressionValue["level"] = derived5.Level;
                                }
                            }
                            if (derived.Compression is BZip2Compression)
                            {
                                compressionValue["type"] = "BZip2";
                                BZip2Compression derived6 = ((BZip2Compression)derived.Compression);
                            }
                            if (derived.Compression is GZipCompression)
                            {
                                compressionValue["type"] = "GZip";
                                GZipCompression derived7 = ((GZipCompression)derived.Compression);
                                
                                if (derived7.Level != null)
                                {
                                    compressionValue["level"] = derived7.Level;
                                }
                            }
                        }
                        
                        locationValue["linkedServiceName"] = derived.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is AzureTableLocation)
                    {
                        locationValue["type"] = "AzureTableLocation";
                        AzureTableLocation derived8 = ((AzureTableLocation)parameters.Table.Properties.Location);
                        
                        if (derived8.TableName != null)
                        {
                            locationValue["tableName"] = derived8.TableName;
                        }
                        
                        locationValue["linkedServiceName"] = derived8.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is AzureSqlTableLocation)
                    {
                        locationValue["type"] = "AzureSqlTableLocation";
                        AzureSqlTableLocation derived9 = ((AzureSqlTableLocation)parameters.Table.Properties.Location);
                        
                        if (derived9.TableName != null)
                        {
                            locationValue["tableName"] = derived9.TableName;
                        }
                        
                        locationValue["linkedServiceName"] = derived9.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is OnPremisesSqlServerTableLocation)
                    {
                        locationValue["type"] = "OnPremisesSqlServerTableLocation";
                        OnPremisesSqlServerTableLocation derived10 = ((OnPremisesSqlServerTableLocation)parameters.Table.Properties.Location);
                        
                        if (derived10.TableName != null)
                        {
                            locationValue["tableName"] = derived10.TableName;
                        }
                        
                        locationValue["linkedServiceName"] = derived10.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is OnPremisesFileSystemLocation)
                    {
                        locationValue["type"] = "OnPremisesFileSystemLocation";
                        OnPremisesFileSystemLocation derived11 = ((OnPremisesFileSystemLocation)parameters.Table.Properties.Location);
                        
                        if (derived11.FolderPath != null)
                        {
                            locationValue["folderPath"] = derived11.FolderPath;
                        }
                        
                        if (derived11.FileName != null)
                        {
                            locationValue["fileName"] = derived11.FileName;
                        }
                        
                        if (derived11.PartitionedBy != null)
                        {
                            if (derived11.PartitionedBy is ILazyCollection == false || ((ILazyCollection)derived11.PartitionedBy).IsInitialized)
                            {
                                JArray partitionedByArray2 = new JArray();
                                foreach (Partition partitionedByItem2 in derived11.PartitionedBy)
                                {
                                    JObject partitionValue2 = new JObject();
                                    partitionedByArray2.Add(partitionValue2);
                                    
                                    if (partitionedByItem2.Name != null)
                                    {
                                        partitionValue2["name"] = partitionedByItem2.Name;
                                    }
                                    
                                    if (partitionedByItem2.Value != null)
                                    {
                                        JObject valueValue2 = new JObject();
                                        partitionValue2["value"] = valueValue2;
                                        if (partitionedByItem2.Value is DateTimePartitionValue)
                                        {
                                            valueValue2["type"] = "DateTime";
                                            DateTimePartitionValue derived12 = ((DateTimePartitionValue)partitionedByItem2.Value);
                                            
                                            if (derived12.Date != null)
                                            {
                                                valueValue2["date"] = derived12.Date;
                                            }
                                            
                                            if (derived12.Format != null)
                                            {
                                                valueValue2["format"] = derived12.Format;
                                            }
                                        }
                                    }
                                }
                                locationValue["partitionedBy"] = partitionedByArray2;
                            }
                        }
                        
                        if (derived11.Format != null)
                        {
                            JObject formatValue2 = new JObject();
                            locationValue["format"] = formatValue2;
                            if (derived11.Format is TextFormat)
                            {
                                formatValue2["type"] = "TextFormat";
                                TextFormat derived13 = ((TextFormat)derived11.Format);
                                
                                if (derived13.ColumnDelimiter != null)
                                {
                                    formatValue2["columnDelimiter"] = derived13.ColumnDelimiter;
                                }
                                
                                if (derived13.RowDelimiter != null)
                                {
                                    formatValue2["rowDelimiter"] = derived13.RowDelimiter;
                                }
                                
                                if (derived13.EscapeChar != null)
                                {
                                    formatValue2["escapeChar"] = derived13.EscapeChar;
                                }
                                
                                if (derived13.QuoteChar != null)
                                {
                                    formatValue2["quoteChar"] = derived13.QuoteChar;
                                }
                                
                                if (derived13.NullValue != null)
                                {
                                    formatValue2["nullValue"] = derived13.NullValue;
                                }
                                
                                if (derived13.EncodingName != null)
                                {
                                    formatValue2["encodingName"] = derived13.EncodingName;
                                }
                                
                                if (derived13.Serializer != null)
                                {
                                    formatValue2["serializer"] = derived13.Serializer;
                                }
                                
                                if (derived13.Deserializer != null)
                                {
                                    formatValue2["deserializer"] = derived13.Deserializer;
                                }
                            }
                            if (derived11.Format is AvroFormat)
                            {
                                formatValue2["type"] = "AvroFormat";
                                AvroFormat derived14 = ((AvroFormat)derived11.Format);
                                
                                if (derived14.Serializer != null)
                                {
                                    formatValue2["serializer"] = derived14.Serializer;
                                }
                                
                                if (derived14.Deserializer != null)
                                {
                                    formatValue2["deserializer"] = derived14.Deserializer;
                                }
                            }
                        }
                        
                        if (derived11.Compression != null)
                        {
                            JObject compressionValue2 = new JObject();
                            locationValue["compression"] = compressionValue2;
                            if (derived11.Compression is DeflateCompression)
                            {
                                compressionValue2["type"] = "Deflate";
                                DeflateCompression derived15 = ((DeflateCompression)derived11.Compression);
                                
                                if (derived15.Level != null)
                                {
                                    compressionValue2["level"] = derived15.Level;
                                }
                            }
                            if (derived11.Compression is BZip2Compression)
                            {
                                compressionValue2["type"] = "BZip2";
                                BZip2Compression derived16 = ((BZip2Compression)derived11.Compression);
                            }
                            if (derived11.Compression is GZipCompression)
                            {
                                compressionValue2["type"] = "GZip";
                                GZipCompression derived17 = ((GZipCompression)derived11.Compression);
                                
                                if (derived17.Level != null)
                                {
                                    compressionValue2["level"] = derived17.Level;
                                }
                            }
                        }
                        
                        if (derived11.FileFilter != null)
                        {
                            locationValue["fileFilter"] = derived11.FileFilter;
                        }
                        
                        locationValue["linkedServiceName"] = derived11.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is OnPremisesOracleTableLocation)
                    {
                        locationValue["type"] = "OnPremisesOracleTableLocation";
                        OnPremisesOracleTableLocation derived18 = ((OnPremisesOracleTableLocation)parameters.Table.Properties.Location);
                        
                        if (derived18.TableName != null)
                        {
                            locationValue["tableName"] = derived18.TableName;
                        }
                        
                        locationValue["linkedServiceName"] = derived18.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is OnPremisesOdbcTableLocation)
                    {
                        locationValue["type"] = "OnPremisesOdbcTableLocation";
                        OnPremisesOdbcTableLocation derived19 = ((OnPremisesOdbcTableLocation)parameters.Table.Properties.Location);
                        
                        locationValue["linkedServiceName"] = derived19.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is OnPremisesHdfsTableLocation)
                    {
                        locationValue["type"] = "OnPremisesHdfsTableLocation";
                        OnPremisesHdfsTableLocation derived20 = ((OnPremisesHdfsTableLocation)parameters.Table.Properties.Location);
                        
                        locationValue["linkedServiceName"] = derived20.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is ODataTableLocation)
                    {
                        locationValue["type"] = "ODataTableLocation";
                        ODataTableLocation derived21 = ((ODataTableLocation)parameters.Table.Properties.Location);
                        
                        if (derived21.Resource != null)
                        {
                            locationValue["resource"] = derived21.Resource;
                        }
                        
                        locationValue["linkedServiceName"] = derived21.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is CustomLocation)
                    {
                        locationValue["type"] = "CustomLocation";
                        CustomLocation derived22 = ((CustomLocation)parameters.Table.Properties.Location);
                        
                        if (derived22.ExtendedProperties != null)
                        {
                            if (derived22.ExtendedProperties is ILazyCollection == false || ((ILazyCollection)derived22.ExtendedProperties).IsInitialized)
                            {
                                JObject extendedPropertiesDictionary = new JObject();
                                foreach (KeyValuePair<string, string> pair in derived22.ExtendedProperties)
                                {
                                    string extendedPropertiesKey = pair.Key;
                                    string extendedPropertiesValue = pair.Value;
                                    extendedPropertiesDictionary[extendedPropertiesKey] = extendedPropertiesValue;
                                }
                                locationValue["extendedProperties"] = extendedPropertiesDictionary;
                            }
                        }
                        
                        locationValue["linkedServiceName"] = derived22.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is RelationalTableLocation)
                    {
                        locationValue["type"] = "RelationalTableLocation";
                        RelationalTableLocation derived23 = ((RelationalTableLocation)parameters.Table.Properties.Location);
                        
                        if (derived23.TableName != null)
                        {
                            locationValue["tableName"] = derived23.TableName;
                        }
                        
                        locationValue["linkedServiceName"] = derived23.LinkedServiceName;
                    }
                    if (parameters.Table.Properties.Location is DocumentDbCollectionLocation)
                    {
                        locationValue["type"] = "DocumentDbCollectionLocation";
                        DocumentDbCollectionLocation derived24 = ((DocumentDbCollectionLocation)parameters.Table.Properties.Location);
                        
                        if (derived24.CollectionName != null)
                        {
                            locationValue["collectionName"] = derived24.CollectionName;
                        }
                        
                        locationValue["linkedServiceName"] = derived24.LinkedServiceName;
                    }
                    
                    JObject availabilityValue = new JObject();
                    propertiesValue["availability"] = availabilityValue;
                    
                    availabilityValue["frequency"] = parameters.Table.Properties.Availability.Frequency;
                    
                    availabilityValue["interval"] = parameters.Table.Properties.Availability.Interval;
                    
                    if (parameters.Table.Properties.Availability.AnchorDateTime != null)
                    {
                        availabilityValue["anchorDateTime"] = parameters.Table.Properties.Availability.AnchorDateTime.Value;
                    }
                    
                    if (parameters.Table.Properties.Availability.Offset != null)
                    {
                        availabilityValue["offset"] = parameters.Table.Properties.Availability.Offset.Value.ToString();
                    }
                    
                    if (parameters.Table.Properties.Availability.WaitOnExternal != null)
                    {
                        JObject waitOnExternalValue = new JObject();
                        availabilityValue["waitOnExternal"] = waitOnExternalValue;
                        
                        if (parameters.Table.Properties.Availability.WaitOnExternal.DataDelay != null)
                        {
                            waitOnExternalValue["dataDelay"] = parameters.Table.Properties.Availability.WaitOnExternal.DataDelay.Value.ToString();
                        }
                        
                        if (parameters.Table.Properties.Availability.WaitOnExternal.RetryInterval != null)
                        {
                            waitOnExternalValue["retryInterval"] = parameters.Table.Properties.Availability.WaitOnExternal.RetryInterval.Value.ToString();
                        }
                        
                        if (parameters.Table.Properties.Availability.WaitOnExternal.RetryTimeout != null)
                        {
                            waitOnExternalValue["retryTimeout"] = parameters.Table.Properties.Availability.WaitOnExternal.RetryTimeout.Value.ToString();
                        }
                        
                        if (parameters.Table.Properties.Availability.WaitOnExternal.MaximumRetry != null)
                        {
                            waitOnExternalValue["maximumRetry"] = parameters.Table.Properties.Availability.WaitOnExternal.MaximumRetry.Value;
                        }
                    }
                    
                    if (parameters.Table.Properties.Availability.Style != null)
                    {
                        availabilityValue["style"] = parameters.Table.Properties.Availability.Style;
                    }
                    
                    if (parameters.Table.Properties.Policy != null)
                    {
                        JObject policyValue = new JObject();
                        propertiesValue["policy"] = policyValue;
                        
                        if (parameters.Table.Properties.Policy.Validation != null)
                        {
                            JObject validationValue = new JObject();
                            policyValue["validation"] = validationValue;
                            
                            if (parameters.Table.Properties.Policy.Validation.MinimumRows != null)
                            {
                                validationValue["minimumRows"] = parameters.Table.Properties.Policy.Validation.MinimumRows.Value;
                            }
                            
                            if (parameters.Table.Properties.Policy.Validation.MinimumSizeMB != null)
                            {
                                validationValue["minimumSizeMB"] = parameters.Table.Properties.Policy.Validation.MinimumSizeMB.Value;
                            }
                            
                            if (parameters.Table.Properties.Policy.Validation.ValidationPriorityOrder != null)
                            {
                                validationValue["validationPriorityOrder"] = parameters.Table.Properties.Policy.Validation.ValidationPriorityOrder;
                            }
                        }
                        
                        if (parameters.Table.Properties.Policy.Latency != null)
                        {
                            JObject latencyValue = new JObject();
                            policyValue["latency"] = latencyValue;
                            
                            if (parameters.Table.Properties.Policy.Latency.LatencyLength != null)
                            {
                                latencyValue["latencyLength"] = parameters.Table.Properties.Policy.Latency.LatencyLength.Value.ToString();
                            }
                        }
                    }
                    
                    if (parameters.Table.Properties.Published != null)
                    {
                        propertiesValue["published"] = parameters.Table.Properties.Published.Value;
                    }
                    
                    if (parameters.Table.Properties.CreateTime != null)
                    {
                        propertiesValue["createTime"] = parameters.Table.Properties.CreateTime.Value;
                    }
                    
                    if (parameters.Table.Properties.ProvisioningState != null)
                    {
                        propertiesValue["provisioningState"] = parameters.Table.Properties.ProvisioningState;
                    }
                    
                    if (parameters.Table.Properties.ErrorMessage != null)
                    {
                        propertiesValue["errorMessage"] = parameters.Table.Properties.ErrorMessage;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Table tableInstance = new Table();
                            result.Table = tableInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                tableInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                TableProperties propertiesInstance = new TableProperties();
                                tableInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue2["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken structureArray2 = propertiesValue2["structure"];
                                if (structureArray2 != null && structureArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken structureValue in ((JArray)structureArray2))
                                    {
                                        DataElement dataElementInstance = new DataElement();
                                        propertiesInstance.Structure.Add(dataElementInstance);
                                        
                                        JToken nameValue2 = structureValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            dataElementInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = structureValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            dataElementInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken positionValue = structureValue["position"];
                                        if (positionValue != null && positionValue.Type != JTokenType.Null)
                                        {
                                            uint positionInstance = ((uint)positionValue);
                                            dataElementInstance.Position = positionInstance;
                                        }
                                        
                                        JToken typeValue = structureValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            dataElementInstance.Type = typeInstance;
                                        }
                                    }
                                }
                                
                                JToken locationValue2 = propertiesValue2["location"];
                                if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)locationValue2["type"]);
                                    if (typeName == "AzureBlobLocation")
                                    {
                                        AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                        
                                        JToken folderPathValue = locationValue2["folderPath"];
                                        if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                        {
                                            string folderPathInstance = ((string)folderPathValue);
                                            azureBlobLocationInstance.FolderPath = folderPathInstance;
                                        }
                                        
                                        JToken tableRootLocationValue = locationValue2["tableRootLocation"];
                                        if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                        {
                                            string tableRootLocationInstance = ((string)tableRootLocationValue);
                                            azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                        }
                                        
                                        JToken fileNameValue = locationValue2["fileName"];
                                        if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                        {
                                            string fileNameInstance = ((string)fileNameValue);
                                            azureBlobLocationInstance.FileName = fileNameInstance;
                                        }
                                        
                                        JToken partitionedByArray3 = locationValue2["partitionedBy"];
                                        if (partitionedByArray3 != null && partitionedByArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken partitionedByValue in ((JArray)partitionedByArray3))
                                            {
                                                Partition partitionInstance = new Partition();
                                                azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                                
                                                JToken nameValue3 = partitionedByValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    partitionInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken valueValue3 = partitionedByValue["value"];
                                                if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)valueValue3["type"]);
                                                    if (typeName2 == "DateTime")
                                                    {
                                                        DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                        
                                                        JToken dateValue = valueValue3["date"];
                                                        if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                        {
                                                            string dateInstance = ((string)dateValue);
                                                            dateTimePartitionValueInstance.Date = dateInstance;
                                                        }
                                                        
                                                        JToken formatValue3 = valueValue3["format"];
                                                        if (formatValue3 != null && formatValue3.Type != JTokenType.Null)
                                                        {
                                                            string formatInstance = ((string)formatValue3);
                                                            dateTimePartitionValueInstance.Format = formatInstance;
                                                        }
                                                        partitionInstance.Value = dateTimePartitionValueInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken formatValue4 = locationValue2["format"];
                                        if (formatValue4 != null && formatValue4.Type != JTokenType.Null)
                                        {
                                            string typeName3 = ((string)formatValue4["type"]);
                                            if (typeName3 == "TextFormat")
                                            {
                                                TextFormat textFormatInstance = new TextFormat();
                                                
                                                JToken columnDelimiterValue = formatValue4["columnDelimiter"];
                                                if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                    textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                                }
                                                
                                                JToken rowDelimiterValue = formatValue4["rowDelimiter"];
                                                if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                    textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                                }
                                                
                                                JToken escapeCharValue = formatValue4["escapeChar"];
                                                if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                                {
                                                    string escapeCharInstance = ((string)escapeCharValue);
                                                    textFormatInstance.EscapeChar = escapeCharInstance;
                                                }
                                                
                                                JToken quoteCharValue = formatValue4["quoteChar"];
                                                if (quoteCharValue != null && quoteCharValue.Type != JTokenType.Null)
                                                {
                                                    string quoteCharInstance = ((string)quoteCharValue);
                                                    textFormatInstance.QuoteChar = quoteCharInstance;
                                                }
                                                
                                                JToken nullValueValue = formatValue4["nullValue"];
                                                if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                                {
                                                    string nullValueInstance = ((string)nullValueValue);
                                                    textFormatInstance.NullValue = nullValueInstance;
                                                }
                                                
                                                JToken encodingNameValue = formatValue4["encodingName"];
                                                if (encodingNameValue != null && encodingNameValue.Type != JTokenType.Null)
                                                {
                                                    string encodingNameInstance = ((string)encodingNameValue);
                                                    textFormatInstance.EncodingName = encodingNameInstance;
                                                }
                                                
                                                JToken serializerValue = formatValue4["serializer"];
                                                if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance = ((string)serializerValue);
                                                    textFormatInstance.Serializer = serializerInstance;
                                                }
                                                
                                                JToken deserializerValue = formatValue4["deserializer"];
                                                if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance = ((string)deserializerValue);
                                                    textFormatInstance.Deserializer = deserializerInstance;
                                                }
                                                azureBlobLocationInstance.Format = textFormatInstance;
                                            }
                                            if (typeName3 == "AvroFormat")
                                            {
                                                AvroFormat avroFormatInstance = new AvroFormat();
                                                
                                                JToken serializerValue2 = formatValue4["serializer"];
                                                if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance2 = ((string)serializerValue2);
                                                    avroFormatInstance.Serializer = serializerInstance2;
                                                }
                                                
                                                JToken deserializerValue2 = formatValue4["deserializer"];
                                                if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance2 = ((string)deserializerValue2);
                                                    avroFormatInstance.Deserializer = deserializerInstance2;
                                                }
                                                azureBlobLocationInstance.Format = avroFormatInstance;
                                            }
                                        }
                                        
                                        JToken compressionValue3 = locationValue2["compression"];
                                        if (compressionValue3 != null && compressionValue3.Type != JTokenType.Null)
                                        {
                                            string typeName4 = ((string)compressionValue3["type"]);
                                            if (typeName4 == "Deflate")
                                            {
                                                DeflateCompression deflateCompressionInstance = new DeflateCompression();
                                                
                                                JToken levelValue = compressionValue3["level"];
                                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                {
                                                    string levelInstance = ((string)levelValue);
                                                    deflateCompressionInstance.Level = levelInstance;
                                                }
                                                azureBlobLocationInstance.Compression = deflateCompressionInstance;
                                            }
                                            if (typeName4 == "BZip2")
                                            {
                                                BZip2Compression bZip2CompressionInstance = new BZip2Compression();
                                                azureBlobLocationInstance.Compression = bZip2CompressionInstance;
                                            }
                                            if (typeName4 == "GZip")
                                            {
                                                GZipCompression gZipCompressionInstance = new GZipCompression();
                                                
                                                JToken levelValue2 = compressionValue3["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    gZipCompressionInstance.Level = levelInstance2;
                                                }
                                                azureBlobLocationInstance.Compression = gZipCompressionInstance;
                                            }
                                        }
                                        
                                        JToken linkedServiceNameValue = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        propertiesInstance.Location = azureBlobLocationInstance;
                                    }
                                    if (typeName == "AzureTableLocation")
                                    {
                                        AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                        
                                        JToken tableNameValue = locationValue2["tableName"];
                                        if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance = ((string)tableNameValue);
                                            azureTableLocationInstance.TableName = tableNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue2 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                            azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                        }
                                        propertiesInstance.Location = azureTableLocationInstance;
                                    }
                                    if (typeName == "AzureSqlTableLocation")
                                    {
                                        AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                        
                                        JToken tableNameValue2 = locationValue2["tableName"];
                                        if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance2 = ((string)tableNameValue2);
                                            azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue3 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        propertiesInstance.Location = azureSqlTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesSqlServerTableLocation")
                                    {
                                        OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                        
                                        JToken tableNameValue3 = locationValue2["tableName"];
                                        if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance3 = ((string)tableNameValue3);
                                            onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                        }
                                        
                                        JToken linkedServiceNameValue4 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                            onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                        }
                                        propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesFileSystemLocation")
                                    {
                                        OnPremisesFileSystemLocation onPremisesFileSystemLocationInstance = new OnPremisesFileSystemLocation();
                                        
                                        JToken folderPathValue2 = locationValue2["folderPath"];
                                        if (folderPathValue2 != null && folderPathValue2.Type != JTokenType.Null)
                                        {
                                            string folderPathInstance2 = ((string)folderPathValue2);
                                            onPremisesFileSystemLocationInstance.FolderPath = folderPathInstance2;
                                        }
                                        
                                        JToken fileNameValue2 = locationValue2["fileName"];
                                        if (fileNameValue2 != null && fileNameValue2.Type != JTokenType.Null)
                                        {
                                            string fileNameInstance2 = ((string)fileNameValue2);
                                            onPremisesFileSystemLocationInstance.FileName = fileNameInstance2;
                                        }
                                        
                                        JToken partitionedByArray4 = locationValue2["partitionedBy"];
                                        if (partitionedByArray4 != null && partitionedByArray4.Type != JTokenType.Null)
                                        {
                                            foreach (JToken partitionedByValue2 in ((JArray)partitionedByArray4))
                                            {
                                                Partition partitionInstance2 = new Partition();
                                                onPremisesFileSystemLocationInstance.PartitionedBy.Add(partitionInstance2);
                                                
                                                JToken nameValue4 = partitionedByValue2["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    partitionInstance2.Name = nameInstance4;
                                                }
                                                
                                                JToken valueValue4 = partitionedByValue2["value"];
                                                if (valueValue4 != null && valueValue4.Type != JTokenType.Null)
                                                {
                                                    string typeName5 = ((string)valueValue4["type"]);
                                                    if (typeName5 == "DateTime")
                                                    {
                                                        DateTimePartitionValue dateTimePartitionValueInstance2 = new DateTimePartitionValue();
                                                        
                                                        JToken dateValue2 = valueValue4["date"];
                                                        if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                        {
                                                            string dateInstance2 = ((string)dateValue2);
                                                            dateTimePartitionValueInstance2.Date = dateInstance2;
                                                        }
                                                        
                                                        JToken formatValue5 = valueValue4["format"];
                                                        if (formatValue5 != null && formatValue5.Type != JTokenType.Null)
                                                        {
                                                            string formatInstance2 = ((string)formatValue5);
                                                            dateTimePartitionValueInstance2.Format = formatInstance2;
                                                        }
                                                        partitionInstance2.Value = dateTimePartitionValueInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken formatValue6 = locationValue2["format"];
                                        if (formatValue6 != null && formatValue6.Type != JTokenType.Null)
                                        {
                                            string typeName6 = ((string)formatValue6["type"]);
                                            if (typeName6 == "TextFormat")
                                            {
                                                TextFormat textFormatInstance2 = new TextFormat();
                                                
                                                JToken columnDelimiterValue2 = formatValue6["columnDelimiter"];
                                                if (columnDelimiterValue2 != null && columnDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string columnDelimiterInstance2 = ((string)columnDelimiterValue2);
                                                    textFormatInstance2.ColumnDelimiter = columnDelimiterInstance2;
                                                }
                                                
                                                JToken rowDelimiterValue2 = formatValue6["rowDelimiter"];
                                                if (rowDelimiterValue2 != null && rowDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string rowDelimiterInstance2 = ((string)rowDelimiterValue2);
                                                    textFormatInstance2.RowDelimiter = rowDelimiterInstance2;
                                                }
                                                
                                                JToken escapeCharValue2 = formatValue6["escapeChar"];
                                                if (escapeCharValue2 != null && escapeCharValue2.Type != JTokenType.Null)
                                                {
                                                    string escapeCharInstance2 = ((string)escapeCharValue2);
                                                    textFormatInstance2.EscapeChar = escapeCharInstance2;
                                                }
                                                
                                                JToken quoteCharValue2 = formatValue6["quoteChar"];
                                                if (quoteCharValue2 != null && quoteCharValue2.Type != JTokenType.Null)
                                                {
                                                    string quoteCharInstance2 = ((string)quoteCharValue2);
                                                    textFormatInstance2.QuoteChar = quoteCharInstance2;
                                                }
                                                
                                                JToken nullValueValue2 = formatValue6["nullValue"];
                                                if (nullValueValue2 != null && nullValueValue2.Type != JTokenType.Null)
                                                {
                                                    string nullValueInstance2 = ((string)nullValueValue2);
                                                    textFormatInstance2.NullValue = nullValueInstance2;
                                                }
                                                
                                                JToken encodingNameValue2 = formatValue6["encodingName"];
                                                if (encodingNameValue2 != null && encodingNameValue2.Type != JTokenType.Null)
                                                {
                                                    string encodingNameInstance2 = ((string)encodingNameValue2);
                                                    textFormatInstance2.EncodingName = encodingNameInstance2;
                                                }
                                                
                                                JToken serializerValue3 = formatValue6["serializer"];
                                                if (serializerValue3 != null && serializerValue3.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance3 = ((string)serializerValue3);
                                                    textFormatInstance2.Serializer = serializerInstance3;
                                                }
                                                
                                                JToken deserializerValue3 = formatValue6["deserializer"];
                                                if (deserializerValue3 != null && deserializerValue3.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance3 = ((string)deserializerValue3);
                                                    textFormatInstance2.Deserializer = deserializerInstance3;
                                                }
                                                onPremisesFileSystemLocationInstance.Format = textFormatInstance2;
                                            }
                                            if (typeName6 == "AvroFormat")
                                            {
                                                AvroFormat avroFormatInstance2 = new AvroFormat();
                                                
                                                JToken serializerValue4 = formatValue6["serializer"];
                                                if (serializerValue4 != null && serializerValue4.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance4 = ((string)serializerValue4);
                                                    avroFormatInstance2.Serializer = serializerInstance4;
                                                }
                                                
                                                JToken deserializerValue4 = formatValue6["deserializer"];
                                                if (deserializerValue4 != null && deserializerValue4.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance4 = ((string)deserializerValue4);
                                                    avroFormatInstance2.Deserializer = deserializerInstance4;
                                                }
                                                onPremisesFileSystemLocationInstance.Format = avroFormatInstance2;
                                            }
                                        }
                                        
                                        JToken compressionValue4 = locationValue2["compression"];
                                        if (compressionValue4 != null && compressionValue4.Type != JTokenType.Null)
                                        {
                                            string typeName7 = ((string)compressionValue4["type"]);
                                            if (typeName7 == "Deflate")
                                            {
                                                DeflateCompression deflateCompressionInstance2 = new DeflateCompression();
                                                
                                                JToken levelValue3 = compressionValue4["level"];
                                                if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                {
                                                    string levelInstance3 = ((string)levelValue3);
                                                    deflateCompressionInstance2.Level = levelInstance3;
                                                }
                                                onPremisesFileSystemLocationInstance.Compression = deflateCompressionInstance2;
                                            }
                                            if (typeName7 == "BZip2")
                                            {
                                                BZip2Compression bZip2CompressionInstance2 = new BZip2Compression();
                                                onPremisesFileSystemLocationInstance.Compression = bZip2CompressionInstance2;
                                            }
                                            if (typeName7 == "GZip")
                                            {
                                                GZipCompression gZipCompressionInstance2 = new GZipCompression();
                                                
                                                JToken levelValue4 = compressionValue4["level"];
                                                if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                {
                                                    string levelInstance4 = ((string)levelValue4);
                                                    gZipCompressionInstance2.Level = levelInstance4;
                                                }
                                                onPremisesFileSystemLocationInstance.Compression = gZipCompressionInstance2;
                                            }
                                        }
                                        
                                        JToken fileFilterValue = locationValue2["fileFilter"];
                                        if (fileFilterValue != null && fileFilterValue.Type != JTokenType.Null)
                                        {
                                            string fileFilterInstance = ((string)fileFilterValue);
                                            onPremisesFileSystemLocationInstance.FileFilter = fileFilterInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue5 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                            onPremisesFileSystemLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                        }
                                        propertiesInstance.Location = onPremisesFileSystemLocationInstance;
                                    }
                                    if (typeName == "OnPremisesOracleTableLocation")
                                    {
                                        OnPremisesOracleTableLocation onPremisesOracleTableLocationInstance = new OnPremisesOracleTableLocation();
                                        
                                        JToken tableNameValue4 = locationValue2["tableName"];
                                        if (tableNameValue4 != null && tableNameValue4.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance4 = ((string)tableNameValue4);
                                            onPremisesOracleTableLocationInstance.TableName = tableNameInstance4;
                                        }
                                        
                                        JToken linkedServiceNameValue6 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue6 != null && linkedServiceNameValue6.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance6 = ((string)linkedServiceNameValue6);
                                            onPremisesOracleTableLocationInstance.LinkedServiceName = linkedServiceNameInstance6;
                                        }
                                        propertiesInstance.Location = onPremisesOracleTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesOdbcTableLocation")
                                    {
                                        OnPremisesOdbcTableLocation onPremisesOdbcTableLocationInstance = new OnPremisesOdbcTableLocation();
                                        
                                        JToken linkedServiceNameValue7 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue7 != null && linkedServiceNameValue7.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance7 = ((string)linkedServiceNameValue7);
                                            onPremisesOdbcTableLocationInstance.LinkedServiceName = linkedServiceNameInstance7;
                                        }
                                        propertiesInstance.Location = onPremisesOdbcTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesHdfsTableLocation")
                                    {
                                        OnPremisesHdfsTableLocation onPremisesHdfsTableLocationInstance = new OnPremisesHdfsTableLocation();
                                        
                                        JToken linkedServiceNameValue8 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue8 != null && linkedServiceNameValue8.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance8 = ((string)linkedServiceNameValue8);
                                            onPremisesHdfsTableLocationInstance.LinkedServiceName = linkedServiceNameInstance8;
                                        }
                                        propertiesInstance.Location = onPremisesHdfsTableLocationInstance;
                                    }
                                    if (typeName == "ODataTableLocation")
                                    {
                                        ODataTableLocation oDataTableLocationInstance = new ODataTableLocation();
                                        
                                        JToken resourceValue = locationValue2["resource"];
                                        if (resourceValue != null && resourceValue.Type != JTokenType.Null)
                                        {
                                            string resourceInstance = ((string)resourceValue);
                                            oDataTableLocationInstance.Resource = resourceInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue9 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue9 != null && linkedServiceNameValue9.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance9 = ((string)linkedServiceNameValue9);
                                            oDataTableLocationInstance.LinkedServiceName = linkedServiceNameInstance9;
                                        }
                                        propertiesInstance.Location = oDataTableLocationInstance;
                                    }
                                    if (typeName == "CustomLocation")
                                    {
                                        CustomLocation customLocationInstance = new CustomLocation();
                                        
                                        JToken extendedPropertiesSequenceElement = ((JToken)locationValue2["extendedProperties"]);
                                        if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in extendedPropertiesSequenceElement)
                                            {
                                                string extendedPropertiesKey2 = ((string)property.Name);
                                                string extendedPropertiesValue2 = ((string)property.Value);
                                                customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey2, extendedPropertiesValue2);
                                            }
                                        }
                                        
                                        JToken linkedServiceNameValue10 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue10 != null && linkedServiceNameValue10.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance10 = ((string)linkedServiceNameValue10);
                                            customLocationInstance.LinkedServiceName = linkedServiceNameInstance10;
                                        }
                                        propertiesInstance.Location = customLocationInstance;
                                    }
                                    if (typeName == "RelationalTableLocation")
                                    {
                                        RelationalTableLocation relationalTableLocationInstance = new RelationalTableLocation();
                                        
                                        JToken tableNameValue5 = locationValue2["tableName"];
                                        if (tableNameValue5 != null && tableNameValue5.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance5 = ((string)tableNameValue5);
                                            relationalTableLocationInstance.TableName = tableNameInstance5;
                                        }
                                        
                                        JToken linkedServiceNameValue11 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue11 != null && linkedServiceNameValue11.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance11 = ((string)linkedServiceNameValue11);
                                            relationalTableLocationInstance.LinkedServiceName = linkedServiceNameInstance11;
                                        }
                                        propertiesInstance.Location = relationalTableLocationInstance;
                                    }
                                    if (typeName == "DocumentDbCollectionLocation")
                                    {
                                        DocumentDbCollectionLocation documentDbCollectionLocationInstance = new DocumentDbCollectionLocation();
                                        
                                        JToken collectionNameValue = locationValue2["collectionName"];
                                        if (collectionNameValue != null && collectionNameValue.Type != JTokenType.Null)
                                        {
                                            string collectionNameInstance = ((string)collectionNameValue);
                                            documentDbCollectionLocationInstance.CollectionName = collectionNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue12 = locationValue2["linkedServiceName"];
                                        if (linkedServiceNameValue12 != null && linkedServiceNameValue12.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance12 = ((string)linkedServiceNameValue12);
                                            documentDbCollectionLocationInstance.LinkedServiceName = linkedServiceNameInstance12;
                                        }
                                        propertiesInstance.Location = documentDbCollectionLocationInstance;
                                    }
                                }
                                
                                JToken availabilityValue2 = propertiesValue2["availability"];
                                if (availabilityValue2 != null && availabilityValue2.Type != JTokenType.Null)
                                {
                                    Availability availabilityInstance = new Availability();
                                    propertiesInstance.Availability = availabilityInstance;
                                    
                                    JToken frequencyValue = availabilityValue2["frequency"];
                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                    {
                                        string frequencyInstance = ((string)frequencyValue);
                                        availabilityInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken intervalValue = availabilityValue2["interval"];
                                    if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                    {
                                        uint intervalInstance = ((uint)intervalValue);
                                        availabilityInstance.Interval = intervalInstance;
                                    }
                                    
                                    JToken anchorDateTimeValue = availabilityValue2["anchorDateTime"];
                                    if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                        availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                    }
                                    
                                    JToken offsetValue = availabilityValue2["offset"];
                                    if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                        availabilityInstance.Offset = offsetInstance;
                                    }
                                    
                                    JToken waitOnExternalValue2 = availabilityValue2["waitOnExternal"];
                                    if (waitOnExternalValue2 != null && waitOnExternalValue2.Type != JTokenType.Null)
                                    {
                                        WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                        availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                        
                                        JToken dataDelayValue = waitOnExternalValue2["dataDelay"];
                                        if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.DataDelay = dataDelayInstance;
                                        }
                                        
                                        JToken retryIntervalValue = waitOnExternalValue2["retryInterval"];
                                        if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                        }
                                        
                                        JToken retryTimeoutValue = waitOnExternalValue2["retryTimeout"];
                                        if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                        }
                                        
                                        JToken maximumRetryValue = waitOnExternalValue2["maximumRetry"];
                                        if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                        {
                                            int maximumRetryInstance = ((int)maximumRetryValue);
                                            waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                        }
                                    }
                                    
                                    JToken styleValue = availabilityValue2["style"];
                                    if (styleValue != null && styleValue.Type != JTokenType.Null)
                                    {
                                        string styleInstance = ((string)styleValue);
                                        availabilityInstance.Style = styleInstance;
                                    }
                                }
                                
                                JToken policyValue2 = propertiesValue2["policy"];
                                if (policyValue2 != null && policyValue2.Type != JTokenType.Null)
                                {
                                    Policy policyInstance = new Policy();
                                    propertiesInstance.Policy = policyInstance;
                                    
                                    JToken validationValue2 = policyValue2["validation"];
                                    if (validationValue2 != null && validationValue2.Type != JTokenType.Null)
                                    {
                                        ValidationPolicy validationInstance = new ValidationPolicy();
                                        policyInstance.Validation = validationInstance;
                                        
                                        JToken minimumRowsValue = validationValue2["minimumRows"];
                                        if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                        {
                                            long minimumRowsInstance = ((long)minimumRowsValue);
                                            validationInstance.MinimumRows = minimumRowsInstance;
                                        }
                                        
                                        JToken minimumSizeMBValue = validationValue2["minimumSizeMB"];
                                        if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                        {
                                            double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                            validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                        }
                                        
                                        JToken validationPriorityOrderValue = validationValue2["validationPriorityOrder"];
                                        if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                        {
                                            string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                            validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                        }
                                    }
                                    
                                    JToken latencyValue2 = policyValue2["latency"];
                                    if (latencyValue2 != null && latencyValue2.Type != JTokenType.Null)
                                    {
                                        LatencyPolicy latencyInstance = new LatencyPolicy();
                                        policyInstance.Latency = latencyInstance;
                                        
                                        JToken latencyLengthValue = latencyValue2["latencyLength"];
                                        if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                            latencyInstance.LatencyLength = latencyLengthInstance;
                                        }
                                    }
                                }
                                
                                JToken publishedValue = propertiesValue2["published"];
                                if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                                {
                                    bool publishedInstance = ((bool)publishedValue);
                                    propertiesInstance.Published = publishedInstance;
                                }
                                
                                JToken createTimeValue = propertiesValue2["createTime"];
                                if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime createTimeInstance = ((DateTime)createTimeValue);
                                    propertiesInstance.CreateTime = createTimeInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue2["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new table instance or update an existing instance with raw
        /// json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='tableName'>
        /// Required. A unique table instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate table operation response.
        /// </returns>
        public async Task<TableCreateOrUpdateResponse> BeginCreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string tableName, TableCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (tableName == null)
            {
                throw new ArgumentNullException("tableName");
            }
            if (tableName != null && tableName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("tableName");
            }
            if (Regex.IsMatch(tableName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("tableName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Content == null)
            {
                throw new ArgumentNullException("parameters.Content");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("tableName", tableName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/tables/";
            url = url + Uri.EscapeDataString(tableName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Table tableInstance = new Table();
                            result.Table = tableInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                tableInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                TableProperties propertiesInstance = new TableProperties();
                                tableInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken structureArray = propertiesValue["structure"];
                                if (structureArray != null && structureArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken structureValue in ((JArray)structureArray))
                                    {
                                        DataElement dataElementInstance = new DataElement();
                                        propertiesInstance.Structure.Add(dataElementInstance);
                                        
                                        JToken nameValue2 = structureValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            dataElementInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = structureValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            dataElementInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken positionValue = structureValue["position"];
                                        if (positionValue != null && positionValue.Type != JTokenType.Null)
                                        {
                                            uint positionInstance = ((uint)positionValue);
                                            dataElementInstance.Position = positionInstance;
                                        }
                                        
                                        JToken typeValue = structureValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            dataElementInstance.Type = typeInstance;
                                        }
                                    }
                                }
                                
                                JToken locationValue = propertiesValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)locationValue["type"]);
                                    if (typeName == "AzureBlobLocation")
                                    {
                                        AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                        
                                        JToken folderPathValue = locationValue["folderPath"];
                                        if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                        {
                                            string folderPathInstance = ((string)folderPathValue);
                                            azureBlobLocationInstance.FolderPath = folderPathInstance;
                                        }
                                        
                                        JToken tableRootLocationValue = locationValue["tableRootLocation"];
                                        if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                        {
                                            string tableRootLocationInstance = ((string)tableRootLocationValue);
                                            azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                        }
                                        
                                        JToken fileNameValue = locationValue["fileName"];
                                        if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                        {
                                            string fileNameInstance = ((string)fileNameValue);
                                            azureBlobLocationInstance.FileName = fileNameInstance;
                                        }
                                        
                                        JToken partitionedByArray = locationValue["partitionedBy"];
                                        if (partitionedByArray != null && partitionedByArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken partitionedByValue in ((JArray)partitionedByArray))
                                            {
                                                Partition partitionInstance = new Partition();
                                                azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                                
                                                JToken nameValue3 = partitionedByValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    partitionInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken valueValue = partitionedByValue["value"];
                                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)valueValue["type"]);
                                                    if (typeName2 == "DateTime")
                                                    {
                                                        DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                        
                                                        JToken dateValue = valueValue["date"];
                                                        if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                        {
                                                            string dateInstance = ((string)dateValue);
                                                            dateTimePartitionValueInstance.Date = dateInstance;
                                                        }
                                                        
                                                        JToken formatValue = valueValue["format"];
                                                        if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                        {
                                                            string formatInstance = ((string)formatValue);
                                                            dateTimePartitionValueInstance.Format = formatInstance;
                                                        }
                                                        partitionInstance.Value = dateTimePartitionValueInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken formatValue2 = locationValue["format"];
                                        if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                        {
                                            string typeName3 = ((string)formatValue2["type"]);
                                            if (typeName3 == "TextFormat")
                                            {
                                                TextFormat textFormatInstance = new TextFormat();
                                                
                                                JToken columnDelimiterValue = formatValue2["columnDelimiter"];
                                                if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                    textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                                }
                                                
                                                JToken rowDelimiterValue = formatValue2["rowDelimiter"];
                                                if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                    textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                                }
                                                
                                                JToken escapeCharValue = formatValue2["escapeChar"];
                                                if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                                {
                                                    string escapeCharInstance = ((string)escapeCharValue);
                                                    textFormatInstance.EscapeChar = escapeCharInstance;
                                                }
                                                
                                                JToken quoteCharValue = formatValue2["quoteChar"];
                                                if (quoteCharValue != null && quoteCharValue.Type != JTokenType.Null)
                                                {
                                                    string quoteCharInstance = ((string)quoteCharValue);
                                                    textFormatInstance.QuoteChar = quoteCharInstance;
                                                }
                                                
                                                JToken nullValueValue = formatValue2["nullValue"];
                                                if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                                {
                                                    string nullValueInstance = ((string)nullValueValue);
                                                    textFormatInstance.NullValue = nullValueInstance;
                                                }
                                                
                                                JToken encodingNameValue = formatValue2["encodingName"];
                                                if (encodingNameValue != null && encodingNameValue.Type != JTokenType.Null)
                                                {
                                                    string encodingNameInstance = ((string)encodingNameValue);
                                                    textFormatInstance.EncodingName = encodingNameInstance;
                                                }
                                                
                                                JToken serializerValue = formatValue2["serializer"];
                                                if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance = ((string)serializerValue);
                                                    textFormatInstance.Serializer = serializerInstance;
                                                }
                                                
                                                JToken deserializerValue = formatValue2["deserializer"];
                                                if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance = ((string)deserializerValue);
                                                    textFormatInstance.Deserializer = deserializerInstance;
                                                }
                                                azureBlobLocationInstance.Format = textFormatInstance;
                                            }
                                            if (typeName3 == "AvroFormat")
                                            {
                                                AvroFormat avroFormatInstance = new AvroFormat();
                                                
                                                JToken serializerValue2 = formatValue2["serializer"];
                                                if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance2 = ((string)serializerValue2);
                                                    avroFormatInstance.Serializer = serializerInstance2;
                                                }
                                                
                                                JToken deserializerValue2 = formatValue2["deserializer"];
                                                if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance2 = ((string)deserializerValue2);
                                                    avroFormatInstance.Deserializer = deserializerInstance2;
                                                }
                                                azureBlobLocationInstance.Format = avroFormatInstance;
                                            }
                                        }
                                        
                                        JToken compressionValue = locationValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string typeName4 = ((string)compressionValue["type"]);
                                            if (typeName4 == "Deflate")
                                            {
                                                DeflateCompression deflateCompressionInstance = new DeflateCompression();
                                                
                                                JToken levelValue = compressionValue["level"];
                                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                {
                                                    string levelInstance = ((string)levelValue);
                                                    deflateCompressionInstance.Level = levelInstance;
                                                }
                                                azureBlobLocationInstance.Compression = deflateCompressionInstance;
                                            }
                                            if (typeName4 == "BZip2")
                                            {
                                                BZip2Compression bZip2CompressionInstance = new BZip2Compression();
                                                azureBlobLocationInstance.Compression = bZip2CompressionInstance;
                                            }
                                            if (typeName4 == "GZip")
                                            {
                                                GZipCompression gZipCompressionInstance = new GZipCompression();
                                                
                                                JToken levelValue2 = compressionValue["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    gZipCompressionInstance.Level = levelInstance2;
                                                }
                                                azureBlobLocationInstance.Compression = gZipCompressionInstance;
                                            }
                                        }
                                        
                                        JToken linkedServiceNameValue = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        propertiesInstance.Location = azureBlobLocationInstance;
                                    }
                                    if (typeName == "AzureTableLocation")
                                    {
                                        AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                        
                                        JToken tableNameValue = locationValue["tableName"];
                                        if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance = ((string)tableNameValue);
                                            azureTableLocationInstance.TableName = tableNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue2 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                            azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                        }
                                        propertiesInstance.Location = azureTableLocationInstance;
                                    }
                                    if (typeName == "AzureSqlTableLocation")
                                    {
                                        AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                        
                                        JToken tableNameValue2 = locationValue["tableName"];
                                        if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance2 = ((string)tableNameValue2);
                                            azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue3 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        propertiesInstance.Location = azureSqlTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesSqlServerTableLocation")
                                    {
                                        OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                        
                                        JToken tableNameValue3 = locationValue["tableName"];
                                        if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance3 = ((string)tableNameValue3);
                                            onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                        }
                                        
                                        JToken linkedServiceNameValue4 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                            onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                        }
                                        propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesFileSystemLocation")
                                    {
                                        OnPremisesFileSystemLocation onPremisesFileSystemLocationInstance = new OnPremisesFileSystemLocation();
                                        
                                        JToken folderPathValue2 = locationValue["folderPath"];
                                        if (folderPathValue2 != null && folderPathValue2.Type != JTokenType.Null)
                                        {
                                            string folderPathInstance2 = ((string)folderPathValue2);
                                            onPremisesFileSystemLocationInstance.FolderPath = folderPathInstance2;
                                        }
                                        
                                        JToken fileNameValue2 = locationValue["fileName"];
                                        if (fileNameValue2 != null && fileNameValue2.Type != JTokenType.Null)
                                        {
                                            string fileNameInstance2 = ((string)fileNameValue2);
                                            onPremisesFileSystemLocationInstance.FileName = fileNameInstance2;
                                        }
                                        
                                        JToken partitionedByArray2 = locationValue["partitionedBy"];
                                        if (partitionedByArray2 != null && partitionedByArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken partitionedByValue2 in ((JArray)partitionedByArray2))
                                            {
                                                Partition partitionInstance2 = new Partition();
                                                onPremisesFileSystemLocationInstance.PartitionedBy.Add(partitionInstance2);
                                                
                                                JToken nameValue4 = partitionedByValue2["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    partitionInstance2.Name = nameInstance4;
                                                }
                                                
                                                JToken valueValue2 = partitionedByValue2["value"];
                                                if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName5 = ((string)valueValue2["type"]);
                                                    if (typeName5 == "DateTime")
                                                    {
                                                        DateTimePartitionValue dateTimePartitionValueInstance2 = new DateTimePartitionValue();
                                                        
                                                        JToken dateValue2 = valueValue2["date"];
                                                        if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                        {
                                                            string dateInstance2 = ((string)dateValue2);
                                                            dateTimePartitionValueInstance2.Date = dateInstance2;
                                                        }
                                                        
                                                        JToken formatValue3 = valueValue2["format"];
                                                        if (formatValue3 != null && formatValue3.Type != JTokenType.Null)
                                                        {
                                                            string formatInstance2 = ((string)formatValue3);
                                                            dateTimePartitionValueInstance2.Format = formatInstance2;
                                                        }
                                                        partitionInstance2.Value = dateTimePartitionValueInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken formatValue4 = locationValue["format"];
                                        if (formatValue4 != null && formatValue4.Type != JTokenType.Null)
                                        {
                                            string typeName6 = ((string)formatValue4["type"]);
                                            if (typeName6 == "TextFormat")
                                            {
                                                TextFormat textFormatInstance2 = new TextFormat();
                                                
                                                JToken columnDelimiterValue2 = formatValue4["columnDelimiter"];
                                                if (columnDelimiterValue2 != null && columnDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string columnDelimiterInstance2 = ((string)columnDelimiterValue2);
                                                    textFormatInstance2.ColumnDelimiter = columnDelimiterInstance2;
                                                }
                                                
                                                JToken rowDelimiterValue2 = formatValue4["rowDelimiter"];
                                                if (rowDelimiterValue2 != null && rowDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string rowDelimiterInstance2 = ((string)rowDelimiterValue2);
                                                    textFormatInstance2.RowDelimiter = rowDelimiterInstance2;
                                                }
                                                
                                                JToken escapeCharValue2 = formatValue4["escapeChar"];
                                                if (escapeCharValue2 != null && escapeCharValue2.Type != JTokenType.Null)
                                                {
                                                    string escapeCharInstance2 = ((string)escapeCharValue2);
                                                    textFormatInstance2.EscapeChar = escapeCharInstance2;
                                                }
                                                
                                                JToken quoteCharValue2 = formatValue4["quoteChar"];
                                                if (quoteCharValue2 != null && quoteCharValue2.Type != JTokenType.Null)
                                                {
                                                    string quoteCharInstance2 = ((string)quoteCharValue2);
                                                    textFormatInstance2.QuoteChar = quoteCharInstance2;
                                                }
                                                
                                                JToken nullValueValue2 = formatValue4["nullValue"];
                                                if (nullValueValue2 != null && nullValueValue2.Type != JTokenType.Null)
                                                {
                                                    string nullValueInstance2 = ((string)nullValueValue2);
                                                    textFormatInstance2.NullValue = nullValueInstance2;
                                                }
                                                
                                                JToken encodingNameValue2 = formatValue4["encodingName"];
                                                if (encodingNameValue2 != null && encodingNameValue2.Type != JTokenType.Null)
                                                {
                                                    string encodingNameInstance2 = ((string)encodingNameValue2);
                                                    textFormatInstance2.EncodingName = encodingNameInstance2;
                                                }
                                                
                                                JToken serializerValue3 = formatValue4["serializer"];
                                                if (serializerValue3 != null && serializerValue3.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance3 = ((string)serializerValue3);
                                                    textFormatInstance2.Serializer = serializerInstance3;
                                                }
                                                
                                                JToken deserializerValue3 = formatValue4["deserializer"];
                                                if (deserializerValue3 != null && deserializerValue3.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance3 = ((string)deserializerValue3);
                                                    textFormatInstance2.Deserializer = deserializerInstance3;
                                                }
                                                onPremisesFileSystemLocationInstance.Format = textFormatInstance2;
                                            }
                                            if (typeName6 == "AvroFormat")
                                            {
                                                AvroFormat avroFormatInstance2 = new AvroFormat();
                                                
                                                JToken serializerValue4 = formatValue4["serializer"];
                                                if (serializerValue4 != null && serializerValue4.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance4 = ((string)serializerValue4);
                                                    avroFormatInstance2.Serializer = serializerInstance4;
                                                }
                                                
                                                JToken deserializerValue4 = formatValue4["deserializer"];
                                                if (deserializerValue4 != null && deserializerValue4.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance4 = ((string)deserializerValue4);
                                                    avroFormatInstance2.Deserializer = deserializerInstance4;
                                                }
                                                onPremisesFileSystemLocationInstance.Format = avroFormatInstance2;
                                            }
                                        }
                                        
                                        JToken compressionValue2 = locationValue["compression"];
                                        if (compressionValue2 != null && compressionValue2.Type != JTokenType.Null)
                                        {
                                            string typeName7 = ((string)compressionValue2["type"]);
                                            if (typeName7 == "Deflate")
                                            {
                                                DeflateCompression deflateCompressionInstance2 = new DeflateCompression();
                                                
                                                JToken levelValue3 = compressionValue2["level"];
                                                if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                {
                                                    string levelInstance3 = ((string)levelValue3);
                                                    deflateCompressionInstance2.Level = levelInstance3;
                                                }
                                                onPremisesFileSystemLocationInstance.Compression = deflateCompressionInstance2;
                                            }
                                            if (typeName7 == "BZip2")
                                            {
                                                BZip2Compression bZip2CompressionInstance2 = new BZip2Compression();
                                                onPremisesFileSystemLocationInstance.Compression = bZip2CompressionInstance2;
                                            }
                                            if (typeName7 == "GZip")
                                            {
                                                GZipCompression gZipCompressionInstance2 = new GZipCompression();
                                                
                                                JToken levelValue4 = compressionValue2["level"];
                                                if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                {
                                                    string levelInstance4 = ((string)levelValue4);
                                                    gZipCompressionInstance2.Level = levelInstance4;
                                                }
                                                onPremisesFileSystemLocationInstance.Compression = gZipCompressionInstance2;
                                            }
                                        }
                                        
                                        JToken fileFilterValue = locationValue["fileFilter"];
                                        if (fileFilterValue != null && fileFilterValue.Type != JTokenType.Null)
                                        {
                                            string fileFilterInstance = ((string)fileFilterValue);
                                            onPremisesFileSystemLocationInstance.FileFilter = fileFilterInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue5 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                            onPremisesFileSystemLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                        }
                                        propertiesInstance.Location = onPremisesFileSystemLocationInstance;
                                    }
                                    if (typeName == "OnPremisesOracleTableLocation")
                                    {
                                        OnPremisesOracleTableLocation onPremisesOracleTableLocationInstance = new OnPremisesOracleTableLocation();
                                        
                                        JToken tableNameValue4 = locationValue["tableName"];
                                        if (tableNameValue4 != null && tableNameValue4.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance4 = ((string)tableNameValue4);
                                            onPremisesOracleTableLocationInstance.TableName = tableNameInstance4;
                                        }
                                        
                                        JToken linkedServiceNameValue6 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue6 != null && linkedServiceNameValue6.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance6 = ((string)linkedServiceNameValue6);
                                            onPremisesOracleTableLocationInstance.LinkedServiceName = linkedServiceNameInstance6;
                                        }
                                        propertiesInstance.Location = onPremisesOracleTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesOdbcTableLocation")
                                    {
                                        OnPremisesOdbcTableLocation onPremisesOdbcTableLocationInstance = new OnPremisesOdbcTableLocation();
                                        
                                        JToken linkedServiceNameValue7 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue7 != null && linkedServiceNameValue7.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance7 = ((string)linkedServiceNameValue7);
                                            onPremisesOdbcTableLocationInstance.LinkedServiceName = linkedServiceNameInstance7;
                                        }
                                        propertiesInstance.Location = onPremisesOdbcTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesHdfsTableLocation")
                                    {
                                        OnPremisesHdfsTableLocation onPremisesHdfsTableLocationInstance = new OnPremisesHdfsTableLocation();
                                        
                                        JToken linkedServiceNameValue8 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue8 != null && linkedServiceNameValue8.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance8 = ((string)linkedServiceNameValue8);
                                            onPremisesHdfsTableLocationInstance.LinkedServiceName = linkedServiceNameInstance8;
                                        }
                                        propertiesInstance.Location = onPremisesHdfsTableLocationInstance;
                                    }
                                    if (typeName == "ODataTableLocation")
                                    {
                                        ODataTableLocation oDataTableLocationInstance = new ODataTableLocation();
                                        
                                        JToken resourceValue = locationValue["resource"];
                                        if (resourceValue != null && resourceValue.Type != JTokenType.Null)
                                        {
                                            string resourceInstance = ((string)resourceValue);
                                            oDataTableLocationInstance.Resource = resourceInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue9 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue9 != null && linkedServiceNameValue9.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance9 = ((string)linkedServiceNameValue9);
                                            oDataTableLocationInstance.LinkedServiceName = linkedServiceNameInstance9;
                                        }
                                        propertiesInstance.Location = oDataTableLocationInstance;
                                    }
                                    if (typeName == "CustomLocation")
                                    {
                                        CustomLocation customLocationInstance = new CustomLocation();
                                        
                                        JToken extendedPropertiesSequenceElement = ((JToken)locationValue["extendedProperties"]);
                                        if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in extendedPropertiesSequenceElement)
                                            {
                                                string extendedPropertiesKey = ((string)property.Name);
                                                string extendedPropertiesValue = ((string)property.Value);
                                                customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                            }
                                        }
                                        
                                        JToken linkedServiceNameValue10 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue10 != null && linkedServiceNameValue10.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance10 = ((string)linkedServiceNameValue10);
                                            customLocationInstance.LinkedServiceName = linkedServiceNameInstance10;
                                        }
                                        propertiesInstance.Location = customLocationInstance;
                                    }
                                    if (typeName == "RelationalTableLocation")
                                    {
                                        RelationalTableLocation relationalTableLocationInstance = new RelationalTableLocation();
                                        
                                        JToken tableNameValue5 = locationValue["tableName"];
                                        if (tableNameValue5 != null && tableNameValue5.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance5 = ((string)tableNameValue5);
                                            relationalTableLocationInstance.TableName = tableNameInstance5;
                                        }
                                        
                                        JToken linkedServiceNameValue11 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue11 != null && linkedServiceNameValue11.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance11 = ((string)linkedServiceNameValue11);
                                            relationalTableLocationInstance.LinkedServiceName = linkedServiceNameInstance11;
                                        }
                                        propertiesInstance.Location = relationalTableLocationInstance;
                                    }
                                    if (typeName == "DocumentDbCollectionLocation")
                                    {
                                        DocumentDbCollectionLocation documentDbCollectionLocationInstance = new DocumentDbCollectionLocation();
                                        
                                        JToken collectionNameValue = locationValue["collectionName"];
                                        if (collectionNameValue != null && collectionNameValue.Type != JTokenType.Null)
                                        {
                                            string collectionNameInstance = ((string)collectionNameValue);
                                            documentDbCollectionLocationInstance.CollectionName = collectionNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue12 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue12 != null && linkedServiceNameValue12.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance12 = ((string)linkedServiceNameValue12);
                                            documentDbCollectionLocationInstance.LinkedServiceName = linkedServiceNameInstance12;
                                        }
                                        propertiesInstance.Location = documentDbCollectionLocationInstance;
                                    }
                                }
                                
                                JToken availabilityValue = propertiesValue["availability"];
                                if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                {
                                    Availability availabilityInstance = new Availability();
                                    propertiesInstance.Availability = availabilityInstance;
                                    
                                    JToken frequencyValue = availabilityValue["frequency"];
                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                    {
                                        string frequencyInstance = ((string)frequencyValue);
                                        availabilityInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken intervalValue = availabilityValue["interval"];
                                    if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                    {
                                        uint intervalInstance = ((uint)intervalValue);
                                        availabilityInstance.Interval = intervalInstance;
                                    }
                                    
                                    JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                    if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                        availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                    }
                                    
                                    JToken offsetValue = availabilityValue["offset"];
                                    if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                        availabilityInstance.Offset = offsetInstance;
                                    }
                                    
                                    JToken waitOnExternalValue = availabilityValue["waitOnExternal"];
                                    if (waitOnExternalValue != null && waitOnExternalValue.Type != JTokenType.Null)
                                    {
                                        WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                        availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                        
                                        JToken dataDelayValue = waitOnExternalValue["dataDelay"];
                                        if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.DataDelay = dataDelayInstance;
                                        }
                                        
                                        JToken retryIntervalValue = waitOnExternalValue["retryInterval"];
                                        if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                        }
                                        
                                        JToken retryTimeoutValue = waitOnExternalValue["retryTimeout"];
                                        if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                        }
                                        
                                        JToken maximumRetryValue = waitOnExternalValue["maximumRetry"];
                                        if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                        {
                                            int maximumRetryInstance = ((int)maximumRetryValue);
                                            waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                        }
                                    }
                                    
                                    JToken styleValue = availabilityValue["style"];
                                    if (styleValue != null && styleValue.Type != JTokenType.Null)
                                    {
                                        string styleInstance = ((string)styleValue);
                                        availabilityInstance.Style = styleInstance;
                                    }
                                }
                                
                                JToken policyValue = propertiesValue["policy"];
                                if (policyValue != null && policyValue.Type != JTokenType.Null)
                                {
                                    Policy policyInstance = new Policy();
                                    propertiesInstance.Policy = policyInstance;
                                    
                                    JToken validationValue = policyValue["validation"];
                                    if (validationValue != null && validationValue.Type != JTokenType.Null)
                                    {
                                        ValidationPolicy validationInstance = new ValidationPolicy();
                                        policyInstance.Validation = validationInstance;
                                        
                                        JToken minimumRowsValue = validationValue["minimumRows"];
                                        if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                        {
                                            long minimumRowsInstance = ((long)minimumRowsValue);
                                            validationInstance.MinimumRows = minimumRowsInstance;
                                        }
                                        
                                        JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                        if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                        {
                                            double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                            validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                        }
                                        
                                        JToken validationPriorityOrderValue = validationValue["validationPriorityOrder"];
                                        if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                        {
                                            string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                            validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                        }
                                    }
                                    
                                    JToken latencyValue = policyValue["latency"];
                                    if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                    {
                                        LatencyPolicy latencyInstance = new LatencyPolicy();
                                        policyInstance.Latency = latencyInstance;
                                        
                                        JToken latencyLengthValue = latencyValue["latencyLength"];
                                        if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                            latencyInstance.LatencyLength = latencyLengthInstance;
                                        }
                                    }
                                }
                                
                                JToken publishedValue = propertiesValue["published"];
                                if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                                {
                                    bool publishedInstance = ((bool)publishedValue);
                                    propertiesInstance.Published = publishedInstance;
                                }
                                
                                JToken createTimeValue = propertiesValue["createTime"];
                                if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime createTimeInstance = ((DateTime)createTimeValue);
                                    propertiesInstance.CreateTime = createTimeInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete a table instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='tableName'>
        /// Required. Name of the table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> BeginDeleteAsync(string resourceGroupName, string dataFactoryName, string tableName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (tableName == null)
            {
                throw new ArgumentNullException("tableName");
            }
            if (tableName != null && tableName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("tableName");
            }
            if (Regex.IsMatch(tableName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("tableName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("tableName", tableName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/tables/";
            url = url + Uri.EscapeDataString(tableName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    LongRunningOperationResponse result = null;
                    // Deserialize Response
                    result = new LongRunningOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new table instance or update an existing instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate table operation response.
        /// </returns>
        public async Task<TableCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string dataFactoryName, TableCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TableCreateOrUpdateResponse response = await client.Tables.BeginCreateOrUpdateAsync(resourceGroupName, dataFactoryName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            TableCreateOrUpdateResponse result = await client.Tables.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Tables.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Create a new table instance or update an existing instance with raw
        /// json content.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='tableName'>
        /// Required. A unique table instance name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate table operation response.
        /// </returns>
        public async Task<TableCreateOrUpdateResponse> CreateOrUpdateWithRawJsonContentAsync(string resourceGroupName, string dataFactoryName, string tableName, TableCreateOrUpdateWithRawJsonContentParameters parameters, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("tableName", tableName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateWithRawJsonContentAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            TableCreateOrUpdateResponse response = await client.Tables.BeginCreateOrUpdateWithRawJsonContentAsync(resourceGroupName, dataFactoryName, tableName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            TableCreateOrUpdateResponse result = await client.Tables.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = 5;
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.Tables.GetCreateOrUpdateStatusAsync(response.Location, cancellationToken).ConfigureAwait(false);
                delayInSeconds = 5;
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Delete a table instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='tableName'>
        /// Required. Name of the table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        public async Task<LongRunningOperationResponse> DeleteAsync(string resourceGroupName, string dataFactoryName, string tableName, CancellationToken cancellationToken)
        {
            DataPipelineManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("tableName", tableName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse response = await client.Tables.BeginDeleteAsync(resourceGroupName, dataFactoryName, tableName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            LongRunningOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Gets a table instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='tableName'>
        /// Required. Name of the table.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get table operation response.
        /// </returns>
        public async Task<TableGetResponse> GetAsync(string resourceGroupName, string dataFactoryName, string tableName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (tableName == null)
            {
                throw new ArgumentNullException("tableName");
            }
            if (tableName != null && tableName.Length > 260)
            {
                throw new ArgumentOutOfRangeException("tableName");
            }
            if (Regex.IsMatch(tableName, "^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$") == false)
            {
                throw new ArgumentOutOfRangeException("tableName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                tracingParameters.Add("tableName", tableName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/tables/";
            url = url + Uri.EscapeDataString(tableName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Table tableInstance = new Table();
                            result.Table = tableInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                tableInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                TableProperties propertiesInstance = new TableProperties();
                                tableInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken structureArray = propertiesValue["structure"];
                                if (structureArray != null && structureArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken structureValue in ((JArray)structureArray))
                                    {
                                        DataElement dataElementInstance = new DataElement();
                                        propertiesInstance.Structure.Add(dataElementInstance);
                                        
                                        JToken nameValue2 = structureValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            dataElementInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = structureValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            dataElementInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken positionValue = structureValue["position"];
                                        if (positionValue != null && positionValue.Type != JTokenType.Null)
                                        {
                                            uint positionInstance = ((uint)positionValue);
                                            dataElementInstance.Position = positionInstance;
                                        }
                                        
                                        JToken typeValue = structureValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            dataElementInstance.Type = typeInstance;
                                        }
                                    }
                                }
                                
                                JToken locationValue = propertiesValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)locationValue["type"]);
                                    if (typeName == "AzureBlobLocation")
                                    {
                                        AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                        
                                        JToken folderPathValue = locationValue["folderPath"];
                                        if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                        {
                                            string folderPathInstance = ((string)folderPathValue);
                                            azureBlobLocationInstance.FolderPath = folderPathInstance;
                                        }
                                        
                                        JToken tableRootLocationValue = locationValue["tableRootLocation"];
                                        if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                        {
                                            string tableRootLocationInstance = ((string)tableRootLocationValue);
                                            azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                        }
                                        
                                        JToken fileNameValue = locationValue["fileName"];
                                        if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                        {
                                            string fileNameInstance = ((string)fileNameValue);
                                            azureBlobLocationInstance.FileName = fileNameInstance;
                                        }
                                        
                                        JToken partitionedByArray = locationValue["partitionedBy"];
                                        if (partitionedByArray != null && partitionedByArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken partitionedByValue in ((JArray)partitionedByArray))
                                            {
                                                Partition partitionInstance = new Partition();
                                                azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                                
                                                JToken nameValue3 = partitionedByValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    partitionInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken valueValue = partitionedByValue["value"];
                                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)valueValue["type"]);
                                                    if (typeName2 == "DateTime")
                                                    {
                                                        DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                        
                                                        JToken dateValue = valueValue["date"];
                                                        if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                        {
                                                            string dateInstance = ((string)dateValue);
                                                            dateTimePartitionValueInstance.Date = dateInstance;
                                                        }
                                                        
                                                        JToken formatValue = valueValue["format"];
                                                        if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                        {
                                                            string formatInstance = ((string)formatValue);
                                                            dateTimePartitionValueInstance.Format = formatInstance;
                                                        }
                                                        partitionInstance.Value = dateTimePartitionValueInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken formatValue2 = locationValue["format"];
                                        if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                        {
                                            string typeName3 = ((string)formatValue2["type"]);
                                            if (typeName3 == "TextFormat")
                                            {
                                                TextFormat textFormatInstance = new TextFormat();
                                                
                                                JToken columnDelimiterValue = formatValue2["columnDelimiter"];
                                                if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                    textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                                }
                                                
                                                JToken rowDelimiterValue = formatValue2["rowDelimiter"];
                                                if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                    textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                                }
                                                
                                                JToken escapeCharValue = formatValue2["escapeChar"];
                                                if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                                {
                                                    string escapeCharInstance = ((string)escapeCharValue);
                                                    textFormatInstance.EscapeChar = escapeCharInstance;
                                                }
                                                
                                                JToken quoteCharValue = formatValue2["quoteChar"];
                                                if (quoteCharValue != null && quoteCharValue.Type != JTokenType.Null)
                                                {
                                                    string quoteCharInstance = ((string)quoteCharValue);
                                                    textFormatInstance.QuoteChar = quoteCharInstance;
                                                }
                                                
                                                JToken nullValueValue = formatValue2["nullValue"];
                                                if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                                {
                                                    string nullValueInstance = ((string)nullValueValue);
                                                    textFormatInstance.NullValue = nullValueInstance;
                                                }
                                                
                                                JToken encodingNameValue = formatValue2["encodingName"];
                                                if (encodingNameValue != null && encodingNameValue.Type != JTokenType.Null)
                                                {
                                                    string encodingNameInstance = ((string)encodingNameValue);
                                                    textFormatInstance.EncodingName = encodingNameInstance;
                                                }
                                                
                                                JToken serializerValue = formatValue2["serializer"];
                                                if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance = ((string)serializerValue);
                                                    textFormatInstance.Serializer = serializerInstance;
                                                }
                                                
                                                JToken deserializerValue = formatValue2["deserializer"];
                                                if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance = ((string)deserializerValue);
                                                    textFormatInstance.Deserializer = deserializerInstance;
                                                }
                                                azureBlobLocationInstance.Format = textFormatInstance;
                                            }
                                            if (typeName3 == "AvroFormat")
                                            {
                                                AvroFormat avroFormatInstance = new AvroFormat();
                                                
                                                JToken serializerValue2 = formatValue2["serializer"];
                                                if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance2 = ((string)serializerValue2);
                                                    avroFormatInstance.Serializer = serializerInstance2;
                                                }
                                                
                                                JToken deserializerValue2 = formatValue2["deserializer"];
                                                if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance2 = ((string)deserializerValue2);
                                                    avroFormatInstance.Deserializer = deserializerInstance2;
                                                }
                                                azureBlobLocationInstance.Format = avroFormatInstance;
                                            }
                                        }
                                        
                                        JToken compressionValue = locationValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string typeName4 = ((string)compressionValue["type"]);
                                            if (typeName4 == "Deflate")
                                            {
                                                DeflateCompression deflateCompressionInstance = new DeflateCompression();
                                                
                                                JToken levelValue = compressionValue["level"];
                                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                {
                                                    string levelInstance = ((string)levelValue);
                                                    deflateCompressionInstance.Level = levelInstance;
                                                }
                                                azureBlobLocationInstance.Compression = deflateCompressionInstance;
                                            }
                                            if (typeName4 == "BZip2")
                                            {
                                                BZip2Compression bZip2CompressionInstance = new BZip2Compression();
                                                azureBlobLocationInstance.Compression = bZip2CompressionInstance;
                                            }
                                            if (typeName4 == "GZip")
                                            {
                                                GZipCompression gZipCompressionInstance = new GZipCompression();
                                                
                                                JToken levelValue2 = compressionValue["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    gZipCompressionInstance.Level = levelInstance2;
                                                }
                                                azureBlobLocationInstance.Compression = gZipCompressionInstance;
                                            }
                                        }
                                        
                                        JToken linkedServiceNameValue = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        propertiesInstance.Location = azureBlobLocationInstance;
                                    }
                                    if (typeName == "AzureTableLocation")
                                    {
                                        AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                        
                                        JToken tableNameValue = locationValue["tableName"];
                                        if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance = ((string)tableNameValue);
                                            azureTableLocationInstance.TableName = tableNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue2 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                            azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                        }
                                        propertiesInstance.Location = azureTableLocationInstance;
                                    }
                                    if (typeName == "AzureSqlTableLocation")
                                    {
                                        AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                        
                                        JToken tableNameValue2 = locationValue["tableName"];
                                        if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance2 = ((string)tableNameValue2);
                                            azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue3 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        propertiesInstance.Location = azureSqlTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesSqlServerTableLocation")
                                    {
                                        OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                        
                                        JToken tableNameValue3 = locationValue["tableName"];
                                        if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance3 = ((string)tableNameValue3);
                                            onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                        }
                                        
                                        JToken linkedServiceNameValue4 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                            onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                        }
                                        propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesFileSystemLocation")
                                    {
                                        OnPremisesFileSystemLocation onPremisesFileSystemLocationInstance = new OnPremisesFileSystemLocation();
                                        
                                        JToken folderPathValue2 = locationValue["folderPath"];
                                        if (folderPathValue2 != null && folderPathValue2.Type != JTokenType.Null)
                                        {
                                            string folderPathInstance2 = ((string)folderPathValue2);
                                            onPremisesFileSystemLocationInstance.FolderPath = folderPathInstance2;
                                        }
                                        
                                        JToken fileNameValue2 = locationValue["fileName"];
                                        if (fileNameValue2 != null && fileNameValue2.Type != JTokenType.Null)
                                        {
                                            string fileNameInstance2 = ((string)fileNameValue2);
                                            onPremisesFileSystemLocationInstance.FileName = fileNameInstance2;
                                        }
                                        
                                        JToken partitionedByArray2 = locationValue["partitionedBy"];
                                        if (partitionedByArray2 != null && partitionedByArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken partitionedByValue2 in ((JArray)partitionedByArray2))
                                            {
                                                Partition partitionInstance2 = new Partition();
                                                onPremisesFileSystemLocationInstance.PartitionedBy.Add(partitionInstance2);
                                                
                                                JToken nameValue4 = partitionedByValue2["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    partitionInstance2.Name = nameInstance4;
                                                }
                                                
                                                JToken valueValue2 = partitionedByValue2["value"];
                                                if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName5 = ((string)valueValue2["type"]);
                                                    if (typeName5 == "DateTime")
                                                    {
                                                        DateTimePartitionValue dateTimePartitionValueInstance2 = new DateTimePartitionValue();
                                                        
                                                        JToken dateValue2 = valueValue2["date"];
                                                        if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                        {
                                                            string dateInstance2 = ((string)dateValue2);
                                                            dateTimePartitionValueInstance2.Date = dateInstance2;
                                                        }
                                                        
                                                        JToken formatValue3 = valueValue2["format"];
                                                        if (formatValue3 != null && formatValue3.Type != JTokenType.Null)
                                                        {
                                                            string formatInstance2 = ((string)formatValue3);
                                                            dateTimePartitionValueInstance2.Format = formatInstance2;
                                                        }
                                                        partitionInstance2.Value = dateTimePartitionValueInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken formatValue4 = locationValue["format"];
                                        if (formatValue4 != null && formatValue4.Type != JTokenType.Null)
                                        {
                                            string typeName6 = ((string)formatValue4["type"]);
                                            if (typeName6 == "TextFormat")
                                            {
                                                TextFormat textFormatInstance2 = new TextFormat();
                                                
                                                JToken columnDelimiterValue2 = formatValue4["columnDelimiter"];
                                                if (columnDelimiterValue2 != null && columnDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string columnDelimiterInstance2 = ((string)columnDelimiterValue2);
                                                    textFormatInstance2.ColumnDelimiter = columnDelimiterInstance2;
                                                }
                                                
                                                JToken rowDelimiterValue2 = formatValue4["rowDelimiter"];
                                                if (rowDelimiterValue2 != null && rowDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string rowDelimiterInstance2 = ((string)rowDelimiterValue2);
                                                    textFormatInstance2.RowDelimiter = rowDelimiterInstance2;
                                                }
                                                
                                                JToken escapeCharValue2 = formatValue4["escapeChar"];
                                                if (escapeCharValue2 != null && escapeCharValue2.Type != JTokenType.Null)
                                                {
                                                    string escapeCharInstance2 = ((string)escapeCharValue2);
                                                    textFormatInstance2.EscapeChar = escapeCharInstance2;
                                                }
                                                
                                                JToken quoteCharValue2 = formatValue4["quoteChar"];
                                                if (quoteCharValue2 != null && quoteCharValue2.Type != JTokenType.Null)
                                                {
                                                    string quoteCharInstance2 = ((string)quoteCharValue2);
                                                    textFormatInstance2.QuoteChar = quoteCharInstance2;
                                                }
                                                
                                                JToken nullValueValue2 = formatValue4["nullValue"];
                                                if (nullValueValue2 != null && nullValueValue2.Type != JTokenType.Null)
                                                {
                                                    string nullValueInstance2 = ((string)nullValueValue2);
                                                    textFormatInstance2.NullValue = nullValueInstance2;
                                                }
                                                
                                                JToken encodingNameValue2 = formatValue4["encodingName"];
                                                if (encodingNameValue2 != null && encodingNameValue2.Type != JTokenType.Null)
                                                {
                                                    string encodingNameInstance2 = ((string)encodingNameValue2);
                                                    textFormatInstance2.EncodingName = encodingNameInstance2;
                                                }
                                                
                                                JToken serializerValue3 = formatValue4["serializer"];
                                                if (serializerValue3 != null && serializerValue3.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance3 = ((string)serializerValue3);
                                                    textFormatInstance2.Serializer = serializerInstance3;
                                                }
                                                
                                                JToken deserializerValue3 = formatValue4["deserializer"];
                                                if (deserializerValue3 != null && deserializerValue3.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance3 = ((string)deserializerValue3);
                                                    textFormatInstance2.Deserializer = deserializerInstance3;
                                                }
                                                onPremisesFileSystemLocationInstance.Format = textFormatInstance2;
                                            }
                                            if (typeName6 == "AvroFormat")
                                            {
                                                AvroFormat avroFormatInstance2 = new AvroFormat();
                                                
                                                JToken serializerValue4 = formatValue4["serializer"];
                                                if (serializerValue4 != null && serializerValue4.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance4 = ((string)serializerValue4);
                                                    avroFormatInstance2.Serializer = serializerInstance4;
                                                }
                                                
                                                JToken deserializerValue4 = formatValue4["deserializer"];
                                                if (deserializerValue4 != null && deserializerValue4.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance4 = ((string)deserializerValue4);
                                                    avroFormatInstance2.Deserializer = deserializerInstance4;
                                                }
                                                onPremisesFileSystemLocationInstance.Format = avroFormatInstance2;
                                            }
                                        }
                                        
                                        JToken compressionValue2 = locationValue["compression"];
                                        if (compressionValue2 != null && compressionValue2.Type != JTokenType.Null)
                                        {
                                            string typeName7 = ((string)compressionValue2["type"]);
                                            if (typeName7 == "Deflate")
                                            {
                                                DeflateCompression deflateCompressionInstance2 = new DeflateCompression();
                                                
                                                JToken levelValue3 = compressionValue2["level"];
                                                if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                {
                                                    string levelInstance3 = ((string)levelValue3);
                                                    deflateCompressionInstance2.Level = levelInstance3;
                                                }
                                                onPremisesFileSystemLocationInstance.Compression = deflateCompressionInstance2;
                                            }
                                            if (typeName7 == "BZip2")
                                            {
                                                BZip2Compression bZip2CompressionInstance2 = new BZip2Compression();
                                                onPremisesFileSystemLocationInstance.Compression = bZip2CompressionInstance2;
                                            }
                                            if (typeName7 == "GZip")
                                            {
                                                GZipCompression gZipCompressionInstance2 = new GZipCompression();
                                                
                                                JToken levelValue4 = compressionValue2["level"];
                                                if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                {
                                                    string levelInstance4 = ((string)levelValue4);
                                                    gZipCompressionInstance2.Level = levelInstance4;
                                                }
                                                onPremisesFileSystemLocationInstance.Compression = gZipCompressionInstance2;
                                            }
                                        }
                                        
                                        JToken fileFilterValue = locationValue["fileFilter"];
                                        if (fileFilterValue != null && fileFilterValue.Type != JTokenType.Null)
                                        {
                                            string fileFilterInstance = ((string)fileFilterValue);
                                            onPremisesFileSystemLocationInstance.FileFilter = fileFilterInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue5 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                            onPremisesFileSystemLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                        }
                                        propertiesInstance.Location = onPremisesFileSystemLocationInstance;
                                    }
                                    if (typeName == "OnPremisesOracleTableLocation")
                                    {
                                        OnPremisesOracleTableLocation onPremisesOracleTableLocationInstance = new OnPremisesOracleTableLocation();
                                        
                                        JToken tableNameValue4 = locationValue["tableName"];
                                        if (tableNameValue4 != null && tableNameValue4.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance4 = ((string)tableNameValue4);
                                            onPremisesOracleTableLocationInstance.TableName = tableNameInstance4;
                                        }
                                        
                                        JToken linkedServiceNameValue6 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue6 != null && linkedServiceNameValue6.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance6 = ((string)linkedServiceNameValue6);
                                            onPremisesOracleTableLocationInstance.LinkedServiceName = linkedServiceNameInstance6;
                                        }
                                        propertiesInstance.Location = onPremisesOracleTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesOdbcTableLocation")
                                    {
                                        OnPremisesOdbcTableLocation onPremisesOdbcTableLocationInstance = new OnPremisesOdbcTableLocation();
                                        
                                        JToken linkedServiceNameValue7 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue7 != null && linkedServiceNameValue7.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance7 = ((string)linkedServiceNameValue7);
                                            onPremisesOdbcTableLocationInstance.LinkedServiceName = linkedServiceNameInstance7;
                                        }
                                        propertiesInstance.Location = onPremisesOdbcTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesHdfsTableLocation")
                                    {
                                        OnPremisesHdfsTableLocation onPremisesHdfsTableLocationInstance = new OnPremisesHdfsTableLocation();
                                        
                                        JToken linkedServiceNameValue8 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue8 != null && linkedServiceNameValue8.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance8 = ((string)linkedServiceNameValue8);
                                            onPremisesHdfsTableLocationInstance.LinkedServiceName = linkedServiceNameInstance8;
                                        }
                                        propertiesInstance.Location = onPremisesHdfsTableLocationInstance;
                                    }
                                    if (typeName == "ODataTableLocation")
                                    {
                                        ODataTableLocation oDataTableLocationInstance = new ODataTableLocation();
                                        
                                        JToken resourceValue = locationValue["resource"];
                                        if (resourceValue != null && resourceValue.Type != JTokenType.Null)
                                        {
                                            string resourceInstance = ((string)resourceValue);
                                            oDataTableLocationInstance.Resource = resourceInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue9 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue9 != null && linkedServiceNameValue9.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance9 = ((string)linkedServiceNameValue9);
                                            oDataTableLocationInstance.LinkedServiceName = linkedServiceNameInstance9;
                                        }
                                        propertiesInstance.Location = oDataTableLocationInstance;
                                    }
                                    if (typeName == "CustomLocation")
                                    {
                                        CustomLocation customLocationInstance = new CustomLocation();
                                        
                                        JToken extendedPropertiesSequenceElement = ((JToken)locationValue["extendedProperties"]);
                                        if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in extendedPropertiesSequenceElement)
                                            {
                                                string extendedPropertiesKey = ((string)property.Name);
                                                string extendedPropertiesValue = ((string)property.Value);
                                                customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                            }
                                        }
                                        
                                        JToken linkedServiceNameValue10 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue10 != null && linkedServiceNameValue10.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance10 = ((string)linkedServiceNameValue10);
                                            customLocationInstance.LinkedServiceName = linkedServiceNameInstance10;
                                        }
                                        propertiesInstance.Location = customLocationInstance;
                                    }
                                    if (typeName == "RelationalTableLocation")
                                    {
                                        RelationalTableLocation relationalTableLocationInstance = new RelationalTableLocation();
                                        
                                        JToken tableNameValue5 = locationValue["tableName"];
                                        if (tableNameValue5 != null && tableNameValue5.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance5 = ((string)tableNameValue5);
                                            relationalTableLocationInstance.TableName = tableNameInstance5;
                                        }
                                        
                                        JToken linkedServiceNameValue11 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue11 != null && linkedServiceNameValue11.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance11 = ((string)linkedServiceNameValue11);
                                            relationalTableLocationInstance.LinkedServiceName = linkedServiceNameInstance11;
                                        }
                                        propertiesInstance.Location = relationalTableLocationInstance;
                                    }
                                    if (typeName == "DocumentDbCollectionLocation")
                                    {
                                        DocumentDbCollectionLocation documentDbCollectionLocationInstance = new DocumentDbCollectionLocation();
                                        
                                        JToken collectionNameValue = locationValue["collectionName"];
                                        if (collectionNameValue != null && collectionNameValue.Type != JTokenType.Null)
                                        {
                                            string collectionNameInstance = ((string)collectionNameValue);
                                            documentDbCollectionLocationInstance.CollectionName = collectionNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue12 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue12 != null && linkedServiceNameValue12.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance12 = ((string)linkedServiceNameValue12);
                                            documentDbCollectionLocationInstance.LinkedServiceName = linkedServiceNameInstance12;
                                        }
                                        propertiesInstance.Location = documentDbCollectionLocationInstance;
                                    }
                                }
                                
                                JToken availabilityValue = propertiesValue["availability"];
                                if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                {
                                    Availability availabilityInstance = new Availability();
                                    propertiesInstance.Availability = availabilityInstance;
                                    
                                    JToken frequencyValue = availabilityValue["frequency"];
                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                    {
                                        string frequencyInstance = ((string)frequencyValue);
                                        availabilityInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken intervalValue = availabilityValue["interval"];
                                    if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                    {
                                        uint intervalInstance = ((uint)intervalValue);
                                        availabilityInstance.Interval = intervalInstance;
                                    }
                                    
                                    JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                    if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                        availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                    }
                                    
                                    JToken offsetValue = availabilityValue["offset"];
                                    if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                        availabilityInstance.Offset = offsetInstance;
                                    }
                                    
                                    JToken waitOnExternalValue = availabilityValue["waitOnExternal"];
                                    if (waitOnExternalValue != null && waitOnExternalValue.Type != JTokenType.Null)
                                    {
                                        WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                        availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                        
                                        JToken dataDelayValue = waitOnExternalValue["dataDelay"];
                                        if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.DataDelay = dataDelayInstance;
                                        }
                                        
                                        JToken retryIntervalValue = waitOnExternalValue["retryInterval"];
                                        if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                        }
                                        
                                        JToken retryTimeoutValue = waitOnExternalValue["retryTimeout"];
                                        if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                        }
                                        
                                        JToken maximumRetryValue = waitOnExternalValue["maximumRetry"];
                                        if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                        {
                                            int maximumRetryInstance = ((int)maximumRetryValue);
                                            waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                        }
                                    }
                                    
                                    JToken styleValue = availabilityValue["style"];
                                    if (styleValue != null && styleValue.Type != JTokenType.Null)
                                    {
                                        string styleInstance = ((string)styleValue);
                                        availabilityInstance.Style = styleInstance;
                                    }
                                }
                                
                                JToken policyValue = propertiesValue["policy"];
                                if (policyValue != null && policyValue.Type != JTokenType.Null)
                                {
                                    Policy policyInstance = new Policy();
                                    propertiesInstance.Policy = policyInstance;
                                    
                                    JToken validationValue = policyValue["validation"];
                                    if (validationValue != null && validationValue.Type != JTokenType.Null)
                                    {
                                        ValidationPolicy validationInstance = new ValidationPolicy();
                                        policyInstance.Validation = validationInstance;
                                        
                                        JToken minimumRowsValue = validationValue["minimumRows"];
                                        if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                        {
                                            long minimumRowsInstance = ((long)minimumRowsValue);
                                            validationInstance.MinimumRows = minimumRowsInstance;
                                        }
                                        
                                        JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                        if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                        {
                                            double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                            validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                        }
                                        
                                        JToken validationPriorityOrderValue = validationValue["validationPriorityOrder"];
                                        if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                        {
                                            string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                            validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                        }
                                    }
                                    
                                    JToken latencyValue = policyValue["latency"];
                                    if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                    {
                                        LatencyPolicy latencyInstance = new LatencyPolicy();
                                        policyInstance.Latency = latencyInstance;
                                        
                                        JToken latencyLengthValue = latencyValue["latencyLength"];
                                        if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                            latencyInstance.LatencyLength = latencyLengthInstance;
                                        }
                                    }
                                }
                                
                                JToken publishedValue = propertiesValue["published"];
                                if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                                {
                                    bool publishedInstance = ((bool)publishedValue);
                                    propertiesInstance.Published = publishedInstance;
                                }
                                
                                JToken createTimeValue = propertiesValue["createTime"];
                                if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime createTimeInstance = ((DateTime)createTimeValue);
                                    propertiesInstance.CreateTime = createTimeInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The CreateOrUpdate table operation response.
        /// </returns>
        public async Task<TableCreateOrUpdateResponse> GetCreateOrUpdateStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateOrUpdateStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                httpRequest.Headers.Add("x-ms-version", "2015-01-01-preview");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Table tableInstance = new Table();
                            result.Table = tableInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                tableInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                TableProperties propertiesInstance = new TableProperties();
                                tableInstance.Properties = propertiesInstance;
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken structureArray = propertiesValue["structure"];
                                if (structureArray != null && structureArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken structureValue in ((JArray)structureArray))
                                    {
                                        DataElement dataElementInstance = new DataElement();
                                        propertiesInstance.Structure.Add(dataElementInstance);
                                        
                                        JToken nameValue2 = structureValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            dataElementInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = structureValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            dataElementInstance.Description = descriptionInstance2;
                                        }
                                        
                                        JToken positionValue = structureValue["position"];
                                        if (positionValue != null && positionValue.Type != JTokenType.Null)
                                        {
                                            uint positionInstance = ((uint)positionValue);
                                            dataElementInstance.Position = positionInstance;
                                        }
                                        
                                        JToken typeValue = structureValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            dataElementInstance.Type = typeInstance;
                                        }
                                    }
                                }
                                
                                JToken locationValue = propertiesValue["location"];
                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)locationValue["type"]);
                                    if (typeName == "AzureBlobLocation")
                                    {
                                        AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                        
                                        JToken folderPathValue = locationValue["folderPath"];
                                        if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                        {
                                            string folderPathInstance = ((string)folderPathValue);
                                            azureBlobLocationInstance.FolderPath = folderPathInstance;
                                        }
                                        
                                        JToken tableRootLocationValue = locationValue["tableRootLocation"];
                                        if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                        {
                                            string tableRootLocationInstance = ((string)tableRootLocationValue);
                                            azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                        }
                                        
                                        JToken fileNameValue = locationValue["fileName"];
                                        if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                        {
                                            string fileNameInstance = ((string)fileNameValue);
                                            azureBlobLocationInstance.FileName = fileNameInstance;
                                        }
                                        
                                        JToken partitionedByArray = locationValue["partitionedBy"];
                                        if (partitionedByArray != null && partitionedByArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken partitionedByValue in ((JArray)partitionedByArray))
                                            {
                                                Partition partitionInstance = new Partition();
                                                azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                                
                                                JToken nameValue3 = partitionedByValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    partitionInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken valueValue = partitionedByValue["value"];
                                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)valueValue["type"]);
                                                    if (typeName2 == "DateTime")
                                                    {
                                                        DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                        
                                                        JToken dateValue = valueValue["date"];
                                                        if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                        {
                                                            string dateInstance = ((string)dateValue);
                                                            dateTimePartitionValueInstance.Date = dateInstance;
                                                        }
                                                        
                                                        JToken formatValue = valueValue["format"];
                                                        if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                        {
                                                            string formatInstance = ((string)formatValue);
                                                            dateTimePartitionValueInstance.Format = formatInstance;
                                                        }
                                                        partitionInstance.Value = dateTimePartitionValueInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken formatValue2 = locationValue["format"];
                                        if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                        {
                                            string typeName3 = ((string)formatValue2["type"]);
                                            if (typeName3 == "TextFormat")
                                            {
                                                TextFormat textFormatInstance = new TextFormat();
                                                
                                                JToken columnDelimiterValue = formatValue2["columnDelimiter"];
                                                if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                    textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                                }
                                                
                                                JToken rowDelimiterValue = formatValue2["rowDelimiter"];
                                                if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                                {
                                                    string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                    textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                                }
                                                
                                                JToken escapeCharValue = formatValue2["escapeChar"];
                                                if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                                {
                                                    string escapeCharInstance = ((string)escapeCharValue);
                                                    textFormatInstance.EscapeChar = escapeCharInstance;
                                                }
                                                
                                                JToken quoteCharValue = formatValue2["quoteChar"];
                                                if (quoteCharValue != null && quoteCharValue.Type != JTokenType.Null)
                                                {
                                                    string quoteCharInstance = ((string)quoteCharValue);
                                                    textFormatInstance.QuoteChar = quoteCharInstance;
                                                }
                                                
                                                JToken nullValueValue = formatValue2["nullValue"];
                                                if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                                {
                                                    string nullValueInstance = ((string)nullValueValue);
                                                    textFormatInstance.NullValue = nullValueInstance;
                                                }
                                                
                                                JToken encodingNameValue = formatValue2["encodingName"];
                                                if (encodingNameValue != null && encodingNameValue.Type != JTokenType.Null)
                                                {
                                                    string encodingNameInstance = ((string)encodingNameValue);
                                                    textFormatInstance.EncodingName = encodingNameInstance;
                                                }
                                                
                                                JToken serializerValue = formatValue2["serializer"];
                                                if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance = ((string)serializerValue);
                                                    textFormatInstance.Serializer = serializerInstance;
                                                }
                                                
                                                JToken deserializerValue = formatValue2["deserializer"];
                                                if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance = ((string)deserializerValue);
                                                    textFormatInstance.Deserializer = deserializerInstance;
                                                }
                                                azureBlobLocationInstance.Format = textFormatInstance;
                                            }
                                            if (typeName3 == "AvroFormat")
                                            {
                                                AvroFormat avroFormatInstance = new AvroFormat();
                                                
                                                JToken serializerValue2 = formatValue2["serializer"];
                                                if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance2 = ((string)serializerValue2);
                                                    avroFormatInstance.Serializer = serializerInstance2;
                                                }
                                                
                                                JToken deserializerValue2 = formatValue2["deserializer"];
                                                if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance2 = ((string)deserializerValue2);
                                                    avroFormatInstance.Deserializer = deserializerInstance2;
                                                }
                                                azureBlobLocationInstance.Format = avroFormatInstance;
                                            }
                                        }
                                        
                                        JToken compressionValue = locationValue["compression"];
                                        if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                        {
                                            string typeName4 = ((string)compressionValue["type"]);
                                            if (typeName4 == "Deflate")
                                            {
                                                DeflateCompression deflateCompressionInstance = new DeflateCompression();
                                                
                                                JToken levelValue = compressionValue["level"];
                                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                {
                                                    string levelInstance = ((string)levelValue);
                                                    deflateCompressionInstance.Level = levelInstance;
                                                }
                                                azureBlobLocationInstance.Compression = deflateCompressionInstance;
                                            }
                                            if (typeName4 == "BZip2")
                                            {
                                                BZip2Compression bZip2CompressionInstance = new BZip2Compression();
                                                azureBlobLocationInstance.Compression = bZip2CompressionInstance;
                                            }
                                            if (typeName4 == "GZip")
                                            {
                                                GZipCompression gZipCompressionInstance = new GZipCompression();
                                                
                                                JToken levelValue2 = compressionValue["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    gZipCompressionInstance.Level = levelInstance2;
                                                }
                                                azureBlobLocationInstance.Compression = gZipCompressionInstance;
                                            }
                                        }
                                        
                                        JToken linkedServiceNameValue = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                            azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                        }
                                        propertiesInstance.Location = azureBlobLocationInstance;
                                    }
                                    if (typeName == "AzureTableLocation")
                                    {
                                        AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                        
                                        JToken tableNameValue = locationValue["tableName"];
                                        if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance = ((string)tableNameValue);
                                            azureTableLocationInstance.TableName = tableNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue2 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                            azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                        }
                                        propertiesInstance.Location = azureTableLocationInstance;
                                    }
                                    if (typeName == "AzureSqlTableLocation")
                                    {
                                        AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                        
                                        JToken tableNameValue2 = locationValue["tableName"];
                                        if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance2 = ((string)tableNameValue2);
                                            azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                        }
                                        
                                        JToken linkedServiceNameValue3 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                            azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                        }
                                        propertiesInstance.Location = azureSqlTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesSqlServerTableLocation")
                                    {
                                        OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                        
                                        JToken tableNameValue3 = locationValue["tableName"];
                                        if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance3 = ((string)tableNameValue3);
                                            onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                        }
                                        
                                        JToken linkedServiceNameValue4 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                            onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                        }
                                        propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesFileSystemLocation")
                                    {
                                        OnPremisesFileSystemLocation onPremisesFileSystemLocationInstance = new OnPremisesFileSystemLocation();
                                        
                                        JToken folderPathValue2 = locationValue["folderPath"];
                                        if (folderPathValue2 != null && folderPathValue2.Type != JTokenType.Null)
                                        {
                                            string folderPathInstance2 = ((string)folderPathValue2);
                                            onPremisesFileSystemLocationInstance.FolderPath = folderPathInstance2;
                                        }
                                        
                                        JToken fileNameValue2 = locationValue["fileName"];
                                        if (fileNameValue2 != null && fileNameValue2.Type != JTokenType.Null)
                                        {
                                            string fileNameInstance2 = ((string)fileNameValue2);
                                            onPremisesFileSystemLocationInstance.FileName = fileNameInstance2;
                                        }
                                        
                                        JToken partitionedByArray2 = locationValue["partitionedBy"];
                                        if (partitionedByArray2 != null && partitionedByArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken partitionedByValue2 in ((JArray)partitionedByArray2))
                                            {
                                                Partition partitionInstance2 = new Partition();
                                                onPremisesFileSystemLocationInstance.PartitionedBy.Add(partitionInstance2);
                                                
                                                JToken nameValue4 = partitionedByValue2["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    partitionInstance2.Name = nameInstance4;
                                                }
                                                
                                                JToken valueValue2 = partitionedByValue2["value"];
                                                if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName5 = ((string)valueValue2["type"]);
                                                    if (typeName5 == "DateTime")
                                                    {
                                                        DateTimePartitionValue dateTimePartitionValueInstance2 = new DateTimePartitionValue();
                                                        
                                                        JToken dateValue2 = valueValue2["date"];
                                                        if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                        {
                                                            string dateInstance2 = ((string)dateValue2);
                                                            dateTimePartitionValueInstance2.Date = dateInstance2;
                                                        }
                                                        
                                                        JToken formatValue3 = valueValue2["format"];
                                                        if (formatValue3 != null && formatValue3.Type != JTokenType.Null)
                                                        {
                                                            string formatInstance2 = ((string)formatValue3);
                                                            dateTimePartitionValueInstance2.Format = formatInstance2;
                                                        }
                                                        partitionInstance2.Value = dateTimePartitionValueInstance2;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken formatValue4 = locationValue["format"];
                                        if (formatValue4 != null && formatValue4.Type != JTokenType.Null)
                                        {
                                            string typeName6 = ((string)formatValue4["type"]);
                                            if (typeName6 == "TextFormat")
                                            {
                                                TextFormat textFormatInstance2 = new TextFormat();
                                                
                                                JToken columnDelimiterValue2 = formatValue4["columnDelimiter"];
                                                if (columnDelimiterValue2 != null && columnDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string columnDelimiterInstance2 = ((string)columnDelimiterValue2);
                                                    textFormatInstance2.ColumnDelimiter = columnDelimiterInstance2;
                                                }
                                                
                                                JToken rowDelimiterValue2 = formatValue4["rowDelimiter"];
                                                if (rowDelimiterValue2 != null && rowDelimiterValue2.Type != JTokenType.Null)
                                                {
                                                    string rowDelimiterInstance2 = ((string)rowDelimiterValue2);
                                                    textFormatInstance2.RowDelimiter = rowDelimiterInstance2;
                                                }
                                                
                                                JToken escapeCharValue2 = formatValue4["escapeChar"];
                                                if (escapeCharValue2 != null && escapeCharValue2.Type != JTokenType.Null)
                                                {
                                                    string escapeCharInstance2 = ((string)escapeCharValue2);
                                                    textFormatInstance2.EscapeChar = escapeCharInstance2;
                                                }
                                                
                                                JToken quoteCharValue2 = formatValue4["quoteChar"];
                                                if (quoteCharValue2 != null && quoteCharValue2.Type != JTokenType.Null)
                                                {
                                                    string quoteCharInstance2 = ((string)quoteCharValue2);
                                                    textFormatInstance2.QuoteChar = quoteCharInstance2;
                                                }
                                                
                                                JToken nullValueValue2 = formatValue4["nullValue"];
                                                if (nullValueValue2 != null && nullValueValue2.Type != JTokenType.Null)
                                                {
                                                    string nullValueInstance2 = ((string)nullValueValue2);
                                                    textFormatInstance2.NullValue = nullValueInstance2;
                                                }
                                                
                                                JToken encodingNameValue2 = formatValue4["encodingName"];
                                                if (encodingNameValue2 != null && encodingNameValue2.Type != JTokenType.Null)
                                                {
                                                    string encodingNameInstance2 = ((string)encodingNameValue2);
                                                    textFormatInstance2.EncodingName = encodingNameInstance2;
                                                }
                                                
                                                JToken serializerValue3 = formatValue4["serializer"];
                                                if (serializerValue3 != null && serializerValue3.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance3 = ((string)serializerValue3);
                                                    textFormatInstance2.Serializer = serializerInstance3;
                                                }
                                                
                                                JToken deserializerValue3 = formatValue4["deserializer"];
                                                if (deserializerValue3 != null && deserializerValue3.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance3 = ((string)deserializerValue3);
                                                    textFormatInstance2.Deserializer = deserializerInstance3;
                                                }
                                                onPremisesFileSystemLocationInstance.Format = textFormatInstance2;
                                            }
                                            if (typeName6 == "AvroFormat")
                                            {
                                                AvroFormat avroFormatInstance2 = new AvroFormat();
                                                
                                                JToken serializerValue4 = formatValue4["serializer"];
                                                if (serializerValue4 != null && serializerValue4.Type != JTokenType.Null)
                                                {
                                                    string serializerInstance4 = ((string)serializerValue4);
                                                    avroFormatInstance2.Serializer = serializerInstance4;
                                                }
                                                
                                                JToken deserializerValue4 = formatValue4["deserializer"];
                                                if (deserializerValue4 != null && deserializerValue4.Type != JTokenType.Null)
                                                {
                                                    string deserializerInstance4 = ((string)deserializerValue4);
                                                    avroFormatInstance2.Deserializer = deserializerInstance4;
                                                }
                                                onPremisesFileSystemLocationInstance.Format = avroFormatInstance2;
                                            }
                                        }
                                        
                                        JToken compressionValue2 = locationValue["compression"];
                                        if (compressionValue2 != null && compressionValue2.Type != JTokenType.Null)
                                        {
                                            string typeName7 = ((string)compressionValue2["type"]);
                                            if (typeName7 == "Deflate")
                                            {
                                                DeflateCompression deflateCompressionInstance2 = new DeflateCompression();
                                                
                                                JToken levelValue3 = compressionValue2["level"];
                                                if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                {
                                                    string levelInstance3 = ((string)levelValue3);
                                                    deflateCompressionInstance2.Level = levelInstance3;
                                                }
                                                onPremisesFileSystemLocationInstance.Compression = deflateCompressionInstance2;
                                            }
                                            if (typeName7 == "BZip2")
                                            {
                                                BZip2Compression bZip2CompressionInstance2 = new BZip2Compression();
                                                onPremisesFileSystemLocationInstance.Compression = bZip2CompressionInstance2;
                                            }
                                            if (typeName7 == "GZip")
                                            {
                                                GZipCompression gZipCompressionInstance2 = new GZipCompression();
                                                
                                                JToken levelValue4 = compressionValue2["level"];
                                                if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                {
                                                    string levelInstance4 = ((string)levelValue4);
                                                    gZipCompressionInstance2.Level = levelInstance4;
                                                }
                                                onPremisesFileSystemLocationInstance.Compression = gZipCompressionInstance2;
                                            }
                                        }
                                        
                                        JToken fileFilterValue = locationValue["fileFilter"];
                                        if (fileFilterValue != null && fileFilterValue.Type != JTokenType.Null)
                                        {
                                            string fileFilterInstance = ((string)fileFilterValue);
                                            onPremisesFileSystemLocationInstance.FileFilter = fileFilterInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue5 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                            onPremisesFileSystemLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                        }
                                        propertiesInstance.Location = onPremisesFileSystemLocationInstance;
                                    }
                                    if (typeName == "OnPremisesOracleTableLocation")
                                    {
                                        OnPremisesOracleTableLocation onPremisesOracleTableLocationInstance = new OnPremisesOracleTableLocation();
                                        
                                        JToken tableNameValue4 = locationValue["tableName"];
                                        if (tableNameValue4 != null && tableNameValue4.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance4 = ((string)tableNameValue4);
                                            onPremisesOracleTableLocationInstance.TableName = tableNameInstance4;
                                        }
                                        
                                        JToken linkedServiceNameValue6 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue6 != null && linkedServiceNameValue6.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance6 = ((string)linkedServiceNameValue6);
                                            onPremisesOracleTableLocationInstance.LinkedServiceName = linkedServiceNameInstance6;
                                        }
                                        propertiesInstance.Location = onPremisesOracleTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesOdbcTableLocation")
                                    {
                                        OnPremisesOdbcTableLocation onPremisesOdbcTableLocationInstance = new OnPremisesOdbcTableLocation();
                                        
                                        JToken linkedServiceNameValue7 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue7 != null && linkedServiceNameValue7.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance7 = ((string)linkedServiceNameValue7);
                                            onPremisesOdbcTableLocationInstance.LinkedServiceName = linkedServiceNameInstance7;
                                        }
                                        propertiesInstance.Location = onPremisesOdbcTableLocationInstance;
                                    }
                                    if (typeName == "OnPremisesHdfsTableLocation")
                                    {
                                        OnPremisesHdfsTableLocation onPremisesHdfsTableLocationInstance = new OnPremisesHdfsTableLocation();
                                        
                                        JToken linkedServiceNameValue8 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue8 != null && linkedServiceNameValue8.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance8 = ((string)linkedServiceNameValue8);
                                            onPremisesHdfsTableLocationInstance.LinkedServiceName = linkedServiceNameInstance8;
                                        }
                                        propertiesInstance.Location = onPremisesHdfsTableLocationInstance;
                                    }
                                    if (typeName == "ODataTableLocation")
                                    {
                                        ODataTableLocation oDataTableLocationInstance = new ODataTableLocation();
                                        
                                        JToken resourceValue = locationValue["resource"];
                                        if (resourceValue != null && resourceValue.Type != JTokenType.Null)
                                        {
                                            string resourceInstance = ((string)resourceValue);
                                            oDataTableLocationInstance.Resource = resourceInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue9 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue9 != null && linkedServiceNameValue9.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance9 = ((string)linkedServiceNameValue9);
                                            oDataTableLocationInstance.LinkedServiceName = linkedServiceNameInstance9;
                                        }
                                        propertiesInstance.Location = oDataTableLocationInstance;
                                    }
                                    if (typeName == "CustomLocation")
                                    {
                                        CustomLocation customLocationInstance = new CustomLocation();
                                        
                                        JToken extendedPropertiesSequenceElement = ((JToken)locationValue["extendedProperties"]);
                                        if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in extendedPropertiesSequenceElement)
                                            {
                                                string extendedPropertiesKey = ((string)property.Name);
                                                string extendedPropertiesValue = ((string)property.Value);
                                                customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                            }
                                        }
                                        
                                        JToken linkedServiceNameValue10 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue10 != null && linkedServiceNameValue10.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance10 = ((string)linkedServiceNameValue10);
                                            customLocationInstance.LinkedServiceName = linkedServiceNameInstance10;
                                        }
                                        propertiesInstance.Location = customLocationInstance;
                                    }
                                    if (typeName == "RelationalTableLocation")
                                    {
                                        RelationalTableLocation relationalTableLocationInstance = new RelationalTableLocation();
                                        
                                        JToken tableNameValue5 = locationValue["tableName"];
                                        if (tableNameValue5 != null && tableNameValue5.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance5 = ((string)tableNameValue5);
                                            relationalTableLocationInstance.TableName = tableNameInstance5;
                                        }
                                        
                                        JToken linkedServiceNameValue11 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue11 != null && linkedServiceNameValue11.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance11 = ((string)linkedServiceNameValue11);
                                            relationalTableLocationInstance.LinkedServiceName = linkedServiceNameInstance11;
                                        }
                                        propertiesInstance.Location = relationalTableLocationInstance;
                                    }
                                    if (typeName == "DocumentDbCollectionLocation")
                                    {
                                        DocumentDbCollectionLocation documentDbCollectionLocationInstance = new DocumentDbCollectionLocation();
                                        
                                        JToken collectionNameValue = locationValue["collectionName"];
                                        if (collectionNameValue != null && collectionNameValue.Type != JTokenType.Null)
                                        {
                                            string collectionNameInstance = ((string)collectionNameValue);
                                            documentDbCollectionLocationInstance.CollectionName = collectionNameInstance;
                                        }
                                        
                                        JToken linkedServiceNameValue12 = locationValue["linkedServiceName"];
                                        if (linkedServiceNameValue12 != null && linkedServiceNameValue12.Type != JTokenType.Null)
                                        {
                                            string linkedServiceNameInstance12 = ((string)linkedServiceNameValue12);
                                            documentDbCollectionLocationInstance.LinkedServiceName = linkedServiceNameInstance12;
                                        }
                                        propertiesInstance.Location = documentDbCollectionLocationInstance;
                                    }
                                }
                                
                                JToken availabilityValue = propertiesValue["availability"];
                                if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                {
                                    Availability availabilityInstance = new Availability();
                                    propertiesInstance.Availability = availabilityInstance;
                                    
                                    JToken frequencyValue = availabilityValue["frequency"];
                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                    {
                                        string frequencyInstance = ((string)frequencyValue);
                                        availabilityInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken intervalValue = availabilityValue["interval"];
                                    if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                    {
                                        uint intervalInstance = ((uint)intervalValue);
                                        availabilityInstance.Interval = intervalInstance;
                                    }
                                    
                                    JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                    if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                        availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                    }
                                    
                                    JToken offsetValue = availabilityValue["offset"];
                                    if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                        availabilityInstance.Offset = offsetInstance;
                                    }
                                    
                                    JToken waitOnExternalValue = availabilityValue["waitOnExternal"];
                                    if (waitOnExternalValue != null && waitOnExternalValue.Type != JTokenType.Null)
                                    {
                                        WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                        availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                        
                                        JToken dataDelayValue = waitOnExternalValue["dataDelay"];
                                        if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.DataDelay = dataDelayInstance;
                                        }
                                        
                                        JToken retryIntervalValue = waitOnExternalValue["retryInterval"];
                                        if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                        }
                                        
                                        JToken retryTimeoutValue = waitOnExternalValue["retryTimeout"];
                                        if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                            waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                        }
                                        
                                        JToken maximumRetryValue = waitOnExternalValue["maximumRetry"];
                                        if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                        {
                                            int maximumRetryInstance = ((int)maximumRetryValue);
                                            waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                        }
                                    }
                                    
                                    JToken styleValue = availabilityValue["style"];
                                    if (styleValue != null && styleValue.Type != JTokenType.Null)
                                    {
                                        string styleInstance = ((string)styleValue);
                                        availabilityInstance.Style = styleInstance;
                                    }
                                }
                                
                                JToken policyValue = propertiesValue["policy"];
                                if (policyValue != null && policyValue.Type != JTokenType.Null)
                                {
                                    Policy policyInstance = new Policy();
                                    propertiesInstance.Policy = policyInstance;
                                    
                                    JToken validationValue = policyValue["validation"];
                                    if (validationValue != null && validationValue.Type != JTokenType.Null)
                                    {
                                        ValidationPolicy validationInstance = new ValidationPolicy();
                                        policyInstance.Validation = validationInstance;
                                        
                                        JToken minimumRowsValue = validationValue["minimumRows"];
                                        if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                        {
                                            long minimumRowsInstance = ((long)minimumRowsValue);
                                            validationInstance.MinimumRows = minimumRowsInstance;
                                        }
                                        
                                        JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                        if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                        {
                                            double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                            validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                        }
                                        
                                        JToken validationPriorityOrderValue = validationValue["validationPriorityOrder"];
                                        if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                        {
                                            string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                            validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                        }
                                    }
                                    
                                    JToken latencyValue = policyValue["latency"];
                                    if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                    {
                                        LatencyPolicy latencyInstance = new LatencyPolicy();
                                        policyInstance.Latency = latencyInstance;
                                        
                                        JToken latencyLengthValue = latencyValue["latencyLength"];
                                        if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                            latencyInstance.LatencyLength = latencyLengthInstance;
                                        }
                                    }
                                }
                                
                                JToken publishedValue = propertiesValue["published"];
                                if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                                {
                                    bool publishedInstance = ((bool)publishedValue);
                                    propertiesInstance.Published = publishedInstance;
                                }
                                
                                JToken createTimeValue = propertiesValue["createTime"];
                                if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime createTimeInstance = ((DateTime)createTimeValue);
                                    propertiesInstance.CreateTime = createTimeInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken errorMessageValue = propertiesValue["errorMessage"];
                                if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                {
                                    string errorMessageInstance = ((string)errorMessageValue);
                                    propertiesInstance.ErrorMessage = errorMessageInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    result.Location = url;
                    if (result.Table != null && result.Table.Properties != null && result.Table.Properties.ProvisioningState == "Failed")
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (result.Table != null && result.Table.Properties != null && result.Table.Properties.ProvisioningState == "Succeeded")
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets all the table instances in a data factory with the link to the
        /// next page.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the data factory.
        /// </param>
        /// <param name='dataFactoryName'>
        /// Required. A unique data factory instance name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List tables operation response.
        /// </returns>
        public async Task<TableListResponse> ListAsync(string resourceGroupName, string dataFactoryName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 1000)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._\\(\\)]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (dataFactoryName == null)
            {
                throw new ArgumentNullException("dataFactoryName");
            }
            if (dataFactoryName != null && dataFactoryName.Length > 63)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            if (Regex.IsMatch(dataFactoryName, "^[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$") == false)
            {
                throw new ArgumentOutOfRangeException("dataFactoryName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("dataFactoryName", dataFactoryName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.DataFactory/datafactories/";
            url = url + Uri.EscapeDataString(dataFactoryName);
            url = url + "/tables";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Table tableInstance = new Table();
                                    result.Tables.Add(tableInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        tableInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        TableProperties propertiesInstance = new TableProperties();
                                        tableInstance.Properties = propertiesInstance;
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken structureArray = propertiesValue["structure"];
                                        if (structureArray != null && structureArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken structureValue in ((JArray)structureArray))
                                            {
                                                DataElement dataElementInstance = new DataElement();
                                                propertiesInstance.Structure.Add(dataElementInstance);
                                                
                                                JToken nameValue2 = structureValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    dataElementInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken descriptionValue2 = structureValue["description"];
                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                    dataElementInstance.Description = descriptionInstance2;
                                                }
                                                
                                                JToken positionValue = structureValue["position"];
                                                if (positionValue != null && positionValue.Type != JTokenType.Null)
                                                {
                                                    uint positionInstance = ((uint)positionValue);
                                                    dataElementInstance.Position = positionInstance;
                                                }
                                                
                                                JToken typeValue = structureValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    dataElementInstance.Type = typeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken locationValue = propertiesValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)locationValue["type"]);
                                            if (typeName == "AzureBlobLocation")
                                            {
                                                AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                                
                                                JToken folderPathValue = locationValue["folderPath"];
                                                if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                                {
                                                    string folderPathInstance = ((string)folderPathValue);
                                                    azureBlobLocationInstance.FolderPath = folderPathInstance;
                                                }
                                                
                                                JToken tableRootLocationValue = locationValue["tableRootLocation"];
                                                if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                                {
                                                    string tableRootLocationInstance = ((string)tableRootLocationValue);
                                                    azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                                }
                                                
                                                JToken fileNameValue = locationValue["fileName"];
                                                if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                                {
                                                    string fileNameInstance = ((string)fileNameValue);
                                                    azureBlobLocationInstance.FileName = fileNameInstance;
                                                }
                                                
                                                JToken partitionedByArray = locationValue["partitionedBy"];
                                                if (partitionedByArray != null && partitionedByArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken partitionedByValue in ((JArray)partitionedByArray))
                                                    {
                                                        Partition partitionInstance = new Partition();
                                                        azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                                        
                                                        JToken nameValue3 = partitionedByValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            partitionInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        JToken valueValue2 = partitionedByValue["value"];
                                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                        {
                                                            string typeName2 = ((string)valueValue2["type"]);
                                                            if (typeName2 == "DateTime")
                                                            {
                                                                DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                                
                                                                JToken dateValue = valueValue2["date"];
                                                                if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                                {
                                                                    string dateInstance = ((string)dateValue);
                                                                    dateTimePartitionValueInstance.Date = dateInstance;
                                                                }
                                                                
                                                                JToken formatValue = valueValue2["format"];
                                                                if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                                {
                                                                    string formatInstance = ((string)formatValue);
                                                                    dateTimePartitionValueInstance.Format = formatInstance;
                                                                }
                                                                partitionInstance.Value = dateTimePartitionValueInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken formatValue2 = locationValue["format"];
                                                if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName3 = ((string)formatValue2["type"]);
                                                    if (typeName3 == "TextFormat")
                                                    {
                                                        TextFormat textFormatInstance = new TextFormat();
                                                        
                                                        JToken columnDelimiterValue = formatValue2["columnDelimiter"];
                                                        if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                                        {
                                                            string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                            textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                                        }
                                                        
                                                        JToken rowDelimiterValue = formatValue2["rowDelimiter"];
                                                        if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                                        {
                                                            string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                            textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                                        }
                                                        
                                                        JToken escapeCharValue = formatValue2["escapeChar"];
                                                        if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                                        {
                                                            string escapeCharInstance = ((string)escapeCharValue);
                                                            textFormatInstance.EscapeChar = escapeCharInstance;
                                                        }
                                                        
                                                        JToken quoteCharValue = formatValue2["quoteChar"];
                                                        if (quoteCharValue != null && quoteCharValue.Type != JTokenType.Null)
                                                        {
                                                            string quoteCharInstance = ((string)quoteCharValue);
                                                            textFormatInstance.QuoteChar = quoteCharInstance;
                                                        }
                                                        
                                                        JToken nullValueValue = formatValue2["nullValue"];
                                                        if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                                        {
                                                            string nullValueInstance = ((string)nullValueValue);
                                                            textFormatInstance.NullValue = nullValueInstance;
                                                        }
                                                        
                                                        JToken encodingNameValue = formatValue2["encodingName"];
                                                        if (encodingNameValue != null && encodingNameValue.Type != JTokenType.Null)
                                                        {
                                                            string encodingNameInstance = ((string)encodingNameValue);
                                                            textFormatInstance.EncodingName = encodingNameInstance;
                                                        }
                                                        
                                                        JToken serializerValue = formatValue2["serializer"];
                                                        if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                                        {
                                                            string serializerInstance = ((string)serializerValue);
                                                            textFormatInstance.Serializer = serializerInstance;
                                                        }
                                                        
                                                        JToken deserializerValue = formatValue2["deserializer"];
                                                        if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                                        {
                                                            string deserializerInstance = ((string)deserializerValue);
                                                            textFormatInstance.Deserializer = deserializerInstance;
                                                        }
                                                        azureBlobLocationInstance.Format = textFormatInstance;
                                                    }
                                                    if (typeName3 == "AvroFormat")
                                                    {
                                                        AvroFormat avroFormatInstance = new AvroFormat();
                                                        
                                                        JToken serializerValue2 = formatValue2["serializer"];
                                                        if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                                        {
                                                            string serializerInstance2 = ((string)serializerValue2);
                                                            avroFormatInstance.Serializer = serializerInstance2;
                                                        }
                                                        
                                                        JToken deserializerValue2 = formatValue2["deserializer"];
                                                        if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                                        {
                                                            string deserializerInstance2 = ((string)deserializerValue2);
                                                            avroFormatInstance.Deserializer = deserializerInstance2;
                                                        }
                                                        azureBlobLocationInstance.Format = avroFormatInstance;
                                                    }
                                                }
                                                
                                                JToken compressionValue = locationValue["compression"];
                                                if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                                {
                                                    string typeName4 = ((string)compressionValue["type"]);
                                                    if (typeName4 == "Deflate")
                                                    {
                                                        DeflateCompression deflateCompressionInstance = new DeflateCompression();
                                                        
                                                        JToken levelValue = compressionValue["level"];
                                                        if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance = ((string)levelValue);
                                                            deflateCompressionInstance.Level = levelInstance;
                                                        }
                                                        azureBlobLocationInstance.Compression = deflateCompressionInstance;
                                                    }
                                                    if (typeName4 == "BZip2")
                                                    {
                                                        BZip2Compression bZip2CompressionInstance = new BZip2Compression();
                                                        azureBlobLocationInstance.Compression = bZip2CompressionInstance;
                                                    }
                                                    if (typeName4 == "GZip")
                                                    {
                                                        GZipCompression gZipCompressionInstance = new GZipCompression();
                                                        
                                                        JToken levelValue2 = compressionValue["level"];
                                                        if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance2 = ((string)levelValue2);
                                                            gZipCompressionInstance.Level = levelInstance2;
                                                        }
                                                        azureBlobLocationInstance.Compression = gZipCompressionInstance;
                                                    }
                                                }
                                                
                                                JToken linkedServiceNameValue = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                    azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                                }
                                                propertiesInstance.Location = azureBlobLocationInstance;
                                            }
                                            if (typeName == "AzureTableLocation")
                                            {
                                                AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                                
                                                JToken tableNameValue = locationValue["tableName"];
                                                if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                                {
                                                    string tableNameInstance = ((string)tableNameValue);
                                                    azureTableLocationInstance.TableName = tableNameInstance;
                                                }
                                                
                                                JToken linkedServiceNameValue2 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                    azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                                }
                                                propertiesInstance.Location = azureTableLocationInstance;
                                            }
                                            if (typeName == "AzureSqlTableLocation")
                                            {
                                                AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                                
                                                JToken tableNameValue2 = locationValue["tableName"];
                                                if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                                {
                                                    string tableNameInstance2 = ((string)tableNameValue2);
                                                    azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                                }
                                                
                                                JToken linkedServiceNameValue3 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                    azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                                }
                                                propertiesInstance.Location = azureSqlTableLocationInstance;
                                            }
                                            if (typeName == "OnPremisesSqlServerTableLocation")
                                            {
                                                OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                                
                                                JToken tableNameValue3 = locationValue["tableName"];
                                                if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                                {
                                                    string tableNameInstance3 = ((string)tableNameValue3);
                                                    onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                                }
                                                
                                                JToken linkedServiceNameValue4 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                    onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                                }
                                                propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                            }
                                            if (typeName == "OnPremisesFileSystemLocation")
                                            {
                                                OnPremisesFileSystemLocation onPremisesFileSystemLocationInstance = new OnPremisesFileSystemLocation();
                                                
                                                JToken folderPathValue2 = locationValue["folderPath"];
                                                if (folderPathValue2 != null && folderPathValue2.Type != JTokenType.Null)
                                                {
                                                    string folderPathInstance2 = ((string)folderPathValue2);
                                                    onPremisesFileSystemLocationInstance.FolderPath = folderPathInstance2;
                                                }
                                                
                                                JToken fileNameValue2 = locationValue["fileName"];
                                                if (fileNameValue2 != null && fileNameValue2.Type != JTokenType.Null)
                                                {
                                                    string fileNameInstance2 = ((string)fileNameValue2);
                                                    onPremisesFileSystemLocationInstance.FileName = fileNameInstance2;
                                                }
                                                
                                                JToken partitionedByArray2 = locationValue["partitionedBy"];
                                                if (partitionedByArray2 != null && partitionedByArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken partitionedByValue2 in ((JArray)partitionedByArray2))
                                                    {
                                                        Partition partitionInstance2 = new Partition();
                                                        onPremisesFileSystemLocationInstance.PartitionedBy.Add(partitionInstance2);
                                                        
                                                        JToken nameValue4 = partitionedByValue2["name"];
                                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance4 = ((string)nameValue4);
                                                            partitionInstance2.Name = nameInstance4;
                                                        }
                                                        
                                                        JToken valueValue3 = partitionedByValue2["value"];
                                                        if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                                        {
                                                            string typeName5 = ((string)valueValue3["type"]);
                                                            if (typeName5 == "DateTime")
                                                            {
                                                                DateTimePartitionValue dateTimePartitionValueInstance2 = new DateTimePartitionValue();
                                                                
                                                                JToken dateValue2 = valueValue3["date"];
                                                                if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                                {
                                                                    string dateInstance2 = ((string)dateValue2);
                                                                    dateTimePartitionValueInstance2.Date = dateInstance2;
                                                                }
                                                                
                                                                JToken formatValue3 = valueValue3["format"];
                                                                if (formatValue3 != null && formatValue3.Type != JTokenType.Null)
                                                                {
                                                                    string formatInstance2 = ((string)formatValue3);
                                                                    dateTimePartitionValueInstance2.Format = formatInstance2;
                                                                }
                                                                partitionInstance2.Value = dateTimePartitionValueInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken formatValue4 = locationValue["format"];
                                                if (formatValue4 != null && formatValue4.Type != JTokenType.Null)
                                                {
                                                    string typeName6 = ((string)formatValue4["type"]);
                                                    if (typeName6 == "TextFormat")
                                                    {
                                                        TextFormat textFormatInstance2 = new TextFormat();
                                                        
                                                        JToken columnDelimiterValue2 = formatValue4["columnDelimiter"];
                                                        if (columnDelimiterValue2 != null && columnDelimiterValue2.Type != JTokenType.Null)
                                                        {
                                                            string columnDelimiterInstance2 = ((string)columnDelimiterValue2);
                                                            textFormatInstance2.ColumnDelimiter = columnDelimiterInstance2;
                                                        }
                                                        
                                                        JToken rowDelimiterValue2 = formatValue4["rowDelimiter"];
                                                        if (rowDelimiterValue2 != null && rowDelimiterValue2.Type != JTokenType.Null)
                                                        {
                                                            string rowDelimiterInstance2 = ((string)rowDelimiterValue2);
                                                            textFormatInstance2.RowDelimiter = rowDelimiterInstance2;
                                                        }
                                                        
                                                        JToken escapeCharValue2 = formatValue4["escapeChar"];
                                                        if (escapeCharValue2 != null && escapeCharValue2.Type != JTokenType.Null)
                                                        {
                                                            string escapeCharInstance2 = ((string)escapeCharValue2);
                                                            textFormatInstance2.EscapeChar = escapeCharInstance2;
                                                        }
                                                        
                                                        JToken quoteCharValue2 = formatValue4["quoteChar"];
                                                        if (quoteCharValue2 != null && quoteCharValue2.Type != JTokenType.Null)
                                                        {
                                                            string quoteCharInstance2 = ((string)quoteCharValue2);
                                                            textFormatInstance2.QuoteChar = quoteCharInstance2;
                                                        }
                                                        
                                                        JToken nullValueValue2 = formatValue4["nullValue"];
                                                        if (nullValueValue2 != null && nullValueValue2.Type != JTokenType.Null)
                                                        {
                                                            string nullValueInstance2 = ((string)nullValueValue2);
                                                            textFormatInstance2.NullValue = nullValueInstance2;
                                                        }
                                                        
                                                        JToken encodingNameValue2 = formatValue4["encodingName"];
                                                        if (encodingNameValue2 != null && encodingNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string encodingNameInstance2 = ((string)encodingNameValue2);
                                                            textFormatInstance2.EncodingName = encodingNameInstance2;
                                                        }
                                                        
                                                        JToken serializerValue3 = formatValue4["serializer"];
                                                        if (serializerValue3 != null && serializerValue3.Type != JTokenType.Null)
                                                        {
                                                            string serializerInstance3 = ((string)serializerValue3);
                                                            textFormatInstance2.Serializer = serializerInstance3;
                                                        }
                                                        
                                                        JToken deserializerValue3 = formatValue4["deserializer"];
                                                        if (deserializerValue3 != null && deserializerValue3.Type != JTokenType.Null)
                                                        {
                                                            string deserializerInstance3 = ((string)deserializerValue3);
                                                            textFormatInstance2.Deserializer = deserializerInstance3;
                                                        }
                                                        onPremisesFileSystemLocationInstance.Format = textFormatInstance2;
                                                    }
                                                    if (typeName6 == "AvroFormat")
                                                    {
                                                        AvroFormat avroFormatInstance2 = new AvroFormat();
                                                        
                                                        JToken serializerValue4 = formatValue4["serializer"];
                                                        if (serializerValue4 != null && serializerValue4.Type != JTokenType.Null)
                                                        {
                                                            string serializerInstance4 = ((string)serializerValue4);
                                                            avroFormatInstance2.Serializer = serializerInstance4;
                                                        }
                                                        
                                                        JToken deserializerValue4 = formatValue4["deserializer"];
                                                        if (deserializerValue4 != null && deserializerValue4.Type != JTokenType.Null)
                                                        {
                                                            string deserializerInstance4 = ((string)deserializerValue4);
                                                            avroFormatInstance2.Deserializer = deserializerInstance4;
                                                        }
                                                        onPremisesFileSystemLocationInstance.Format = avroFormatInstance2;
                                                    }
                                                }
                                                
                                                JToken compressionValue2 = locationValue["compression"];
                                                if (compressionValue2 != null && compressionValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName7 = ((string)compressionValue2["type"]);
                                                    if (typeName7 == "Deflate")
                                                    {
                                                        DeflateCompression deflateCompressionInstance2 = new DeflateCompression();
                                                        
                                                        JToken levelValue3 = compressionValue2["level"];
                                                        if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance3 = ((string)levelValue3);
                                                            deflateCompressionInstance2.Level = levelInstance3;
                                                        }
                                                        onPremisesFileSystemLocationInstance.Compression = deflateCompressionInstance2;
                                                    }
                                                    if (typeName7 == "BZip2")
                                                    {
                                                        BZip2Compression bZip2CompressionInstance2 = new BZip2Compression();
                                                        onPremisesFileSystemLocationInstance.Compression = bZip2CompressionInstance2;
                                                    }
                                                    if (typeName7 == "GZip")
                                                    {
                                                        GZipCompression gZipCompressionInstance2 = new GZipCompression();
                                                        
                                                        JToken levelValue4 = compressionValue2["level"];
                                                        if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance4 = ((string)levelValue4);
                                                            gZipCompressionInstance2.Level = levelInstance4;
                                                        }
                                                        onPremisesFileSystemLocationInstance.Compression = gZipCompressionInstance2;
                                                    }
                                                }
                                                
                                                JToken fileFilterValue = locationValue["fileFilter"];
                                                if (fileFilterValue != null && fileFilterValue.Type != JTokenType.Null)
                                                {
                                                    string fileFilterInstance = ((string)fileFilterValue);
                                                    onPremisesFileSystemLocationInstance.FileFilter = fileFilterInstance;
                                                }
                                                
                                                JToken linkedServiceNameValue5 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                    onPremisesFileSystemLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                                }
                                                propertiesInstance.Location = onPremisesFileSystemLocationInstance;
                                            }
                                            if (typeName == "OnPremisesOracleTableLocation")
                                            {
                                                OnPremisesOracleTableLocation onPremisesOracleTableLocationInstance = new OnPremisesOracleTableLocation();
                                                
                                                JToken tableNameValue4 = locationValue["tableName"];
                                                if (tableNameValue4 != null && tableNameValue4.Type != JTokenType.Null)
                                                {
                                                    string tableNameInstance4 = ((string)tableNameValue4);
                                                    onPremisesOracleTableLocationInstance.TableName = tableNameInstance4;
                                                }
                                                
                                                JToken linkedServiceNameValue6 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue6 != null && linkedServiceNameValue6.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance6 = ((string)linkedServiceNameValue6);
                                                    onPremisesOracleTableLocationInstance.LinkedServiceName = linkedServiceNameInstance6;
                                                }
                                                propertiesInstance.Location = onPremisesOracleTableLocationInstance;
                                            }
                                            if (typeName == "OnPremisesOdbcTableLocation")
                                            {
                                                OnPremisesOdbcTableLocation onPremisesOdbcTableLocationInstance = new OnPremisesOdbcTableLocation();
                                                
                                                JToken linkedServiceNameValue7 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue7 != null && linkedServiceNameValue7.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance7 = ((string)linkedServiceNameValue7);
                                                    onPremisesOdbcTableLocationInstance.LinkedServiceName = linkedServiceNameInstance7;
                                                }
                                                propertiesInstance.Location = onPremisesOdbcTableLocationInstance;
                                            }
                                            if (typeName == "OnPremisesHdfsTableLocation")
                                            {
                                                OnPremisesHdfsTableLocation onPremisesHdfsTableLocationInstance = new OnPremisesHdfsTableLocation();
                                                
                                                JToken linkedServiceNameValue8 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue8 != null && linkedServiceNameValue8.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance8 = ((string)linkedServiceNameValue8);
                                                    onPremisesHdfsTableLocationInstance.LinkedServiceName = linkedServiceNameInstance8;
                                                }
                                                propertiesInstance.Location = onPremisesHdfsTableLocationInstance;
                                            }
                                            if (typeName == "ODataTableLocation")
                                            {
                                                ODataTableLocation oDataTableLocationInstance = new ODataTableLocation();
                                                
                                                JToken resourceValue = locationValue["resource"];
                                                if (resourceValue != null && resourceValue.Type != JTokenType.Null)
                                                {
                                                    string resourceInstance = ((string)resourceValue);
                                                    oDataTableLocationInstance.Resource = resourceInstance;
                                                }
                                                
                                                JToken linkedServiceNameValue9 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue9 != null && linkedServiceNameValue9.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance9 = ((string)linkedServiceNameValue9);
                                                    oDataTableLocationInstance.LinkedServiceName = linkedServiceNameInstance9;
                                                }
                                                propertiesInstance.Location = oDataTableLocationInstance;
                                            }
                                            if (typeName == "CustomLocation")
                                            {
                                                CustomLocation customLocationInstance = new CustomLocation();
                                                
                                                JToken extendedPropertiesSequenceElement = ((JToken)locationValue["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in extendedPropertiesSequenceElement)
                                                    {
                                                        string extendedPropertiesKey = ((string)property.Name);
                                                        string extendedPropertiesValue = ((string)property.Value);
                                                        customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                    }
                                                }
                                                
                                                JToken linkedServiceNameValue10 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue10 != null && linkedServiceNameValue10.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance10 = ((string)linkedServiceNameValue10);
                                                    customLocationInstance.LinkedServiceName = linkedServiceNameInstance10;
                                                }
                                                propertiesInstance.Location = customLocationInstance;
                                            }
                                            if (typeName == "RelationalTableLocation")
                                            {
                                                RelationalTableLocation relationalTableLocationInstance = new RelationalTableLocation();
                                                
                                                JToken tableNameValue5 = locationValue["tableName"];
                                                if (tableNameValue5 != null && tableNameValue5.Type != JTokenType.Null)
                                                {
                                                    string tableNameInstance5 = ((string)tableNameValue5);
                                                    relationalTableLocationInstance.TableName = tableNameInstance5;
                                                }
                                                
                                                JToken linkedServiceNameValue11 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue11 != null && linkedServiceNameValue11.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance11 = ((string)linkedServiceNameValue11);
                                                    relationalTableLocationInstance.LinkedServiceName = linkedServiceNameInstance11;
                                                }
                                                propertiesInstance.Location = relationalTableLocationInstance;
                                            }
                                            if (typeName == "DocumentDbCollectionLocation")
                                            {
                                                DocumentDbCollectionLocation documentDbCollectionLocationInstance = new DocumentDbCollectionLocation();
                                                
                                                JToken collectionNameValue = locationValue["collectionName"];
                                                if (collectionNameValue != null && collectionNameValue.Type != JTokenType.Null)
                                                {
                                                    string collectionNameInstance = ((string)collectionNameValue);
                                                    documentDbCollectionLocationInstance.CollectionName = collectionNameInstance;
                                                }
                                                
                                                JToken linkedServiceNameValue12 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue12 != null && linkedServiceNameValue12.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance12 = ((string)linkedServiceNameValue12);
                                                    documentDbCollectionLocationInstance.LinkedServiceName = linkedServiceNameInstance12;
                                                }
                                                propertiesInstance.Location = documentDbCollectionLocationInstance;
                                            }
                                        }
                                        
                                        JToken availabilityValue = propertiesValue["availability"];
                                        if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                        {
                                            Availability availabilityInstance = new Availability();
                                            propertiesInstance.Availability = availabilityInstance;
                                            
                                            JToken frequencyValue = availabilityValue["frequency"];
                                            if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                            {
                                                string frequencyInstance = ((string)frequencyValue);
                                                availabilityInstance.Frequency = frequencyInstance;
                                            }
                                            
                                            JToken intervalValue = availabilityValue["interval"];
                                            if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                            {
                                                uint intervalInstance = ((uint)intervalValue);
                                                availabilityInstance.Interval = intervalInstance;
                                            }
                                            
                                            JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                            if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                                availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                            }
                                            
                                            JToken offsetValue = availabilityValue["offset"];
                                            if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                                availabilityInstance.Offset = offsetInstance;
                                            }
                                            
                                            JToken waitOnExternalValue = availabilityValue["waitOnExternal"];
                                            if (waitOnExternalValue != null && waitOnExternalValue.Type != JTokenType.Null)
                                            {
                                                WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                                availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                                
                                                JToken dataDelayValue = waitOnExternalValue["dataDelay"];
                                                if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                                    waitOnExternalInstance.DataDelay = dataDelayInstance;
                                                }
                                                
                                                JToken retryIntervalValue = waitOnExternalValue["retryInterval"];
                                                if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                                    waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                                }
                                                
                                                JToken retryTimeoutValue = waitOnExternalValue["retryTimeout"];
                                                if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                                    waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                                }
                                                
                                                JToken maximumRetryValue = waitOnExternalValue["maximumRetry"];
                                                if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                                {
                                                    int maximumRetryInstance = ((int)maximumRetryValue);
                                                    waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                                }
                                            }
                                            
                                            JToken styleValue = availabilityValue["style"];
                                            if (styleValue != null && styleValue.Type != JTokenType.Null)
                                            {
                                                string styleInstance = ((string)styleValue);
                                                availabilityInstance.Style = styleInstance;
                                            }
                                        }
                                        
                                        JToken policyValue = propertiesValue["policy"];
                                        if (policyValue != null && policyValue.Type != JTokenType.Null)
                                        {
                                            Policy policyInstance = new Policy();
                                            propertiesInstance.Policy = policyInstance;
                                            
                                            JToken validationValue = policyValue["validation"];
                                            if (validationValue != null && validationValue.Type != JTokenType.Null)
                                            {
                                                ValidationPolicy validationInstance = new ValidationPolicy();
                                                policyInstance.Validation = validationInstance;
                                                
                                                JToken minimumRowsValue = validationValue["minimumRows"];
                                                if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                                {
                                                    long minimumRowsInstance = ((long)minimumRowsValue);
                                                    validationInstance.MinimumRows = minimumRowsInstance;
                                                }
                                                
                                                JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                                if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                                    validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                                }
                                                
                                                JToken validationPriorityOrderValue = validationValue["validationPriorityOrder"];
                                                if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                                {
                                                    string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                                    validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                                }
                                            }
                                            
                                            JToken latencyValue = policyValue["latency"];
                                            if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                            {
                                                LatencyPolicy latencyInstance = new LatencyPolicy();
                                                policyInstance.Latency = latencyInstance;
                                                
                                                JToken latencyLengthValue = latencyValue["latencyLength"];
                                                if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                                    latencyInstance.LatencyLength = latencyLengthInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken publishedValue = propertiesValue["published"];
                                        if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                                        {
                                            bool publishedInstance = ((bool)publishedValue);
                                            propertiesInstance.Published = publishedInstance;
                                        }
                                        
                                        JToken createTimeValue = propertiesValue["createTime"];
                                        if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime createTimeInstance = ((DateTime)createTimeValue);
                                            propertiesInstance.CreateTime = createTimeInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken errorMessageValue = propertiesValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            propertiesInstance.ErrorMessage = errorMessageInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of table instances with the link to the next
        /// page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next tables page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List tables operation response.
        /// </returns>
        public async Task<TableListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    TableListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new TableListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Table tableInstance = new Table();
                                    result.Tables.Add(tableInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        tableInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        TableProperties propertiesInstance = new TableProperties();
                                        tableInstance.Properties = propertiesInstance;
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken structureArray = propertiesValue["structure"];
                                        if (structureArray != null && structureArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken structureValue in ((JArray)structureArray))
                                            {
                                                DataElement dataElementInstance = new DataElement();
                                                propertiesInstance.Structure.Add(dataElementInstance);
                                                
                                                JToken nameValue2 = structureValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    dataElementInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken descriptionValue2 = structureValue["description"];
                                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                                {
                                                    string descriptionInstance2 = ((string)descriptionValue2);
                                                    dataElementInstance.Description = descriptionInstance2;
                                                }
                                                
                                                JToken positionValue = structureValue["position"];
                                                if (positionValue != null && positionValue.Type != JTokenType.Null)
                                                {
                                                    uint positionInstance = ((uint)positionValue);
                                                    dataElementInstance.Position = positionInstance;
                                                }
                                                
                                                JToken typeValue = structureValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    dataElementInstance.Type = typeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken locationValue = propertiesValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)locationValue["type"]);
                                            if (typeName == "AzureBlobLocation")
                                            {
                                                AzureBlobLocation azureBlobLocationInstance = new AzureBlobLocation();
                                                
                                                JToken folderPathValue = locationValue["folderPath"];
                                                if (folderPathValue != null && folderPathValue.Type != JTokenType.Null)
                                                {
                                                    string folderPathInstance = ((string)folderPathValue);
                                                    azureBlobLocationInstance.FolderPath = folderPathInstance;
                                                }
                                                
                                                JToken tableRootLocationValue = locationValue["tableRootLocation"];
                                                if (tableRootLocationValue != null && tableRootLocationValue.Type != JTokenType.Null)
                                                {
                                                    string tableRootLocationInstance = ((string)tableRootLocationValue);
                                                    azureBlobLocationInstance.TableRootLocation = tableRootLocationInstance;
                                                }
                                                
                                                JToken fileNameValue = locationValue["fileName"];
                                                if (fileNameValue != null && fileNameValue.Type != JTokenType.Null)
                                                {
                                                    string fileNameInstance = ((string)fileNameValue);
                                                    azureBlobLocationInstance.FileName = fileNameInstance;
                                                }
                                                
                                                JToken partitionedByArray = locationValue["partitionedBy"];
                                                if (partitionedByArray != null && partitionedByArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken partitionedByValue in ((JArray)partitionedByArray))
                                                    {
                                                        Partition partitionInstance = new Partition();
                                                        azureBlobLocationInstance.PartitionedBy.Add(partitionInstance);
                                                        
                                                        JToken nameValue3 = partitionedByValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            partitionInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        JToken valueValue2 = partitionedByValue["value"];
                                                        if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                        {
                                                            string typeName2 = ((string)valueValue2["type"]);
                                                            if (typeName2 == "DateTime")
                                                            {
                                                                DateTimePartitionValue dateTimePartitionValueInstance = new DateTimePartitionValue();
                                                                
                                                                JToken dateValue = valueValue2["date"];
                                                                if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                                {
                                                                    string dateInstance = ((string)dateValue);
                                                                    dateTimePartitionValueInstance.Date = dateInstance;
                                                                }
                                                                
                                                                JToken formatValue = valueValue2["format"];
                                                                if (formatValue != null && formatValue.Type != JTokenType.Null)
                                                                {
                                                                    string formatInstance = ((string)formatValue);
                                                                    dateTimePartitionValueInstance.Format = formatInstance;
                                                                }
                                                                partitionInstance.Value = dateTimePartitionValueInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken formatValue2 = locationValue["format"];
                                                if (formatValue2 != null && formatValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName3 = ((string)formatValue2["type"]);
                                                    if (typeName3 == "TextFormat")
                                                    {
                                                        TextFormat textFormatInstance = new TextFormat();
                                                        
                                                        JToken columnDelimiterValue = formatValue2["columnDelimiter"];
                                                        if (columnDelimiterValue != null && columnDelimiterValue.Type != JTokenType.Null)
                                                        {
                                                            string columnDelimiterInstance = ((string)columnDelimiterValue);
                                                            textFormatInstance.ColumnDelimiter = columnDelimiterInstance;
                                                        }
                                                        
                                                        JToken rowDelimiterValue = formatValue2["rowDelimiter"];
                                                        if (rowDelimiterValue != null && rowDelimiterValue.Type != JTokenType.Null)
                                                        {
                                                            string rowDelimiterInstance = ((string)rowDelimiterValue);
                                                            textFormatInstance.RowDelimiter = rowDelimiterInstance;
                                                        }
                                                        
                                                        JToken escapeCharValue = formatValue2["escapeChar"];
                                                        if (escapeCharValue != null && escapeCharValue.Type != JTokenType.Null)
                                                        {
                                                            string escapeCharInstance = ((string)escapeCharValue);
                                                            textFormatInstance.EscapeChar = escapeCharInstance;
                                                        }
                                                        
                                                        JToken quoteCharValue = formatValue2["quoteChar"];
                                                        if (quoteCharValue != null && quoteCharValue.Type != JTokenType.Null)
                                                        {
                                                            string quoteCharInstance = ((string)quoteCharValue);
                                                            textFormatInstance.QuoteChar = quoteCharInstance;
                                                        }
                                                        
                                                        JToken nullValueValue = formatValue2["nullValue"];
                                                        if (nullValueValue != null && nullValueValue.Type != JTokenType.Null)
                                                        {
                                                            string nullValueInstance = ((string)nullValueValue);
                                                            textFormatInstance.NullValue = nullValueInstance;
                                                        }
                                                        
                                                        JToken encodingNameValue = formatValue2["encodingName"];
                                                        if (encodingNameValue != null && encodingNameValue.Type != JTokenType.Null)
                                                        {
                                                            string encodingNameInstance = ((string)encodingNameValue);
                                                            textFormatInstance.EncodingName = encodingNameInstance;
                                                        }
                                                        
                                                        JToken serializerValue = formatValue2["serializer"];
                                                        if (serializerValue != null && serializerValue.Type != JTokenType.Null)
                                                        {
                                                            string serializerInstance = ((string)serializerValue);
                                                            textFormatInstance.Serializer = serializerInstance;
                                                        }
                                                        
                                                        JToken deserializerValue = formatValue2["deserializer"];
                                                        if (deserializerValue != null && deserializerValue.Type != JTokenType.Null)
                                                        {
                                                            string deserializerInstance = ((string)deserializerValue);
                                                            textFormatInstance.Deserializer = deserializerInstance;
                                                        }
                                                        azureBlobLocationInstance.Format = textFormatInstance;
                                                    }
                                                    if (typeName3 == "AvroFormat")
                                                    {
                                                        AvroFormat avroFormatInstance = new AvroFormat();
                                                        
                                                        JToken serializerValue2 = formatValue2["serializer"];
                                                        if (serializerValue2 != null && serializerValue2.Type != JTokenType.Null)
                                                        {
                                                            string serializerInstance2 = ((string)serializerValue2);
                                                            avroFormatInstance.Serializer = serializerInstance2;
                                                        }
                                                        
                                                        JToken deserializerValue2 = formatValue2["deserializer"];
                                                        if (deserializerValue2 != null && deserializerValue2.Type != JTokenType.Null)
                                                        {
                                                            string deserializerInstance2 = ((string)deserializerValue2);
                                                            avroFormatInstance.Deserializer = deserializerInstance2;
                                                        }
                                                        azureBlobLocationInstance.Format = avroFormatInstance;
                                                    }
                                                }
                                                
                                                JToken compressionValue = locationValue["compression"];
                                                if (compressionValue != null && compressionValue.Type != JTokenType.Null)
                                                {
                                                    string typeName4 = ((string)compressionValue["type"]);
                                                    if (typeName4 == "Deflate")
                                                    {
                                                        DeflateCompression deflateCompressionInstance = new DeflateCompression();
                                                        
                                                        JToken levelValue = compressionValue["level"];
                                                        if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance = ((string)levelValue);
                                                            deflateCompressionInstance.Level = levelInstance;
                                                        }
                                                        azureBlobLocationInstance.Compression = deflateCompressionInstance;
                                                    }
                                                    if (typeName4 == "BZip2")
                                                    {
                                                        BZip2Compression bZip2CompressionInstance = new BZip2Compression();
                                                        azureBlobLocationInstance.Compression = bZip2CompressionInstance;
                                                    }
                                                    if (typeName4 == "GZip")
                                                    {
                                                        GZipCompression gZipCompressionInstance = new GZipCompression();
                                                        
                                                        JToken levelValue2 = compressionValue["level"];
                                                        if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance2 = ((string)levelValue2);
                                                            gZipCompressionInstance.Level = levelInstance2;
                                                        }
                                                        azureBlobLocationInstance.Compression = gZipCompressionInstance;
                                                    }
                                                }
                                                
                                                JToken linkedServiceNameValue = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue != null && linkedServiceNameValue.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance = ((string)linkedServiceNameValue);
                                                    azureBlobLocationInstance.LinkedServiceName = linkedServiceNameInstance;
                                                }
                                                propertiesInstance.Location = azureBlobLocationInstance;
                                            }
                                            if (typeName == "AzureTableLocation")
                                            {
                                                AzureTableLocation azureTableLocationInstance = new AzureTableLocation();
                                                
                                                JToken tableNameValue = locationValue["tableName"];
                                                if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                                {
                                                    string tableNameInstance = ((string)tableNameValue);
                                                    azureTableLocationInstance.TableName = tableNameInstance;
                                                }
                                                
                                                JToken linkedServiceNameValue2 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue2 != null && linkedServiceNameValue2.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance2 = ((string)linkedServiceNameValue2);
                                                    azureTableLocationInstance.LinkedServiceName = linkedServiceNameInstance2;
                                                }
                                                propertiesInstance.Location = azureTableLocationInstance;
                                            }
                                            if (typeName == "AzureSqlTableLocation")
                                            {
                                                AzureSqlTableLocation azureSqlTableLocationInstance = new AzureSqlTableLocation();
                                                
                                                JToken tableNameValue2 = locationValue["tableName"];
                                                if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                                {
                                                    string tableNameInstance2 = ((string)tableNameValue2);
                                                    azureSqlTableLocationInstance.TableName = tableNameInstance2;
                                                }
                                                
                                                JToken linkedServiceNameValue3 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue3 != null && linkedServiceNameValue3.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance3 = ((string)linkedServiceNameValue3);
                                                    azureSqlTableLocationInstance.LinkedServiceName = linkedServiceNameInstance3;
                                                }
                                                propertiesInstance.Location = azureSqlTableLocationInstance;
                                            }
                                            if (typeName == "OnPremisesSqlServerTableLocation")
                                            {
                                                OnPremisesSqlServerTableLocation onPremisesSqlServerTableLocationInstance = new OnPremisesSqlServerTableLocation();
                                                
                                                JToken tableNameValue3 = locationValue["tableName"];
                                                if (tableNameValue3 != null && tableNameValue3.Type != JTokenType.Null)
                                                {
                                                    string tableNameInstance3 = ((string)tableNameValue3);
                                                    onPremisesSqlServerTableLocationInstance.TableName = tableNameInstance3;
                                                }
                                                
                                                JToken linkedServiceNameValue4 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue4 != null && linkedServiceNameValue4.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance4 = ((string)linkedServiceNameValue4);
                                                    onPremisesSqlServerTableLocationInstance.LinkedServiceName = linkedServiceNameInstance4;
                                                }
                                                propertiesInstance.Location = onPremisesSqlServerTableLocationInstance;
                                            }
                                            if (typeName == "OnPremisesFileSystemLocation")
                                            {
                                                OnPremisesFileSystemLocation onPremisesFileSystemLocationInstance = new OnPremisesFileSystemLocation();
                                                
                                                JToken folderPathValue2 = locationValue["folderPath"];
                                                if (folderPathValue2 != null && folderPathValue2.Type != JTokenType.Null)
                                                {
                                                    string folderPathInstance2 = ((string)folderPathValue2);
                                                    onPremisesFileSystemLocationInstance.FolderPath = folderPathInstance2;
                                                }
                                                
                                                JToken fileNameValue2 = locationValue["fileName"];
                                                if (fileNameValue2 != null && fileNameValue2.Type != JTokenType.Null)
                                                {
                                                    string fileNameInstance2 = ((string)fileNameValue2);
                                                    onPremisesFileSystemLocationInstance.FileName = fileNameInstance2;
                                                }
                                                
                                                JToken partitionedByArray2 = locationValue["partitionedBy"];
                                                if (partitionedByArray2 != null && partitionedByArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken partitionedByValue2 in ((JArray)partitionedByArray2))
                                                    {
                                                        Partition partitionInstance2 = new Partition();
                                                        onPremisesFileSystemLocationInstance.PartitionedBy.Add(partitionInstance2);
                                                        
                                                        JToken nameValue4 = partitionedByValue2["name"];
                                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance4 = ((string)nameValue4);
                                                            partitionInstance2.Name = nameInstance4;
                                                        }
                                                        
                                                        JToken valueValue3 = partitionedByValue2["value"];
                                                        if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                                        {
                                                            string typeName5 = ((string)valueValue3["type"]);
                                                            if (typeName5 == "DateTime")
                                                            {
                                                                DateTimePartitionValue dateTimePartitionValueInstance2 = new DateTimePartitionValue();
                                                                
                                                                JToken dateValue2 = valueValue3["date"];
                                                                if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                                {
                                                                    string dateInstance2 = ((string)dateValue2);
                                                                    dateTimePartitionValueInstance2.Date = dateInstance2;
                                                                }
                                                                
                                                                JToken formatValue3 = valueValue3["format"];
                                                                if (formatValue3 != null && formatValue3.Type != JTokenType.Null)
                                                                {
                                                                    string formatInstance2 = ((string)formatValue3);
                                                                    dateTimePartitionValueInstance2.Format = formatInstance2;
                                                                }
                                                                partitionInstance2.Value = dateTimePartitionValueInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken formatValue4 = locationValue["format"];
                                                if (formatValue4 != null && formatValue4.Type != JTokenType.Null)
                                                {
                                                    string typeName6 = ((string)formatValue4["type"]);
                                                    if (typeName6 == "TextFormat")
                                                    {
                                                        TextFormat textFormatInstance2 = new TextFormat();
                                                        
                                                        JToken columnDelimiterValue2 = formatValue4["columnDelimiter"];
                                                        if (columnDelimiterValue2 != null && columnDelimiterValue2.Type != JTokenType.Null)
                                                        {
                                                            string columnDelimiterInstance2 = ((string)columnDelimiterValue2);
                                                            textFormatInstance2.ColumnDelimiter = columnDelimiterInstance2;
                                                        }
                                                        
                                                        JToken rowDelimiterValue2 = formatValue4["rowDelimiter"];
                                                        if (rowDelimiterValue2 != null && rowDelimiterValue2.Type != JTokenType.Null)
                                                        {
                                                            string rowDelimiterInstance2 = ((string)rowDelimiterValue2);
                                                            textFormatInstance2.RowDelimiter = rowDelimiterInstance2;
                                                        }
                                                        
                                                        JToken escapeCharValue2 = formatValue4["escapeChar"];
                                                        if (escapeCharValue2 != null && escapeCharValue2.Type != JTokenType.Null)
                                                        {
                                                            string escapeCharInstance2 = ((string)escapeCharValue2);
                                                            textFormatInstance2.EscapeChar = escapeCharInstance2;
                                                        }
                                                        
                                                        JToken quoteCharValue2 = formatValue4["quoteChar"];
                                                        if (quoteCharValue2 != null && quoteCharValue2.Type != JTokenType.Null)
                                                        {
                                                            string quoteCharInstance2 = ((string)quoteCharValue2);
                                                            textFormatInstance2.QuoteChar = quoteCharInstance2;
                                                        }
                                                        
                                                        JToken nullValueValue2 = formatValue4["nullValue"];
                                                        if (nullValueValue2 != null && nullValueValue2.Type != JTokenType.Null)
                                                        {
                                                            string nullValueInstance2 = ((string)nullValueValue2);
                                                            textFormatInstance2.NullValue = nullValueInstance2;
                                                        }
                                                        
                                                        JToken encodingNameValue2 = formatValue4["encodingName"];
                                                        if (encodingNameValue2 != null && encodingNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string encodingNameInstance2 = ((string)encodingNameValue2);
                                                            textFormatInstance2.EncodingName = encodingNameInstance2;
                                                        }
                                                        
                                                        JToken serializerValue3 = formatValue4["serializer"];
                                                        if (serializerValue3 != null && serializerValue3.Type != JTokenType.Null)
                                                        {
                                                            string serializerInstance3 = ((string)serializerValue3);
                                                            textFormatInstance2.Serializer = serializerInstance3;
                                                        }
                                                        
                                                        JToken deserializerValue3 = formatValue4["deserializer"];
                                                        if (deserializerValue3 != null && deserializerValue3.Type != JTokenType.Null)
                                                        {
                                                            string deserializerInstance3 = ((string)deserializerValue3);
                                                            textFormatInstance2.Deserializer = deserializerInstance3;
                                                        }
                                                        onPremisesFileSystemLocationInstance.Format = textFormatInstance2;
                                                    }
                                                    if (typeName6 == "AvroFormat")
                                                    {
                                                        AvroFormat avroFormatInstance2 = new AvroFormat();
                                                        
                                                        JToken serializerValue4 = formatValue4["serializer"];
                                                        if (serializerValue4 != null && serializerValue4.Type != JTokenType.Null)
                                                        {
                                                            string serializerInstance4 = ((string)serializerValue4);
                                                            avroFormatInstance2.Serializer = serializerInstance4;
                                                        }
                                                        
                                                        JToken deserializerValue4 = formatValue4["deserializer"];
                                                        if (deserializerValue4 != null && deserializerValue4.Type != JTokenType.Null)
                                                        {
                                                            string deserializerInstance4 = ((string)deserializerValue4);
                                                            avroFormatInstance2.Deserializer = deserializerInstance4;
                                                        }
                                                        onPremisesFileSystemLocationInstance.Format = avroFormatInstance2;
                                                    }
                                                }
                                                
                                                JToken compressionValue2 = locationValue["compression"];
                                                if (compressionValue2 != null && compressionValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName7 = ((string)compressionValue2["type"]);
                                                    if (typeName7 == "Deflate")
                                                    {
                                                        DeflateCompression deflateCompressionInstance2 = new DeflateCompression();
                                                        
                                                        JToken levelValue3 = compressionValue2["level"];
                                                        if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance3 = ((string)levelValue3);
                                                            deflateCompressionInstance2.Level = levelInstance3;
                                                        }
                                                        onPremisesFileSystemLocationInstance.Compression = deflateCompressionInstance2;
                                                    }
                                                    if (typeName7 == "BZip2")
                                                    {
                                                        BZip2Compression bZip2CompressionInstance2 = new BZip2Compression();
                                                        onPremisesFileSystemLocationInstance.Compression = bZip2CompressionInstance2;
                                                    }
                                                    if (typeName7 == "GZip")
                                                    {
                                                        GZipCompression gZipCompressionInstance2 = new GZipCompression();
                                                        
                                                        JToken levelValue4 = compressionValue2["level"];
                                                        if (levelValue4 != null && levelValue4.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance4 = ((string)levelValue4);
                                                            gZipCompressionInstance2.Level = levelInstance4;
                                                        }
                                                        onPremisesFileSystemLocationInstance.Compression = gZipCompressionInstance2;
                                                    }
                                                }
                                                
                                                JToken fileFilterValue = locationValue["fileFilter"];
                                                if (fileFilterValue != null && fileFilterValue.Type != JTokenType.Null)
                                                {
                                                    string fileFilterInstance = ((string)fileFilterValue);
                                                    onPremisesFileSystemLocationInstance.FileFilter = fileFilterInstance;
                                                }
                                                
                                                JToken linkedServiceNameValue5 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue5 != null && linkedServiceNameValue5.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance5 = ((string)linkedServiceNameValue5);
                                                    onPremisesFileSystemLocationInstance.LinkedServiceName = linkedServiceNameInstance5;
                                                }
                                                propertiesInstance.Location = onPremisesFileSystemLocationInstance;
                                            }
                                            if (typeName == "OnPremisesOracleTableLocation")
                                            {
                                                OnPremisesOracleTableLocation onPremisesOracleTableLocationInstance = new OnPremisesOracleTableLocation();
                                                
                                                JToken tableNameValue4 = locationValue["tableName"];
                                                if (tableNameValue4 != null && tableNameValue4.Type != JTokenType.Null)
                                                {
                                                    string tableNameInstance4 = ((string)tableNameValue4);
                                                    onPremisesOracleTableLocationInstance.TableName = tableNameInstance4;
                                                }
                                                
                                                JToken linkedServiceNameValue6 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue6 != null && linkedServiceNameValue6.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance6 = ((string)linkedServiceNameValue6);
                                                    onPremisesOracleTableLocationInstance.LinkedServiceName = linkedServiceNameInstance6;
                                                }
                                                propertiesInstance.Location = onPremisesOracleTableLocationInstance;
                                            }
                                            if (typeName == "OnPremisesOdbcTableLocation")
                                            {
                                                OnPremisesOdbcTableLocation onPremisesOdbcTableLocationInstance = new OnPremisesOdbcTableLocation();
                                                
                                                JToken linkedServiceNameValue7 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue7 != null && linkedServiceNameValue7.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance7 = ((string)linkedServiceNameValue7);
                                                    onPremisesOdbcTableLocationInstance.LinkedServiceName = linkedServiceNameInstance7;
                                                }
                                                propertiesInstance.Location = onPremisesOdbcTableLocationInstance;
                                            }
                                            if (typeName == "OnPremisesHdfsTableLocation")
                                            {
                                                OnPremisesHdfsTableLocation onPremisesHdfsTableLocationInstance = new OnPremisesHdfsTableLocation();
                                                
                                                JToken linkedServiceNameValue8 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue8 != null && linkedServiceNameValue8.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance8 = ((string)linkedServiceNameValue8);
                                                    onPremisesHdfsTableLocationInstance.LinkedServiceName = linkedServiceNameInstance8;
                                                }
                                                propertiesInstance.Location = onPremisesHdfsTableLocationInstance;
                                            }
                                            if (typeName == "ODataTableLocation")
                                            {
                                                ODataTableLocation oDataTableLocationInstance = new ODataTableLocation();
                                                
                                                JToken resourceValue = locationValue["resource"];
                                                if (resourceValue != null && resourceValue.Type != JTokenType.Null)
                                                {
                                                    string resourceInstance = ((string)resourceValue);
                                                    oDataTableLocationInstance.Resource = resourceInstance;
                                                }
                                                
                                                JToken linkedServiceNameValue9 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue9 != null && linkedServiceNameValue9.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance9 = ((string)linkedServiceNameValue9);
                                                    oDataTableLocationInstance.LinkedServiceName = linkedServiceNameInstance9;
                                                }
                                                propertiesInstance.Location = oDataTableLocationInstance;
                                            }
                                            if (typeName == "CustomLocation")
                                            {
                                                CustomLocation customLocationInstance = new CustomLocation();
                                                
                                                JToken extendedPropertiesSequenceElement = ((JToken)locationValue["extendedProperties"]);
                                                if (extendedPropertiesSequenceElement != null && extendedPropertiesSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in extendedPropertiesSequenceElement)
                                                    {
                                                        string extendedPropertiesKey = ((string)property.Name);
                                                        string extendedPropertiesValue = ((string)property.Value);
                                                        customLocationInstance.ExtendedProperties.Add(extendedPropertiesKey, extendedPropertiesValue);
                                                    }
                                                }
                                                
                                                JToken linkedServiceNameValue10 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue10 != null && linkedServiceNameValue10.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance10 = ((string)linkedServiceNameValue10);
                                                    customLocationInstance.LinkedServiceName = linkedServiceNameInstance10;
                                                }
                                                propertiesInstance.Location = customLocationInstance;
                                            }
                                            if (typeName == "RelationalTableLocation")
                                            {
                                                RelationalTableLocation relationalTableLocationInstance = new RelationalTableLocation();
                                                
                                                JToken tableNameValue5 = locationValue["tableName"];
                                                if (tableNameValue5 != null && tableNameValue5.Type != JTokenType.Null)
                                                {
                                                    string tableNameInstance5 = ((string)tableNameValue5);
                                                    relationalTableLocationInstance.TableName = tableNameInstance5;
                                                }
                                                
                                                JToken linkedServiceNameValue11 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue11 != null && linkedServiceNameValue11.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance11 = ((string)linkedServiceNameValue11);
                                                    relationalTableLocationInstance.LinkedServiceName = linkedServiceNameInstance11;
                                                }
                                                propertiesInstance.Location = relationalTableLocationInstance;
                                            }
                                            if (typeName == "DocumentDbCollectionLocation")
                                            {
                                                DocumentDbCollectionLocation documentDbCollectionLocationInstance = new DocumentDbCollectionLocation();
                                                
                                                JToken collectionNameValue = locationValue["collectionName"];
                                                if (collectionNameValue != null && collectionNameValue.Type != JTokenType.Null)
                                                {
                                                    string collectionNameInstance = ((string)collectionNameValue);
                                                    documentDbCollectionLocationInstance.CollectionName = collectionNameInstance;
                                                }
                                                
                                                JToken linkedServiceNameValue12 = locationValue["linkedServiceName"];
                                                if (linkedServiceNameValue12 != null && linkedServiceNameValue12.Type != JTokenType.Null)
                                                {
                                                    string linkedServiceNameInstance12 = ((string)linkedServiceNameValue12);
                                                    documentDbCollectionLocationInstance.LinkedServiceName = linkedServiceNameInstance12;
                                                }
                                                propertiesInstance.Location = documentDbCollectionLocationInstance;
                                            }
                                        }
                                        
                                        JToken availabilityValue = propertiesValue["availability"];
                                        if (availabilityValue != null && availabilityValue.Type != JTokenType.Null)
                                        {
                                            Availability availabilityInstance = new Availability();
                                            propertiesInstance.Availability = availabilityInstance;
                                            
                                            JToken frequencyValue = availabilityValue["frequency"];
                                            if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                            {
                                                string frequencyInstance = ((string)frequencyValue);
                                                availabilityInstance.Frequency = frequencyInstance;
                                            }
                                            
                                            JToken intervalValue = availabilityValue["interval"];
                                            if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                            {
                                                uint intervalInstance = ((uint)intervalValue);
                                                availabilityInstance.Interval = intervalInstance;
                                            }
                                            
                                            JToken anchorDateTimeValue = availabilityValue["anchorDateTime"];
                                            if (anchorDateTimeValue != null && anchorDateTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime anchorDateTimeInstance = ((DateTime)anchorDateTimeValue);
                                                availabilityInstance.AnchorDateTime = anchorDateTimeInstance;
                                            }
                                            
                                            JToken offsetValue = availabilityValue["offset"];
                                            if (offsetValue != null && offsetValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan offsetInstance = TimeSpan.Parse(((string)offsetValue), CultureInfo.InvariantCulture);
                                                availabilityInstance.Offset = offsetInstance;
                                            }
                                            
                                            JToken waitOnExternalValue = availabilityValue["waitOnExternal"];
                                            if (waitOnExternalValue != null && waitOnExternalValue.Type != JTokenType.Null)
                                            {
                                                WaitOnExternal waitOnExternalInstance = new WaitOnExternal();
                                                availabilityInstance.WaitOnExternal = waitOnExternalInstance;
                                                
                                                JToken dataDelayValue = waitOnExternalValue["dataDelay"];
                                                if (dataDelayValue != null && dataDelayValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan dataDelayInstance = TimeSpan.Parse(((string)dataDelayValue), CultureInfo.InvariantCulture);
                                                    waitOnExternalInstance.DataDelay = dataDelayInstance;
                                                }
                                                
                                                JToken retryIntervalValue = waitOnExternalValue["retryInterval"];
                                                if (retryIntervalValue != null && retryIntervalValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan retryIntervalInstance = TimeSpan.Parse(((string)retryIntervalValue), CultureInfo.InvariantCulture);
                                                    waitOnExternalInstance.RetryInterval = retryIntervalInstance;
                                                }
                                                
                                                JToken retryTimeoutValue = waitOnExternalValue["retryTimeout"];
                                                if (retryTimeoutValue != null && retryTimeoutValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan retryTimeoutInstance = TimeSpan.Parse(((string)retryTimeoutValue), CultureInfo.InvariantCulture);
                                                    waitOnExternalInstance.RetryTimeout = retryTimeoutInstance;
                                                }
                                                
                                                JToken maximumRetryValue = waitOnExternalValue["maximumRetry"];
                                                if (maximumRetryValue != null && maximumRetryValue.Type != JTokenType.Null)
                                                {
                                                    int maximumRetryInstance = ((int)maximumRetryValue);
                                                    waitOnExternalInstance.MaximumRetry = maximumRetryInstance;
                                                }
                                            }
                                            
                                            JToken styleValue = availabilityValue["style"];
                                            if (styleValue != null && styleValue.Type != JTokenType.Null)
                                            {
                                                string styleInstance = ((string)styleValue);
                                                availabilityInstance.Style = styleInstance;
                                            }
                                        }
                                        
                                        JToken policyValue = propertiesValue["policy"];
                                        if (policyValue != null && policyValue.Type != JTokenType.Null)
                                        {
                                            Policy policyInstance = new Policy();
                                            propertiesInstance.Policy = policyInstance;
                                            
                                            JToken validationValue = policyValue["validation"];
                                            if (validationValue != null && validationValue.Type != JTokenType.Null)
                                            {
                                                ValidationPolicy validationInstance = new ValidationPolicy();
                                                policyInstance.Validation = validationInstance;
                                                
                                                JToken minimumRowsValue = validationValue["minimumRows"];
                                                if (minimumRowsValue != null && minimumRowsValue.Type != JTokenType.Null)
                                                {
                                                    long minimumRowsInstance = ((long)minimumRowsValue);
                                                    validationInstance.MinimumRows = minimumRowsInstance;
                                                }
                                                
                                                JToken minimumSizeMBValue = validationValue["minimumSizeMB"];
                                                if (minimumSizeMBValue != null && minimumSizeMBValue.Type != JTokenType.Null)
                                                {
                                                    double minimumSizeMBInstance = ((double)minimumSizeMBValue);
                                                    validationInstance.MinimumSizeMB = minimumSizeMBInstance;
                                                }
                                                
                                                JToken validationPriorityOrderValue = validationValue["validationPriorityOrder"];
                                                if (validationPriorityOrderValue != null && validationPriorityOrderValue.Type != JTokenType.Null)
                                                {
                                                    string validationPriorityOrderInstance = ((string)validationPriorityOrderValue);
                                                    validationInstance.ValidationPriorityOrder = validationPriorityOrderInstance;
                                                }
                                            }
                                            
                                            JToken latencyValue = policyValue["latency"];
                                            if (latencyValue != null && latencyValue.Type != JTokenType.Null)
                                            {
                                                LatencyPolicy latencyInstance = new LatencyPolicy();
                                                policyInstance.Latency = latencyInstance;
                                                
                                                JToken latencyLengthValue = latencyValue["latencyLength"];
                                                if (latencyLengthValue != null && latencyLengthValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan latencyLengthInstance = TimeSpan.Parse(((string)latencyLengthValue), CultureInfo.InvariantCulture);
                                                    latencyInstance.LatencyLength = latencyLengthInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken publishedValue = propertiesValue["published"];
                                        if (publishedValue != null && publishedValue.Type != JTokenType.Null)
                                        {
                                            bool publishedInstance = ((bool)publishedValue);
                                            propertiesInstance.Published = publishedInstance;
                                        }
                                        
                                        JToken createTimeValue = propertiesValue["createTime"];
                                        if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime createTimeInstance = ((DateTime)createTimeValue);
                                            propertiesInstance.CreateTime = createTimeInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken errorMessageValue = propertiesValue["errorMessage"];
                                        if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                        {
                                            string errorMessageInstance = ((string)errorMessageValue);
                                            propertiesInstance.ErrorMessage = errorMessageInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
