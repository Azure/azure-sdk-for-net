// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.HDInsight.Job;
using Microsoft.Azure.Management.HDInsight.Job.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.HDInsight.Job
{
    /// <summary>
    /// Operations for managing jobs against HDInsight clusters.
    /// </summary>
    internal partial class JobOperations : IServiceOperations<HDInsightJobManagementClient>, IJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the JobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal JobOperations(HDInsightJobManagementClient client)
        {
            this._client = client;
        }
        
        private HDInsightJobManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.HDInsight.Job.HDInsightJobManagementClient.
        /// </summary>
        public HDInsightJobManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Gets job details from the specified HDInsight cluster.
        /// </summary>
        /// <param name='jobId'>
        /// Required. The id of the job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Job operation response.
        /// </returns>
        public async Task<JobGetResponse> GetJobAsync(string jobId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                TracingAdapter.Enter(invocationId, this, "GetJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(this.Client.ClusterDnsName);
            url = url + "/templeton/v1/jobs/";
            url = url + Uri.EscapeDataString(jobId);
            List<string> queryParameters = new List<string>();
            if (this.Client.UserName != null)
            {
                queryParameters.Add("user.name=" + Uri.EscapeDataString(this.Client.UserName));
            }
            queryParameters.Add("fields=*");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("accept", "application/json");
                httpRequest.Headers.Add("useragent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobDetailRootJsonObject jobDetailInstance = new JobDetailRootJsonObject();
                            result.JobDetail = jobDetailInstance;
                            
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                Status statusInstance = new Status();
                                jobDetailInstance.Status = statusInstance;
                                
                                JToken jpValue = statusValue["jp"];
                                if (jpValue != null && jpValue.Type != JTokenType.Null)
                                {
                                    string jpInstance = ((string)jpValue);
                                    statusInstance.JobPriority = jpInstance;
                                }
                                
                                JToken jobIDValue = statusValue["jobID"];
                                if (jobIDValue != null && jobIDValue.Type != JTokenType.Null)
                                {
                                    JobID jobIDInstance = new JobID();
                                    statusInstance.JobID = jobIDInstance;
                                    
                                    JToken jtIdentifierValue = jobIDValue["jtIdentifier"];
                                    if (jtIdentifierValue != null && jtIdentifierValue.Type != JTokenType.Null)
                                    {
                                        string jtIdentifierInstance = ((string)jtIdentifierValue);
                                        jobIDInstance.JtIdentifier = jtIdentifierInstance;
                                    }
                                    
                                    JToken idValue = jobIDValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        jobIDInstance.Id = idInstance;
                                    }
                                }
                                
                                JToken jobIdValue = statusValue["jobId"];
                                if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                {
                                    string jobIdInstance = ((string)jobIdValue);
                                    statusInstance.JobId = jobIdInstance;
                                }
                                
                                JToken runStateValue = statusValue["runState"];
                                if (runStateValue != null && runStateValue.Type != JTokenType.Null)
                                {
                                    int runStateInstance = ((int)runStateValue);
                                    statusInstance.RunState = runStateInstance;
                                }
                                
                                JToken userValue = statusValue["user"];
                                if (userValue != null && userValue.Type != JTokenType.Null)
                                {
                                    string userInstance = ((string)userValue);
                                    statusInstance.Username = userInstance;
                                }
                                
                                JToken jobFileValue = statusValue["jobFile"];
                                if (jobFileValue != null && jobFileValue.Type != JTokenType.Null)
                                {
                                    string jobFileInstance = ((string)jobFileValue);
                                    statusInstance.JobFile = jobFileInstance;
                                }
                                
                                JToken jobCompleteValue = statusValue["jobComplete"];
                                if (jobCompleteValue != null && jobCompleteValue.Type != JTokenType.Null)
                                {
                                    bool jobCompleteInstance = ((bool)jobCompleteValue);
                                    statusInstance.JobComplete = jobCompleteInstance;
                                }
                                
                                JToken priorityValue = statusValue["priority"];
                                if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                {
                                    string priorityInstance = ((string)priorityValue);
                                    statusInstance.Priority = priorityInstance;
                                }
                                
                                JToken stateValue = statusValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    statusInstance.State = stateInstance;
                                }
                                
                                JToken numReservedSlotsValue = statusValue["numReservedSlots"];
                                if (numReservedSlotsValue != null && numReservedSlotsValue.Type != JTokenType.Null)
                                {
                                    string numReservedSlotsInstance = ((string)numReservedSlotsValue);
                                    statusInstance.NumReservedSlots = numReservedSlotsInstance;
                                }
                                
                                JToken schedulingInfoValue = statusValue["schedulingInfo"];
                                if (schedulingInfoValue != null && schedulingInfoValue.Type != JTokenType.Null)
                                {
                                    string schedulingInfoInstance = ((string)schedulingInfoValue);
                                    statusInstance.SchedulingInfo = schedulingInfoInstance;
                                }
                                
                                JToken reservedMemValue = statusValue["reservedMem"];
                                if (reservedMemValue != null && reservedMemValue.Type != JTokenType.Null)
                                {
                                    string reservedMemInstance = ((string)reservedMemValue);
                                    statusInstance.ReservedMem = reservedMemInstance;
                                }
                                
                                JToken numUsedSlotsValue = statusValue["numUsedSlots"];
                                if (numUsedSlotsValue != null && numUsedSlotsValue.Type != JTokenType.Null)
                                {
                                    string numUsedSlotsInstance = ((string)numUsedSlotsValue);
                                    statusInstance.NumUsedSlots = numUsedSlotsInstance;
                                }
                                
                                JToken failureInfoValue = statusValue["failureInfo"];
                                if (failureInfoValue != null && failureInfoValue.Type != JTokenType.Null)
                                {
                                    string failureInfoInstance = ((string)failureInfoValue);
                                    statusInstance.FailureInfo = failureInfoInstance;
                                }
                                
                                JToken usedMemValue = statusValue["usedMem"];
                                if (usedMemValue != null && usedMemValue.Type != JTokenType.Null)
                                {
                                    string usedMemInstance = ((string)usedMemValue);
                                    statusInstance.UsedMem = usedMemInstance;
                                }
                                
                                JToken neededMemValue = statusValue["neededMem"];
                                if (neededMemValue != null && neededMemValue.Type != JTokenType.Null)
                                {
                                    string neededMemInstance = ((string)neededMemValue);
                                    statusInstance.NeededMem = neededMemInstance;
                                }
                                
                                JToken finishTimeValue = statusValue["finishTime"];
                                if (finishTimeValue != null && finishTimeValue.Type != JTokenType.Null)
                                {
                                    string finishTimeInstance = ((string)finishTimeValue);
                                    statusInstance.FinishTime = finishTimeInstance;
                                }
                                
                                JToken trackingUrlValue = statusValue["trackingUrl"];
                                if (trackingUrlValue != null && trackingUrlValue.Type != JTokenType.Null)
                                {
                                    string trackingUrlInstance = ((string)trackingUrlValue);
                                    statusInstance.TrackingUrl = trackingUrlInstance;
                                }
                                
                                JToken startTimeValue = statusValue["startTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    long startTimeInstance = ((long)startTimeValue);
                                    statusInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken jobNameValue = statusValue["jobName"];
                                if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                {
                                    string jobNameInstance = ((string)jobNameValue);
                                    statusInstance.JobName = jobNameInstance;
                                }
                                
                                JToken retiredValue = statusValue["retired"];
                                if (retiredValue != null && retiredValue.Type != JTokenType.Null)
                                {
                                    bool retiredInstance = ((bool)retiredValue);
                                    statusInstance.Retired = retiredInstance;
                                }
                                
                                JToken jobACLsValue = statusValue["jobACLs"];
                                if (jobACLsValue != null && jobACLsValue.Type != JTokenType.Null)
                                {
                                    JobACLs jobACLsInstance = new JobACLs();
                                    statusInstance.JobACLs = jobACLsInstance;
                                }
                                
                                JToken queueValue = statusValue["queue"];
                                if (queueValue != null && queueValue.Type != JTokenType.Null)
                                {
                                    string queueInstance = ((string)queueValue);
                                    statusInstance.Queue = queueInstance;
                                }
                                
                                JToken uberValue = statusValue["uber"];
                                if (uberValue != null && uberValue.Type != JTokenType.Null)
                                {
                                    bool uberInstance = ((bool)uberValue);
                                    statusInstance.Uber = uberInstance;
                                }
                                
                                JToken reduceProgressValue = statusValue["reduceProgress"];
                                if (reduceProgressValue != null && reduceProgressValue.Type != JTokenType.Null)
                                {
                                    double reduceProgressInstance = ((double)reduceProgressValue);
                                    statusInstance.ReduceProgress = reduceProgressInstance;
                                }
                                
                                JToken cleanupProgressValue = statusValue["cleanupProgress"];
                                if (cleanupProgressValue != null && cleanupProgressValue.Type != JTokenType.Null)
                                {
                                    double cleanupProgressInstance = ((double)cleanupProgressValue);
                                    statusInstance.CleanupProgress = cleanupProgressInstance;
                                }
                                
                                JToken mapProgressValue = statusValue["mapProgress"];
                                if (mapProgressValue != null && mapProgressValue.Type != JTokenType.Null)
                                {
                                    double mapProgressInstance = ((double)mapProgressValue);
                                    statusInstance.MapProgress = mapProgressInstance;
                                }
                                
                                JToken historyFileValue = statusValue["historyFile"];
                                if (historyFileValue != null && historyFileValue.Type != JTokenType.Null)
                                {
                                    string historyFileInstance = ((string)historyFileValue);
                                    statusInstance.HistoryFile = historyFileInstance;
                                }
                                
                                JToken setupProgressValue = statusValue["setupProgress"];
                                if (setupProgressValue != null && setupProgressValue.Type != JTokenType.Null)
                                {
                                    double setupProgressInstance = ((double)setupProgressValue);
                                    statusInstance.SetupProgress = setupProgressInstance;
                                }
                            }
                            
                            JToken profileValue = responseDoc["profile"];
                            if (profileValue != null && profileValue.Type != JTokenType.Null)
                            {
                                Profile profileInstance = new Profile();
                                jobDetailInstance.Profile = profileInstance;
                                
                                JToken jobFileValue2 = profileValue["jobFile"];
                                if (jobFileValue2 != null && jobFileValue2.Type != JTokenType.Null)
                                {
                                    string jobFileInstance2 = ((string)jobFileValue2);
                                    profileInstance.JobFile = jobFileInstance2;
                                }
                                
                                JToken urlValue = profileValue["url"];
                                if (urlValue != null && urlValue.Type != JTokenType.Null)
                                {
                                    string urlInstance = ((string)urlValue);
                                    profileInstance.Url = urlInstance;
                                }
                                
                                JToken queueNameValue = profileValue["queueName"];
                                if (queueNameValue != null && queueNameValue.Type != JTokenType.Null)
                                {
                                    string queueNameInstance = ((string)queueNameValue);
                                    profileInstance.QueueName = queueNameInstance;
                                }
                                
                                JToken jobIDValue2 = profileValue["jobID"];
                                if (jobIDValue2 != null && jobIDValue2.Type != JTokenType.Null)
                                {
                                    JobID jobIDInstance2 = new JobID();
                                    profileInstance.JobID = jobIDInstance2;
                                    
                                    JToken jtIdentifierValue2 = jobIDValue2["jtIdentifier"];
                                    if (jtIdentifierValue2 != null && jtIdentifierValue2.Type != JTokenType.Null)
                                    {
                                        string jtIdentifierInstance2 = ((string)jtIdentifierValue2);
                                        jobIDInstance2.JtIdentifier = jtIdentifierInstance2;
                                    }
                                    
                                    JToken idValue2 = jobIDValue2["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        jobIDInstance2.Id = idInstance2;
                                    }
                                }
                                
                                JToken jobNameValue2 = profileValue["jobName"];
                                if (jobNameValue2 != null && jobNameValue2.Type != JTokenType.Null)
                                {
                                    string jobNameInstance2 = ((string)jobNameValue2);
                                    profileInstance.JobName = jobNameInstance2;
                                }
                                
                                JToken userValue2 = profileValue["user"];
                                if (userValue2 != null && userValue2.Type != JTokenType.Null)
                                {
                                    string userInstance2 = ((string)userValue2);
                                    profileInstance.User = userInstance2;
                                }
                                
                                JToken jobIdValue2 = profileValue["jobId"];
                                if (jobIdValue2 != null && jobIdValue2.Type != JTokenType.Null)
                                {
                                    string jobIdInstance2 = ((string)jobIdValue2);
                                    profileInstance.JobId = jobIdInstance2;
                                }
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                jobDetailInstance.Id = idInstance3;
                            }
                            
                            JToken parentIdValue = responseDoc["parentId"];
                            if (parentIdValue != null && parentIdValue.Type != JTokenType.Null)
                            {
                                string parentIdInstance = ((string)parentIdValue);
                                jobDetailInstance.ParentId = parentIdInstance;
                            }
                            
                            JToken percentCompleteValue = responseDoc["percentComplete"];
                            if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                            {
                                string percentCompleteInstance = ((string)percentCompleteValue);
                                jobDetailInstance.PercentComplete = percentCompleteInstance;
                            }
                            
                            JToken exitValueValue = responseDoc["exitValue"];
                            if (exitValueValue != null && exitValueValue.Type != JTokenType.Null)
                            {
                                int exitValueInstance = ((int)exitValueValue);
                                jobDetailInstance.ExitValue = exitValueInstance;
                            }
                            
                            JToken userValue3 = responseDoc["user"];
                            if (userValue3 != null && userValue3.Type != JTokenType.Null)
                            {
                                string userInstance3 = ((string)userValue3);
                                jobDetailInstance.User = userInstance3;
                            }
                            
                            JToken callbackValue = responseDoc["callback"];
                            if (callbackValue != null && callbackValue.Type != JTokenType.Null)
                            {
                                object callbackInstance = ((string)callbackValue);
                                jobDetailInstance.Callback = callbackInstance;
                            }
                            
                            JToken completedValue = responseDoc["completed"];
                            if (completedValue != null && completedValue.Type != JTokenType.Null)
                            {
                                string completedInstance = ((string)completedValue);
                                jobDetailInstance.Completed = completedInstance;
                            }
                            
                            JToken userargsValue = responseDoc["userargs"];
                            if (userargsValue != null && userargsValue.Type != JTokenType.Null)
                            {
                                Userargs userargsInstance = new Userargs();
                                jobDetailInstance.Userargs = userargsInstance;
                                
                                JToken argArray = userargsValue["arg"];
                                if (argArray != null && argArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken argValue in ((JArray)argArray))
                                    {
                                        userargsInstance.Arg.Add(((string)argValue));
                                    }
                                }
                                
                                JToken statusdirValue = userargsValue["statusdir"];
                                if (statusdirValue != null && statusdirValue.Type != JTokenType.Null)
                                {
                                    object statusdirInstance = ((string)statusdirValue);
                                    userargsInstance.Statusdir = statusdirInstance;
                                }
                                
                                JToken filesValue = userargsValue["files"];
                                if (filesValue != null && filesValue.Type != JTokenType.Null)
                                {
                                    object filesInstance = ((string)filesValue);
                                    userargsInstance.Files = filesInstance;
                                }
                                
                                JToken defineArray = userargsValue["define"];
                                if (defineArray != null && defineArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken defineValue in ((JArray)defineArray))
                                    {
                                        userargsInstance.Define.Add(((string)defineValue));
                                    }
                                }
                                
                                JToken enablelogValue = userargsValue["enablelog"];
                                if (enablelogValue != null && enablelogValue.Type != JTokenType.Null)
                                {
                                    string enablelogInstance = ((string)enablelogValue);
                                    userargsInstance.Enablelog = enablelogInstance;
                                }
                                
                                JToken executeValue = userargsValue["execute"];
                                if (executeValue != null && executeValue.Type != JTokenType.Null)
                                {
                                    string executeInstance = ((string)executeValue);
                                    userargsInstance.Execute = executeInstance;
                                }
                                
                                JToken usernameValue = userargsValue["user.name"];
                                if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                {
                                    string usernameInstance = ((string)usernameValue);
                                    userargsInstance.Username = usernameInstance;
                                }
                                
                                JToken callbackValue2 = userargsValue["callback"];
                                if (callbackValue2 != null && callbackValue2.Type != JTokenType.Null)
                                {
                                    object callbackInstance2 = ((string)callbackValue2);
                                    userargsInstance.Callback = callbackInstance2;
                                }
                                
                                JToken fileValue = userargsValue["file"];
                                if (fileValue != null && fileValue.Type != JTokenType.Null)
                                {
                                    string fileInstance = fileValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    userargsInstance.File = fileInstance;
                                }
                                
                                JToken jarValue = userargsValue["jar"];
                                if (jarValue != null && jarValue.Type != JTokenType.Null)
                                {
                                    string jarInstance = ((string)jarValue);
                                    userargsInstance.Jar = jarInstance;
                                }
                            }
                            
                            JToken msgValue = responseDoc["msg"];
                            if (msgValue != null && msgValue.Type != JTokenType.Null)
                            {
                                object msgInstance = ((string)msgValue);
                                jobDetailInstance.Msg = msgInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Initiates cancel on given running job in the specified HDInsight
        /// cluster.
        /// </summary>
        /// <param name='jobId'>
        /// Required. The id of the job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Job operation response.
        /// </returns>
        public async Task<JobGetResponse> KillJobAsync(string jobId, CancellationToken cancellationToken)
        {
            // Validate
            if (jobId == null)
            {
                throw new ArgumentNullException("jobId");
            }
            if (jobId.Length <= 0)
            {
                throw new ArgumentException("jobId cannot be empty.");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                TracingAdapter.Enter(invocationId, this, "KillJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(this.Client.ClusterDnsName);
            url = url + "/templeton/v1/jobs/";
            url = url + Uri.EscapeDataString(jobId);
            List<string> queryParameters = new List<string>();
            if (this.Client.UserName != null)
            {
                queryParameters.Add("user.name=" + Uri.EscapeDataString(this.Client.UserName));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("accept", "application/json");
                httpRequest.Headers.Add("useragent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobDetailRootJsonObject jobDetailInstance = new JobDetailRootJsonObject();
                            result.JobDetail = jobDetailInstance;
                            
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                Status statusInstance = new Status();
                                jobDetailInstance.Status = statusInstance;
                                
                                JToken jpValue = statusValue["jp"];
                                if (jpValue != null && jpValue.Type != JTokenType.Null)
                                {
                                    string jpInstance = ((string)jpValue);
                                    statusInstance.JobPriority = jpInstance;
                                }
                                
                                JToken jobIDValue = statusValue["jobID"];
                                if (jobIDValue != null && jobIDValue.Type != JTokenType.Null)
                                {
                                    JobID jobIDInstance = new JobID();
                                    statusInstance.JobID = jobIDInstance;
                                    
                                    JToken jtIdentifierValue = jobIDValue["jtIdentifier"];
                                    if (jtIdentifierValue != null && jtIdentifierValue.Type != JTokenType.Null)
                                    {
                                        string jtIdentifierInstance = ((string)jtIdentifierValue);
                                        jobIDInstance.JtIdentifier = jtIdentifierInstance;
                                    }
                                    
                                    JToken idValue = jobIDValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        jobIDInstance.Id = idInstance;
                                    }
                                }
                                
                                JToken jobIdValue = statusValue["jobId"];
                                if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                {
                                    string jobIdInstance = ((string)jobIdValue);
                                    statusInstance.JobId = jobIdInstance;
                                }
                                
                                JToken runStateValue = statusValue["runState"];
                                if (runStateValue != null && runStateValue.Type != JTokenType.Null)
                                {
                                    int runStateInstance = ((int)runStateValue);
                                    statusInstance.RunState = runStateInstance;
                                }
                                
                                JToken userValue = statusValue["user"];
                                if (userValue != null && userValue.Type != JTokenType.Null)
                                {
                                    string userInstance = ((string)userValue);
                                    statusInstance.Username = userInstance;
                                }
                                
                                JToken jobFileValue = statusValue["jobFile"];
                                if (jobFileValue != null && jobFileValue.Type != JTokenType.Null)
                                {
                                    string jobFileInstance = ((string)jobFileValue);
                                    statusInstance.JobFile = jobFileInstance;
                                }
                                
                                JToken jobCompleteValue = statusValue["jobComplete"];
                                if (jobCompleteValue != null && jobCompleteValue.Type != JTokenType.Null)
                                {
                                    bool jobCompleteInstance = ((bool)jobCompleteValue);
                                    statusInstance.JobComplete = jobCompleteInstance;
                                }
                                
                                JToken priorityValue = statusValue["priority"];
                                if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                {
                                    string priorityInstance = ((string)priorityValue);
                                    statusInstance.Priority = priorityInstance;
                                }
                                
                                JToken stateValue = statusValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    statusInstance.State = stateInstance;
                                }
                                
                                JToken numReservedSlotsValue = statusValue["numReservedSlots"];
                                if (numReservedSlotsValue != null && numReservedSlotsValue.Type != JTokenType.Null)
                                {
                                    string numReservedSlotsInstance = ((string)numReservedSlotsValue);
                                    statusInstance.NumReservedSlots = numReservedSlotsInstance;
                                }
                                
                                JToken schedulingInfoValue = statusValue["schedulingInfo"];
                                if (schedulingInfoValue != null && schedulingInfoValue.Type != JTokenType.Null)
                                {
                                    string schedulingInfoInstance = ((string)schedulingInfoValue);
                                    statusInstance.SchedulingInfo = schedulingInfoInstance;
                                }
                                
                                JToken reservedMemValue = statusValue["reservedMem"];
                                if (reservedMemValue != null && reservedMemValue.Type != JTokenType.Null)
                                {
                                    string reservedMemInstance = ((string)reservedMemValue);
                                    statusInstance.ReservedMem = reservedMemInstance;
                                }
                                
                                JToken numUsedSlotsValue = statusValue["numUsedSlots"];
                                if (numUsedSlotsValue != null && numUsedSlotsValue.Type != JTokenType.Null)
                                {
                                    string numUsedSlotsInstance = ((string)numUsedSlotsValue);
                                    statusInstance.NumUsedSlots = numUsedSlotsInstance;
                                }
                                
                                JToken failureInfoValue = statusValue["failureInfo"];
                                if (failureInfoValue != null && failureInfoValue.Type != JTokenType.Null)
                                {
                                    string failureInfoInstance = ((string)failureInfoValue);
                                    statusInstance.FailureInfo = failureInfoInstance;
                                }
                                
                                JToken usedMemValue = statusValue["usedMem"];
                                if (usedMemValue != null && usedMemValue.Type != JTokenType.Null)
                                {
                                    string usedMemInstance = ((string)usedMemValue);
                                    statusInstance.UsedMem = usedMemInstance;
                                }
                                
                                JToken neededMemValue = statusValue["neededMem"];
                                if (neededMemValue != null && neededMemValue.Type != JTokenType.Null)
                                {
                                    string neededMemInstance = ((string)neededMemValue);
                                    statusInstance.NeededMem = neededMemInstance;
                                }
                                
                                JToken finishTimeValue = statusValue["finishTime"];
                                if (finishTimeValue != null && finishTimeValue.Type != JTokenType.Null)
                                {
                                    string finishTimeInstance = ((string)finishTimeValue);
                                    statusInstance.FinishTime = finishTimeInstance;
                                }
                                
                                JToken trackingUrlValue = statusValue["trackingUrl"];
                                if (trackingUrlValue != null && trackingUrlValue.Type != JTokenType.Null)
                                {
                                    string trackingUrlInstance = ((string)trackingUrlValue);
                                    statusInstance.TrackingUrl = trackingUrlInstance;
                                }
                                
                                JToken startTimeValue = statusValue["startTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    long startTimeInstance = ((long)startTimeValue);
                                    statusInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken jobNameValue = statusValue["jobName"];
                                if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                {
                                    string jobNameInstance = ((string)jobNameValue);
                                    statusInstance.JobName = jobNameInstance;
                                }
                                
                                JToken retiredValue = statusValue["retired"];
                                if (retiredValue != null && retiredValue.Type != JTokenType.Null)
                                {
                                    bool retiredInstance = ((bool)retiredValue);
                                    statusInstance.Retired = retiredInstance;
                                }
                                
                                JToken jobACLsValue = statusValue["jobACLs"];
                                if (jobACLsValue != null && jobACLsValue.Type != JTokenType.Null)
                                {
                                    JobACLs jobACLsInstance = new JobACLs();
                                    statusInstance.JobACLs = jobACLsInstance;
                                }
                                
                                JToken queueValue = statusValue["queue"];
                                if (queueValue != null && queueValue.Type != JTokenType.Null)
                                {
                                    string queueInstance = ((string)queueValue);
                                    statusInstance.Queue = queueInstance;
                                }
                                
                                JToken uberValue = statusValue["uber"];
                                if (uberValue != null && uberValue.Type != JTokenType.Null)
                                {
                                    bool uberInstance = ((bool)uberValue);
                                    statusInstance.Uber = uberInstance;
                                }
                                
                                JToken reduceProgressValue = statusValue["reduceProgress"];
                                if (reduceProgressValue != null && reduceProgressValue.Type != JTokenType.Null)
                                {
                                    double reduceProgressInstance = ((double)reduceProgressValue);
                                    statusInstance.ReduceProgress = reduceProgressInstance;
                                }
                                
                                JToken cleanupProgressValue = statusValue["cleanupProgress"];
                                if (cleanupProgressValue != null && cleanupProgressValue.Type != JTokenType.Null)
                                {
                                    double cleanupProgressInstance = ((double)cleanupProgressValue);
                                    statusInstance.CleanupProgress = cleanupProgressInstance;
                                }
                                
                                JToken mapProgressValue = statusValue["mapProgress"];
                                if (mapProgressValue != null && mapProgressValue.Type != JTokenType.Null)
                                {
                                    double mapProgressInstance = ((double)mapProgressValue);
                                    statusInstance.MapProgress = mapProgressInstance;
                                }
                                
                                JToken historyFileValue = statusValue["historyFile"];
                                if (historyFileValue != null && historyFileValue.Type != JTokenType.Null)
                                {
                                    string historyFileInstance = ((string)historyFileValue);
                                    statusInstance.HistoryFile = historyFileInstance;
                                }
                                
                                JToken setupProgressValue = statusValue["setupProgress"];
                                if (setupProgressValue != null && setupProgressValue.Type != JTokenType.Null)
                                {
                                    double setupProgressInstance = ((double)setupProgressValue);
                                    statusInstance.SetupProgress = setupProgressInstance;
                                }
                            }
                            
                            JToken profileValue = responseDoc["profile"];
                            if (profileValue != null && profileValue.Type != JTokenType.Null)
                            {
                                Profile profileInstance = new Profile();
                                jobDetailInstance.Profile = profileInstance;
                                
                                JToken jobFileValue2 = profileValue["jobFile"];
                                if (jobFileValue2 != null && jobFileValue2.Type != JTokenType.Null)
                                {
                                    string jobFileInstance2 = ((string)jobFileValue2);
                                    profileInstance.JobFile = jobFileInstance2;
                                }
                                
                                JToken urlValue = profileValue["url"];
                                if (urlValue != null && urlValue.Type != JTokenType.Null)
                                {
                                    string urlInstance = ((string)urlValue);
                                    profileInstance.Url = urlInstance;
                                }
                                
                                JToken queueNameValue = profileValue["queueName"];
                                if (queueNameValue != null && queueNameValue.Type != JTokenType.Null)
                                {
                                    string queueNameInstance = ((string)queueNameValue);
                                    profileInstance.QueueName = queueNameInstance;
                                }
                                
                                JToken jobIDValue2 = profileValue["jobID"];
                                if (jobIDValue2 != null && jobIDValue2.Type != JTokenType.Null)
                                {
                                    JobID jobIDInstance2 = new JobID();
                                    profileInstance.JobID = jobIDInstance2;
                                    
                                    JToken jtIdentifierValue2 = jobIDValue2["jtIdentifier"];
                                    if (jtIdentifierValue2 != null && jtIdentifierValue2.Type != JTokenType.Null)
                                    {
                                        string jtIdentifierInstance2 = ((string)jtIdentifierValue2);
                                        jobIDInstance2.JtIdentifier = jtIdentifierInstance2;
                                    }
                                    
                                    JToken idValue2 = jobIDValue2["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        jobIDInstance2.Id = idInstance2;
                                    }
                                }
                                
                                JToken jobNameValue2 = profileValue["jobName"];
                                if (jobNameValue2 != null && jobNameValue2.Type != JTokenType.Null)
                                {
                                    string jobNameInstance2 = ((string)jobNameValue2);
                                    profileInstance.JobName = jobNameInstance2;
                                }
                                
                                JToken userValue2 = profileValue["user"];
                                if (userValue2 != null && userValue2.Type != JTokenType.Null)
                                {
                                    string userInstance2 = ((string)userValue2);
                                    profileInstance.User = userInstance2;
                                }
                                
                                JToken jobIdValue2 = profileValue["jobId"];
                                if (jobIdValue2 != null && jobIdValue2.Type != JTokenType.Null)
                                {
                                    string jobIdInstance2 = ((string)jobIdValue2);
                                    profileInstance.JobId = jobIdInstance2;
                                }
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                jobDetailInstance.Id = idInstance3;
                            }
                            
                            JToken parentIdValue = responseDoc["parentId"];
                            if (parentIdValue != null && parentIdValue.Type != JTokenType.Null)
                            {
                                string parentIdInstance = ((string)parentIdValue);
                                jobDetailInstance.ParentId = parentIdInstance;
                            }
                            
                            JToken percentCompleteValue = responseDoc["percentComplete"];
                            if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                            {
                                string percentCompleteInstance = ((string)percentCompleteValue);
                                jobDetailInstance.PercentComplete = percentCompleteInstance;
                            }
                            
                            JToken exitValueValue = responseDoc["exitValue"];
                            if (exitValueValue != null && exitValueValue.Type != JTokenType.Null)
                            {
                                int exitValueInstance = ((int)exitValueValue);
                                jobDetailInstance.ExitValue = exitValueInstance;
                            }
                            
                            JToken userValue3 = responseDoc["user"];
                            if (userValue3 != null && userValue3.Type != JTokenType.Null)
                            {
                                string userInstance3 = ((string)userValue3);
                                jobDetailInstance.User = userInstance3;
                            }
                            
                            JToken callbackValue = responseDoc["callback"];
                            if (callbackValue != null && callbackValue.Type != JTokenType.Null)
                            {
                                object callbackInstance = ((string)callbackValue);
                                jobDetailInstance.Callback = callbackInstance;
                            }
                            
                            JToken completedValue = responseDoc["completed"];
                            if (completedValue != null && completedValue.Type != JTokenType.Null)
                            {
                                string completedInstance = ((string)completedValue);
                                jobDetailInstance.Completed = completedInstance;
                            }
                            
                            JToken userargsValue = responseDoc["userargs"];
                            if (userargsValue != null && userargsValue.Type != JTokenType.Null)
                            {
                                Userargs userargsInstance = new Userargs();
                                jobDetailInstance.Userargs = userargsInstance;
                                
                                JToken argArray = userargsValue["arg"];
                                if (argArray != null && argArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken argValue in ((JArray)argArray))
                                    {
                                        userargsInstance.Arg.Add(((string)argValue));
                                    }
                                }
                                
                                JToken statusdirValue = userargsValue["statusdir"];
                                if (statusdirValue != null && statusdirValue.Type != JTokenType.Null)
                                {
                                    object statusdirInstance = ((string)statusdirValue);
                                    userargsInstance.Statusdir = statusdirInstance;
                                }
                                
                                JToken filesValue = userargsValue["files"];
                                if (filesValue != null && filesValue.Type != JTokenType.Null)
                                {
                                    object filesInstance = ((string)filesValue);
                                    userargsInstance.Files = filesInstance;
                                }
                                
                                JToken defineArray = userargsValue["define"];
                                if (defineArray != null && defineArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken defineValue in ((JArray)defineArray))
                                    {
                                        userargsInstance.Define.Add(((string)defineValue));
                                    }
                                }
                                
                                JToken enablelogValue = userargsValue["enablelog"];
                                if (enablelogValue != null && enablelogValue.Type != JTokenType.Null)
                                {
                                    string enablelogInstance = ((string)enablelogValue);
                                    userargsInstance.Enablelog = enablelogInstance;
                                }
                                
                                JToken executeValue = userargsValue["execute"];
                                if (executeValue != null && executeValue.Type != JTokenType.Null)
                                {
                                    string executeInstance = ((string)executeValue);
                                    userargsInstance.Execute = executeInstance;
                                }
                                
                                JToken usernameValue = userargsValue["user.name"];
                                if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                {
                                    string usernameInstance = ((string)usernameValue);
                                    userargsInstance.Username = usernameInstance;
                                }
                                
                                JToken callbackValue2 = userargsValue["callback"];
                                if (callbackValue2 != null && callbackValue2.Type != JTokenType.Null)
                                {
                                    object callbackInstance2 = ((string)callbackValue2);
                                    userargsInstance.Callback = callbackInstance2;
                                }
                                
                                JToken fileValue = userargsValue["file"];
                                if (fileValue != null && fileValue.Type != JTokenType.Null)
                                {
                                    string fileInstance = fileValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                    userargsInstance.File = fileInstance;
                                }
                                
                                JToken jarValue = userargsValue["jar"];
                                if (jarValue != null && jarValue.Type != JTokenType.Null)
                                {
                                    string jarInstance = ((string)jarValue);
                                    userargsInstance.Jar = jarInstance;
                                }
                            }
                            
                            JToken msgValue = responseDoc["msg"];
                            if (msgValue != null && msgValue.Type != JTokenType.Null)
                            {
                                object msgInstance = ((string)msgValue);
                                jobDetailInstance.Msg = msgInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the list of jobs from the specified HDInsight cluster.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Job operation response.
        /// </returns>
        public async Task<JobListResponse> ListJobsAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListJobsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(this.Client.ClusterDnsName);
            url = url + "/templeton/v1/jobs";
            List<string> queryParameters = new List<string>();
            if (this.Client.UserName != null)
            {
                queryParameters.Add("user.name=" + Uri.EscapeDataString(this.Client.UserName));
            }
            queryParameters.Add("showall=true");
            queryParameters.Add("fields=*");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("accept", "application/json");
                httpRequest.Headers.Add("useragent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken jobListArray = responseDoc;
                            if (jobListArray != null && jobListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken jobListValue in ((JArray)jobListArray))
                                {
                                    JobListJsonObject jobListJsonObjectInstance = new JobListJsonObject();
                                    result.JobList.Add(jobListJsonObjectInstance);
                                    
                                    JToken detailValue = jobListValue["detail"];
                                    if (detailValue != null && detailValue.Type != JTokenType.Null)
                                    {
                                        JobDetailRootJsonObject detailInstance = new JobDetailRootJsonObject();
                                        jobListJsonObjectInstance.Detail = detailInstance;
                                        
                                        JToken statusValue = detailValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            Status statusInstance = new Status();
                                            detailInstance.Status = statusInstance;
                                            
                                            JToken jpValue = statusValue["jp"];
                                            if (jpValue != null && jpValue.Type != JTokenType.Null)
                                            {
                                                string jpInstance = ((string)jpValue);
                                                statusInstance.JobPriority = jpInstance;
                                            }
                                            
                                            JToken jobIDValue = statusValue["jobID"];
                                            if (jobIDValue != null && jobIDValue.Type != JTokenType.Null)
                                            {
                                                JobID jobIDInstance = new JobID();
                                                statusInstance.JobID = jobIDInstance;
                                                
                                                JToken jtIdentifierValue = jobIDValue["jtIdentifier"];
                                                if (jtIdentifierValue != null && jtIdentifierValue.Type != JTokenType.Null)
                                                {
                                                    string jtIdentifierInstance = ((string)jtIdentifierValue);
                                                    jobIDInstance.JtIdentifier = jtIdentifierInstance;
                                                }
                                                
                                                JToken idValue = jobIDValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    jobIDInstance.Id = idInstance;
                                                }
                                            }
                                            
                                            JToken jobIdValue = statusValue["jobId"];
                                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance = ((string)jobIdValue);
                                                statusInstance.JobId = jobIdInstance;
                                            }
                                            
                                            JToken runStateValue = statusValue["runState"];
                                            if (runStateValue != null && runStateValue.Type != JTokenType.Null)
                                            {
                                                int runStateInstance = ((int)runStateValue);
                                                statusInstance.RunState = runStateInstance;
                                            }
                                            
                                            JToken userValue = statusValue["user"];
                                            if (userValue != null && userValue.Type != JTokenType.Null)
                                            {
                                                string userInstance = ((string)userValue);
                                                statusInstance.Username = userInstance;
                                            }
                                            
                                            JToken jobFileValue = statusValue["jobFile"];
                                            if (jobFileValue != null && jobFileValue.Type != JTokenType.Null)
                                            {
                                                string jobFileInstance = ((string)jobFileValue);
                                                statusInstance.JobFile = jobFileInstance;
                                            }
                                            
                                            JToken jobCompleteValue = statusValue["jobComplete"];
                                            if (jobCompleteValue != null && jobCompleteValue.Type != JTokenType.Null)
                                            {
                                                bool jobCompleteInstance = ((bool)jobCompleteValue);
                                                statusInstance.JobComplete = jobCompleteInstance;
                                            }
                                            
                                            JToken priorityValue = statusValue["priority"];
                                            if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                            {
                                                string priorityInstance = ((string)priorityValue);
                                                statusInstance.Priority = priorityInstance;
                                            }
                                            
                                            JToken stateValue = statusValue["state"];
                                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                                            {
                                                string stateInstance = ((string)stateValue);
                                                statusInstance.State = stateInstance;
                                            }
                                            
                                            JToken numReservedSlotsValue = statusValue["numReservedSlots"];
                                            if (numReservedSlotsValue != null && numReservedSlotsValue.Type != JTokenType.Null)
                                            {
                                                string numReservedSlotsInstance = ((string)numReservedSlotsValue);
                                                statusInstance.NumReservedSlots = numReservedSlotsInstance;
                                            }
                                            
                                            JToken schedulingInfoValue = statusValue["schedulingInfo"];
                                            if (schedulingInfoValue != null && schedulingInfoValue.Type != JTokenType.Null)
                                            {
                                                string schedulingInfoInstance = ((string)schedulingInfoValue);
                                                statusInstance.SchedulingInfo = schedulingInfoInstance;
                                            }
                                            
                                            JToken reservedMemValue = statusValue["reservedMem"];
                                            if (reservedMemValue != null && reservedMemValue.Type != JTokenType.Null)
                                            {
                                                string reservedMemInstance = ((string)reservedMemValue);
                                                statusInstance.ReservedMem = reservedMemInstance;
                                            }
                                            
                                            JToken numUsedSlotsValue = statusValue["numUsedSlots"];
                                            if (numUsedSlotsValue != null && numUsedSlotsValue.Type != JTokenType.Null)
                                            {
                                                string numUsedSlotsInstance = ((string)numUsedSlotsValue);
                                                statusInstance.NumUsedSlots = numUsedSlotsInstance;
                                            }
                                            
                                            JToken failureInfoValue = statusValue["failureInfo"];
                                            if (failureInfoValue != null && failureInfoValue.Type != JTokenType.Null)
                                            {
                                                string failureInfoInstance = ((string)failureInfoValue);
                                                statusInstance.FailureInfo = failureInfoInstance;
                                            }
                                            
                                            JToken usedMemValue = statusValue["usedMem"];
                                            if (usedMemValue != null && usedMemValue.Type != JTokenType.Null)
                                            {
                                                string usedMemInstance = ((string)usedMemValue);
                                                statusInstance.UsedMem = usedMemInstance;
                                            }
                                            
                                            JToken neededMemValue = statusValue["neededMem"];
                                            if (neededMemValue != null && neededMemValue.Type != JTokenType.Null)
                                            {
                                                string neededMemInstance = ((string)neededMemValue);
                                                statusInstance.NeededMem = neededMemInstance;
                                            }
                                            
                                            JToken finishTimeValue = statusValue["finishTime"];
                                            if (finishTimeValue != null && finishTimeValue.Type != JTokenType.Null)
                                            {
                                                string finishTimeInstance = ((string)finishTimeValue);
                                                statusInstance.FinishTime = finishTimeInstance;
                                            }
                                            
                                            JToken trackingUrlValue = statusValue["trackingUrl"];
                                            if (trackingUrlValue != null && trackingUrlValue.Type != JTokenType.Null)
                                            {
                                                string trackingUrlInstance = ((string)trackingUrlValue);
                                                statusInstance.TrackingUrl = trackingUrlInstance;
                                            }
                                            
                                            JToken startTimeValue = statusValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                long startTimeInstance = ((long)startTimeValue);
                                                statusInstance.StartTime = startTimeInstance;
                                            }
                                            
                                            JToken jobNameValue = statusValue["jobName"];
                                            if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                            {
                                                string jobNameInstance = ((string)jobNameValue);
                                                statusInstance.JobName = jobNameInstance;
                                            }
                                            
                                            JToken retiredValue = statusValue["retired"];
                                            if (retiredValue != null && retiredValue.Type != JTokenType.Null)
                                            {
                                                bool retiredInstance = ((bool)retiredValue);
                                                statusInstance.Retired = retiredInstance;
                                            }
                                            
                                            JToken jobACLsValue = statusValue["jobACLs"];
                                            if (jobACLsValue != null && jobACLsValue.Type != JTokenType.Null)
                                            {
                                                JobACLs jobACLsInstance = new JobACLs();
                                                statusInstance.JobACLs = jobACLsInstance;
                                            }
                                            
                                            JToken queueValue = statusValue["queue"];
                                            if (queueValue != null && queueValue.Type != JTokenType.Null)
                                            {
                                                string queueInstance = ((string)queueValue);
                                                statusInstance.Queue = queueInstance;
                                            }
                                            
                                            JToken uberValue = statusValue["uber"];
                                            if (uberValue != null && uberValue.Type != JTokenType.Null)
                                            {
                                                bool uberInstance = ((bool)uberValue);
                                                statusInstance.Uber = uberInstance;
                                            }
                                            
                                            JToken reduceProgressValue = statusValue["reduceProgress"];
                                            if (reduceProgressValue != null && reduceProgressValue.Type != JTokenType.Null)
                                            {
                                                double reduceProgressInstance = ((double)reduceProgressValue);
                                                statusInstance.ReduceProgress = reduceProgressInstance;
                                            }
                                            
                                            JToken cleanupProgressValue = statusValue["cleanupProgress"];
                                            if (cleanupProgressValue != null && cleanupProgressValue.Type != JTokenType.Null)
                                            {
                                                double cleanupProgressInstance = ((double)cleanupProgressValue);
                                                statusInstance.CleanupProgress = cleanupProgressInstance;
                                            }
                                            
                                            JToken mapProgressValue = statusValue["mapProgress"];
                                            if (mapProgressValue != null && mapProgressValue.Type != JTokenType.Null)
                                            {
                                                double mapProgressInstance = ((double)mapProgressValue);
                                                statusInstance.MapProgress = mapProgressInstance;
                                            }
                                            
                                            JToken historyFileValue = statusValue["historyFile"];
                                            if (historyFileValue != null && historyFileValue.Type != JTokenType.Null)
                                            {
                                                string historyFileInstance = ((string)historyFileValue);
                                                statusInstance.HistoryFile = historyFileInstance;
                                            }
                                            
                                            JToken setupProgressValue = statusValue["setupProgress"];
                                            if (setupProgressValue != null && setupProgressValue.Type != JTokenType.Null)
                                            {
                                                double setupProgressInstance = ((double)setupProgressValue);
                                                statusInstance.SetupProgress = setupProgressInstance;
                                            }
                                        }
                                        
                                        JToken profileValue = detailValue["profile"];
                                        if (profileValue != null && profileValue.Type != JTokenType.Null)
                                        {
                                            Profile profileInstance = new Profile();
                                            detailInstance.Profile = profileInstance;
                                            
                                            JToken jobFileValue2 = profileValue["jobFile"];
                                            if (jobFileValue2 != null && jobFileValue2.Type != JTokenType.Null)
                                            {
                                                string jobFileInstance2 = ((string)jobFileValue2);
                                                profileInstance.JobFile = jobFileInstance2;
                                            }
                                            
                                            JToken urlValue = profileValue["url"];
                                            if (urlValue != null && urlValue.Type != JTokenType.Null)
                                            {
                                                string urlInstance = ((string)urlValue);
                                                profileInstance.Url = urlInstance;
                                            }
                                            
                                            JToken queueNameValue = profileValue["queueName"];
                                            if (queueNameValue != null && queueNameValue.Type != JTokenType.Null)
                                            {
                                                string queueNameInstance = ((string)queueNameValue);
                                                profileInstance.QueueName = queueNameInstance;
                                            }
                                            
                                            JToken jobIDValue2 = profileValue["jobID"];
                                            if (jobIDValue2 != null && jobIDValue2.Type != JTokenType.Null)
                                            {
                                                JobID jobIDInstance2 = new JobID();
                                                profileInstance.JobID = jobIDInstance2;
                                                
                                                JToken jtIdentifierValue2 = jobIDValue2["jtIdentifier"];
                                                if (jtIdentifierValue2 != null && jtIdentifierValue2.Type != JTokenType.Null)
                                                {
                                                    string jtIdentifierInstance2 = ((string)jtIdentifierValue2);
                                                    jobIDInstance2.JtIdentifier = jtIdentifierInstance2;
                                                }
                                                
                                                JToken idValue2 = jobIDValue2["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    jobIDInstance2.Id = idInstance2;
                                                }
                                            }
                                            
                                            JToken jobNameValue2 = profileValue["jobName"];
                                            if (jobNameValue2 != null && jobNameValue2.Type != JTokenType.Null)
                                            {
                                                string jobNameInstance2 = ((string)jobNameValue2);
                                                profileInstance.JobName = jobNameInstance2;
                                            }
                                            
                                            JToken userValue2 = profileValue["user"];
                                            if (userValue2 != null && userValue2.Type != JTokenType.Null)
                                            {
                                                string userInstance2 = ((string)userValue2);
                                                profileInstance.User = userInstance2;
                                            }
                                            
                                            JToken jobIdValue2 = profileValue["jobId"];
                                            if (jobIdValue2 != null && jobIdValue2.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance2 = ((string)jobIdValue2);
                                                profileInstance.JobId = jobIdInstance2;
                                            }
                                        }
                                        
                                        JToken idValue3 = detailValue["id"];
                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                        {
                                            string idInstance3 = ((string)idValue3);
                                            detailInstance.Id = idInstance3;
                                        }
                                        
                                        JToken parentIdValue = detailValue["parentId"];
                                        if (parentIdValue != null && parentIdValue.Type != JTokenType.Null)
                                        {
                                            string parentIdInstance = ((string)parentIdValue);
                                            detailInstance.ParentId = parentIdInstance;
                                        }
                                        
                                        JToken percentCompleteValue = detailValue["percentComplete"];
                                        if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                                        {
                                            string percentCompleteInstance = ((string)percentCompleteValue);
                                            detailInstance.PercentComplete = percentCompleteInstance;
                                        }
                                        
                                        JToken exitValueValue = detailValue["exitValue"];
                                        if (exitValueValue != null && exitValueValue.Type != JTokenType.Null)
                                        {
                                            int exitValueInstance = ((int)exitValueValue);
                                            detailInstance.ExitValue = exitValueInstance;
                                        }
                                        
                                        JToken userValue3 = detailValue["user"];
                                        if (userValue3 != null && userValue3.Type != JTokenType.Null)
                                        {
                                            string userInstance3 = ((string)userValue3);
                                            detailInstance.User = userInstance3;
                                        }
                                        
                                        JToken callbackValue = detailValue["callback"];
                                        if (callbackValue != null && callbackValue.Type != JTokenType.Null)
                                        {
                                            object callbackInstance = ((string)callbackValue);
                                            detailInstance.Callback = callbackInstance;
                                        }
                                        
                                        JToken completedValue = detailValue["completed"];
                                        if (completedValue != null && completedValue.Type != JTokenType.Null)
                                        {
                                            string completedInstance = ((string)completedValue);
                                            detailInstance.Completed = completedInstance;
                                        }
                                        
                                        JToken userargsValue = detailValue["userargs"];
                                        if (userargsValue != null && userargsValue.Type != JTokenType.Null)
                                        {
                                            Userargs userargsInstance = new Userargs();
                                            detailInstance.Userargs = userargsInstance;
                                            
                                            JToken argArray = userargsValue["arg"];
                                            if (argArray != null && argArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken argValue in ((JArray)argArray))
                                                {
                                                    userargsInstance.Arg.Add(((string)argValue));
                                                }
                                            }
                                            
                                            JToken statusdirValue = userargsValue["statusdir"];
                                            if (statusdirValue != null && statusdirValue.Type != JTokenType.Null)
                                            {
                                                object statusdirInstance = ((string)statusdirValue);
                                                userargsInstance.Statusdir = statusdirInstance;
                                            }
                                            
                                            JToken filesValue = userargsValue["files"];
                                            if (filesValue != null && filesValue.Type != JTokenType.Null)
                                            {
                                                object filesInstance = ((string)filesValue);
                                                userargsInstance.Files = filesInstance;
                                            }
                                            
                                            JToken defineArray = userargsValue["define"];
                                            if (defineArray != null && defineArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken defineValue in ((JArray)defineArray))
                                                {
                                                    userargsInstance.Define.Add(((string)defineValue));
                                                }
                                            }
                                            
                                            JToken enablelogValue = userargsValue["enablelog"];
                                            if (enablelogValue != null && enablelogValue.Type != JTokenType.Null)
                                            {
                                                string enablelogInstance = ((string)enablelogValue);
                                                userargsInstance.Enablelog = enablelogInstance;
                                            }
                                            
                                            JToken executeValue = userargsValue["execute"];
                                            if (executeValue != null && executeValue.Type != JTokenType.Null)
                                            {
                                                string executeInstance = ((string)executeValue);
                                                userargsInstance.Execute = executeInstance;
                                            }
                                            
                                            JToken usernameValue = userargsValue["user.name"];
                                            if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                            {
                                                string usernameInstance = ((string)usernameValue);
                                                userargsInstance.Username = usernameInstance;
                                            }
                                            
                                            JToken callbackValue2 = userargsValue["callback"];
                                            if (callbackValue2 != null && callbackValue2.Type != JTokenType.Null)
                                            {
                                                object callbackInstance2 = ((string)callbackValue2);
                                                userargsInstance.Callback = callbackInstance2;
                                            }
                                            
                                            JToken fileValue = userargsValue["file"];
                                            if (fileValue != null && fileValue.Type != JTokenType.Null)
                                            {
                                                string fileInstance = fileValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                userargsInstance.File = fileInstance;
                                            }
                                            
                                            JToken jarValue = userargsValue["jar"];
                                            if (jarValue != null && jarValue.Type != JTokenType.Null)
                                            {
                                                string jarInstance = ((string)jarValue);
                                                userargsInstance.Jar = jarInstance;
                                            }
                                        }
                                        
                                        JToken msgValue = detailValue["msg"];
                                        if (msgValue != null && msgValue.Type != JTokenType.Null)
                                        {
                                            object msgInstance = ((string)msgValue);
                                            detailInstance.Msg = msgInstance;
                                        }
                                    }
                                    
                                    JToken idValue4 = jobListValue["id"];
                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                    {
                                        string idInstance4 = ((string)idValue4);
                                        jobListJsonObjectInstance.Id = idInstance4;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets numOfJobs after jobId from the specified HDInsight cluster.
        /// </summary>
        /// <param name='jobId'>
        /// Optional. jobId from where to list jobs.
        /// </param>
        /// <param name='numOfJobs'>
        /// Required. Number of jobs to fetch. Use -1 to get all.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Job operation response.
        /// </returns>
        public async Task<JobListResponse> ListJobsAfterJobIdAsync(string jobId, int numOfJobs, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("jobId", jobId);
                tracingParameters.Add("numOfJobs", numOfJobs);
                TracingAdapter.Enter(invocationId, this, "ListJobsAfterJobIdAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(this.Client.ClusterDnsName);
            url = url + "/templeton/v1/jobs";
            List<string> queryParameters = new List<string>();
            if (this.Client.UserName != null)
            {
                queryParameters.Add("user.name=" + Uri.EscapeDataString(this.Client.UserName));
            }
            queryParameters.Add("showall=true");
            queryParameters.Add("fields=*");
            if (jobId != null)
            {
                queryParameters.Add("jobid=" + Uri.EscapeDataString(jobId));
            }
            queryParameters.Add("numrecords=" + Uri.EscapeDataString(numOfJobs.ToString()));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("accept", "application/json");
                httpRequest.Headers.Add("useragent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken jobListArray = responseDoc;
                            if (jobListArray != null && jobListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken jobListValue in ((JArray)jobListArray))
                                {
                                    JobListJsonObject jobListJsonObjectInstance = new JobListJsonObject();
                                    result.JobList.Add(jobListJsonObjectInstance);
                                    
                                    JToken detailValue = jobListValue["detail"];
                                    if (detailValue != null && detailValue.Type != JTokenType.Null)
                                    {
                                        JobDetailRootJsonObject detailInstance = new JobDetailRootJsonObject();
                                        jobListJsonObjectInstance.Detail = detailInstance;
                                        
                                        JToken statusValue = detailValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            Status statusInstance = new Status();
                                            detailInstance.Status = statusInstance;
                                            
                                            JToken jpValue = statusValue["jp"];
                                            if (jpValue != null && jpValue.Type != JTokenType.Null)
                                            {
                                                string jpInstance = ((string)jpValue);
                                                statusInstance.JobPriority = jpInstance;
                                            }
                                            
                                            JToken jobIDValue = statusValue["jobID"];
                                            if (jobIDValue != null && jobIDValue.Type != JTokenType.Null)
                                            {
                                                JobID jobIDInstance = new JobID();
                                                statusInstance.JobID = jobIDInstance;
                                                
                                                JToken jtIdentifierValue = jobIDValue["jtIdentifier"];
                                                if (jtIdentifierValue != null && jtIdentifierValue.Type != JTokenType.Null)
                                                {
                                                    string jtIdentifierInstance = ((string)jtIdentifierValue);
                                                    jobIDInstance.JtIdentifier = jtIdentifierInstance;
                                                }
                                                
                                                JToken idValue = jobIDValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    jobIDInstance.Id = idInstance;
                                                }
                                            }
                                            
                                            JToken jobIdValue = statusValue["jobId"];
                                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance = ((string)jobIdValue);
                                                statusInstance.JobId = jobIdInstance;
                                            }
                                            
                                            JToken runStateValue = statusValue["runState"];
                                            if (runStateValue != null && runStateValue.Type != JTokenType.Null)
                                            {
                                                int runStateInstance = ((int)runStateValue);
                                                statusInstance.RunState = runStateInstance;
                                            }
                                            
                                            JToken userValue = statusValue["user"];
                                            if (userValue != null && userValue.Type != JTokenType.Null)
                                            {
                                                string userInstance = ((string)userValue);
                                                statusInstance.Username = userInstance;
                                            }
                                            
                                            JToken jobFileValue = statusValue["jobFile"];
                                            if (jobFileValue != null && jobFileValue.Type != JTokenType.Null)
                                            {
                                                string jobFileInstance = ((string)jobFileValue);
                                                statusInstance.JobFile = jobFileInstance;
                                            }
                                            
                                            JToken jobCompleteValue = statusValue["jobComplete"];
                                            if (jobCompleteValue != null && jobCompleteValue.Type != JTokenType.Null)
                                            {
                                                bool jobCompleteInstance = ((bool)jobCompleteValue);
                                                statusInstance.JobComplete = jobCompleteInstance;
                                            }
                                            
                                            JToken priorityValue = statusValue["priority"];
                                            if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                            {
                                                string priorityInstance = ((string)priorityValue);
                                                statusInstance.Priority = priorityInstance;
                                            }
                                            
                                            JToken stateValue = statusValue["state"];
                                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                                            {
                                                string stateInstance = ((string)stateValue);
                                                statusInstance.State = stateInstance;
                                            }
                                            
                                            JToken numReservedSlotsValue = statusValue["numReservedSlots"];
                                            if (numReservedSlotsValue != null && numReservedSlotsValue.Type != JTokenType.Null)
                                            {
                                                string numReservedSlotsInstance = ((string)numReservedSlotsValue);
                                                statusInstance.NumReservedSlots = numReservedSlotsInstance;
                                            }
                                            
                                            JToken schedulingInfoValue = statusValue["schedulingInfo"];
                                            if (schedulingInfoValue != null && schedulingInfoValue.Type != JTokenType.Null)
                                            {
                                                string schedulingInfoInstance = ((string)schedulingInfoValue);
                                                statusInstance.SchedulingInfo = schedulingInfoInstance;
                                            }
                                            
                                            JToken reservedMemValue = statusValue["reservedMem"];
                                            if (reservedMemValue != null && reservedMemValue.Type != JTokenType.Null)
                                            {
                                                string reservedMemInstance = ((string)reservedMemValue);
                                                statusInstance.ReservedMem = reservedMemInstance;
                                            }
                                            
                                            JToken numUsedSlotsValue = statusValue["numUsedSlots"];
                                            if (numUsedSlotsValue != null && numUsedSlotsValue.Type != JTokenType.Null)
                                            {
                                                string numUsedSlotsInstance = ((string)numUsedSlotsValue);
                                                statusInstance.NumUsedSlots = numUsedSlotsInstance;
                                            }
                                            
                                            JToken failureInfoValue = statusValue["failureInfo"];
                                            if (failureInfoValue != null && failureInfoValue.Type != JTokenType.Null)
                                            {
                                                string failureInfoInstance = ((string)failureInfoValue);
                                                statusInstance.FailureInfo = failureInfoInstance;
                                            }
                                            
                                            JToken usedMemValue = statusValue["usedMem"];
                                            if (usedMemValue != null && usedMemValue.Type != JTokenType.Null)
                                            {
                                                string usedMemInstance = ((string)usedMemValue);
                                                statusInstance.UsedMem = usedMemInstance;
                                            }
                                            
                                            JToken neededMemValue = statusValue["neededMem"];
                                            if (neededMemValue != null && neededMemValue.Type != JTokenType.Null)
                                            {
                                                string neededMemInstance = ((string)neededMemValue);
                                                statusInstance.NeededMem = neededMemInstance;
                                            }
                                            
                                            JToken finishTimeValue = statusValue["finishTime"];
                                            if (finishTimeValue != null && finishTimeValue.Type != JTokenType.Null)
                                            {
                                                string finishTimeInstance = ((string)finishTimeValue);
                                                statusInstance.FinishTime = finishTimeInstance;
                                            }
                                            
                                            JToken trackingUrlValue = statusValue["trackingUrl"];
                                            if (trackingUrlValue != null && trackingUrlValue.Type != JTokenType.Null)
                                            {
                                                string trackingUrlInstance = ((string)trackingUrlValue);
                                                statusInstance.TrackingUrl = trackingUrlInstance;
                                            }
                                            
                                            JToken startTimeValue = statusValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                long startTimeInstance = ((long)startTimeValue);
                                                statusInstance.StartTime = startTimeInstance;
                                            }
                                            
                                            JToken jobNameValue = statusValue["jobName"];
                                            if (jobNameValue != null && jobNameValue.Type != JTokenType.Null)
                                            {
                                                string jobNameInstance = ((string)jobNameValue);
                                                statusInstance.JobName = jobNameInstance;
                                            }
                                            
                                            JToken retiredValue = statusValue["retired"];
                                            if (retiredValue != null && retiredValue.Type != JTokenType.Null)
                                            {
                                                bool retiredInstance = ((bool)retiredValue);
                                                statusInstance.Retired = retiredInstance;
                                            }
                                            
                                            JToken jobACLsValue = statusValue["jobACLs"];
                                            if (jobACLsValue != null && jobACLsValue.Type != JTokenType.Null)
                                            {
                                                JobACLs jobACLsInstance = new JobACLs();
                                                statusInstance.JobACLs = jobACLsInstance;
                                            }
                                            
                                            JToken queueValue = statusValue["queue"];
                                            if (queueValue != null && queueValue.Type != JTokenType.Null)
                                            {
                                                string queueInstance = ((string)queueValue);
                                                statusInstance.Queue = queueInstance;
                                            }
                                            
                                            JToken uberValue = statusValue["uber"];
                                            if (uberValue != null && uberValue.Type != JTokenType.Null)
                                            {
                                                bool uberInstance = ((bool)uberValue);
                                                statusInstance.Uber = uberInstance;
                                            }
                                            
                                            JToken reduceProgressValue = statusValue["reduceProgress"];
                                            if (reduceProgressValue != null && reduceProgressValue.Type != JTokenType.Null)
                                            {
                                                double reduceProgressInstance = ((double)reduceProgressValue);
                                                statusInstance.ReduceProgress = reduceProgressInstance;
                                            }
                                            
                                            JToken cleanupProgressValue = statusValue["cleanupProgress"];
                                            if (cleanupProgressValue != null && cleanupProgressValue.Type != JTokenType.Null)
                                            {
                                                double cleanupProgressInstance = ((double)cleanupProgressValue);
                                                statusInstance.CleanupProgress = cleanupProgressInstance;
                                            }
                                            
                                            JToken mapProgressValue = statusValue["mapProgress"];
                                            if (mapProgressValue != null && mapProgressValue.Type != JTokenType.Null)
                                            {
                                                double mapProgressInstance = ((double)mapProgressValue);
                                                statusInstance.MapProgress = mapProgressInstance;
                                            }
                                            
                                            JToken historyFileValue = statusValue["historyFile"];
                                            if (historyFileValue != null && historyFileValue.Type != JTokenType.Null)
                                            {
                                                string historyFileInstance = ((string)historyFileValue);
                                                statusInstance.HistoryFile = historyFileInstance;
                                            }
                                            
                                            JToken setupProgressValue = statusValue["setupProgress"];
                                            if (setupProgressValue != null && setupProgressValue.Type != JTokenType.Null)
                                            {
                                                double setupProgressInstance = ((double)setupProgressValue);
                                                statusInstance.SetupProgress = setupProgressInstance;
                                            }
                                        }
                                        
                                        JToken profileValue = detailValue["profile"];
                                        if (profileValue != null && profileValue.Type != JTokenType.Null)
                                        {
                                            Profile profileInstance = new Profile();
                                            detailInstance.Profile = profileInstance;
                                            
                                            JToken jobFileValue2 = profileValue["jobFile"];
                                            if (jobFileValue2 != null && jobFileValue2.Type != JTokenType.Null)
                                            {
                                                string jobFileInstance2 = ((string)jobFileValue2);
                                                profileInstance.JobFile = jobFileInstance2;
                                            }
                                            
                                            JToken urlValue = profileValue["url"];
                                            if (urlValue != null && urlValue.Type != JTokenType.Null)
                                            {
                                                string urlInstance = ((string)urlValue);
                                                profileInstance.Url = urlInstance;
                                            }
                                            
                                            JToken queueNameValue = profileValue["queueName"];
                                            if (queueNameValue != null && queueNameValue.Type != JTokenType.Null)
                                            {
                                                string queueNameInstance = ((string)queueNameValue);
                                                profileInstance.QueueName = queueNameInstance;
                                            }
                                            
                                            JToken jobIDValue2 = profileValue["jobID"];
                                            if (jobIDValue2 != null && jobIDValue2.Type != JTokenType.Null)
                                            {
                                                JobID jobIDInstance2 = new JobID();
                                                profileInstance.JobID = jobIDInstance2;
                                                
                                                JToken jtIdentifierValue2 = jobIDValue2["jtIdentifier"];
                                                if (jtIdentifierValue2 != null && jtIdentifierValue2.Type != JTokenType.Null)
                                                {
                                                    string jtIdentifierInstance2 = ((string)jtIdentifierValue2);
                                                    jobIDInstance2.JtIdentifier = jtIdentifierInstance2;
                                                }
                                                
                                                JToken idValue2 = jobIDValue2["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    jobIDInstance2.Id = idInstance2;
                                                }
                                            }
                                            
                                            JToken jobNameValue2 = profileValue["jobName"];
                                            if (jobNameValue2 != null && jobNameValue2.Type != JTokenType.Null)
                                            {
                                                string jobNameInstance2 = ((string)jobNameValue2);
                                                profileInstance.JobName = jobNameInstance2;
                                            }
                                            
                                            JToken userValue2 = profileValue["user"];
                                            if (userValue2 != null && userValue2.Type != JTokenType.Null)
                                            {
                                                string userInstance2 = ((string)userValue2);
                                                profileInstance.User = userInstance2;
                                            }
                                            
                                            JToken jobIdValue2 = profileValue["jobId"];
                                            if (jobIdValue2 != null && jobIdValue2.Type != JTokenType.Null)
                                            {
                                                string jobIdInstance2 = ((string)jobIdValue2);
                                                profileInstance.JobId = jobIdInstance2;
                                            }
                                        }
                                        
                                        JToken idValue3 = detailValue["id"];
                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                        {
                                            string idInstance3 = ((string)idValue3);
                                            detailInstance.Id = idInstance3;
                                        }
                                        
                                        JToken parentIdValue = detailValue["parentId"];
                                        if (parentIdValue != null && parentIdValue.Type != JTokenType.Null)
                                        {
                                            string parentIdInstance = ((string)parentIdValue);
                                            detailInstance.ParentId = parentIdInstance;
                                        }
                                        
                                        JToken percentCompleteValue = detailValue["percentComplete"];
                                        if (percentCompleteValue != null && percentCompleteValue.Type != JTokenType.Null)
                                        {
                                            string percentCompleteInstance = ((string)percentCompleteValue);
                                            detailInstance.PercentComplete = percentCompleteInstance;
                                        }
                                        
                                        JToken exitValueValue = detailValue["exitValue"];
                                        if (exitValueValue != null && exitValueValue.Type != JTokenType.Null)
                                        {
                                            int exitValueInstance = ((int)exitValueValue);
                                            detailInstance.ExitValue = exitValueInstance;
                                        }
                                        
                                        JToken userValue3 = detailValue["user"];
                                        if (userValue3 != null && userValue3.Type != JTokenType.Null)
                                        {
                                            string userInstance3 = ((string)userValue3);
                                            detailInstance.User = userInstance3;
                                        }
                                        
                                        JToken callbackValue = detailValue["callback"];
                                        if (callbackValue != null && callbackValue.Type != JTokenType.Null)
                                        {
                                            object callbackInstance = ((string)callbackValue);
                                            detailInstance.Callback = callbackInstance;
                                        }
                                        
                                        JToken completedValue = detailValue["completed"];
                                        if (completedValue != null && completedValue.Type != JTokenType.Null)
                                        {
                                            string completedInstance = ((string)completedValue);
                                            detailInstance.Completed = completedInstance;
                                        }
                                        
                                        JToken userargsValue = detailValue["userargs"];
                                        if (userargsValue != null && userargsValue.Type != JTokenType.Null)
                                        {
                                            Userargs userargsInstance = new Userargs();
                                            detailInstance.Userargs = userargsInstance;
                                            
                                            JToken argArray = userargsValue["arg"];
                                            if (argArray != null && argArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken argValue in ((JArray)argArray))
                                                {
                                                    userargsInstance.Arg.Add(((string)argValue));
                                                }
                                            }
                                            
                                            JToken statusdirValue = userargsValue["statusdir"];
                                            if (statusdirValue != null && statusdirValue.Type != JTokenType.Null)
                                            {
                                                object statusdirInstance = ((string)statusdirValue);
                                                userargsInstance.Statusdir = statusdirInstance;
                                            }
                                            
                                            JToken filesValue = userargsValue["files"];
                                            if (filesValue != null && filesValue.Type != JTokenType.Null)
                                            {
                                                object filesInstance = ((string)filesValue);
                                                userargsInstance.Files = filesInstance;
                                            }
                                            
                                            JToken defineArray = userargsValue["define"];
                                            if (defineArray != null && defineArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken defineValue in ((JArray)defineArray))
                                                {
                                                    userargsInstance.Define.Add(((string)defineValue));
                                                }
                                            }
                                            
                                            JToken enablelogValue = userargsValue["enablelog"];
                                            if (enablelogValue != null && enablelogValue.Type != JTokenType.Null)
                                            {
                                                string enablelogInstance = ((string)enablelogValue);
                                                userargsInstance.Enablelog = enablelogInstance;
                                            }
                                            
                                            JToken executeValue = userargsValue["execute"];
                                            if (executeValue != null && executeValue.Type != JTokenType.Null)
                                            {
                                                string executeInstance = ((string)executeValue);
                                                userargsInstance.Execute = executeInstance;
                                            }
                                            
                                            JToken usernameValue = userargsValue["user.name"];
                                            if (usernameValue != null && usernameValue.Type != JTokenType.Null)
                                            {
                                                string usernameInstance = ((string)usernameValue);
                                                userargsInstance.Username = usernameInstance;
                                            }
                                            
                                            JToken callbackValue2 = userargsValue["callback"];
                                            if (callbackValue2 != null && callbackValue2.Type != JTokenType.Null)
                                            {
                                                object callbackInstance2 = ((string)callbackValue2);
                                                userargsInstance.Callback = callbackInstance2;
                                            }
                                            
                                            JToken fileValue = userargsValue["file"];
                                            if (fileValue != null && fileValue.Type != JTokenType.Null)
                                            {
                                                string fileInstance = fileValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                userargsInstance.File = fileInstance;
                                            }
                                            
                                            JToken jarValue = userargsValue["jar"];
                                            if (jarValue != null && jarValue.Type != JTokenType.Null)
                                            {
                                                string jarInstance = ((string)jarValue);
                                                userargsInstance.Jar = jarInstance;
                                            }
                                        }
                                        
                                        JToken msgValue = detailValue["msg"];
                                        if (msgValue != null && msgValue.Type != JTokenType.Null)
                                        {
                                            object msgInstance = ((string)msgValue);
                                            detailInstance.Msg = msgInstance;
                                        }
                                    }
                                    
                                    JToken idValue4 = jobListValue["id"];
                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                    {
                                        string idInstance4 = ((string)idValue4);
                                        jobListJsonObjectInstance.Id = idInstance4;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Submits a Hive job to an HDInsight cluster.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Hive job parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Job operation response.
        /// </returns>
        public async Task<JobSubmissionResponse> SubmitHiveJobAsync(JobSubmissionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SubmitHiveJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(this.Client.ClusterDnsName);
            url = url + "/templeton/v1/hive";
            List<string> queryParameters = new List<string>();
            if (this.Client.UserName != null)
            {
                queryParameters.Add("user.name=" + Uri.EscapeDataString(this.Client.UserName));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("accept", "application/json");
                httpRequest.Headers.Add("useragent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/text");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobSubmissionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobSubmissionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobSubmissionJsonResponse jobSubmissionJsonResponseInstance = new JobSubmissionJsonResponse();
                            result.JobSubmissionJsonResponse = jobSubmissionJsonResponseInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                jobSubmissionJsonResponseInstance.Id = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Submits a MapReduce job to an HDInsight cluster.
        /// </summary>
        /// <param name='parameters'>
        /// Required. MapReduce job parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Job operation response.
        /// </returns>
        public async Task<JobSubmissionResponse> SubmitMapReduceJobAsync(JobSubmissionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SubmitMapReduceJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(this.Client.ClusterDnsName);
            url = url + "/templeton/v1/mapreduce/jar";
            List<string> queryParameters = new List<string>();
            if (this.Client.UserName != null)
            {
                queryParameters.Add("user.name=" + Uri.EscapeDataString(this.Client.UserName));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("accept", "application/json");
                httpRequest.Headers.Add("useragent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/text");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobSubmissionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobSubmissionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobSubmissionJsonResponse jobSubmissionJsonResponseInstance = new JobSubmissionJsonResponse();
                            result.JobSubmissionJsonResponse = jobSubmissionJsonResponseInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                jobSubmissionJsonResponseInstance.Id = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Submits a MapReduce streaming job to an HDInsight cluster.
        /// </summary>
        /// <param name='parameters'>
        /// Required. MapReduce job parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Job operation response.
        /// </returns>
        public async Task<JobSubmissionResponse> SubmitMapReduceStreamingJobAsync(JobSubmissionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SubmitMapReduceStreamingJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(this.Client.ClusterDnsName);
            url = url + "/templeton/v1/mapreduce/streaming";
            List<string> queryParameters = new List<string>();
            if (this.Client.UserName != null)
            {
                queryParameters.Add("user.name=" + Uri.EscapeDataString(this.Client.UserName));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("accept", "application/json");
                httpRequest.Headers.Add("useragent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/text");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobSubmissionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobSubmissionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobSubmissionJsonResponse jobSubmissionJsonResponseInstance = new JobSubmissionJsonResponse();
                            result.JobSubmissionJsonResponse = jobSubmissionJsonResponseInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                jobSubmissionJsonResponseInstance.Id = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Submits a Pig job to an HDInsight cluster.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Pig job parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Job operation response.
        /// </returns>
        public async Task<JobSubmissionResponse> SubmitPigJobAsync(JobSubmissionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SubmitPigJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(this.Client.ClusterDnsName);
            url = url + "/templeton/v1/pig";
            List<string> queryParameters = new List<string>();
            if (this.Client.UserName != null)
            {
                queryParameters.Add("user.name=" + Uri.EscapeDataString(this.Client.UserName));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("accept", "application/json");
                httpRequest.Headers.Add("useragent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/text");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobSubmissionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobSubmissionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobSubmissionJsonResponse jobSubmissionJsonResponseInstance = new JobSubmissionJsonResponse();
                            result.JobSubmissionJsonResponse = jobSubmissionJsonResponseInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                jobSubmissionJsonResponseInstance.Id = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Submits a Sqoop job to an HDInsight cluster.
        /// </summary>
        /// <param name='parameters'>
        /// Required. Sqoop job parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create Job operation response.
        /// </returns>
        public async Task<JobSubmissionResponse> SubmitSqoopJobAsync(JobSubmissionParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SubmitSqoopJobAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(this.Client.ClusterDnsName);
            url = url + "/templeton/v1/sqoop";
            List<string> queryParameters = new List<string>();
            if (this.Client.UserName != null)
            {
                queryParameters.Add("user.name=" + Uri.EscapeDataString(this.Client.UserName));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("accept", "application/json");
                httpRequest.Headers.Add("useragent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "HDInsight Job SDK " + this.Client.SdkUserAgent + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = parameters.Content;
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/text");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobSubmissionResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobSubmissionResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobSubmissionJsonResponse jobSubmissionJsonResponseInstance = new JobSubmissionJsonResponse();
                            result.JobSubmissionJsonResponse = jobSubmissionJsonResponseInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                jobSubmissionJsonResponseInstance.Id = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
