// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.RecoveryServices.Backup;
using Microsoft.Azure.Management.RecoveryServices.Backup.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    /// <summary>
    /// The Resource Manager API includes operations for managing protection
    /// policies defined for your Recovery Services Vault.
    /// </summary>
    internal partial class ProtectionPolicyOperations : IServiceOperations<RecoveryServicesBackupManagementClient>, IProtectionPolicyOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProtectionPolicyOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProtectionPolicyOperations(RecoveryServicesBackupManagementClient client)
        {
            this._client = client;
        }
        
        private RecoveryServicesBackupManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.RecoveryServicesBackupManagementClient.
        /// </summary>
        public RecoveryServicesBackupManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Create Or Update Protection Policy Operation is used to create
        /// or modify a protection policy which is used in the context of a
        /// protected item.This is an asynchronous operation. To determine
        /// whether the backend service has finished processing the request,
        /// call the Get Policy Operation Result API.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Required. Name of the protection policy to be added/updated.
        /// </param>
        /// <param name='request'>
        /// Required. The protection policy creation request.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Protection policy response.
        /// </returns>
        public async Task<ProtectionPolicyResponse> CreateOrUpdateAsync(string resourceGroupName, string resourceName, string policyName, ProtectionPolicyRequest request, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("request", request);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (request.Item != null)
                {
                    JObject itemValue = new JObject();
                    requestDoc = itemValue;
                    
                    if (request.Item.Properties != null)
                    {
                        JObject propertiesValue = new JObject();
                        itemValue["properties"] = propertiesValue;
                        if (request.Item.Properties is ProtectionPolicy)
                        {
                            propertiesValue["backupManagementType"] = "ProtectionPolicy";
                            ProtectionPolicy derived = ((ProtectionPolicy)request.Item.Properties);
                            
                            if (derived.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived.BackupManagementType;
                            }
                            
                            propertiesValue["protectedItemsCount"] = derived.ProtectedItemsCount;
                        }
                        if (request.Item.Properties is AzureIaaSVMProtectionPolicy)
                        {
                            propertiesValue["backupManagementType"] = "AzureIaasVM";
                            AzureIaaSVMProtectionPolicy derived2 = ((AzureIaaSVMProtectionPolicy)request.Item.Properties);
                            
                            if (derived2.SchedulePolicy != null)
                            {
                                JObject schedulePolicyValue = new JObject();
                                propertiesValue["schedulePolicy"] = schedulePolicyValue;
                                if (derived2.SchedulePolicy is SimpleSchedulePolicy)
                                {
                                    schedulePolicyValue["schedulePolicyType"] = "SimpleSchedulePolicy";
                                    SimpleSchedulePolicy derived3 = ((SimpleSchedulePolicy)derived2.SchedulePolicy);
                                    
                                    if (derived3.ScheduleRunFrequency != null)
                                    {
                                        schedulePolicyValue["scheduleRunFrequency"] = derived3.ScheduleRunFrequency;
                                    }
                                    
                                    if (derived3.ScheduleRunDays != null)
                                    {
                                        JArray scheduleRunDaysArray = new JArray();
                                        foreach (string scheduleRunDaysItem in derived3.ScheduleRunDays)
                                        {
                                            scheduleRunDaysArray.Add(scheduleRunDaysItem);
                                        }
                                        schedulePolicyValue["scheduleRunDays"] = scheduleRunDaysArray;
                                    }
                                    
                                    if (derived3.ScheduleRunTimes != null)
                                    {
                                        JArray scheduleRunTimesArray = new JArray();
                                        foreach (DateTime scheduleRunTimesItem in derived3.ScheduleRunTimes)
                                        {
                                            scheduleRunTimesArray.Add(scheduleRunTimesItem);
                                        }
                                        schedulePolicyValue["scheduleRunTimes"] = scheduleRunTimesArray;
                                    }
                                }
                                if (derived2.SchedulePolicy is LongTermSchedulePolicy)
                                {
                                    schedulePolicyValue["schedulePolicyType"] = "LongTermSchedulePolicy";
                                    LongTermSchedulePolicy derived4 = ((LongTermSchedulePolicy)derived2.SchedulePolicy);
                                }
                            }
                            
                            if (derived2.RetentionPolicy != null)
                            {
                                JObject retentionPolicyValue = new JObject();
                                propertiesValue["retentionPolicy"] = retentionPolicyValue;
                                if (derived2.RetentionPolicy is SimpleRetentionPolicy)
                                {
                                    retentionPolicyValue["retentionPolicyType"] = "SimpleRetentionPolicy";
                                    SimpleRetentionPolicy derived5 = ((SimpleRetentionPolicy)derived2.RetentionPolicy);
                                }
                                if (derived2.RetentionPolicy is LongTermRetentionPolicy)
                                {
                                    retentionPolicyValue["retentionPolicyType"] = "LongTermRetentionPolicy";
                                    LongTermRetentionPolicy derived6 = ((LongTermRetentionPolicy)derived2.RetentionPolicy);
                                    
                                    if (derived6.DailySchedule != null)
                                    {
                                        JObject dailyScheduleValue = new JObject();
                                        retentionPolicyValue["dailySchedule"] = dailyScheduleValue;
                                        
                                        if (derived6.DailySchedule.RetentionTimes != null)
                                        {
                                            JArray retentionTimesArray = new JArray();
                                            foreach (DateTime retentionTimesItem in derived6.DailySchedule.RetentionTimes)
                                            {
                                                retentionTimesArray.Add(retentionTimesItem);
                                            }
                                            dailyScheduleValue["retentionTimes"] = retentionTimesArray;
                                        }
                                        
                                        if (derived6.DailySchedule.RetentionDuration != null)
                                        {
                                            JObject retentionDurationValue = new JObject();
                                            dailyScheduleValue["retentionDuration"] = retentionDurationValue;
                                            
                                            retentionDurationValue["count"] = derived6.DailySchedule.RetentionDuration.Count;
                                            
                                            if (derived6.DailySchedule.RetentionDuration.DurationType != null)
                                            {
                                                retentionDurationValue["durationType"] = derived6.DailySchedule.RetentionDuration.DurationType;
                                            }
                                        }
                                    }
                                    
                                    if (derived6.WeeklySchedule != null)
                                    {
                                        JObject weeklyScheduleValue = new JObject();
                                        retentionPolicyValue["weeklySchedule"] = weeklyScheduleValue;
                                        
                                        if (derived6.WeeklySchedule.DaysOfTheWeek != null)
                                        {
                                            JArray daysOfTheWeekArray = new JArray();
                                            foreach (string daysOfTheWeekItem in derived6.WeeklySchedule.DaysOfTheWeek)
                                            {
                                                daysOfTheWeekArray.Add(daysOfTheWeekItem);
                                            }
                                            weeklyScheduleValue["daysOfTheWeek"] = daysOfTheWeekArray;
                                        }
                                        
                                        if (derived6.WeeklySchedule.RetentionTimes != null)
                                        {
                                            JArray retentionTimesArray2 = new JArray();
                                            foreach (DateTime retentionTimesItem2 in derived6.WeeklySchedule.RetentionTimes)
                                            {
                                                retentionTimesArray2.Add(retentionTimesItem2);
                                            }
                                            weeklyScheduleValue["retentionTimes"] = retentionTimesArray2;
                                        }
                                        
                                        if (derived6.WeeklySchedule.RetentionDuration != null)
                                        {
                                            JObject retentionDurationValue2 = new JObject();
                                            weeklyScheduleValue["retentionDuration"] = retentionDurationValue2;
                                            
                                            retentionDurationValue2["count"] = derived6.WeeklySchedule.RetentionDuration.Count;
                                            
                                            if (derived6.WeeklySchedule.RetentionDuration.DurationType != null)
                                            {
                                                retentionDurationValue2["durationType"] = derived6.WeeklySchedule.RetentionDuration.DurationType;
                                            }
                                        }
                                    }
                                    
                                    if (derived6.MonthlySchedule != null)
                                    {
                                        JObject monthlyScheduleValue = new JObject();
                                        retentionPolicyValue["monthlySchedule"] = monthlyScheduleValue;
                                        
                                        if (derived6.MonthlySchedule.RetentionScheduleFormatType != null)
                                        {
                                            monthlyScheduleValue["retentionScheduleFormatType"] = derived6.MonthlySchedule.RetentionScheduleFormatType;
                                        }
                                        
                                        if (derived6.MonthlySchedule.RetentionScheduleDaily != null)
                                        {
                                            JObject retentionScheduleDailyValue = new JObject();
                                            monthlyScheduleValue["retentionScheduleDaily"] = retentionScheduleDailyValue;
                                            
                                            if (derived6.MonthlySchedule.RetentionScheduleDaily.DaysOfTheMonth != null)
                                            {
                                                JArray daysOfTheMonthArray = new JArray();
                                                foreach (Day daysOfTheMonthItem in derived6.MonthlySchedule.RetentionScheduleDaily.DaysOfTheMonth)
                                                {
                                                    JObject dayValue = new JObject();
                                                    daysOfTheMonthArray.Add(dayValue);
                                                    
                                                    dayValue["date"] = daysOfTheMonthItem.Date;
                                                    
                                                    dayValue["isLast"] = daysOfTheMonthItem.IsLast;
                                                }
                                                retentionScheduleDailyValue["daysOfTheMonth"] = daysOfTheMonthArray;
                                            }
                                        }
                                        
                                        if (derived6.MonthlySchedule.RetentionScheduleWeekly != null)
                                        {
                                            JObject retentionScheduleWeeklyValue = new JObject();
                                            monthlyScheduleValue["retentionScheduleWeekly"] = retentionScheduleWeeklyValue;
                                            
                                            if (derived6.MonthlySchedule.RetentionScheduleWeekly.DaysOfTheWeek != null)
                                            {
                                                JArray daysOfTheWeekArray2 = new JArray();
                                                foreach (string daysOfTheWeekItem2 in derived6.MonthlySchedule.RetentionScheduleWeekly.DaysOfTheWeek)
                                                {
                                                    daysOfTheWeekArray2.Add(daysOfTheWeekItem2);
                                                }
                                                retentionScheduleWeeklyValue["daysOfTheWeek"] = daysOfTheWeekArray2;
                                            }
                                            
                                            if (derived6.MonthlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth != null)
                                            {
                                                JArray weeksOfTheMonthArray = new JArray();
                                                foreach (string weeksOfTheMonthItem in derived6.MonthlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth)
                                                {
                                                    weeksOfTheMonthArray.Add(weeksOfTheMonthItem);
                                                }
                                                retentionScheduleWeeklyValue["weeksOfTheMonth"] = weeksOfTheMonthArray;
                                            }
                                        }
                                        
                                        if (derived6.MonthlySchedule.RetentionTimes != null)
                                        {
                                            JArray retentionTimesArray3 = new JArray();
                                            foreach (DateTime retentionTimesItem3 in derived6.MonthlySchedule.RetentionTimes)
                                            {
                                                retentionTimesArray3.Add(retentionTimesItem3);
                                            }
                                            monthlyScheduleValue["retentionTimes"] = retentionTimesArray3;
                                        }
                                        
                                        if (derived6.MonthlySchedule.RetentionDuration != null)
                                        {
                                            JObject retentionDurationValue3 = new JObject();
                                            monthlyScheduleValue["retentionDuration"] = retentionDurationValue3;
                                            
                                            retentionDurationValue3["count"] = derived6.MonthlySchedule.RetentionDuration.Count;
                                            
                                            if (derived6.MonthlySchedule.RetentionDuration.DurationType != null)
                                            {
                                                retentionDurationValue3["durationType"] = derived6.MonthlySchedule.RetentionDuration.DurationType;
                                            }
                                        }
                                    }
                                    
                                    if (derived6.YearlySchedule != null)
                                    {
                                        JObject yearlyScheduleValue = new JObject();
                                        retentionPolicyValue["yearlySchedule"] = yearlyScheduleValue;
                                        
                                        if (derived6.YearlySchedule.RetentionScheduleFormatType != null)
                                        {
                                            yearlyScheduleValue["retentionScheduleFormatType"] = derived6.YearlySchedule.RetentionScheduleFormatType;
                                        }
                                        
                                        if (derived6.YearlySchedule.MonthsOfYear != null)
                                        {
                                            JArray monthsOfYearArray = new JArray();
                                            foreach (string monthsOfYearItem in derived6.YearlySchedule.MonthsOfYear)
                                            {
                                                monthsOfYearArray.Add(monthsOfYearItem);
                                            }
                                            yearlyScheduleValue["monthsOfYear"] = monthsOfYearArray;
                                        }
                                        
                                        if (derived6.YearlySchedule.RetentionScheduleDaily != null)
                                        {
                                            JObject retentionScheduleDailyValue2 = new JObject();
                                            yearlyScheduleValue["retentionScheduleDaily"] = retentionScheduleDailyValue2;
                                            
                                            if (derived6.YearlySchedule.RetentionScheduleDaily.DaysOfTheMonth != null)
                                            {
                                                JArray daysOfTheMonthArray2 = new JArray();
                                                foreach (Day daysOfTheMonthItem2 in derived6.YearlySchedule.RetentionScheduleDaily.DaysOfTheMonth)
                                                {
                                                    JObject dayValue2 = new JObject();
                                                    daysOfTheMonthArray2.Add(dayValue2);
                                                    
                                                    dayValue2["date"] = daysOfTheMonthItem2.Date;
                                                    
                                                    dayValue2["isLast"] = daysOfTheMonthItem2.IsLast;
                                                }
                                                retentionScheduleDailyValue2["daysOfTheMonth"] = daysOfTheMonthArray2;
                                            }
                                        }
                                        
                                        if (derived6.YearlySchedule.RetentionScheduleWeekly != null)
                                        {
                                            JObject retentionScheduleWeeklyValue2 = new JObject();
                                            yearlyScheduleValue["retentionScheduleWeekly"] = retentionScheduleWeeklyValue2;
                                            
                                            if (derived6.YearlySchedule.RetentionScheduleWeekly.DaysOfTheWeek != null)
                                            {
                                                JArray daysOfTheWeekArray3 = new JArray();
                                                foreach (string daysOfTheWeekItem3 in derived6.YearlySchedule.RetentionScheduleWeekly.DaysOfTheWeek)
                                                {
                                                    daysOfTheWeekArray3.Add(daysOfTheWeekItem3);
                                                }
                                                retentionScheduleWeeklyValue2["daysOfTheWeek"] = daysOfTheWeekArray3;
                                            }
                                            
                                            if (derived6.YearlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth != null)
                                            {
                                                JArray weeksOfTheMonthArray2 = new JArray();
                                                foreach (string weeksOfTheMonthItem2 in derived6.YearlySchedule.RetentionScheduleWeekly.WeeksOfTheMonth)
                                                {
                                                    weeksOfTheMonthArray2.Add(weeksOfTheMonthItem2);
                                                }
                                                retentionScheduleWeeklyValue2["weeksOfTheMonth"] = weeksOfTheMonthArray2;
                                            }
                                        }
                                        
                                        if (derived6.YearlySchedule.RetentionTimes != null)
                                        {
                                            JArray retentionTimesArray4 = new JArray();
                                            foreach (DateTime retentionTimesItem4 in derived6.YearlySchedule.RetentionTimes)
                                            {
                                                retentionTimesArray4.Add(retentionTimesItem4);
                                            }
                                            yearlyScheduleValue["retentionTimes"] = retentionTimesArray4;
                                        }
                                        
                                        if (derived6.YearlySchedule.RetentionDuration != null)
                                        {
                                            JObject retentionDurationValue4 = new JObject();
                                            yearlyScheduleValue["retentionDuration"] = retentionDurationValue4;
                                            
                                            retentionDurationValue4["count"] = derived6.YearlySchedule.RetentionDuration.Count;
                                            
                                            if (derived6.YearlySchedule.RetentionDuration.DurationType != null)
                                            {
                                                retentionDurationValue4["durationType"] = derived6.YearlySchedule.RetentionDuration.DurationType;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            if (derived2.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived2.BackupManagementType;
                            }
                            
                            propertiesValue["protectedItemsCount"] = derived2.ProtectedItemsCount;
                        }
                    }
                    
                    if (request.Item.Id != null)
                    {
                        itemValue["id"] = request.Item.Id;
                    }
                    
                    if (request.Item.Name != null)
                    {
                        itemValue["name"] = request.Item.Name;
                    }
                    
                    if (request.Item.Type != null)
                    {
                        itemValue["type"] = request.Item.Type;
                    }
                    
                    if (request.Item.Location != null)
                    {
                        itemValue["location"] = request.Item.Location;
                    }
                    
                    if (request.Item.Tags != null)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in request.Item.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        itemValue["tags"] = tagsDictionary;
                    }
                    
                    if (request.Item.ETag != null)
                    {
                        itemValue["eTag"] = request.Item.ETag;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionPolicyResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionPolicyResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionPolicyResource itemInstance = new ProtectionPolicyResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue2["backupManagementType"]);
                                if (typeName == "ProtectionPolicy")
                                {
                                    ProtectionPolicy protectionPolicyInstance = new ProtectionPolicy();
                                    
                                    JToken backupManagementTypeValue = propertiesValue2["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        protectionPolicyInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    
                                    JToken protectedItemsCountValue = propertiesValue2["protectedItemsCount"];
                                    if (protectedItemsCountValue != null && protectedItemsCountValue.Type != JTokenType.Null)
                                    {
                                        int protectedItemsCountInstance = ((int)protectedItemsCountValue);
                                        protectionPolicyInstance.ProtectedItemsCount = protectedItemsCountInstance;
                                    }
                                    itemInstance.Properties = protectionPolicyInstance;
                                }
                                if (typeName == "AzureIaasVM")
                                {
                                    AzureIaaSVMProtectionPolicy azureIaaSVMProtectionPolicyInstance = new AzureIaaSVMProtectionPolicy();
                                    
                                    JToken schedulePolicyValue2 = propertiesValue2["schedulePolicy"];
                                    if (schedulePolicyValue2 != null && schedulePolicyValue2.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)schedulePolicyValue2["schedulePolicyType"]);
                                        if (typeName2 == "SimpleSchedulePolicy")
                                        {
                                            SimpleSchedulePolicy simpleSchedulePolicyInstance = new SimpleSchedulePolicy();
                                            
                                            JToken scheduleRunFrequencyValue = schedulePolicyValue2["scheduleRunFrequency"];
                                            if (scheduleRunFrequencyValue != null && scheduleRunFrequencyValue.Type != JTokenType.Null)
                                            {
                                                string scheduleRunFrequencyInstance = ((string)scheduleRunFrequencyValue);
                                                simpleSchedulePolicyInstance.ScheduleRunFrequency = scheduleRunFrequencyInstance;
                                            }
                                            
                                            JToken scheduleRunDaysArray2 = schedulePolicyValue2["scheduleRunDays"];
                                            if (scheduleRunDaysArray2 != null && scheduleRunDaysArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scheduleRunDaysValue in ((JArray)scheduleRunDaysArray2))
                                                {
                                                    simpleSchedulePolicyInstance.ScheduleRunDays.Add(((string)scheduleRunDaysValue));
                                                }
                                            }
                                            
                                            JToken scheduleRunTimesArray2 = schedulePolicyValue2["scheduleRunTimes"];
                                            if (scheduleRunTimesArray2 != null && scheduleRunTimesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scheduleRunTimesValue in ((JArray)scheduleRunTimesArray2))
                                                {
                                                    simpleSchedulePolicyInstance.ScheduleRunTimes.Add(((DateTime)scheduleRunTimesValue));
                                                }
                                            }
                                            azureIaaSVMProtectionPolicyInstance.SchedulePolicy = simpleSchedulePolicyInstance;
                                        }
                                        if (typeName2 == "LongTermSchedulePolicy")
                                        {
                                            LongTermSchedulePolicy longTermSchedulePolicyInstance = new LongTermSchedulePolicy();
                                            azureIaaSVMProtectionPolicyInstance.SchedulePolicy = longTermSchedulePolicyInstance;
                                        }
                                    }
                                    
                                    JToken retentionPolicyValue2 = propertiesValue2["retentionPolicy"];
                                    if (retentionPolicyValue2 != null && retentionPolicyValue2.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)retentionPolicyValue2["retentionPolicyType"]);
                                        if (typeName3 == "SimpleRetentionPolicy")
                                        {
                                            SimpleRetentionPolicy simpleRetentionPolicyInstance = new SimpleRetentionPolicy();
                                            azureIaaSVMProtectionPolicyInstance.RetentionPolicy = simpleRetentionPolicyInstance;
                                        }
                                        if (typeName3 == "LongTermRetentionPolicy")
                                        {
                                            LongTermRetentionPolicy longTermRetentionPolicyInstance = new LongTermRetentionPolicy();
                                            
                                            JToken dailyScheduleValue2 = retentionPolicyValue2["dailySchedule"];
                                            if (dailyScheduleValue2 != null && dailyScheduleValue2.Type != JTokenType.Null)
                                            {
                                                DailyRetentionSchedule dailyScheduleInstance = new DailyRetentionSchedule();
                                                longTermRetentionPolicyInstance.DailySchedule = dailyScheduleInstance;
                                                
                                                JToken retentionTimesArray5 = dailyScheduleValue2["retentionTimes"];
                                                if (retentionTimesArray5 != null && retentionTimesArray5.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue in ((JArray)retentionTimesArray5))
                                                    {
                                                        dailyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue5 = dailyScheduleValue2["retentionDuration"];
                                                if (retentionDurationValue5 != null && retentionDurationValue5.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance = new RetentionDuration();
                                                    dailyScheduleInstance.RetentionDuration = retentionDurationInstance;
                                                    
                                                    JToken countValue = retentionDurationValue5["count"];
                                                    if (countValue != null && countValue.Type != JTokenType.Null)
                                                    {
                                                        int countInstance = ((int)countValue);
                                                        retentionDurationInstance.Count = countInstance;
                                                    }
                                                    
                                                    JToken durationTypeValue = retentionDurationValue5["durationType"];
                                                    if (durationTypeValue != null && durationTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance = ((string)durationTypeValue);
                                                        retentionDurationInstance.DurationType = durationTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken weeklyScheduleValue2 = retentionPolicyValue2["weeklySchedule"];
                                            if (weeklyScheduleValue2 != null && weeklyScheduleValue2.Type != JTokenType.Null)
                                            {
                                                WeeklyRetentionSchedule weeklyScheduleInstance = new WeeklyRetentionSchedule();
                                                longTermRetentionPolicyInstance.WeeklySchedule = weeklyScheduleInstance;
                                                
                                                JToken daysOfTheWeekArray4 = weeklyScheduleValue2["daysOfTheWeek"];
                                                if (daysOfTheWeekArray4 != null && daysOfTheWeekArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken daysOfTheWeekValue in ((JArray)daysOfTheWeekArray4))
                                                    {
                                                        weeklyScheduleInstance.DaysOfTheWeek.Add(((string)daysOfTheWeekValue));
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray6 = weeklyScheduleValue2["retentionTimes"];
                                                if (retentionTimesArray6 != null && retentionTimesArray6.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue2 in ((JArray)retentionTimesArray6))
                                                    {
                                                        weeklyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue2));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue6 = weeklyScheduleValue2["retentionDuration"];
                                                if (retentionDurationValue6 != null && retentionDurationValue6.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance2 = new RetentionDuration();
                                                    weeklyScheduleInstance.RetentionDuration = retentionDurationInstance2;
                                                    
                                                    JToken countValue2 = retentionDurationValue6["count"];
                                                    if (countValue2 != null && countValue2.Type != JTokenType.Null)
                                                    {
                                                        int countInstance2 = ((int)countValue2);
                                                        retentionDurationInstance2.Count = countInstance2;
                                                    }
                                                    
                                                    JToken durationTypeValue2 = retentionDurationValue6["durationType"];
                                                    if (durationTypeValue2 != null && durationTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance2 = ((string)durationTypeValue2);
                                                        retentionDurationInstance2.DurationType = durationTypeInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken monthlyScheduleValue2 = retentionPolicyValue2["monthlySchedule"];
                                            if (monthlyScheduleValue2 != null && monthlyScheduleValue2.Type != JTokenType.Null)
                                            {
                                                MonthlyRetentionSchedule monthlyScheduleInstance = new MonthlyRetentionSchedule();
                                                longTermRetentionPolicyInstance.MonthlySchedule = monthlyScheduleInstance;
                                                
                                                JToken retentionScheduleFormatTypeValue = monthlyScheduleValue2["retentionScheduleFormatType"];
                                                if (retentionScheduleFormatTypeValue != null && retentionScheduleFormatTypeValue.Type != JTokenType.Null)
                                                {
                                                    string retentionScheduleFormatTypeInstance = ((string)retentionScheduleFormatTypeValue);
                                                    monthlyScheduleInstance.RetentionScheduleFormatType = retentionScheduleFormatTypeInstance;
                                                }
                                                
                                                JToken retentionScheduleDailyValue3 = monthlyScheduleValue2["retentionScheduleDaily"];
                                                if (retentionScheduleDailyValue3 != null && retentionScheduleDailyValue3.Type != JTokenType.Null)
                                                {
                                                    DailyRetentionFormat retentionScheduleDailyInstance = new DailyRetentionFormat();
                                                    monthlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance;
                                                    
                                                    JToken daysOfTheMonthArray3 = retentionScheduleDailyValue3["daysOfTheMonth"];
                                                    if (daysOfTheMonthArray3 != null && daysOfTheMonthArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheMonthValue in ((JArray)daysOfTheMonthArray3))
                                                        {
                                                            Day dayInstance = new Day();
                                                            retentionScheduleDailyInstance.DaysOfTheMonth.Add(dayInstance);
                                                            
                                                            JToken dateValue = daysOfTheMonthValue["date"];
                                                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                            {
                                                                int dateInstance = ((int)dateValue);
                                                                dayInstance.Date = dateInstance;
                                                            }
                                                            
                                                            JToken isLastValue = daysOfTheMonthValue["isLast"];
                                                            if (isLastValue != null && isLastValue.Type != JTokenType.Null)
                                                            {
                                                                bool isLastInstance = ((bool)isLastValue);
                                                                dayInstance.IsLast = isLastInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionScheduleWeeklyValue3 = monthlyScheduleValue2["retentionScheduleWeekly"];
                                                if (retentionScheduleWeeklyValue3 != null && retentionScheduleWeeklyValue3.Type != JTokenType.Null)
                                                {
                                                    WeeklyRetentionFormat retentionScheduleWeeklyInstance = new WeeklyRetentionFormat();
                                                    monthlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance;
                                                    
                                                    JToken daysOfTheWeekArray5 = retentionScheduleWeeklyValue3["daysOfTheWeek"];
                                                    if (daysOfTheWeekArray5 != null && daysOfTheWeekArray5.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheWeekValue2 in ((JArray)daysOfTheWeekArray5))
                                                        {
                                                            retentionScheduleWeeklyInstance.DaysOfTheWeek.Add(((string)daysOfTheWeekValue2));
                                                        }
                                                    }
                                                    
                                                    JToken weeksOfTheMonthArray3 = retentionScheduleWeeklyValue3["weeksOfTheMonth"];
                                                    if (weeksOfTheMonthArray3 != null && weeksOfTheMonthArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken weeksOfTheMonthValue in ((JArray)weeksOfTheMonthArray3))
                                                        {
                                                            retentionScheduleWeeklyInstance.WeeksOfTheMonth.Add(((string)weeksOfTheMonthValue));
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray7 = monthlyScheduleValue2["retentionTimes"];
                                                if (retentionTimesArray7 != null && retentionTimesArray7.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue3 in ((JArray)retentionTimesArray7))
                                                    {
                                                        monthlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue3));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue7 = monthlyScheduleValue2["retentionDuration"];
                                                if (retentionDurationValue7 != null && retentionDurationValue7.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance3 = new RetentionDuration();
                                                    monthlyScheduleInstance.RetentionDuration = retentionDurationInstance3;
                                                    
                                                    JToken countValue3 = retentionDurationValue7["count"];
                                                    if (countValue3 != null && countValue3.Type != JTokenType.Null)
                                                    {
                                                        int countInstance3 = ((int)countValue3);
                                                        retentionDurationInstance3.Count = countInstance3;
                                                    }
                                                    
                                                    JToken durationTypeValue3 = retentionDurationValue7["durationType"];
                                                    if (durationTypeValue3 != null && durationTypeValue3.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance3 = ((string)durationTypeValue3);
                                                        retentionDurationInstance3.DurationType = durationTypeInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken yearlyScheduleValue2 = retentionPolicyValue2["yearlySchedule"];
                                            if (yearlyScheduleValue2 != null && yearlyScheduleValue2.Type != JTokenType.Null)
                                            {
                                                YearlyRetentionSchedule yearlyScheduleInstance = new YearlyRetentionSchedule();
                                                longTermRetentionPolicyInstance.YearlySchedule = yearlyScheduleInstance;
                                                
                                                JToken retentionScheduleFormatTypeValue2 = yearlyScheduleValue2["retentionScheduleFormatType"];
                                                if (retentionScheduleFormatTypeValue2 != null && retentionScheduleFormatTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string retentionScheduleFormatTypeInstance2 = ((string)retentionScheduleFormatTypeValue2);
                                                    yearlyScheduleInstance.RetentionScheduleFormatType = retentionScheduleFormatTypeInstance2;
                                                }
                                                
                                                JToken monthsOfYearArray2 = yearlyScheduleValue2["monthsOfYear"];
                                                if (monthsOfYearArray2 != null && monthsOfYearArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken monthsOfYearValue in ((JArray)monthsOfYearArray2))
                                                    {
                                                        yearlyScheduleInstance.MonthsOfYear.Add(((string)monthsOfYearValue));
                                                    }
                                                }
                                                
                                                JToken retentionScheduleDailyValue4 = yearlyScheduleValue2["retentionScheduleDaily"];
                                                if (retentionScheduleDailyValue4 != null && retentionScheduleDailyValue4.Type != JTokenType.Null)
                                                {
                                                    DailyRetentionFormat retentionScheduleDailyInstance2 = new DailyRetentionFormat();
                                                    yearlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance2;
                                                    
                                                    JToken daysOfTheMonthArray4 = retentionScheduleDailyValue4["daysOfTheMonth"];
                                                    if (daysOfTheMonthArray4 != null && daysOfTheMonthArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheMonthValue2 in ((JArray)daysOfTheMonthArray4))
                                                        {
                                                            Day dayInstance2 = new Day();
                                                            retentionScheduleDailyInstance2.DaysOfTheMonth.Add(dayInstance2);
                                                            
                                                            JToken dateValue2 = daysOfTheMonthValue2["date"];
                                                            if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                            {
                                                                int dateInstance2 = ((int)dateValue2);
                                                                dayInstance2.Date = dateInstance2;
                                                            }
                                                            
                                                            JToken isLastValue2 = daysOfTheMonthValue2["isLast"];
                                                            if (isLastValue2 != null && isLastValue2.Type != JTokenType.Null)
                                                            {
                                                                bool isLastInstance2 = ((bool)isLastValue2);
                                                                dayInstance2.IsLast = isLastInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionScheduleWeeklyValue4 = yearlyScheduleValue2["retentionScheduleWeekly"];
                                                if (retentionScheduleWeeklyValue4 != null && retentionScheduleWeeklyValue4.Type != JTokenType.Null)
                                                {
                                                    WeeklyRetentionFormat retentionScheduleWeeklyInstance2 = new WeeklyRetentionFormat();
                                                    yearlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance2;
                                                    
                                                    JToken daysOfTheWeekArray6 = retentionScheduleWeeklyValue4["daysOfTheWeek"];
                                                    if (daysOfTheWeekArray6 != null && daysOfTheWeekArray6.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheWeekValue3 in ((JArray)daysOfTheWeekArray6))
                                                        {
                                                            retentionScheduleWeeklyInstance2.DaysOfTheWeek.Add(((string)daysOfTheWeekValue3));
                                                        }
                                                    }
                                                    
                                                    JToken weeksOfTheMonthArray4 = retentionScheduleWeeklyValue4["weeksOfTheMonth"];
                                                    if (weeksOfTheMonthArray4 != null && weeksOfTheMonthArray4.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken weeksOfTheMonthValue2 in ((JArray)weeksOfTheMonthArray4))
                                                        {
                                                            retentionScheduleWeeklyInstance2.WeeksOfTheMonth.Add(((string)weeksOfTheMonthValue2));
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray8 = yearlyScheduleValue2["retentionTimes"];
                                                if (retentionTimesArray8 != null && retentionTimesArray8.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue4 in ((JArray)retentionTimesArray8))
                                                    {
                                                        yearlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue4));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue8 = yearlyScheduleValue2["retentionDuration"];
                                                if (retentionDurationValue8 != null && retentionDurationValue8.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance4 = new RetentionDuration();
                                                    yearlyScheduleInstance.RetentionDuration = retentionDurationInstance4;
                                                    
                                                    JToken countValue4 = retentionDurationValue8["count"];
                                                    if (countValue4 != null && countValue4.Type != JTokenType.Null)
                                                    {
                                                        int countInstance4 = ((int)countValue4);
                                                        retentionDurationInstance4.Count = countInstance4;
                                                    }
                                                    
                                                    JToken durationTypeValue4 = retentionDurationValue8["durationType"];
                                                    if (durationTypeValue4 != null && durationTypeValue4.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance4 = ((string)durationTypeValue4);
                                                        retentionDurationInstance4.DurationType = durationTypeInstance4;
                                                    }
                                                }
                                            }
                                            azureIaaSVMProtectionPolicyInstance.RetentionPolicy = longTermRetentionPolicyInstance;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue2["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaaSVMProtectionPolicyInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    
                                    JToken protectedItemsCountValue2 = propertiesValue2["protectedItemsCount"];
                                    if (protectedItemsCountValue2 != null && protectedItemsCountValue2.Type != JTokenType.Null)
                                    {
                                        int protectedItemsCountInstance2 = ((int)protectedItemsCountValue2);
                                        azureIaaSVMProtectionPolicyInstance.ProtectedItemsCount = protectedItemsCountInstance2;
                                    }
                                    itemInstance.Properties = azureIaaSVMProtectionPolicyInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    itemInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Protected Policy Operation is used to delete the
        /// specified policy from your Recovery Services Vault. This is an
        /// asynchronous operation. To determine whether the backend service
        /// has finished processing the request, call the Get Policy Operation
        /// Result API.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Required. Name of the protection policy to be added/updated.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string resourceName, string policyName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets Info for the given policy present in your Recovery Services
        /// Vault as specified by the name passed in the arguments.This is an
        /// asynchronous operation. To determine whether the backend service
        /// has finished processing the request, call the Get Policy Operation
        /// Result API.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Required. Name of the protection policy to be added/updated.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Protection policy response.
        /// </returns>
        public async Task<ProtectionPolicyResponse> GetAsync(string resourceGroupName, string resourceName, string policyName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionPolicyResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionPolicyResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionPolicyResource itemInstance = new ProtectionPolicyResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["backupManagementType"]);
                                if (typeName == "ProtectionPolicy")
                                {
                                    ProtectionPolicy protectionPolicyInstance = new ProtectionPolicy();
                                    
                                    JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        protectionPolicyInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    
                                    JToken protectedItemsCountValue = propertiesValue["protectedItemsCount"];
                                    if (protectedItemsCountValue != null && protectedItemsCountValue.Type != JTokenType.Null)
                                    {
                                        int protectedItemsCountInstance = ((int)protectedItemsCountValue);
                                        protectionPolicyInstance.ProtectedItemsCount = protectedItemsCountInstance;
                                    }
                                    itemInstance.Properties = protectionPolicyInstance;
                                }
                                if (typeName == "AzureIaasVM")
                                {
                                    AzureIaaSVMProtectionPolicy azureIaaSVMProtectionPolicyInstance = new AzureIaaSVMProtectionPolicy();
                                    
                                    JToken schedulePolicyValue = propertiesValue["schedulePolicy"];
                                    if (schedulePolicyValue != null && schedulePolicyValue.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)schedulePolicyValue["schedulePolicyType"]);
                                        if (typeName2 == "SimpleSchedulePolicy")
                                        {
                                            SimpleSchedulePolicy simpleSchedulePolicyInstance = new SimpleSchedulePolicy();
                                            
                                            JToken scheduleRunFrequencyValue = schedulePolicyValue["scheduleRunFrequency"];
                                            if (scheduleRunFrequencyValue != null && scheduleRunFrequencyValue.Type != JTokenType.Null)
                                            {
                                                string scheduleRunFrequencyInstance = ((string)scheduleRunFrequencyValue);
                                                simpleSchedulePolicyInstance.ScheduleRunFrequency = scheduleRunFrequencyInstance;
                                            }
                                            
                                            JToken scheduleRunDaysArray = schedulePolicyValue["scheduleRunDays"];
                                            if (scheduleRunDaysArray != null && scheduleRunDaysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scheduleRunDaysValue in ((JArray)scheduleRunDaysArray))
                                                {
                                                    simpleSchedulePolicyInstance.ScheduleRunDays.Add(((string)scheduleRunDaysValue));
                                                }
                                            }
                                            
                                            JToken scheduleRunTimesArray = schedulePolicyValue["scheduleRunTimes"];
                                            if (scheduleRunTimesArray != null && scheduleRunTimesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scheduleRunTimesValue in ((JArray)scheduleRunTimesArray))
                                                {
                                                    simpleSchedulePolicyInstance.ScheduleRunTimes.Add(((DateTime)scheduleRunTimesValue));
                                                }
                                            }
                                            azureIaaSVMProtectionPolicyInstance.SchedulePolicy = simpleSchedulePolicyInstance;
                                        }
                                        if (typeName2 == "LongTermSchedulePolicy")
                                        {
                                            LongTermSchedulePolicy longTermSchedulePolicyInstance = new LongTermSchedulePolicy();
                                            azureIaaSVMProtectionPolicyInstance.SchedulePolicy = longTermSchedulePolicyInstance;
                                        }
                                    }
                                    
                                    JToken retentionPolicyValue = propertiesValue["retentionPolicy"];
                                    if (retentionPolicyValue != null && retentionPolicyValue.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)retentionPolicyValue["retentionPolicyType"]);
                                        if (typeName3 == "SimpleRetentionPolicy")
                                        {
                                            SimpleRetentionPolicy simpleRetentionPolicyInstance = new SimpleRetentionPolicy();
                                            azureIaaSVMProtectionPolicyInstance.RetentionPolicy = simpleRetentionPolicyInstance;
                                        }
                                        if (typeName3 == "LongTermRetentionPolicy")
                                        {
                                            LongTermRetentionPolicy longTermRetentionPolicyInstance = new LongTermRetentionPolicy();
                                            
                                            JToken dailyScheduleValue = retentionPolicyValue["dailySchedule"];
                                            if (dailyScheduleValue != null && dailyScheduleValue.Type != JTokenType.Null)
                                            {
                                                DailyRetentionSchedule dailyScheduleInstance = new DailyRetentionSchedule();
                                                longTermRetentionPolicyInstance.DailySchedule = dailyScheduleInstance;
                                                
                                                JToken retentionTimesArray = dailyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray != null && retentionTimesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue in ((JArray)retentionTimesArray))
                                                    {
                                                        dailyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue = dailyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue != null && retentionDurationValue.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance = new RetentionDuration();
                                                    dailyScheduleInstance.RetentionDuration = retentionDurationInstance;
                                                    
                                                    JToken countValue = retentionDurationValue["count"];
                                                    if (countValue != null && countValue.Type != JTokenType.Null)
                                                    {
                                                        int countInstance = ((int)countValue);
                                                        retentionDurationInstance.Count = countInstance;
                                                    }
                                                    
                                                    JToken durationTypeValue = retentionDurationValue["durationType"];
                                                    if (durationTypeValue != null && durationTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance = ((string)durationTypeValue);
                                                        retentionDurationInstance.DurationType = durationTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken weeklyScheduleValue = retentionPolicyValue["weeklySchedule"];
                                            if (weeklyScheduleValue != null && weeklyScheduleValue.Type != JTokenType.Null)
                                            {
                                                WeeklyRetentionSchedule weeklyScheduleInstance = new WeeklyRetentionSchedule();
                                                longTermRetentionPolicyInstance.WeeklySchedule = weeklyScheduleInstance;
                                                
                                                JToken daysOfTheWeekArray = weeklyScheduleValue["daysOfTheWeek"];
                                                if (daysOfTheWeekArray != null && daysOfTheWeekArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken daysOfTheWeekValue in ((JArray)daysOfTheWeekArray))
                                                    {
                                                        weeklyScheduleInstance.DaysOfTheWeek.Add(((string)daysOfTheWeekValue));
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray2 = weeklyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray2 != null && retentionTimesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue2 in ((JArray)retentionTimesArray2))
                                                    {
                                                        weeklyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue2));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue2 = weeklyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue2 != null && retentionDurationValue2.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance2 = new RetentionDuration();
                                                    weeklyScheduleInstance.RetentionDuration = retentionDurationInstance2;
                                                    
                                                    JToken countValue2 = retentionDurationValue2["count"];
                                                    if (countValue2 != null && countValue2.Type != JTokenType.Null)
                                                    {
                                                        int countInstance2 = ((int)countValue2);
                                                        retentionDurationInstance2.Count = countInstance2;
                                                    }
                                                    
                                                    JToken durationTypeValue2 = retentionDurationValue2["durationType"];
                                                    if (durationTypeValue2 != null && durationTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance2 = ((string)durationTypeValue2);
                                                        retentionDurationInstance2.DurationType = durationTypeInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken monthlyScheduleValue = retentionPolicyValue["monthlySchedule"];
                                            if (monthlyScheduleValue != null && monthlyScheduleValue.Type != JTokenType.Null)
                                            {
                                                MonthlyRetentionSchedule monthlyScheduleInstance = new MonthlyRetentionSchedule();
                                                longTermRetentionPolicyInstance.MonthlySchedule = monthlyScheduleInstance;
                                                
                                                JToken retentionScheduleFormatTypeValue = monthlyScheduleValue["retentionScheduleFormatType"];
                                                if (retentionScheduleFormatTypeValue != null && retentionScheduleFormatTypeValue.Type != JTokenType.Null)
                                                {
                                                    string retentionScheduleFormatTypeInstance = ((string)retentionScheduleFormatTypeValue);
                                                    monthlyScheduleInstance.RetentionScheduleFormatType = retentionScheduleFormatTypeInstance;
                                                }
                                                
                                                JToken retentionScheduleDailyValue = monthlyScheduleValue["retentionScheduleDaily"];
                                                if (retentionScheduleDailyValue != null && retentionScheduleDailyValue.Type != JTokenType.Null)
                                                {
                                                    DailyRetentionFormat retentionScheduleDailyInstance = new DailyRetentionFormat();
                                                    monthlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance;
                                                    
                                                    JToken daysOfTheMonthArray = retentionScheduleDailyValue["daysOfTheMonth"];
                                                    if (daysOfTheMonthArray != null && daysOfTheMonthArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheMonthValue in ((JArray)daysOfTheMonthArray))
                                                        {
                                                            Day dayInstance = new Day();
                                                            retentionScheduleDailyInstance.DaysOfTheMonth.Add(dayInstance);
                                                            
                                                            JToken dateValue = daysOfTheMonthValue["date"];
                                                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                            {
                                                                int dateInstance = ((int)dateValue);
                                                                dayInstance.Date = dateInstance;
                                                            }
                                                            
                                                            JToken isLastValue = daysOfTheMonthValue["isLast"];
                                                            if (isLastValue != null && isLastValue.Type != JTokenType.Null)
                                                            {
                                                                bool isLastInstance = ((bool)isLastValue);
                                                                dayInstance.IsLast = isLastInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionScheduleWeeklyValue = monthlyScheduleValue["retentionScheduleWeekly"];
                                                if (retentionScheduleWeeklyValue != null && retentionScheduleWeeklyValue.Type != JTokenType.Null)
                                                {
                                                    WeeklyRetentionFormat retentionScheduleWeeklyInstance = new WeeklyRetentionFormat();
                                                    monthlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance;
                                                    
                                                    JToken daysOfTheWeekArray2 = retentionScheduleWeeklyValue["daysOfTheWeek"];
                                                    if (daysOfTheWeekArray2 != null && daysOfTheWeekArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheWeekValue2 in ((JArray)daysOfTheWeekArray2))
                                                        {
                                                            retentionScheduleWeeklyInstance.DaysOfTheWeek.Add(((string)daysOfTheWeekValue2));
                                                        }
                                                    }
                                                    
                                                    JToken weeksOfTheMonthArray = retentionScheduleWeeklyValue["weeksOfTheMonth"];
                                                    if (weeksOfTheMonthArray != null && weeksOfTheMonthArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken weeksOfTheMonthValue in ((JArray)weeksOfTheMonthArray))
                                                        {
                                                            retentionScheduleWeeklyInstance.WeeksOfTheMonth.Add(((string)weeksOfTheMonthValue));
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray3 = monthlyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray3 != null && retentionTimesArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue3 in ((JArray)retentionTimesArray3))
                                                    {
                                                        monthlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue3));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue3 = monthlyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue3 != null && retentionDurationValue3.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance3 = new RetentionDuration();
                                                    monthlyScheduleInstance.RetentionDuration = retentionDurationInstance3;
                                                    
                                                    JToken countValue3 = retentionDurationValue3["count"];
                                                    if (countValue3 != null && countValue3.Type != JTokenType.Null)
                                                    {
                                                        int countInstance3 = ((int)countValue3);
                                                        retentionDurationInstance3.Count = countInstance3;
                                                    }
                                                    
                                                    JToken durationTypeValue3 = retentionDurationValue3["durationType"];
                                                    if (durationTypeValue3 != null && durationTypeValue3.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance3 = ((string)durationTypeValue3);
                                                        retentionDurationInstance3.DurationType = durationTypeInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken yearlyScheduleValue = retentionPolicyValue["yearlySchedule"];
                                            if (yearlyScheduleValue != null && yearlyScheduleValue.Type != JTokenType.Null)
                                            {
                                                YearlyRetentionSchedule yearlyScheduleInstance = new YearlyRetentionSchedule();
                                                longTermRetentionPolicyInstance.YearlySchedule = yearlyScheduleInstance;
                                                
                                                JToken retentionScheduleFormatTypeValue2 = yearlyScheduleValue["retentionScheduleFormatType"];
                                                if (retentionScheduleFormatTypeValue2 != null && retentionScheduleFormatTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string retentionScheduleFormatTypeInstance2 = ((string)retentionScheduleFormatTypeValue2);
                                                    yearlyScheduleInstance.RetentionScheduleFormatType = retentionScheduleFormatTypeInstance2;
                                                }
                                                
                                                JToken monthsOfYearArray = yearlyScheduleValue["monthsOfYear"];
                                                if (monthsOfYearArray != null && monthsOfYearArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken monthsOfYearValue in ((JArray)monthsOfYearArray))
                                                    {
                                                        yearlyScheduleInstance.MonthsOfYear.Add(((string)monthsOfYearValue));
                                                    }
                                                }
                                                
                                                JToken retentionScheduleDailyValue2 = yearlyScheduleValue["retentionScheduleDaily"];
                                                if (retentionScheduleDailyValue2 != null && retentionScheduleDailyValue2.Type != JTokenType.Null)
                                                {
                                                    DailyRetentionFormat retentionScheduleDailyInstance2 = new DailyRetentionFormat();
                                                    yearlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance2;
                                                    
                                                    JToken daysOfTheMonthArray2 = retentionScheduleDailyValue2["daysOfTheMonth"];
                                                    if (daysOfTheMonthArray2 != null && daysOfTheMonthArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheMonthValue2 in ((JArray)daysOfTheMonthArray2))
                                                        {
                                                            Day dayInstance2 = new Day();
                                                            retentionScheduleDailyInstance2.DaysOfTheMonth.Add(dayInstance2);
                                                            
                                                            JToken dateValue2 = daysOfTheMonthValue2["date"];
                                                            if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                            {
                                                                int dateInstance2 = ((int)dateValue2);
                                                                dayInstance2.Date = dateInstance2;
                                                            }
                                                            
                                                            JToken isLastValue2 = daysOfTheMonthValue2["isLast"];
                                                            if (isLastValue2 != null && isLastValue2.Type != JTokenType.Null)
                                                            {
                                                                bool isLastInstance2 = ((bool)isLastValue2);
                                                                dayInstance2.IsLast = isLastInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionScheduleWeeklyValue2 = yearlyScheduleValue["retentionScheduleWeekly"];
                                                if (retentionScheduleWeeklyValue2 != null && retentionScheduleWeeklyValue2.Type != JTokenType.Null)
                                                {
                                                    WeeklyRetentionFormat retentionScheduleWeeklyInstance2 = new WeeklyRetentionFormat();
                                                    yearlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance2;
                                                    
                                                    JToken daysOfTheWeekArray3 = retentionScheduleWeeklyValue2["daysOfTheWeek"];
                                                    if (daysOfTheWeekArray3 != null && daysOfTheWeekArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheWeekValue3 in ((JArray)daysOfTheWeekArray3))
                                                        {
                                                            retentionScheduleWeeklyInstance2.DaysOfTheWeek.Add(((string)daysOfTheWeekValue3));
                                                        }
                                                    }
                                                    
                                                    JToken weeksOfTheMonthArray2 = retentionScheduleWeeklyValue2["weeksOfTheMonth"];
                                                    if (weeksOfTheMonthArray2 != null && weeksOfTheMonthArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken weeksOfTheMonthValue2 in ((JArray)weeksOfTheMonthArray2))
                                                        {
                                                            retentionScheduleWeeklyInstance2.WeeksOfTheMonth.Add(((string)weeksOfTheMonthValue2));
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray4 = yearlyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray4 != null && retentionTimesArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue4 in ((JArray)retentionTimesArray4))
                                                    {
                                                        yearlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue4));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue4 = yearlyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue4 != null && retentionDurationValue4.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance4 = new RetentionDuration();
                                                    yearlyScheduleInstance.RetentionDuration = retentionDurationInstance4;
                                                    
                                                    JToken countValue4 = retentionDurationValue4["count"];
                                                    if (countValue4 != null && countValue4.Type != JTokenType.Null)
                                                    {
                                                        int countInstance4 = ((int)countValue4);
                                                        retentionDurationInstance4.Count = countInstance4;
                                                    }
                                                    
                                                    JToken durationTypeValue4 = retentionDurationValue4["durationType"];
                                                    if (durationTypeValue4 != null && durationTypeValue4.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance4 = ((string)durationTypeValue4);
                                                        retentionDurationInstance4.DurationType = durationTypeInstance4;
                                                    }
                                                }
                                            }
                                            azureIaaSVMProtectionPolicyInstance.RetentionPolicy = longTermRetentionPolicyInstance;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaaSVMProtectionPolicyInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    
                                    JToken protectedItemsCountValue2 = propertiesValue["protectedItemsCount"];
                                    if (protectedItemsCountValue2 != null && protectedItemsCountValue2.Type != JTokenType.Null)
                                    {
                                        int protectedItemsCountInstance2 = ((int)protectedItemsCountValue2);
                                        azureIaaSVMProtectionPolicyInstance.ProtectedItemsCount = protectedItemsCountInstance2;
                                    }
                                    itemInstance.Properties = azureIaaSVMProtectionPolicyInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    itemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Fetches the result of any operation on the protection policy given
        /// the ID of operation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='policyName'>
        /// Required. Name of the protection policy to be added/updated.
        /// </param>
        /// <param name='operationId'>
        /// Required. ID of the operation whose result has to be fetched.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Protection policy response.
        /// </returns>
        public async Task<ProtectionPolicyResponse> GetOperationResultAsync(string resourceGroupName, string resourceName, string policyName, string operationId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (policyName == null)
            {
                throw new ArgumentNullException("policyName");
            }
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("policyName", policyName);
                tracingParameters.Add("operationId", operationId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetOperationResultAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupPolicies/";
            url = url + Uri.EscapeDataString(policyName);
            url = url + "/operationResults/";
            url = url + Uri.EscapeDataString(operationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionPolicyResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionPolicyResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionPolicyResource itemInstance = new ProtectionPolicyResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["backupManagementType"]);
                                if (typeName == "ProtectionPolicy")
                                {
                                    ProtectionPolicy protectionPolicyInstance = new ProtectionPolicy();
                                    
                                    JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        protectionPolicyInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    
                                    JToken protectedItemsCountValue = propertiesValue["protectedItemsCount"];
                                    if (protectedItemsCountValue != null && protectedItemsCountValue.Type != JTokenType.Null)
                                    {
                                        int protectedItemsCountInstance = ((int)protectedItemsCountValue);
                                        protectionPolicyInstance.ProtectedItemsCount = protectedItemsCountInstance;
                                    }
                                    itemInstance.Properties = protectionPolicyInstance;
                                }
                                if (typeName == "AzureIaasVM")
                                {
                                    AzureIaaSVMProtectionPolicy azureIaaSVMProtectionPolicyInstance = new AzureIaaSVMProtectionPolicy();
                                    
                                    JToken schedulePolicyValue = propertiesValue["schedulePolicy"];
                                    if (schedulePolicyValue != null && schedulePolicyValue.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)schedulePolicyValue["schedulePolicyType"]);
                                        if (typeName2 == "SimpleSchedulePolicy")
                                        {
                                            SimpleSchedulePolicy simpleSchedulePolicyInstance = new SimpleSchedulePolicy();
                                            
                                            JToken scheduleRunFrequencyValue = schedulePolicyValue["scheduleRunFrequency"];
                                            if (scheduleRunFrequencyValue != null && scheduleRunFrequencyValue.Type != JTokenType.Null)
                                            {
                                                string scheduleRunFrequencyInstance = ((string)scheduleRunFrequencyValue);
                                                simpleSchedulePolicyInstance.ScheduleRunFrequency = scheduleRunFrequencyInstance;
                                            }
                                            
                                            JToken scheduleRunDaysArray = schedulePolicyValue["scheduleRunDays"];
                                            if (scheduleRunDaysArray != null && scheduleRunDaysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scheduleRunDaysValue in ((JArray)scheduleRunDaysArray))
                                                {
                                                    simpleSchedulePolicyInstance.ScheduleRunDays.Add(((string)scheduleRunDaysValue));
                                                }
                                            }
                                            
                                            JToken scheduleRunTimesArray = schedulePolicyValue["scheduleRunTimes"];
                                            if (scheduleRunTimesArray != null && scheduleRunTimesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scheduleRunTimesValue in ((JArray)scheduleRunTimesArray))
                                                {
                                                    simpleSchedulePolicyInstance.ScheduleRunTimes.Add(((DateTime)scheduleRunTimesValue));
                                                }
                                            }
                                            azureIaaSVMProtectionPolicyInstance.SchedulePolicy = simpleSchedulePolicyInstance;
                                        }
                                        if (typeName2 == "LongTermSchedulePolicy")
                                        {
                                            LongTermSchedulePolicy longTermSchedulePolicyInstance = new LongTermSchedulePolicy();
                                            azureIaaSVMProtectionPolicyInstance.SchedulePolicy = longTermSchedulePolicyInstance;
                                        }
                                    }
                                    
                                    JToken retentionPolicyValue = propertiesValue["retentionPolicy"];
                                    if (retentionPolicyValue != null && retentionPolicyValue.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)retentionPolicyValue["retentionPolicyType"]);
                                        if (typeName3 == "SimpleRetentionPolicy")
                                        {
                                            SimpleRetentionPolicy simpleRetentionPolicyInstance = new SimpleRetentionPolicy();
                                            azureIaaSVMProtectionPolicyInstance.RetentionPolicy = simpleRetentionPolicyInstance;
                                        }
                                        if (typeName3 == "LongTermRetentionPolicy")
                                        {
                                            LongTermRetentionPolicy longTermRetentionPolicyInstance = new LongTermRetentionPolicy();
                                            
                                            JToken dailyScheduleValue = retentionPolicyValue["dailySchedule"];
                                            if (dailyScheduleValue != null && dailyScheduleValue.Type != JTokenType.Null)
                                            {
                                                DailyRetentionSchedule dailyScheduleInstance = new DailyRetentionSchedule();
                                                longTermRetentionPolicyInstance.DailySchedule = dailyScheduleInstance;
                                                
                                                JToken retentionTimesArray = dailyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray != null && retentionTimesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue in ((JArray)retentionTimesArray))
                                                    {
                                                        dailyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue = dailyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue != null && retentionDurationValue.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance = new RetentionDuration();
                                                    dailyScheduleInstance.RetentionDuration = retentionDurationInstance;
                                                    
                                                    JToken countValue = retentionDurationValue["count"];
                                                    if (countValue != null && countValue.Type != JTokenType.Null)
                                                    {
                                                        int countInstance = ((int)countValue);
                                                        retentionDurationInstance.Count = countInstance;
                                                    }
                                                    
                                                    JToken durationTypeValue = retentionDurationValue["durationType"];
                                                    if (durationTypeValue != null && durationTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance = ((string)durationTypeValue);
                                                        retentionDurationInstance.DurationType = durationTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken weeklyScheduleValue = retentionPolicyValue["weeklySchedule"];
                                            if (weeklyScheduleValue != null && weeklyScheduleValue.Type != JTokenType.Null)
                                            {
                                                WeeklyRetentionSchedule weeklyScheduleInstance = new WeeklyRetentionSchedule();
                                                longTermRetentionPolicyInstance.WeeklySchedule = weeklyScheduleInstance;
                                                
                                                JToken daysOfTheWeekArray = weeklyScheduleValue["daysOfTheWeek"];
                                                if (daysOfTheWeekArray != null && daysOfTheWeekArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken daysOfTheWeekValue in ((JArray)daysOfTheWeekArray))
                                                    {
                                                        weeklyScheduleInstance.DaysOfTheWeek.Add(((string)daysOfTheWeekValue));
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray2 = weeklyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray2 != null && retentionTimesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue2 in ((JArray)retentionTimesArray2))
                                                    {
                                                        weeklyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue2));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue2 = weeklyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue2 != null && retentionDurationValue2.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance2 = new RetentionDuration();
                                                    weeklyScheduleInstance.RetentionDuration = retentionDurationInstance2;
                                                    
                                                    JToken countValue2 = retentionDurationValue2["count"];
                                                    if (countValue2 != null && countValue2.Type != JTokenType.Null)
                                                    {
                                                        int countInstance2 = ((int)countValue2);
                                                        retentionDurationInstance2.Count = countInstance2;
                                                    }
                                                    
                                                    JToken durationTypeValue2 = retentionDurationValue2["durationType"];
                                                    if (durationTypeValue2 != null && durationTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance2 = ((string)durationTypeValue2);
                                                        retentionDurationInstance2.DurationType = durationTypeInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken monthlyScheduleValue = retentionPolicyValue["monthlySchedule"];
                                            if (monthlyScheduleValue != null && monthlyScheduleValue.Type != JTokenType.Null)
                                            {
                                                MonthlyRetentionSchedule monthlyScheduleInstance = new MonthlyRetentionSchedule();
                                                longTermRetentionPolicyInstance.MonthlySchedule = monthlyScheduleInstance;
                                                
                                                JToken retentionScheduleFormatTypeValue = monthlyScheduleValue["retentionScheduleFormatType"];
                                                if (retentionScheduleFormatTypeValue != null && retentionScheduleFormatTypeValue.Type != JTokenType.Null)
                                                {
                                                    string retentionScheduleFormatTypeInstance = ((string)retentionScheduleFormatTypeValue);
                                                    monthlyScheduleInstance.RetentionScheduleFormatType = retentionScheduleFormatTypeInstance;
                                                }
                                                
                                                JToken retentionScheduleDailyValue = monthlyScheduleValue["retentionScheduleDaily"];
                                                if (retentionScheduleDailyValue != null && retentionScheduleDailyValue.Type != JTokenType.Null)
                                                {
                                                    DailyRetentionFormat retentionScheduleDailyInstance = new DailyRetentionFormat();
                                                    monthlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance;
                                                    
                                                    JToken daysOfTheMonthArray = retentionScheduleDailyValue["daysOfTheMonth"];
                                                    if (daysOfTheMonthArray != null && daysOfTheMonthArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheMonthValue in ((JArray)daysOfTheMonthArray))
                                                        {
                                                            Day dayInstance = new Day();
                                                            retentionScheduleDailyInstance.DaysOfTheMonth.Add(dayInstance);
                                                            
                                                            JToken dateValue = daysOfTheMonthValue["date"];
                                                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                            {
                                                                int dateInstance = ((int)dateValue);
                                                                dayInstance.Date = dateInstance;
                                                            }
                                                            
                                                            JToken isLastValue = daysOfTheMonthValue["isLast"];
                                                            if (isLastValue != null && isLastValue.Type != JTokenType.Null)
                                                            {
                                                                bool isLastInstance = ((bool)isLastValue);
                                                                dayInstance.IsLast = isLastInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionScheduleWeeklyValue = monthlyScheduleValue["retentionScheduleWeekly"];
                                                if (retentionScheduleWeeklyValue != null && retentionScheduleWeeklyValue.Type != JTokenType.Null)
                                                {
                                                    WeeklyRetentionFormat retentionScheduleWeeklyInstance = new WeeklyRetentionFormat();
                                                    monthlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance;
                                                    
                                                    JToken daysOfTheWeekArray2 = retentionScheduleWeeklyValue["daysOfTheWeek"];
                                                    if (daysOfTheWeekArray2 != null && daysOfTheWeekArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheWeekValue2 in ((JArray)daysOfTheWeekArray2))
                                                        {
                                                            retentionScheduleWeeklyInstance.DaysOfTheWeek.Add(((string)daysOfTheWeekValue2));
                                                        }
                                                    }
                                                    
                                                    JToken weeksOfTheMonthArray = retentionScheduleWeeklyValue["weeksOfTheMonth"];
                                                    if (weeksOfTheMonthArray != null && weeksOfTheMonthArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken weeksOfTheMonthValue in ((JArray)weeksOfTheMonthArray))
                                                        {
                                                            retentionScheduleWeeklyInstance.WeeksOfTheMonth.Add(((string)weeksOfTheMonthValue));
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray3 = monthlyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray3 != null && retentionTimesArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue3 in ((JArray)retentionTimesArray3))
                                                    {
                                                        monthlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue3));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue3 = monthlyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue3 != null && retentionDurationValue3.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance3 = new RetentionDuration();
                                                    monthlyScheduleInstance.RetentionDuration = retentionDurationInstance3;
                                                    
                                                    JToken countValue3 = retentionDurationValue3["count"];
                                                    if (countValue3 != null && countValue3.Type != JTokenType.Null)
                                                    {
                                                        int countInstance3 = ((int)countValue3);
                                                        retentionDurationInstance3.Count = countInstance3;
                                                    }
                                                    
                                                    JToken durationTypeValue3 = retentionDurationValue3["durationType"];
                                                    if (durationTypeValue3 != null && durationTypeValue3.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance3 = ((string)durationTypeValue3);
                                                        retentionDurationInstance3.DurationType = durationTypeInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken yearlyScheduleValue = retentionPolicyValue["yearlySchedule"];
                                            if (yearlyScheduleValue != null && yearlyScheduleValue.Type != JTokenType.Null)
                                            {
                                                YearlyRetentionSchedule yearlyScheduleInstance = new YearlyRetentionSchedule();
                                                longTermRetentionPolicyInstance.YearlySchedule = yearlyScheduleInstance;
                                                
                                                JToken retentionScheduleFormatTypeValue2 = yearlyScheduleValue["retentionScheduleFormatType"];
                                                if (retentionScheduleFormatTypeValue2 != null && retentionScheduleFormatTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string retentionScheduleFormatTypeInstance2 = ((string)retentionScheduleFormatTypeValue2);
                                                    yearlyScheduleInstance.RetentionScheduleFormatType = retentionScheduleFormatTypeInstance2;
                                                }
                                                
                                                JToken monthsOfYearArray = yearlyScheduleValue["monthsOfYear"];
                                                if (monthsOfYearArray != null && monthsOfYearArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken monthsOfYearValue in ((JArray)monthsOfYearArray))
                                                    {
                                                        yearlyScheduleInstance.MonthsOfYear.Add(((string)monthsOfYearValue));
                                                    }
                                                }
                                                
                                                JToken retentionScheduleDailyValue2 = yearlyScheduleValue["retentionScheduleDaily"];
                                                if (retentionScheduleDailyValue2 != null && retentionScheduleDailyValue2.Type != JTokenType.Null)
                                                {
                                                    DailyRetentionFormat retentionScheduleDailyInstance2 = new DailyRetentionFormat();
                                                    yearlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance2;
                                                    
                                                    JToken daysOfTheMonthArray2 = retentionScheduleDailyValue2["daysOfTheMonth"];
                                                    if (daysOfTheMonthArray2 != null && daysOfTheMonthArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheMonthValue2 in ((JArray)daysOfTheMonthArray2))
                                                        {
                                                            Day dayInstance2 = new Day();
                                                            retentionScheduleDailyInstance2.DaysOfTheMonth.Add(dayInstance2);
                                                            
                                                            JToken dateValue2 = daysOfTheMonthValue2["date"];
                                                            if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                            {
                                                                int dateInstance2 = ((int)dateValue2);
                                                                dayInstance2.Date = dateInstance2;
                                                            }
                                                            
                                                            JToken isLastValue2 = daysOfTheMonthValue2["isLast"];
                                                            if (isLastValue2 != null && isLastValue2.Type != JTokenType.Null)
                                                            {
                                                                bool isLastInstance2 = ((bool)isLastValue2);
                                                                dayInstance2.IsLast = isLastInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionScheduleWeeklyValue2 = yearlyScheduleValue["retentionScheduleWeekly"];
                                                if (retentionScheduleWeeklyValue2 != null && retentionScheduleWeeklyValue2.Type != JTokenType.Null)
                                                {
                                                    WeeklyRetentionFormat retentionScheduleWeeklyInstance2 = new WeeklyRetentionFormat();
                                                    yearlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance2;
                                                    
                                                    JToken daysOfTheWeekArray3 = retentionScheduleWeeklyValue2["daysOfTheWeek"];
                                                    if (daysOfTheWeekArray3 != null && daysOfTheWeekArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheWeekValue3 in ((JArray)daysOfTheWeekArray3))
                                                        {
                                                            retentionScheduleWeeklyInstance2.DaysOfTheWeek.Add(((string)daysOfTheWeekValue3));
                                                        }
                                                    }
                                                    
                                                    JToken weeksOfTheMonthArray2 = retentionScheduleWeeklyValue2["weeksOfTheMonth"];
                                                    if (weeksOfTheMonthArray2 != null && weeksOfTheMonthArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken weeksOfTheMonthValue2 in ((JArray)weeksOfTheMonthArray2))
                                                        {
                                                            retentionScheduleWeeklyInstance2.WeeksOfTheMonth.Add(((string)weeksOfTheMonthValue2));
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray4 = yearlyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray4 != null && retentionTimesArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue4 in ((JArray)retentionTimesArray4))
                                                    {
                                                        yearlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue4));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue4 = yearlyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue4 != null && retentionDurationValue4.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance4 = new RetentionDuration();
                                                    yearlyScheduleInstance.RetentionDuration = retentionDurationInstance4;
                                                    
                                                    JToken countValue4 = retentionDurationValue4["count"];
                                                    if (countValue4 != null && countValue4.Type != JTokenType.Null)
                                                    {
                                                        int countInstance4 = ((int)countValue4);
                                                        retentionDurationInstance4.Count = countInstance4;
                                                    }
                                                    
                                                    JToken durationTypeValue4 = retentionDurationValue4["durationType"];
                                                    if (durationTypeValue4 != null && durationTypeValue4.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance4 = ((string)durationTypeValue4);
                                                        retentionDurationInstance4.DurationType = durationTypeInstance4;
                                                    }
                                                }
                                            }
                                            azureIaaSVMProtectionPolicyInstance.RetentionPolicy = longTermRetentionPolicyInstance;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaaSVMProtectionPolicyInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    
                                    JToken protectedItemsCountValue2 = propertiesValue["protectedItemsCount"];
                                    if (protectedItemsCountValue2 != null && protectedItemsCountValue2.Type != JTokenType.Null)
                                    {
                                        int protectedItemsCountInstance2 = ((int)protectedItemsCountValue2);
                                        azureIaaSVMProtectionPolicyInstance.ProtectedItemsCount = protectedItemsCountInstance2;
                                    }
                                    itemInstance.Properties = azureIaaSVMProtectionPolicyInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    itemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Fetches the result of any operation on the protection policy given
        /// the URL for tracking the operation as returned by APIs such as
        /// Create Or Update, Delete, Get etc.
        /// </summary>
        /// <param name='operationResultLink'>
        /// Required. Location value returned by operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Protection policy response.
        /// </returns>
        public async Task<ProtectionPolicyResponse> GetProtectionPolicyResultByURLAsync(string operationResultLink, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (operationResultLink == null)
            {
                throw new ArgumentNullException("operationResultLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationResultLink", operationResultLink);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetProtectionPolicyResultByURLAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationResultLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionPolicyResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionPolicyResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionPolicyResource itemInstance = new ProtectionPolicyResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["backupManagementType"]);
                                if (typeName == "ProtectionPolicy")
                                {
                                    ProtectionPolicy protectionPolicyInstance = new ProtectionPolicy();
                                    
                                    JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        protectionPolicyInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    
                                    JToken protectedItemsCountValue = propertiesValue["protectedItemsCount"];
                                    if (protectedItemsCountValue != null && protectedItemsCountValue.Type != JTokenType.Null)
                                    {
                                        int protectedItemsCountInstance = ((int)protectedItemsCountValue);
                                        protectionPolicyInstance.ProtectedItemsCount = protectedItemsCountInstance;
                                    }
                                    itemInstance.Properties = protectionPolicyInstance;
                                }
                                if (typeName == "AzureIaasVM")
                                {
                                    AzureIaaSVMProtectionPolicy azureIaaSVMProtectionPolicyInstance = new AzureIaaSVMProtectionPolicy();
                                    
                                    JToken schedulePolicyValue = propertiesValue["schedulePolicy"];
                                    if (schedulePolicyValue != null && schedulePolicyValue.Type != JTokenType.Null)
                                    {
                                        string typeName2 = ((string)schedulePolicyValue["schedulePolicyType"]);
                                        if (typeName2 == "SimpleSchedulePolicy")
                                        {
                                            SimpleSchedulePolicy simpleSchedulePolicyInstance = new SimpleSchedulePolicy();
                                            
                                            JToken scheduleRunFrequencyValue = schedulePolicyValue["scheduleRunFrequency"];
                                            if (scheduleRunFrequencyValue != null && scheduleRunFrequencyValue.Type != JTokenType.Null)
                                            {
                                                string scheduleRunFrequencyInstance = ((string)scheduleRunFrequencyValue);
                                                simpleSchedulePolicyInstance.ScheduleRunFrequency = scheduleRunFrequencyInstance;
                                            }
                                            
                                            JToken scheduleRunDaysArray = schedulePolicyValue["scheduleRunDays"];
                                            if (scheduleRunDaysArray != null && scheduleRunDaysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scheduleRunDaysValue in ((JArray)scheduleRunDaysArray))
                                                {
                                                    simpleSchedulePolicyInstance.ScheduleRunDays.Add(((string)scheduleRunDaysValue));
                                                }
                                            }
                                            
                                            JToken scheduleRunTimesArray = schedulePolicyValue["scheduleRunTimes"];
                                            if (scheduleRunTimesArray != null && scheduleRunTimesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken scheduleRunTimesValue in ((JArray)scheduleRunTimesArray))
                                                {
                                                    simpleSchedulePolicyInstance.ScheduleRunTimes.Add(((DateTime)scheduleRunTimesValue));
                                                }
                                            }
                                            azureIaaSVMProtectionPolicyInstance.SchedulePolicy = simpleSchedulePolicyInstance;
                                        }
                                        if (typeName2 == "LongTermSchedulePolicy")
                                        {
                                            LongTermSchedulePolicy longTermSchedulePolicyInstance = new LongTermSchedulePolicy();
                                            azureIaaSVMProtectionPolicyInstance.SchedulePolicy = longTermSchedulePolicyInstance;
                                        }
                                    }
                                    
                                    JToken retentionPolicyValue = propertiesValue["retentionPolicy"];
                                    if (retentionPolicyValue != null && retentionPolicyValue.Type != JTokenType.Null)
                                    {
                                        string typeName3 = ((string)retentionPolicyValue["retentionPolicyType"]);
                                        if (typeName3 == "SimpleRetentionPolicy")
                                        {
                                            SimpleRetentionPolicy simpleRetentionPolicyInstance = new SimpleRetentionPolicy();
                                            azureIaaSVMProtectionPolicyInstance.RetentionPolicy = simpleRetentionPolicyInstance;
                                        }
                                        if (typeName3 == "LongTermRetentionPolicy")
                                        {
                                            LongTermRetentionPolicy longTermRetentionPolicyInstance = new LongTermRetentionPolicy();
                                            
                                            JToken dailyScheduleValue = retentionPolicyValue["dailySchedule"];
                                            if (dailyScheduleValue != null && dailyScheduleValue.Type != JTokenType.Null)
                                            {
                                                DailyRetentionSchedule dailyScheduleInstance = new DailyRetentionSchedule();
                                                longTermRetentionPolicyInstance.DailySchedule = dailyScheduleInstance;
                                                
                                                JToken retentionTimesArray = dailyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray != null && retentionTimesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue in ((JArray)retentionTimesArray))
                                                    {
                                                        dailyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue = dailyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue != null && retentionDurationValue.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance = new RetentionDuration();
                                                    dailyScheduleInstance.RetentionDuration = retentionDurationInstance;
                                                    
                                                    JToken countValue = retentionDurationValue["count"];
                                                    if (countValue != null && countValue.Type != JTokenType.Null)
                                                    {
                                                        int countInstance = ((int)countValue);
                                                        retentionDurationInstance.Count = countInstance;
                                                    }
                                                    
                                                    JToken durationTypeValue = retentionDurationValue["durationType"];
                                                    if (durationTypeValue != null && durationTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance = ((string)durationTypeValue);
                                                        retentionDurationInstance.DurationType = durationTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken weeklyScheduleValue = retentionPolicyValue["weeklySchedule"];
                                            if (weeklyScheduleValue != null && weeklyScheduleValue.Type != JTokenType.Null)
                                            {
                                                WeeklyRetentionSchedule weeklyScheduleInstance = new WeeklyRetentionSchedule();
                                                longTermRetentionPolicyInstance.WeeklySchedule = weeklyScheduleInstance;
                                                
                                                JToken daysOfTheWeekArray = weeklyScheduleValue["daysOfTheWeek"];
                                                if (daysOfTheWeekArray != null && daysOfTheWeekArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken daysOfTheWeekValue in ((JArray)daysOfTheWeekArray))
                                                    {
                                                        weeklyScheduleInstance.DaysOfTheWeek.Add(((string)daysOfTheWeekValue));
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray2 = weeklyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray2 != null && retentionTimesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue2 in ((JArray)retentionTimesArray2))
                                                    {
                                                        weeklyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue2));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue2 = weeklyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue2 != null && retentionDurationValue2.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance2 = new RetentionDuration();
                                                    weeklyScheduleInstance.RetentionDuration = retentionDurationInstance2;
                                                    
                                                    JToken countValue2 = retentionDurationValue2["count"];
                                                    if (countValue2 != null && countValue2.Type != JTokenType.Null)
                                                    {
                                                        int countInstance2 = ((int)countValue2);
                                                        retentionDurationInstance2.Count = countInstance2;
                                                    }
                                                    
                                                    JToken durationTypeValue2 = retentionDurationValue2["durationType"];
                                                    if (durationTypeValue2 != null && durationTypeValue2.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance2 = ((string)durationTypeValue2);
                                                        retentionDurationInstance2.DurationType = durationTypeInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken monthlyScheduleValue = retentionPolicyValue["monthlySchedule"];
                                            if (monthlyScheduleValue != null && monthlyScheduleValue.Type != JTokenType.Null)
                                            {
                                                MonthlyRetentionSchedule monthlyScheduleInstance = new MonthlyRetentionSchedule();
                                                longTermRetentionPolicyInstance.MonthlySchedule = monthlyScheduleInstance;
                                                
                                                JToken retentionScheduleFormatTypeValue = monthlyScheduleValue["retentionScheduleFormatType"];
                                                if (retentionScheduleFormatTypeValue != null && retentionScheduleFormatTypeValue.Type != JTokenType.Null)
                                                {
                                                    string retentionScheduleFormatTypeInstance = ((string)retentionScheduleFormatTypeValue);
                                                    monthlyScheduleInstance.RetentionScheduleFormatType = retentionScheduleFormatTypeInstance;
                                                }
                                                
                                                JToken retentionScheduleDailyValue = monthlyScheduleValue["retentionScheduleDaily"];
                                                if (retentionScheduleDailyValue != null && retentionScheduleDailyValue.Type != JTokenType.Null)
                                                {
                                                    DailyRetentionFormat retentionScheduleDailyInstance = new DailyRetentionFormat();
                                                    monthlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance;
                                                    
                                                    JToken daysOfTheMonthArray = retentionScheduleDailyValue["daysOfTheMonth"];
                                                    if (daysOfTheMonthArray != null && daysOfTheMonthArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheMonthValue in ((JArray)daysOfTheMonthArray))
                                                        {
                                                            Day dayInstance = new Day();
                                                            retentionScheduleDailyInstance.DaysOfTheMonth.Add(dayInstance);
                                                            
                                                            JToken dateValue = daysOfTheMonthValue["date"];
                                                            if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                            {
                                                                int dateInstance = ((int)dateValue);
                                                                dayInstance.Date = dateInstance;
                                                            }
                                                            
                                                            JToken isLastValue = daysOfTheMonthValue["isLast"];
                                                            if (isLastValue != null && isLastValue.Type != JTokenType.Null)
                                                            {
                                                                bool isLastInstance = ((bool)isLastValue);
                                                                dayInstance.IsLast = isLastInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionScheduleWeeklyValue = monthlyScheduleValue["retentionScheduleWeekly"];
                                                if (retentionScheduleWeeklyValue != null && retentionScheduleWeeklyValue.Type != JTokenType.Null)
                                                {
                                                    WeeklyRetentionFormat retentionScheduleWeeklyInstance = new WeeklyRetentionFormat();
                                                    monthlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance;
                                                    
                                                    JToken daysOfTheWeekArray2 = retentionScheduleWeeklyValue["daysOfTheWeek"];
                                                    if (daysOfTheWeekArray2 != null && daysOfTheWeekArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheWeekValue2 in ((JArray)daysOfTheWeekArray2))
                                                        {
                                                            retentionScheduleWeeklyInstance.DaysOfTheWeek.Add(((string)daysOfTheWeekValue2));
                                                        }
                                                    }
                                                    
                                                    JToken weeksOfTheMonthArray = retentionScheduleWeeklyValue["weeksOfTheMonth"];
                                                    if (weeksOfTheMonthArray != null && weeksOfTheMonthArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken weeksOfTheMonthValue in ((JArray)weeksOfTheMonthArray))
                                                        {
                                                            retentionScheduleWeeklyInstance.WeeksOfTheMonth.Add(((string)weeksOfTheMonthValue));
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray3 = monthlyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray3 != null && retentionTimesArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue3 in ((JArray)retentionTimesArray3))
                                                    {
                                                        monthlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue3));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue3 = monthlyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue3 != null && retentionDurationValue3.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance3 = new RetentionDuration();
                                                    monthlyScheduleInstance.RetentionDuration = retentionDurationInstance3;
                                                    
                                                    JToken countValue3 = retentionDurationValue3["count"];
                                                    if (countValue3 != null && countValue3.Type != JTokenType.Null)
                                                    {
                                                        int countInstance3 = ((int)countValue3);
                                                        retentionDurationInstance3.Count = countInstance3;
                                                    }
                                                    
                                                    JToken durationTypeValue3 = retentionDurationValue3["durationType"];
                                                    if (durationTypeValue3 != null && durationTypeValue3.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance3 = ((string)durationTypeValue3);
                                                        retentionDurationInstance3.DurationType = durationTypeInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken yearlyScheduleValue = retentionPolicyValue["yearlySchedule"];
                                            if (yearlyScheduleValue != null && yearlyScheduleValue.Type != JTokenType.Null)
                                            {
                                                YearlyRetentionSchedule yearlyScheduleInstance = new YearlyRetentionSchedule();
                                                longTermRetentionPolicyInstance.YearlySchedule = yearlyScheduleInstance;
                                                
                                                JToken retentionScheduleFormatTypeValue2 = yearlyScheduleValue["retentionScheduleFormatType"];
                                                if (retentionScheduleFormatTypeValue2 != null && retentionScheduleFormatTypeValue2.Type != JTokenType.Null)
                                                {
                                                    string retentionScheduleFormatTypeInstance2 = ((string)retentionScheduleFormatTypeValue2);
                                                    yearlyScheduleInstance.RetentionScheduleFormatType = retentionScheduleFormatTypeInstance2;
                                                }
                                                
                                                JToken monthsOfYearArray = yearlyScheduleValue["monthsOfYear"];
                                                if (monthsOfYearArray != null && monthsOfYearArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken monthsOfYearValue in ((JArray)monthsOfYearArray))
                                                    {
                                                        yearlyScheduleInstance.MonthsOfYear.Add(((string)monthsOfYearValue));
                                                    }
                                                }
                                                
                                                JToken retentionScheduleDailyValue2 = yearlyScheduleValue["retentionScheduleDaily"];
                                                if (retentionScheduleDailyValue2 != null && retentionScheduleDailyValue2.Type != JTokenType.Null)
                                                {
                                                    DailyRetentionFormat retentionScheduleDailyInstance2 = new DailyRetentionFormat();
                                                    yearlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance2;
                                                    
                                                    JToken daysOfTheMonthArray2 = retentionScheduleDailyValue2["daysOfTheMonth"];
                                                    if (daysOfTheMonthArray2 != null && daysOfTheMonthArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheMonthValue2 in ((JArray)daysOfTheMonthArray2))
                                                        {
                                                            Day dayInstance2 = new Day();
                                                            retentionScheduleDailyInstance2.DaysOfTheMonth.Add(dayInstance2);
                                                            
                                                            JToken dateValue2 = daysOfTheMonthValue2["date"];
                                                            if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                            {
                                                                int dateInstance2 = ((int)dateValue2);
                                                                dayInstance2.Date = dateInstance2;
                                                            }
                                                            
                                                            JToken isLastValue2 = daysOfTheMonthValue2["isLast"];
                                                            if (isLastValue2 != null && isLastValue2.Type != JTokenType.Null)
                                                            {
                                                                bool isLastInstance2 = ((bool)isLastValue2);
                                                                dayInstance2.IsLast = isLastInstance2;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionScheduleWeeklyValue2 = yearlyScheduleValue["retentionScheduleWeekly"];
                                                if (retentionScheduleWeeklyValue2 != null && retentionScheduleWeeklyValue2.Type != JTokenType.Null)
                                                {
                                                    WeeklyRetentionFormat retentionScheduleWeeklyInstance2 = new WeeklyRetentionFormat();
                                                    yearlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance2;
                                                    
                                                    JToken daysOfTheWeekArray3 = retentionScheduleWeeklyValue2["daysOfTheWeek"];
                                                    if (daysOfTheWeekArray3 != null && daysOfTheWeekArray3.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken daysOfTheWeekValue3 in ((JArray)daysOfTheWeekArray3))
                                                        {
                                                            retentionScheduleWeeklyInstance2.DaysOfTheWeek.Add(((string)daysOfTheWeekValue3));
                                                        }
                                                    }
                                                    
                                                    JToken weeksOfTheMonthArray2 = retentionScheduleWeeklyValue2["weeksOfTheMonth"];
                                                    if (weeksOfTheMonthArray2 != null && weeksOfTheMonthArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken weeksOfTheMonthValue2 in ((JArray)weeksOfTheMonthArray2))
                                                        {
                                                            retentionScheduleWeeklyInstance2.WeeksOfTheMonth.Add(((string)weeksOfTheMonthValue2));
                                                        }
                                                    }
                                                }
                                                
                                                JToken retentionTimesArray4 = yearlyScheduleValue["retentionTimes"];
                                                if (retentionTimesArray4 != null && retentionTimesArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken retentionTimesValue4 in ((JArray)retentionTimesArray4))
                                                    {
                                                        yearlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue4));
                                                    }
                                                }
                                                
                                                JToken retentionDurationValue4 = yearlyScheduleValue["retentionDuration"];
                                                if (retentionDurationValue4 != null && retentionDurationValue4.Type != JTokenType.Null)
                                                {
                                                    RetentionDuration retentionDurationInstance4 = new RetentionDuration();
                                                    yearlyScheduleInstance.RetentionDuration = retentionDurationInstance4;
                                                    
                                                    JToken countValue4 = retentionDurationValue4["count"];
                                                    if (countValue4 != null && countValue4.Type != JTokenType.Null)
                                                    {
                                                        int countInstance4 = ((int)countValue4);
                                                        retentionDurationInstance4.Count = countInstance4;
                                                    }
                                                    
                                                    JToken durationTypeValue4 = retentionDurationValue4["durationType"];
                                                    if (durationTypeValue4 != null && durationTypeValue4.Type != JTokenType.Null)
                                                    {
                                                        string durationTypeInstance4 = ((string)durationTypeValue4);
                                                        retentionDurationInstance4.DurationType = durationTypeInstance4;
                                                    }
                                                }
                                            }
                                            azureIaaSVMProtectionPolicyInstance.RetentionPolicy = longTermRetentionPolicyInstance;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaaSVMProtectionPolicyInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    
                                    JToken protectedItemsCountValue2 = propertiesValue["protectedItemsCount"];
                                    if (protectedItemsCountValue2 != null && protectedItemsCountValue2.Type != JTokenType.Null)
                                    {
                                        int protectedItemsCountInstance2 = ((int)protectedItemsCountValue2);
                                        azureIaaSVMProtectionPolicyInstance.ProtectedItemsCount = protectedItemsCountInstance2;
                                    }
                                    itemInstance.Properties = azureIaaSVMProtectionPolicyInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    itemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all the protection policies in your Recovery Services Vault
        /// according to the query and pagination parameters supplied in the
        /// arguments.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='queryFilter'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of protection policies as returned by the service with the
        /// list policies call.
        /// </returns>
        public async Task<ProtectionPolicyListResponse> ListAsync(string resourceGroupName, string resourceName, ProtectionPolicyQueryParameters queryFilter, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("queryFilter", queryFilter);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupPolicies";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            List<string> odataFilter = new List<string>();
            if (queryFilter != null && queryFilter.BackupManagementType != null)
            {
                odataFilter.Add("backupManagementType eq '" + Uri.EscapeDataString(queryFilter.BackupManagementType) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectionPolicyListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectionPolicyListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectionPolicyResourceList itemListInstance = new ProtectionPolicyResourceList();
                            result.ItemList = itemListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProtectionPolicyResource protectionPolicyResourceInstance = new ProtectionPolicyResource();
                                    itemListInstance.Value.Add(protectionPolicyResourceInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["backupManagementType"]);
                                        if (typeName == "ProtectionPolicy")
                                        {
                                            ProtectionPolicy protectionPolicyInstance = new ProtectionPolicy();
                                            
                                            JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                                protectionPolicyInstance.BackupManagementType = backupManagementTypeInstance;
                                            }
                                            
                                            JToken protectedItemsCountValue = propertiesValue["protectedItemsCount"];
                                            if (protectedItemsCountValue != null && protectedItemsCountValue.Type != JTokenType.Null)
                                            {
                                                int protectedItemsCountInstance = ((int)protectedItemsCountValue);
                                                protectionPolicyInstance.ProtectedItemsCount = protectedItemsCountInstance;
                                            }
                                            protectionPolicyResourceInstance.Properties = protectionPolicyInstance;
                                        }
                                        if (typeName == "AzureIaasVM")
                                        {
                                            AzureIaaSVMProtectionPolicy azureIaaSVMProtectionPolicyInstance = new AzureIaaSVMProtectionPolicy();
                                            
                                            JToken schedulePolicyValue = propertiesValue["schedulePolicy"];
                                            if (schedulePolicyValue != null && schedulePolicyValue.Type != JTokenType.Null)
                                            {
                                                string typeName2 = ((string)schedulePolicyValue["schedulePolicyType"]);
                                                if (typeName2 == "SimpleSchedulePolicy")
                                                {
                                                    SimpleSchedulePolicy simpleSchedulePolicyInstance = new SimpleSchedulePolicy();
                                                    
                                                    JToken scheduleRunFrequencyValue = schedulePolicyValue["scheduleRunFrequency"];
                                                    if (scheduleRunFrequencyValue != null && scheduleRunFrequencyValue.Type != JTokenType.Null)
                                                    {
                                                        string scheduleRunFrequencyInstance = ((string)scheduleRunFrequencyValue);
                                                        simpleSchedulePolicyInstance.ScheduleRunFrequency = scheduleRunFrequencyInstance;
                                                    }
                                                    
                                                    JToken scheduleRunDaysArray = schedulePolicyValue["scheduleRunDays"];
                                                    if (scheduleRunDaysArray != null && scheduleRunDaysArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken scheduleRunDaysValue in ((JArray)scheduleRunDaysArray))
                                                        {
                                                            simpleSchedulePolicyInstance.ScheduleRunDays.Add(((string)scheduleRunDaysValue));
                                                        }
                                                    }
                                                    
                                                    JToken scheduleRunTimesArray = schedulePolicyValue["scheduleRunTimes"];
                                                    if (scheduleRunTimesArray != null && scheduleRunTimesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken scheduleRunTimesValue in ((JArray)scheduleRunTimesArray))
                                                        {
                                                            simpleSchedulePolicyInstance.ScheduleRunTimes.Add(((DateTime)scheduleRunTimesValue));
                                                        }
                                                    }
                                                    azureIaaSVMProtectionPolicyInstance.SchedulePolicy = simpleSchedulePolicyInstance;
                                                }
                                                if (typeName2 == "LongTermSchedulePolicy")
                                                {
                                                    LongTermSchedulePolicy longTermSchedulePolicyInstance = new LongTermSchedulePolicy();
                                                    azureIaaSVMProtectionPolicyInstance.SchedulePolicy = longTermSchedulePolicyInstance;
                                                }
                                            }
                                            
                                            JToken retentionPolicyValue = propertiesValue["retentionPolicy"];
                                            if (retentionPolicyValue != null && retentionPolicyValue.Type != JTokenType.Null)
                                            {
                                                string typeName3 = ((string)retentionPolicyValue["retentionPolicyType"]);
                                                if (typeName3 == "SimpleRetentionPolicy")
                                                {
                                                    SimpleRetentionPolicy simpleRetentionPolicyInstance = new SimpleRetentionPolicy();
                                                    azureIaaSVMProtectionPolicyInstance.RetentionPolicy = simpleRetentionPolicyInstance;
                                                }
                                                if (typeName3 == "LongTermRetentionPolicy")
                                                {
                                                    LongTermRetentionPolicy longTermRetentionPolicyInstance = new LongTermRetentionPolicy();
                                                    
                                                    JToken dailyScheduleValue = retentionPolicyValue["dailySchedule"];
                                                    if (dailyScheduleValue != null && dailyScheduleValue.Type != JTokenType.Null)
                                                    {
                                                        DailyRetentionSchedule dailyScheduleInstance = new DailyRetentionSchedule();
                                                        longTermRetentionPolicyInstance.DailySchedule = dailyScheduleInstance;
                                                        
                                                        JToken retentionTimesArray = dailyScheduleValue["retentionTimes"];
                                                        if (retentionTimesArray != null && retentionTimesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken retentionTimesValue in ((JArray)retentionTimesArray))
                                                            {
                                                                dailyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue));
                                                            }
                                                        }
                                                        
                                                        JToken retentionDurationValue = dailyScheduleValue["retentionDuration"];
                                                        if (retentionDurationValue != null && retentionDurationValue.Type != JTokenType.Null)
                                                        {
                                                            RetentionDuration retentionDurationInstance = new RetentionDuration();
                                                            dailyScheduleInstance.RetentionDuration = retentionDurationInstance;
                                                            
                                                            JToken countValue = retentionDurationValue["count"];
                                                            if (countValue != null && countValue.Type != JTokenType.Null)
                                                            {
                                                                int countInstance = ((int)countValue);
                                                                retentionDurationInstance.Count = countInstance;
                                                            }
                                                            
                                                            JToken durationTypeValue = retentionDurationValue["durationType"];
                                                            if (durationTypeValue != null && durationTypeValue.Type != JTokenType.Null)
                                                            {
                                                                string durationTypeInstance = ((string)durationTypeValue);
                                                                retentionDurationInstance.DurationType = durationTypeInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken weeklyScheduleValue = retentionPolicyValue["weeklySchedule"];
                                                    if (weeklyScheduleValue != null && weeklyScheduleValue.Type != JTokenType.Null)
                                                    {
                                                        WeeklyRetentionSchedule weeklyScheduleInstance = new WeeklyRetentionSchedule();
                                                        longTermRetentionPolicyInstance.WeeklySchedule = weeklyScheduleInstance;
                                                        
                                                        JToken daysOfTheWeekArray = weeklyScheduleValue["daysOfTheWeek"];
                                                        if (daysOfTheWeekArray != null && daysOfTheWeekArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken daysOfTheWeekValue in ((JArray)daysOfTheWeekArray))
                                                            {
                                                                weeklyScheduleInstance.DaysOfTheWeek.Add(((string)daysOfTheWeekValue));
                                                            }
                                                        }
                                                        
                                                        JToken retentionTimesArray2 = weeklyScheduleValue["retentionTimes"];
                                                        if (retentionTimesArray2 != null && retentionTimesArray2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken retentionTimesValue2 in ((JArray)retentionTimesArray2))
                                                            {
                                                                weeklyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue2));
                                                            }
                                                        }
                                                        
                                                        JToken retentionDurationValue2 = weeklyScheduleValue["retentionDuration"];
                                                        if (retentionDurationValue2 != null && retentionDurationValue2.Type != JTokenType.Null)
                                                        {
                                                            RetentionDuration retentionDurationInstance2 = new RetentionDuration();
                                                            weeklyScheduleInstance.RetentionDuration = retentionDurationInstance2;
                                                            
                                                            JToken countValue2 = retentionDurationValue2["count"];
                                                            if (countValue2 != null && countValue2.Type != JTokenType.Null)
                                                            {
                                                                int countInstance2 = ((int)countValue2);
                                                                retentionDurationInstance2.Count = countInstance2;
                                                            }
                                                            
                                                            JToken durationTypeValue2 = retentionDurationValue2["durationType"];
                                                            if (durationTypeValue2 != null && durationTypeValue2.Type != JTokenType.Null)
                                                            {
                                                                string durationTypeInstance2 = ((string)durationTypeValue2);
                                                                retentionDurationInstance2.DurationType = durationTypeInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken monthlyScheduleValue = retentionPolicyValue["monthlySchedule"];
                                                    if (monthlyScheduleValue != null && monthlyScheduleValue.Type != JTokenType.Null)
                                                    {
                                                        MonthlyRetentionSchedule monthlyScheduleInstance = new MonthlyRetentionSchedule();
                                                        longTermRetentionPolicyInstance.MonthlySchedule = monthlyScheduleInstance;
                                                        
                                                        JToken retentionScheduleFormatTypeValue = monthlyScheduleValue["retentionScheduleFormatType"];
                                                        if (retentionScheduleFormatTypeValue != null && retentionScheduleFormatTypeValue.Type != JTokenType.Null)
                                                        {
                                                            string retentionScheduleFormatTypeInstance = ((string)retentionScheduleFormatTypeValue);
                                                            monthlyScheduleInstance.RetentionScheduleFormatType = retentionScheduleFormatTypeInstance;
                                                        }
                                                        
                                                        JToken retentionScheduleDailyValue = monthlyScheduleValue["retentionScheduleDaily"];
                                                        if (retentionScheduleDailyValue != null && retentionScheduleDailyValue.Type != JTokenType.Null)
                                                        {
                                                            DailyRetentionFormat retentionScheduleDailyInstance = new DailyRetentionFormat();
                                                            monthlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance;
                                                            
                                                            JToken daysOfTheMonthArray = retentionScheduleDailyValue["daysOfTheMonth"];
                                                            if (daysOfTheMonthArray != null && daysOfTheMonthArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken daysOfTheMonthValue in ((JArray)daysOfTheMonthArray))
                                                                {
                                                                    Day dayInstance = new Day();
                                                                    retentionScheduleDailyInstance.DaysOfTheMonth.Add(dayInstance);
                                                                    
                                                                    JToken dateValue = daysOfTheMonthValue["date"];
                                                                    if (dateValue != null && dateValue.Type != JTokenType.Null)
                                                                    {
                                                                        int dateInstance = ((int)dateValue);
                                                                        dayInstance.Date = dateInstance;
                                                                    }
                                                                    
                                                                    JToken isLastValue = daysOfTheMonthValue["isLast"];
                                                                    if (isLastValue != null && isLastValue.Type != JTokenType.Null)
                                                                    {
                                                                        bool isLastInstance = ((bool)isLastValue);
                                                                        dayInstance.IsLast = isLastInstance;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken retentionScheduleWeeklyValue = monthlyScheduleValue["retentionScheduleWeekly"];
                                                        if (retentionScheduleWeeklyValue != null && retentionScheduleWeeklyValue.Type != JTokenType.Null)
                                                        {
                                                            WeeklyRetentionFormat retentionScheduleWeeklyInstance = new WeeklyRetentionFormat();
                                                            monthlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance;
                                                            
                                                            JToken daysOfTheWeekArray2 = retentionScheduleWeeklyValue["daysOfTheWeek"];
                                                            if (daysOfTheWeekArray2 != null && daysOfTheWeekArray2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken daysOfTheWeekValue2 in ((JArray)daysOfTheWeekArray2))
                                                                {
                                                                    retentionScheduleWeeklyInstance.DaysOfTheWeek.Add(((string)daysOfTheWeekValue2));
                                                                }
                                                            }
                                                            
                                                            JToken weeksOfTheMonthArray = retentionScheduleWeeklyValue["weeksOfTheMonth"];
                                                            if (weeksOfTheMonthArray != null && weeksOfTheMonthArray.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken weeksOfTheMonthValue in ((JArray)weeksOfTheMonthArray))
                                                                {
                                                                    retentionScheduleWeeklyInstance.WeeksOfTheMonth.Add(((string)weeksOfTheMonthValue));
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken retentionTimesArray3 = monthlyScheduleValue["retentionTimes"];
                                                        if (retentionTimesArray3 != null && retentionTimesArray3.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken retentionTimesValue3 in ((JArray)retentionTimesArray3))
                                                            {
                                                                monthlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue3));
                                                            }
                                                        }
                                                        
                                                        JToken retentionDurationValue3 = monthlyScheduleValue["retentionDuration"];
                                                        if (retentionDurationValue3 != null && retentionDurationValue3.Type != JTokenType.Null)
                                                        {
                                                            RetentionDuration retentionDurationInstance3 = new RetentionDuration();
                                                            monthlyScheduleInstance.RetentionDuration = retentionDurationInstance3;
                                                            
                                                            JToken countValue3 = retentionDurationValue3["count"];
                                                            if (countValue3 != null && countValue3.Type != JTokenType.Null)
                                                            {
                                                                int countInstance3 = ((int)countValue3);
                                                                retentionDurationInstance3.Count = countInstance3;
                                                            }
                                                            
                                                            JToken durationTypeValue3 = retentionDurationValue3["durationType"];
                                                            if (durationTypeValue3 != null && durationTypeValue3.Type != JTokenType.Null)
                                                            {
                                                                string durationTypeInstance3 = ((string)durationTypeValue3);
                                                                retentionDurationInstance3.DurationType = durationTypeInstance3;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken yearlyScheduleValue = retentionPolicyValue["yearlySchedule"];
                                                    if (yearlyScheduleValue != null && yearlyScheduleValue.Type != JTokenType.Null)
                                                    {
                                                        YearlyRetentionSchedule yearlyScheduleInstance = new YearlyRetentionSchedule();
                                                        longTermRetentionPolicyInstance.YearlySchedule = yearlyScheduleInstance;
                                                        
                                                        JToken retentionScheduleFormatTypeValue2 = yearlyScheduleValue["retentionScheduleFormatType"];
                                                        if (retentionScheduleFormatTypeValue2 != null && retentionScheduleFormatTypeValue2.Type != JTokenType.Null)
                                                        {
                                                            string retentionScheduleFormatTypeInstance2 = ((string)retentionScheduleFormatTypeValue2);
                                                            yearlyScheduleInstance.RetentionScheduleFormatType = retentionScheduleFormatTypeInstance2;
                                                        }
                                                        
                                                        JToken monthsOfYearArray = yearlyScheduleValue["monthsOfYear"];
                                                        if (monthsOfYearArray != null && monthsOfYearArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken monthsOfYearValue in ((JArray)monthsOfYearArray))
                                                            {
                                                                yearlyScheduleInstance.MonthsOfYear.Add(((string)monthsOfYearValue));
                                                            }
                                                        }
                                                        
                                                        JToken retentionScheduleDailyValue2 = yearlyScheduleValue["retentionScheduleDaily"];
                                                        if (retentionScheduleDailyValue2 != null && retentionScheduleDailyValue2.Type != JTokenType.Null)
                                                        {
                                                            DailyRetentionFormat retentionScheduleDailyInstance2 = new DailyRetentionFormat();
                                                            yearlyScheduleInstance.RetentionScheduleDaily = retentionScheduleDailyInstance2;
                                                            
                                                            JToken daysOfTheMonthArray2 = retentionScheduleDailyValue2["daysOfTheMonth"];
                                                            if (daysOfTheMonthArray2 != null && daysOfTheMonthArray2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken daysOfTheMonthValue2 in ((JArray)daysOfTheMonthArray2))
                                                                {
                                                                    Day dayInstance2 = new Day();
                                                                    retentionScheduleDailyInstance2.DaysOfTheMonth.Add(dayInstance2);
                                                                    
                                                                    JToken dateValue2 = daysOfTheMonthValue2["date"];
                                                                    if (dateValue2 != null && dateValue2.Type != JTokenType.Null)
                                                                    {
                                                                        int dateInstance2 = ((int)dateValue2);
                                                                        dayInstance2.Date = dateInstance2;
                                                                    }
                                                                    
                                                                    JToken isLastValue2 = daysOfTheMonthValue2["isLast"];
                                                                    if (isLastValue2 != null && isLastValue2.Type != JTokenType.Null)
                                                                    {
                                                                        bool isLastInstance2 = ((bool)isLastValue2);
                                                                        dayInstance2.IsLast = isLastInstance2;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken retentionScheduleWeeklyValue2 = yearlyScheduleValue["retentionScheduleWeekly"];
                                                        if (retentionScheduleWeeklyValue2 != null && retentionScheduleWeeklyValue2.Type != JTokenType.Null)
                                                        {
                                                            WeeklyRetentionFormat retentionScheduleWeeklyInstance2 = new WeeklyRetentionFormat();
                                                            yearlyScheduleInstance.RetentionScheduleWeekly = retentionScheduleWeeklyInstance2;
                                                            
                                                            JToken daysOfTheWeekArray3 = retentionScheduleWeeklyValue2["daysOfTheWeek"];
                                                            if (daysOfTheWeekArray3 != null && daysOfTheWeekArray3.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken daysOfTheWeekValue3 in ((JArray)daysOfTheWeekArray3))
                                                                {
                                                                    retentionScheduleWeeklyInstance2.DaysOfTheWeek.Add(((string)daysOfTheWeekValue3));
                                                                }
                                                            }
                                                            
                                                            JToken weeksOfTheMonthArray2 = retentionScheduleWeeklyValue2["weeksOfTheMonth"];
                                                            if (weeksOfTheMonthArray2 != null && weeksOfTheMonthArray2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JToken weeksOfTheMonthValue2 in ((JArray)weeksOfTheMonthArray2))
                                                                {
                                                                    retentionScheduleWeeklyInstance2.WeeksOfTheMonth.Add(((string)weeksOfTheMonthValue2));
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken retentionTimesArray4 = yearlyScheduleValue["retentionTimes"];
                                                        if (retentionTimesArray4 != null && retentionTimesArray4.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken retentionTimesValue4 in ((JArray)retentionTimesArray4))
                                                            {
                                                                yearlyScheduleInstance.RetentionTimes.Add(((DateTime)retentionTimesValue4));
                                                            }
                                                        }
                                                        
                                                        JToken retentionDurationValue4 = yearlyScheduleValue["retentionDuration"];
                                                        if (retentionDurationValue4 != null && retentionDurationValue4.Type != JTokenType.Null)
                                                        {
                                                            RetentionDuration retentionDurationInstance4 = new RetentionDuration();
                                                            yearlyScheduleInstance.RetentionDuration = retentionDurationInstance4;
                                                            
                                                            JToken countValue4 = retentionDurationValue4["count"];
                                                            if (countValue4 != null && countValue4.Type != JTokenType.Null)
                                                            {
                                                                int countInstance4 = ((int)countValue4);
                                                                retentionDurationInstance4.Count = countInstance4;
                                                            }
                                                            
                                                            JToken durationTypeValue4 = retentionDurationValue4["durationType"];
                                                            if (durationTypeValue4 != null && durationTypeValue4.Type != JTokenType.Null)
                                                            {
                                                                string durationTypeInstance4 = ((string)durationTypeValue4);
                                                                retentionDurationInstance4.DurationType = durationTypeInstance4;
                                                            }
                                                        }
                                                    }
                                                    azureIaaSVMProtectionPolicyInstance.RetentionPolicy = longTermRetentionPolicyInstance;
                                                }
                                            }
                                            
                                            JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                                azureIaaSVMProtectionPolicyInstance.BackupManagementType = backupManagementTypeInstance2;
                                            }
                                            
                                            JToken protectedItemsCountValue2 = propertiesValue["protectedItemsCount"];
                                            if (protectedItemsCountValue2 != null && protectedItemsCountValue2.Type != JTokenType.Null)
                                            {
                                                int protectedItemsCountInstance2 = ((int)protectedItemsCountValue2);
                                                azureIaaSVMProtectionPolicyInstance.ProtectedItemsCount = protectedItemsCountInstance2;
                                            }
                                            protectionPolicyResourceInstance.Properties = azureIaaSVMProtectionPolicyInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        protectionPolicyResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        protectionPolicyResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        protectionPolicyResourceInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        protectionPolicyResourceInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            protectionPolicyResourceInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken eTagValue = valueValue["eTag"];
                                    if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                                    {
                                        string eTagInstance = ((string)eTagValue);
                                        protectionPolicyResourceInstance.ETag = eTagInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                itemListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
