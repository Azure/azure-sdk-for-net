// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.RecoveryServices.Backup;
using Microsoft.Azure.Management.RecoveryServices.Backup.Models;

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    public static partial class RecoveryServicesBackupManagementClientExtensions
    {
        /// <summary>
        /// Once you trigger a delete operation such as deleting a protected
        /// item etc., you may use this method to get the operation's result.
        /// Once the operation has started, the status code in the response
        /// would be Accepted. It will continue to be in this state till it
        /// reaches completetion. On successful completion, the status code
        /// will be OK. This method expects the ID of the operation to be
        /// passed in the arguments. This usually is part of the Location
        /// header of the operation response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.IRecoveryServicesBackupManagementClient.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='operationId'>
        /// Required.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// Response object returned by the get operation result APIs.
        /// </returns>
        public static GetOperationResultResponse GetDeleteOperationResult(this IRecoveryServicesBackupManagementClient operations, string resourceGroupName, string resourceName, string operationId, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryServicesBackupManagementClient)s).GetDeleteOperationResultAsync(resourceGroupName, resourceName, operationId, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Once you trigger a delete operation such as deleting a protected
        /// item etc., you may use this method to get the operation's result.
        /// Once the operation has started, the status code in the response
        /// would be Accepted. It will continue to be in this state till it
        /// reaches completetion. On successful completion, the status code
        /// will be OK. This method expects the ID of the operation to be
        /// passed in the arguments. This usually is part of the Location
        /// header of the operation response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.IRecoveryServicesBackupManagementClient.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='operationId'>
        /// Required.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// Response object returned by the get operation result APIs.
        /// </returns>
        public static Task<GetOperationResultResponse> GetDeleteOperationResultAsync(this IRecoveryServicesBackupManagementClient operations, string resourceGroupName, string resourceName, string operationId, CustomRequestHeaders customRequestHeaders)
        {
            return operations.GetDeleteOperationResultAsync(resourceGroupName, resourceName, operationId, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// Once you trigger a delete operation such as deleting a protected
        /// item etc., you may use this method to get the operation's result.
        /// Once the operation has started, the status code in the response
        /// would be Accepted. It will continue to be in this state till it
        /// reaches completetion. On successful completion, the status code
        /// will be OK. This method expects the tracking URL of the operation
        /// to be passed in the arguments. This usually is the Location header
        /// of the operation response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.IRecoveryServicesBackupManagementClient.
        /// </param>
        /// <param name='operationResultLink'>
        /// Required. Location value returned by operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// Response object returned by the get operation result APIs.
        /// </returns>
        public static GetOperationResultResponse GetDeleteOperationResultByURL(this IRecoveryServicesBackupManagementClient operations, string operationResultLink, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryServicesBackupManagementClient)s).GetDeleteOperationResultByURLAsync(operationResultLink, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Once you trigger a delete operation such as deleting a protected
        /// item etc., you may use this method to get the operation's result.
        /// Once the operation has started, the status code in the response
        /// would be Accepted. It will continue to be in this state till it
        /// reaches completetion. On successful completion, the status code
        /// will be OK. This method expects the tracking URL of the operation
        /// to be passed in the arguments. This usually is the Location header
        /// of the operation response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.IRecoveryServicesBackupManagementClient.
        /// </param>
        /// <param name='operationResultLink'>
        /// Required. Location value returned by operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// Response object returned by the get operation result APIs.
        /// </returns>
        public static Task<GetOperationResultResponse> GetDeleteOperationResultByURLAsync(this IRecoveryServicesBackupManagementClient operations, string operationResultLink, CustomRequestHeaders customRequestHeaders)
        {
            return operations.GetDeleteOperationResultByURLAsync(operationResultLink, customRequestHeaders, CancellationToken.None);
        }
        
        /// <summary>
        /// The GetOperationStatusByURL method can be used to fetch the status
        /// of an operation such as triggering a backup, restore etc. The
        /// status can be in progress, completed or failed. You can refer to
        /// the Operation Status enum for all the possible states of the
        /// operation. Some operations may create jobs within the backend
        /// service. This method can return the list of jobs when the
        /// operation is complete.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.IRecoveryServicesBackupManagementClient.
        /// </param>
        /// <param name='operationResultLink'>
        /// Required. Location value returned by operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// Response of the get operation status API calls.
        /// </returns>
        public static BackUpOperationStatusResponse GetOperationStatusByURL(this IRecoveryServicesBackupManagementClient operations, string operationResultLink, CustomRequestHeaders customRequestHeaders)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IRecoveryServicesBackupManagementClient)s).GetOperationStatusByURLAsync(operationResultLink, customRequestHeaders);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The GetOperationStatusByURL method can be used to fetch the status
        /// of an operation such as triggering a backup, restore etc. The
        /// status can be in progress, completed or failed. You can refer to
        /// the Operation Status enum for all the possible states of the
        /// operation. Some operations may create jobs within the backend
        /// service. This method can return the list of jobs when the
        /// operation is complete.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.IRecoveryServicesBackupManagementClient.
        /// </param>
        /// <param name='operationResultLink'>
        /// Required. Location value returned by operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <returns>
        /// Response of the get operation status API calls.
        /// </returns>
        public static Task<BackUpOperationStatusResponse> GetOperationStatusByURLAsync(this IRecoveryServicesBackupManagementClient operations, string operationResultLink, CustomRequestHeaders customRequestHeaders)
        {
            return operations.GetOperationStatusByURLAsync(operationResultLink, customRequestHeaders, CancellationToken.None);
        }
    }
}
