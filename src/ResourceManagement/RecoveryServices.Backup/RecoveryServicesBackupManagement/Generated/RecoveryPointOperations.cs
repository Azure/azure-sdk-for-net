// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.RecoveryServices.Backup;
using Microsoft.Azure.Management.RecoveryServices.Backup.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    /// <summary>
    /// The Resource Manager API includes operations for managing recovery
    /// points created by backup operations on the items protected by your
    /// Recovery Services Vault.
    /// </summary>
    internal partial class RecoveryPointOperations : IServiceOperations<RecoveryServicesBackupManagementClient>, IRecoveryPointOperations
    {
        /// <summary>
        /// Initializes a new instance of the RecoveryPointOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RecoveryPointOperations(RecoveryServicesBackupManagementClient client)
        {
            this._client = client;
        }
        
        private RecoveryServicesBackupManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.RecoveryServicesBackupManagementClient.
        /// </summary>
        public RecoveryServicesBackupManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Gets Info for the given recovery point of the given item protected
        /// by your Recovery Services Vault as specified by the recovery point
        /// ID passed in the arguments.This is an asynchronous operation. To
        /// determine whether the backend service has finished processing the
        /// request, call the Get Protected Item Operation Result API.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='fabricName'>
        /// Optional. Fabric name of the protected item.
        /// </param>
        /// <param name='containerName'>
        /// Optional. Name of the container where the protected item belongs to.
        /// </param>
        /// <param name='protectedItemName'>
        /// Optional. Name of the protected item whose recovery points are to
        /// be fetched.
        /// </param>
        /// <param name='recoveryPointId'>
        /// Optional. ID of the recovery point whose details are to be fetched.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A single instance of a recovery point response as returned by the
        /// service in the list recovery points call.
        /// </returns>
        public async Task<RecoveryPointResponse> GetAsync(string resourceGroupName, string resourceName, CustomRequestHeaders customRequestHeaders, string fabricName, string containerName, string protectedItemName, string recoveryPointId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("containerName", containerName);
                tracingParameters.Add("protectedItemName", protectedItemName);
                tracingParameters.Add("recoveryPointId", recoveryPointId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            if (fabricName != null)
            {
                url = url + Uri.EscapeDataString(fabricName);
            }
            url = url + "/protectionContainers/";
            if (containerName != null)
            {
                url = url + Uri.EscapeDataString(containerName);
            }
            url = url + "/protectedItems/";
            if (protectedItemName != null)
            {
                url = url + Uri.EscapeDataString(protectedItemName);
            }
            url = url + "/recoveryPoints/";
            if (recoveryPointId != null)
            {
                url = url + Uri.EscapeDataString(recoveryPointId);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryPointResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryPointResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPointResource recPointInstance = new RecoveryPointResource();
                            result.RecPoint = recPointInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["objectType"]);
                                if (typeName == "IaasVMRecoveryPoint")
                                {
                                    RecoveryPoint recoveryPointInstance = new RecoveryPoint();
                                    
                                    JToken recoveryPointTypeValue = propertiesValue["recoveryPointType"];
                                    if (recoveryPointTypeValue != null && recoveryPointTypeValue.Type != JTokenType.Null)
                                    {
                                        string recoveryPointTypeInstance = ((string)recoveryPointTypeValue);
                                        recoveryPointInstance.RecoveryPointType = recoveryPointTypeInstance;
                                    }
                                    
                                    JToken recoveryPointTimeValue = propertiesValue["recoveryPointTime"];
                                    if (recoveryPointTimeValue != null && recoveryPointTimeValue.Type != JTokenType.Null)
                                    {
                                        string recoveryPointTimeInstance = ((string)recoveryPointTimeValue);
                                        recoveryPointInstance.RecoveryPointTime = recoveryPointTimeInstance;
                                    }
                                    
                                    JToken recoveryPointAdditionalInfoValue = propertiesValue["recoveryPointAdditionalInfo"];
                                    if (recoveryPointAdditionalInfoValue != null && recoveryPointAdditionalInfoValue.Type != JTokenType.Null)
                                    {
                                        string recoveryPointAdditionalInfoInstance = ((string)recoveryPointAdditionalInfoValue);
                                        recoveryPointInstance.RecoveryPointAdditionalInfo = recoveryPointAdditionalInfoInstance;
                                    }
                                    
                                    JToken sourceVMStorageTypeValue = propertiesValue["sourceVMStorageType"];
                                    if (sourceVMStorageTypeValue != null && sourceVMStorageTypeValue.Type != JTokenType.Null)
                                    {
                                        string sourceVMStorageTypeInstance = ((string)sourceVMStorageTypeValue);
                                        recoveryPointInstance.SourceVMStorageType = sourceVMStorageTypeInstance;
                                    }
                                    
                                    JToken isSourceVMEncryptedValue = propertiesValue["isSourceVMEncrypted"];
                                    if (isSourceVMEncryptedValue != null && isSourceVMEncryptedValue.Type != JTokenType.Null)
                                    {
                                        bool isSourceVMEncryptedInstance = ((bool)isSourceVMEncryptedValue);
                                        recoveryPointInstance.IsSourceVMEncrypted = isSourceVMEncryptedInstance;
                                    }
                                    
                                    JToken keyAndSecretValue = propertiesValue["keyAndSecret"];
                                    if (keyAndSecretValue != null && keyAndSecretValue.Type != JTokenType.Null)
                                    {
                                        KeyAndSecretDetails keyAndSecretInstance = new KeyAndSecretDetails();
                                        recoveryPointInstance.KeyAndSecret = keyAndSecretInstance;
                                        
                                        JToken kekDetailsValue = keyAndSecretValue["kekDetails"];
                                        if (kekDetailsValue != null && kekDetailsValue.Type != JTokenType.Null)
                                        {
                                            KekDetails kekDetailsInstance = new KekDetails();
                                            keyAndSecretInstance.KekDetails = kekDetailsInstance;
                                            
                                            JToken keyUrlValue = kekDetailsValue["keyUrl"];
                                            if (keyUrlValue != null && keyUrlValue.Type != JTokenType.Null)
                                            {
                                                string keyUrlInstance = ((string)keyUrlValue);
                                                kekDetailsInstance.KeyUrl = keyUrlInstance;
                                            }
                                            
                                            JToken keyVaultIdValue = kekDetailsValue["keyVaultId"];
                                            if (keyVaultIdValue != null && keyVaultIdValue.Type != JTokenType.Null)
                                            {
                                                string keyVaultIdInstance = ((string)keyVaultIdValue);
                                                kekDetailsInstance.KeyVaultId = keyVaultIdInstance;
                                            }
                                            
                                            JToken keyBackupDataValue = kekDetailsValue["keyBackupData"];
                                            if (keyBackupDataValue != null && keyBackupDataValue.Type != JTokenType.Null)
                                            {
                                                string keyBackupDataInstance = ((string)keyBackupDataValue);
                                                kekDetailsInstance.KeyBackupData = keyBackupDataInstance;
                                            }
                                        }
                                        
                                        JToken bekDetailsValue = keyAndSecretValue["bekDetails"];
                                        if (bekDetailsValue != null && bekDetailsValue.Type != JTokenType.Null)
                                        {
                                            BekDetails bekDetailsInstance = new BekDetails();
                                            keyAndSecretInstance.BekDetails = bekDetailsInstance;
                                            
                                            JToken secretUrlValue = bekDetailsValue["secretUrl"];
                                            if (secretUrlValue != null && secretUrlValue.Type != JTokenType.Null)
                                            {
                                                string secretUrlInstance = ((string)secretUrlValue);
                                                bekDetailsInstance.SecretUrl = secretUrlInstance;
                                            }
                                            
                                            JToken secretVaultIdValue = bekDetailsValue["secretVaultId"];
                                            if (secretVaultIdValue != null && secretVaultIdValue.Type != JTokenType.Null)
                                            {
                                                string secretVaultIdInstance = ((string)secretVaultIdValue);
                                                bekDetailsInstance.SecretVaultId = secretVaultIdInstance;
                                            }
                                            
                                            JToken secretDataValue = bekDetailsValue["secretData"];
                                            if (secretDataValue != null && secretDataValue.Type != JTokenType.Null)
                                            {
                                                string secretDataInstance = ((string)secretDataValue);
                                                bekDetailsInstance.SecretData = secretDataInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken isInstantILRSessionActiveValue = propertiesValue["isInstantILRSessionActive"];
                                    if (isInstantILRSessionActiveValue != null && isInstantILRSessionActiveValue.Type != JTokenType.Null)
                                    {
                                        bool isInstantILRSessionActiveInstance = ((bool)isInstantILRSessionActiveValue);
                                        recoveryPointInstance.IsInstantILRSessionActive = isInstantILRSessionActiveInstance;
                                    }
                                    recPointInstance.Properties = recoveryPointInstance;
                                }
                                if (typeName == "GenericRecoveryPoint")
                                {
                                    GenericRecoveryPoint genericRecoveryPointInstance = new GenericRecoveryPoint();
                                    
                                    JToken recoveryPointTypeValue2 = propertiesValue["recoveryPointType"];
                                    if (recoveryPointTypeValue2 != null && recoveryPointTypeValue2.Type != JTokenType.Null)
                                    {
                                        string recoveryPointTypeInstance2 = ((string)recoveryPointTypeValue2);
                                        genericRecoveryPointInstance.RecoveryPointType = recoveryPointTypeInstance2;
                                    }
                                    
                                    JToken friendlyNameValue = propertiesValue["friendlyName"];
                                    if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance = ((string)friendlyNameValue);
                                        genericRecoveryPointInstance.FriendlyName = friendlyNameInstance;
                                    }
                                    
                                    JToken recoveryPointTimeValue2 = propertiesValue["recoveryPointTime"];
                                    if (recoveryPointTimeValue2 != null && recoveryPointTimeValue2.Type != JTokenType.Null)
                                    {
                                        string recoveryPointTimeInstance2 = ((string)recoveryPointTimeValue2);
                                        genericRecoveryPointInstance.RecoveryPointTime = recoveryPointTimeInstance2;
                                    }
                                    
                                    JToken recoveryPointAdditionalInfoValue2 = propertiesValue["recoveryPointAdditionalInfo"];
                                    if (recoveryPointAdditionalInfoValue2 != null && recoveryPointAdditionalInfoValue2.Type != JTokenType.Null)
                                    {
                                        string recoveryPointAdditionalInfoInstance2 = ((string)recoveryPointAdditionalInfoValue2);
                                        genericRecoveryPointInstance.RecoveryPointAdditionalInfo = recoveryPointAdditionalInfoInstance2;
                                    }
                                    recPointInstance.Properties = genericRecoveryPointInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                recPointInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recPointInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recPointInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recPointInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    recPointInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                recPointInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all the recovery points of the given item protected by your
        /// Recovery Services Vault according to the query filter supplied in
        /// the arguments.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='fabricName'>
        /// Optional. Fabric name of the protected item.
        /// </param>
        /// <param name='containerName'>
        /// Optional. Name of the container where the protected item belongs to.
        /// </param>
        /// <param name='protectedItemName'>
        /// Optional. Name of the protected item whose recovery points are to
        /// be fetched.
        /// </param>
        /// <param name='queryFilter'>
        /// Optional. Query parameters for listing recovery points.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of recovery points as returned by the service with the list
        /// recovery points call.
        /// </returns>
        public async Task<RecoveryPointListResponse> ListAsync(string resourceGroupName, string resourceName, CustomRequestHeaders customRequestHeaders, string fabricName, string containerName, string protectedItemName, RecoveryPointQueryParameters queryFilter, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("containerName", containerName);
                tracingParameters.Add("protectedItemName", protectedItemName);
                tracingParameters.Add("queryFilter", queryFilter);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            if (fabricName != null)
            {
                url = url + Uri.EscapeDataString(fabricName);
            }
            url = url + "/protectionContainers/";
            if (containerName != null)
            {
                url = url + Uri.EscapeDataString(containerName);
            }
            url = url + "/protectedItems/";
            if (protectedItemName != null)
            {
                url = url + Uri.EscapeDataString(protectedItemName);
            }
            url = url + "/recoveryPoints";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            List<string> odataFilter = new List<string>();
            if (queryFilter != null && queryFilter.StartDate != null)
            {
                odataFilter.Add("startDate eq '" + Uri.EscapeDataString(queryFilter.StartDate) + "'");
            }
            if (queryFilter != null && queryFilter.EndDate != null)
            {
                odataFilter.Add("endDate eq '" + Uri.EscapeDataString(queryFilter.EndDate) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecoveryPointListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecoveryPointListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecoveryPointResourceList recoveryPointListInstance = new RecoveryPointResourceList();
                            result.RecoveryPointList = recoveryPointListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RecoveryPointResource recoveryPointResourceInstance = new RecoveryPointResource();
                                    recoveryPointListInstance.RecoveryPoints.Add(recoveryPointResourceInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["objectType"]);
                                        if (typeName == "IaasVMRecoveryPoint")
                                        {
                                            RecoveryPoint recoveryPointInstance = new RecoveryPoint();
                                            
                                            JToken recoveryPointTypeValue = propertiesValue["recoveryPointType"];
                                            if (recoveryPointTypeValue != null && recoveryPointTypeValue.Type != JTokenType.Null)
                                            {
                                                string recoveryPointTypeInstance = ((string)recoveryPointTypeValue);
                                                recoveryPointInstance.RecoveryPointType = recoveryPointTypeInstance;
                                            }
                                            
                                            JToken recoveryPointTimeValue = propertiesValue["recoveryPointTime"];
                                            if (recoveryPointTimeValue != null && recoveryPointTimeValue.Type != JTokenType.Null)
                                            {
                                                string recoveryPointTimeInstance = ((string)recoveryPointTimeValue);
                                                recoveryPointInstance.RecoveryPointTime = recoveryPointTimeInstance;
                                            }
                                            
                                            JToken recoveryPointAdditionalInfoValue = propertiesValue["recoveryPointAdditionalInfo"];
                                            if (recoveryPointAdditionalInfoValue != null && recoveryPointAdditionalInfoValue.Type != JTokenType.Null)
                                            {
                                                string recoveryPointAdditionalInfoInstance = ((string)recoveryPointAdditionalInfoValue);
                                                recoveryPointInstance.RecoveryPointAdditionalInfo = recoveryPointAdditionalInfoInstance;
                                            }
                                            
                                            JToken sourceVMStorageTypeValue = propertiesValue["sourceVMStorageType"];
                                            if (sourceVMStorageTypeValue != null && sourceVMStorageTypeValue.Type != JTokenType.Null)
                                            {
                                                string sourceVMStorageTypeInstance = ((string)sourceVMStorageTypeValue);
                                                recoveryPointInstance.SourceVMStorageType = sourceVMStorageTypeInstance;
                                            }
                                            
                                            JToken isSourceVMEncryptedValue = propertiesValue["isSourceVMEncrypted"];
                                            if (isSourceVMEncryptedValue != null && isSourceVMEncryptedValue.Type != JTokenType.Null)
                                            {
                                                bool isSourceVMEncryptedInstance = ((bool)isSourceVMEncryptedValue);
                                                recoveryPointInstance.IsSourceVMEncrypted = isSourceVMEncryptedInstance;
                                            }
                                            
                                            JToken keyAndSecretValue = propertiesValue["keyAndSecret"];
                                            if (keyAndSecretValue != null && keyAndSecretValue.Type != JTokenType.Null)
                                            {
                                                KeyAndSecretDetails keyAndSecretInstance = new KeyAndSecretDetails();
                                                recoveryPointInstance.KeyAndSecret = keyAndSecretInstance;
                                                
                                                JToken kekDetailsValue = keyAndSecretValue["kekDetails"];
                                                if (kekDetailsValue != null && kekDetailsValue.Type != JTokenType.Null)
                                                {
                                                    KekDetails kekDetailsInstance = new KekDetails();
                                                    keyAndSecretInstance.KekDetails = kekDetailsInstance;
                                                    
                                                    JToken keyUrlValue = kekDetailsValue["keyUrl"];
                                                    if (keyUrlValue != null && keyUrlValue.Type != JTokenType.Null)
                                                    {
                                                        string keyUrlInstance = ((string)keyUrlValue);
                                                        kekDetailsInstance.KeyUrl = keyUrlInstance;
                                                    }
                                                    
                                                    JToken keyVaultIdValue = kekDetailsValue["keyVaultId"];
                                                    if (keyVaultIdValue != null && keyVaultIdValue.Type != JTokenType.Null)
                                                    {
                                                        string keyVaultIdInstance = ((string)keyVaultIdValue);
                                                        kekDetailsInstance.KeyVaultId = keyVaultIdInstance;
                                                    }
                                                    
                                                    JToken keyBackupDataValue = kekDetailsValue["keyBackupData"];
                                                    if (keyBackupDataValue != null && keyBackupDataValue.Type != JTokenType.Null)
                                                    {
                                                        string keyBackupDataInstance = ((string)keyBackupDataValue);
                                                        kekDetailsInstance.KeyBackupData = keyBackupDataInstance;
                                                    }
                                                }
                                                
                                                JToken bekDetailsValue = keyAndSecretValue["bekDetails"];
                                                if (bekDetailsValue != null && bekDetailsValue.Type != JTokenType.Null)
                                                {
                                                    BekDetails bekDetailsInstance = new BekDetails();
                                                    keyAndSecretInstance.BekDetails = bekDetailsInstance;
                                                    
                                                    JToken secretUrlValue = bekDetailsValue["secretUrl"];
                                                    if (secretUrlValue != null && secretUrlValue.Type != JTokenType.Null)
                                                    {
                                                        string secretUrlInstance = ((string)secretUrlValue);
                                                        bekDetailsInstance.SecretUrl = secretUrlInstance;
                                                    }
                                                    
                                                    JToken secretVaultIdValue = bekDetailsValue["secretVaultId"];
                                                    if (secretVaultIdValue != null && secretVaultIdValue.Type != JTokenType.Null)
                                                    {
                                                        string secretVaultIdInstance = ((string)secretVaultIdValue);
                                                        bekDetailsInstance.SecretVaultId = secretVaultIdInstance;
                                                    }
                                                    
                                                    JToken secretDataValue = bekDetailsValue["secretData"];
                                                    if (secretDataValue != null && secretDataValue.Type != JTokenType.Null)
                                                    {
                                                        string secretDataInstance = ((string)secretDataValue);
                                                        bekDetailsInstance.SecretData = secretDataInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken isInstantILRSessionActiveValue = propertiesValue["isInstantILRSessionActive"];
                                            if (isInstantILRSessionActiveValue != null && isInstantILRSessionActiveValue.Type != JTokenType.Null)
                                            {
                                                bool isInstantILRSessionActiveInstance = ((bool)isInstantILRSessionActiveValue);
                                                recoveryPointInstance.IsInstantILRSessionActive = isInstantILRSessionActiveInstance;
                                            }
                                            recoveryPointResourceInstance.Properties = recoveryPointInstance;
                                        }
                                        if (typeName == "GenericRecoveryPoint")
                                        {
                                            GenericRecoveryPoint genericRecoveryPointInstance = new GenericRecoveryPoint();
                                            
                                            JToken recoveryPointTypeValue2 = propertiesValue["recoveryPointType"];
                                            if (recoveryPointTypeValue2 != null && recoveryPointTypeValue2.Type != JTokenType.Null)
                                            {
                                                string recoveryPointTypeInstance2 = ((string)recoveryPointTypeValue2);
                                                genericRecoveryPointInstance.RecoveryPointType = recoveryPointTypeInstance2;
                                            }
                                            
                                            JToken friendlyNameValue = propertiesValue["friendlyName"];
                                            if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance = ((string)friendlyNameValue);
                                                genericRecoveryPointInstance.FriendlyName = friendlyNameInstance;
                                            }
                                            
                                            JToken recoveryPointTimeValue2 = propertiesValue["recoveryPointTime"];
                                            if (recoveryPointTimeValue2 != null && recoveryPointTimeValue2.Type != JTokenType.Null)
                                            {
                                                string recoveryPointTimeInstance2 = ((string)recoveryPointTimeValue2);
                                                genericRecoveryPointInstance.RecoveryPointTime = recoveryPointTimeInstance2;
                                            }
                                            
                                            JToken recoveryPointAdditionalInfoValue2 = propertiesValue["recoveryPointAdditionalInfo"];
                                            if (recoveryPointAdditionalInfoValue2 != null && recoveryPointAdditionalInfoValue2.Type != JTokenType.Null)
                                            {
                                                string recoveryPointAdditionalInfoInstance2 = ((string)recoveryPointAdditionalInfoValue2);
                                                genericRecoveryPointInstance.RecoveryPointAdditionalInfo = recoveryPointAdditionalInfoInstance2;
                                            }
                                            recoveryPointResourceInstance.Properties = genericRecoveryPointInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        recoveryPointResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        recoveryPointResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        recoveryPointResourceInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        recoveryPointResourceInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            recoveryPointResourceInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken eTagValue = valueValue["eTag"];
                                    if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                                    {
                                        string eTagInstance = ((string)eTagValue);
                                        recoveryPointResourceInstance.ETag = eTagInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                recoveryPointListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
