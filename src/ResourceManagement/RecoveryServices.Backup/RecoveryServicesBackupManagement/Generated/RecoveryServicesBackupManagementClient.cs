// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.RecoveryServices.Backup;
using Microsoft.Azure.Management.RecoveryServices.Backup.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    public partial class RecoveryServicesBackupManagementClient : ServiceClient<RecoveryServicesBackupManagementClient>, IRecoveryServicesBackupManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private string _resourceNamespace;
        
        /// <summary>
        /// Get or sets the resource namespace. By default it points to Azure
        /// Production. Override this value only if needed
        /// </summary>
        public string ResourceNamespace
        {
            get { return this._resourceNamespace; }
            set { this._resourceNamespace = value; }
        }
        
        private IBackupEngineOperations _backupEngines;
        
        /// <summary>
        /// The Resource Manager API includes operations for managing the
        /// backup engines registered to your Recovery Services Vault.
        /// </summary>
        public virtual IBackupEngineOperations BackupEngines
        {
            get { return this._backupEngines; }
        }
        
        private IBackupOperations _backups;
        
        /// <summary>
        /// The Resource Manager API includes operations for triggering and
        /// managing the backups of items protected by your Recovery Services
        /// Vault.
        /// </summary>
        public virtual IBackupOperations Backups
        {
            get { return this._backups; }
        }
        
        private IContainerOperations _containers;
        
        /// <summary>
        /// The Resource Manager API includes operations for managing the
        /// containers registered to your Recovery Services Vault.
        /// </summary>
        public virtual IContainerOperations Containers
        {
            get { return this._containers; }
        }
        
        private IJobOperations _jobs;
        
        /// <summary>
        /// The Resource Manager API includes operations for managing the jobs
        /// created by various operations on a given item protected by your
        /// Recovery Services Vault.
        /// </summary>
        public virtual IJobOperations Jobs
        {
            get { return this._jobs; }
        }
        
        private IProtectableObjectOperations _protectableObjects;
        
        /// <summary>
        /// The Resource Manager API includes operations for managing the
        /// protectable objects registered to your Recovery Services Vault.
        /// </summary>
        public virtual IProtectableObjectOperations ProtectableObjects
        {
            get { return this._protectableObjects; }
        }
        
        private IProtectedItemOperations _protectedItems;
        
        /// <summary>
        /// The Resource Manager API includes operations for managing the items
        /// protected by your Recovery Services Vault.
        /// </summary>
        public virtual IProtectedItemOperations ProtectedItems
        {
            get { return this._protectedItems; }
        }
        
        private IProtectionPolicyOperations _protectionPolicies;
        
        /// <summary>
        /// The Resource Manager API includes operations for managing
        /// protection policies defined for your Recovery Services Vault.
        /// </summary>
        public virtual IProtectionPolicyOperations ProtectionPolicies
        {
            get { return this._protectionPolicies; }
        }
        
        private IRecoveryPointOperations _recoveryPoints;
        
        /// <summary>
        /// The Resource Manager API includes operations for managing recovery
        /// points created by backup operations on the items protected by your
        /// Recovery Services Vault.
        /// </summary>
        public virtual IRecoveryPointOperations RecoveryPoints
        {
            get { return this._recoveryPoints; }
        }
        
        private IRestoreOperations _restores;
        
        /// <summary>
        /// The Resource Manager API includes operations for triggering and
        /// managing restore actions of the items protected by your Recovery
        /// Services Vault.
        /// </summary>
        public virtual IRestoreOperations Restores
        {
            get { return this._restores; }
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// RecoveryServicesBackupManagementClient class.
        /// </summary>
        public RecoveryServicesBackupManagementClient()
            : base()
        {
            this._backupEngines = new BackupEngineOperations(this);
            this._backups = new BackupOperations(this);
            this._containers = new ContainerOperations(this);
            this._jobs = new JobOperations(this);
            this._protectableObjects = new ProtectableObjectOperations(this);
            this._protectedItems = new ProtectedItemOperations(this);
            this._protectionPolicies = new ProtectionPolicyOperations(this);
            this._recoveryPoints = new RecoveryPointOperations(this);
            this._restores = new RestoreOperations(this);
            this._resourceNamespace = "Microsoft.RecoveryServices";
            this._apiVersion = "2015-03-15";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// RecoveryServicesBackupManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public RecoveryServicesBackupManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// RecoveryServicesBackupManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public RecoveryServicesBackupManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// RecoveryServicesBackupManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public RecoveryServicesBackupManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._backupEngines = new BackupEngineOperations(this);
            this._backups = new BackupOperations(this);
            this._containers = new ContainerOperations(this);
            this._jobs = new JobOperations(this);
            this._protectableObjects = new ProtectableObjectOperations(this);
            this._protectedItems = new ProtectedItemOperations(this);
            this._protectionPolicies = new ProtectionPolicyOperations(this);
            this._recoveryPoints = new RecoveryPointOperations(this);
            this._restores = new RestoreOperations(this);
            this._resourceNamespace = "Microsoft.RecoveryServices";
            this._apiVersion = "2015-03-15";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// RecoveryServicesBackupManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public RecoveryServicesBackupManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the
        /// RecoveryServicesBackupManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public RecoveryServicesBackupManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.core.windows.net");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// RecoveryServicesBackupManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of RecoveryServicesBackupManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<RecoveryServicesBackupManagementClient> client)
        {
            base.Clone(client);
            
            if (client is RecoveryServicesBackupManagementClient)
            {
                RecoveryServicesBackupManagementClient clonedClient = ((RecoveryServicesBackupManagementClient)client);
                
                clonedClient._resourceNamespace = this._resourceNamespace;
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
        
        /// <summary>
        /// Once you trigger a delete operation such as deleting a protected
        /// item etc., you may use this method to get the operation's result.
        /// Once the operation has started, the status code in the response
        /// would be Accepted. It will continue to be in this state till it
        /// reaches completetion. On successful completion, the status code
        /// will be OK. This method expects the ID of the operation to be
        /// passed in the arguments. This usually is part of the Location
        /// header of the operation response.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='operationId'>
        /// Required.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response object returned by the get operation result APIs.
        /// </returns>
        public async Task<GetOperationResultResponse> GetDeleteOperationResultAsync(string resourceGroupName, string resourceName, string operationId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("operationId", operationId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetDeleteOperationResultAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupOperationResults/";
            url = url + Uri.EscapeDataString(operationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetOperationResultResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetOperationResultResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken operationValue = responseDoc["operation"];
                            if (operationValue != null && operationValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)operationValue["objectType"]);
                                if (typeName == "OperationResultInfo")
                                {
                                    OperationResultInfo operationResultInfoInstance = new OperationResultInfo();
                                    
                                    JToken jobListArray = operationValue["jobList"];
                                    if (jobListArray != null && jobListArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken jobListValue in ((JArray)jobListArray))
                                        {
                                            operationResultInfoInstance.JobList.Add(((string)jobListValue));
                                        }
                                    }
                                    result.Operation = operationResultInfoInstance;
                                }
                                if (typeName == "ExportJobsOperationResultInfo")
                                {
                                    ExportJobsOperationResultInfo exportJobsOperationResultInfoInstance = new ExportJobsOperationResultInfo();
                                    
                                    JToken blobUrlValue = operationValue["blobUrl"];
                                    if (blobUrlValue != null && blobUrlValue.Type != JTokenType.Null)
                                    {
                                        string blobUrlInstance = ((string)blobUrlValue);
                                        exportJobsOperationResultInfoInstance.BlobUrl = blobUrlInstance;
                                    }
                                    
                                    JToken blobSasKeyValue = operationValue["blobSasKey"];
                                    if (blobSasKeyValue != null && blobSasKeyValue.Type != JTokenType.Null)
                                    {
                                        string blobSasKeyInstance = ((string)blobSasKeyValue);
                                        exportJobsOperationResultInfoInstance.BlobSasKey = blobSasKeyInstance;
                                    }
                                    result.Operation = exportJobsOperationResultInfoInstance;
                                }
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Once you trigger a delete operation such as deleting a protected
        /// item etc., you may use this method to get the operation's result.
        /// Once the operation has started, the status code in the response
        /// would be Accepted. It will continue to be in this state till it
        /// reaches completetion. On successful completion, the status code
        /// will be OK. This method expects the tracking URL of the operation
        /// to be passed in the arguments. This usually is the Location header
        /// of the operation response.
        /// </summary>
        /// <param name='operationResultLink'>
        /// Required. Location value returned by operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response object returned by the get operation result APIs.
        /// </returns>
        public async Task<GetOperationResultResponse> GetDeleteOperationResultByURLAsync(string operationResultLink, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (operationResultLink == null)
            {
                throw new ArgumentNullException("operationResultLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationResultLink", operationResultLink);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetDeleteOperationResultByURLAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationResultLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    GetOperationResultResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new GetOperationResultResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken operationValue = responseDoc["operation"];
                            if (operationValue != null && operationValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)operationValue["objectType"]);
                                if (typeName == "OperationResultInfo")
                                {
                                    OperationResultInfo operationResultInfoInstance = new OperationResultInfo();
                                    
                                    JToken jobListArray = operationValue["jobList"];
                                    if (jobListArray != null && jobListArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken jobListValue in ((JArray)jobListArray))
                                        {
                                            operationResultInfoInstance.JobList.Add(((string)jobListValue));
                                        }
                                    }
                                    result.Operation = operationResultInfoInstance;
                                }
                                if (typeName == "ExportJobsOperationResultInfo")
                                {
                                    ExportJobsOperationResultInfo exportJobsOperationResultInfoInstance = new ExportJobsOperationResultInfo();
                                    
                                    JToken blobUrlValue = operationValue["blobUrl"];
                                    if (blobUrlValue != null && blobUrlValue.Type != JTokenType.Null)
                                    {
                                        string blobUrlInstance = ((string)blobUrlValue);
                                        exportJobsOperationResultInfoInstance.BlobUrl = blobUrlInstance;
                                    }
                                    
                                    JToken blobSasKeyValue = operationValue["blobSasKey"];
                                    if (blobSasKeyValue != null && blobSasKeyValue.Type != JTokenType.Null)
                                    {
                                        string blobSasKeyInstance = ((string)blobSasKeyValue);
                                        exportJobsOperationResultInfoInstance.BlobSasKey = blobSasKeyInstance;
                                    }
                                    result.Operation = exportJobsOperationResultInfoInstance;
                                }
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The GetOperationStatusByURL method can be used to fetch the status
        /// of an operation such as triggering a backup, restore etc. The
        /// status can be in progress, completed or failed. You can refer to
        /// the Operation Status enum for all the possible states of the
        /// operation. Some operations may create jobs within the backend
        /// service. This method can return the list of jobs when the
        /// operation is complete.
        /// </summary>
        /// <param name='operationResultLink'>
        /// Required. Location value returned by operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of the get operation status API calls.
        /// </returns>
        public async Task<BackUpOperationStatusResponse> GetOperationStatusByURLAsync(string operationResultLink, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (operationResultLink == null)
            {
                throw new ArgumentNullException("operationResultLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationResultLink", operationResultLink);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetOperationStatusByURLAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationResultLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BackUpOperationStatusResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BackUpOperationStatusResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            BackUpOperationStatus operationStatusInstance = new BackUpOperationStatus();
                            result.OperationStatus = operationStatusInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                operationStatusInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                operationStatusInstance.Name = nameInstance;
                            }
                            
                            JToken statusValue = responseDoc["status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                string statusInstance = ((string)statusValue);
                                operationStatusInstance.Status = statusInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["startTime"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                string startTimeInstance = ((string)startTimeValue);
                                operationStatusInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken endTimeValue = responseDoc["endTime"];
                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                            {
                                string endTimeInstance = ((string)endTimeValue);
                                operationStatusInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                OperationStatusError errorInstance = new OperationStatusError();
                                operationStatusInstance.OperationStatusError = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["objectType"]);
                                if (typeName == "OperationStatusJobExtendedInfo")
                                {
                                    OperationStatusJobExtendedInfo operationStatusJobExtendedInfoInstance = new OperationStatusJobExtendedInfo();
                                    
                                    JToken jobIdValue = propertiesValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        string jobIdInstance = ((string)jobIdValue);
                                        operationStatusJobExtendedInfoInstance.JobId = jobIdInstance;
                                    }
                                    operationStatusInstance.Properties = operationStatusJobExtendedInfoInstance;
                                }
                                if (typeName == "OperationStatusJobsExtendedInfo")
                                {
                                    OperationStatusJobsExtendedInfo operationStatusJobsExtendedInfoInstance = new OperationStatusJobsExtendedInfo();
                                    
                                    JToken jobIdsArray = propertiesValue["jobIds"];
                                    if (jobIdsArray != null && jobIdsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken jobIdsValue in ((JArray)jobIdsArray))
                                        {
                                            operationStatusJobsExtendedInfoInstance.JobIds.Add(((string)jobIdsValue));
                                        }
                                    }
                                    
                                    JToken failedJobsErrorSequenceElement = ((JToken)propertiesValue["failedJobsError"]);
                                    if (failedJobsErrorSequenceElement != null && failedJobsErrorSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in failedJobsErrorSequenceElement)
                                        {
                                            string failedJobsErrorKey = ((string)property.Name);
                                            string failedJobsErrorValue = ((string)property.Value);
                                            operationStatusJobsExtendedInfoInstance.FailedJobsError.Add(failedJobsErrorKey, failedJobsErrorValue);
                                        }
                                    }
                                    operationStatusInstance.Properties = operationStatusJobsExtendedInfoInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
