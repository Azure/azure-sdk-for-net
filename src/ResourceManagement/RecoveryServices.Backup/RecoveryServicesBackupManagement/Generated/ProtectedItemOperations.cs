// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.RecoveryServices.Backup;
using Microsoft.Azure.Management.RecoveryServices.Backup.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.RecoveryServices.Backup
{
    /// <summary>
    /// The Resource Manager API includes operations for managing the items
    /// protected by your Recovery Services Vault.
    /// </summary>
    internal partial class ProtectedItemOperations : IServiceOperations<RecoveryServicesBackupManagementClient>, IProtectedItemOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProtectedItemOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProtectedItemOperations(RecoveryServicesBackupManagementClient client)
        {
            this._client = client;
        }
        
        private RecoveryServicesBackupManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.RecoveryServices.Backup.RecoveryServicesBackupManagementClient.
        /// </summary>
        public RecoveryServicesBackupManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Create Or Update Protected Item Operation is used to enable
        /// protection of an item within a container or to modify the
        /// protection of an already protected item. In the case of enable
        /// protection, this operation creates a new protected item entity in
        /// the backend service. In the case of modify protection, this
        /// operation updates the already created entity in the backend
        /// service. This is an asynchronous operation. To determine whether
        /// the backend service has finished processing the request, call the
        /// Get Item Operation Result API.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name of the protected item.
        /// </param>
        /// <param name='containerName'>
        /// Required. Name of the container where the protected item belongs to.
        /// </param>
        /// <param name='protectedItemName'>
        /// Required. Name of the protected item which has to be backed up.
        /// </param>
        /// <param name='request'>
        /// Required.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Base recovery job response for all the asynchronous operations.
        /// </returns>
        public async Task<BaseRecoveryServicesJobResponse> CreateOrUpdateProtectedItemAsync(string resourceGroupName, string resourceName, string fabricName, string containerName, string protectedItemName, ProtectedItemCreateOrUpdateRequest request, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (containerName == null)
            {
                throw new ArgumentNullException("containerName");
            }
            if (protectedItemName == null)
            {
                throw new ArgumentNullException("protectedItemName");
            }
            if (request == null)
            {
                throw new ArgumentNullException("request");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("containerName", containerName);
                tracingParameters.Add("protectedItemName", protectedItemName);
                tracingParameters.Add("request", request);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateProtectedItemAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/protectionContainers/";
            url = url + Uri.EscapeDataString(containerName);
            url = url + "/protectedItems/";
            url = url + Uri.EscapeDataString(protectedItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                if (request.Item != null)
                {
                    JObject itemValue = new JObject();
                    requestDoc = itemValue;
                    
                    if (request.Item.Properties != null)
                    {
                        JObject propertiesValue = new JObject();
                        itemValue["properties"] = propertiesValue;
                        if (request.Item.Properties is ProtectedItem)
                        {
                            propertiesValue["protectedItemType"] = "ProtectedItem";
                            ProtectedItem derived = ((ProtectedItem)request.Item.Properties);
                            
                            if (derived.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived.BackupManagementType;
                            }
                            
                            if (derived.WorkloadType != null)
                            {
                                propertiesValue["workloadType"] = derived.WorkloadType;
                            }
                            
                            if (derived.LastRecoveryPoint != null)
                            {
                                propertiesValue["lastRecoveryPoint"] = derived.LastRecoveryPoint.Value;
                            }
                            
                            if (derived.PolicyId != null)
                            {
                                propertiesValue["policyId"] = derived.PolicyId;
                            }
                            
                            if (derived.SourceResourceId != null)
                            {
                                propertiesValue["sourceResourceId"] = derived.SourceResourceId;
                            }
                        }
                        if (request.Item.Properties is AzureIaaSVMProtectedItem)
                        {
                            propertiesValue["protectedItemType"] = "AzureIaaSVMProtectedItem";
                            AzureIaaSVMProtectedItem derived2 = ((AzureIaaSVMProtectedItem)request.Item.Properties);
                            
                            if (derived2.VirtualMachineId != null)
                            {
                                propertiesValue["virtualMachineId"] = derived2.VirtualMachineId;
                            }
                            
                            if (derived2.FriendlyName != null)
                            {
                                propertiesValue["friendlyName"] = derived2.FriendlyName;
                            }
                            
                            if (derived2.ProtectionStatus != null)
                            {
                                propertiesValue["protectionStatus"] = derived2.ProtectionStatus;
                            }
                            
                            if (derived2.ProtectionState != null)
                            {
                                propertiesValue["protectionState"] = derived2.ProtectionState;
                            }
                            
                            if (derived2.LastBackupStatus != null)
                            {
                                propertiesValue["lastBackupStatus"] = derived2.LastBackupStatus;
                            }
                            
                            if (derived2.LastBackupTime != null)
                            {
                                propertiesValue["lastBackupTime"] = derived2.LastBackupTime.Value;
                            }
                            
                            if (derived2.ExtendedInfo != null)
                            {
                                JObject extendedInfoValue = new JObject();
                                propertiesValue["extendedInfo"] = extendedInfoValue;
                                
                                if (derived2.ExtendedInfo.OldestRecoveryPoint != null)
                                {
                                    extendedInfoValue["oldestRecoveryPoint"] = derived2.ExtendedInfo.OldestRecoveryPoint.Value;
                                }
                                
                                extendedInfoValue["recoveryPointCount"] = derived2.ExtendedInfo.RecoveryPointCount;
                                
                                extendedInfoValue["policyInconsistent"] = derived2.ExtendedInfo.PolicyInconsistent;
                            }
                            
                            if (derived2.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived2.BackupManagementType;
                            }
                            
                            if (derived2.WorkloadType != null)
                            {
                                propertiesValue["workloadType"] = derived2.WorkloadType;
                            }
                            
                            if (derived2.LastRecoveryPoint != null)
                            {
                                propertiesValue["lastRecoveryPoint"] = derived2.LastRecoveryPoint.Value;
                            }
                            
                            if (derived2.PolicyId != null)
                            {
                                propertiesValue["policyId"] = derived2.PolicyId;
                            }
                            
                            if (derived2.SourceResourceId != null)
                            {
                                propertiesValue["sourceResourceId"] = derived2.SourceResourceId;
                            }
                        }
                        if (request.Item.Properties is AzureIaaSComputeVMProtectedItem)
                        {
                            propertiesValue["protectedItemType"] = "Microsoft.Compute/virtualMachines";
                            AzureIaaSComputeVMProtectedItem derived3 = ((AzureIaaSComputeVMProtectedItem)request.Item.Properties);
                            
                            if (derived3.VirtualMachineId != null)
                            {
                                propertiesValue["virtualMachineId"] = derived3.VirtualMachineId;
                            }
                            
                            if (derived3.FriendlyName != null)
                            {
                                propertiesValue["friendlyName"] = derived3.FriendlyName;
                            }
                            
                            if (derived3.ProtectionStatus != null)
                            {
                                propertiesValue["protectionStatus"] = derived3.ProtectionStatus;
                            }
                            
                            if (derived3.ProtectionState != null)
                            {
                                propertiesValue["protectionState"] = derived3.ProtectionState;
                            }
                            
                            if (derived3.LastBackupStatus != null)
                            {
                                propertiesValue["lastBackupStatus"] = derived3.LastBackupStatus;
                            }
                            
                            if (derived3.LastBackupTime != null)
                            {
                                propertiesValue["lastBackupTime"] = derived3.LastBackupTime.Value;
                            }
                            
                            if (derived3.ExtendedInfo != null)
                            {
                                JObject extendedInfoValue2 = new JObject();
                                propertiesValue["extendedInfo"] = extendedInfoValue2;
                                
                                if (derived3.ExtendedInfo.OldestRecoveryPoint != null)
                                {
                                    extendedInfoValue2["oldestRecoveryPoint"] = derived3.ExtendedInfo.OldestRecoveryPoint.Value;
                                }
                                
                                extendedInfoValue2["recoveryPointCount"] = derived3.ExtendedInfo.RecoveryPointCount;
                                
                                extendedInfoValue2["policyInconsistent"] = derived3.ExtendedInfo.PolicyInconsistent;
                            }
                            
                            if (derived3.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived3.BackupManagementType;
                            }
                            
                            if (derived3.WorkloadType != null)
                            {
                                propertiesValue["workloadType"] = derived3.WorkloadType;
                            }
                            
                            if (derived3.LastRecoveryPoint != null)
                            {
                                propertiesValue["lastRecoveryPoint"] = derived3.LastRecoveryPoint.Value;
                            }
                            
                            if (derived3.PolicyId != null)
                            {
                                propertiesValue["policyId"] = derived3.PolicyId;
                            }
                            
                            if (derived3.SourceResourceId != null)
                            {
                                propertiesValue["sourceResourceId"] = derived3.SourceResourceId;
                            }
                        }
                        if (request.Item.Properties is AzureIaaSClassicComputeVMProtectedItem)
                        {
                            propertiesValue["protectedItemType"] = "Microsoft.ClassicCompute/virtualMachines";
                            AzureIaaSClassicComputeVMProtectedItem derived4 = ((AzureIaaSClassicComputeVMProtectedItem)request.Item.Properties);
                            
                            if (derived4.VirtualMachineId != null)
                            {
                                propertiesValue["virtualMachineId"] = derived4.VirtualMachineId;
                            }
                            
                            if (derived4.FriendlyName != null)
                            {
                                propertiesValue["friendlyName"] = derived4.FriendlyName;
                            }
                            
                            if (derived4.ProtectionStatus != null)
                            {
                                propertiesValue["protectionStatus"] = derived4.ProtectionStatus;
                            }
                            
                            if (derived4.ProtectionState != null)
                            {
                                propertiesValue["protectionState"] = derived4.ProtectionState;
                            }
                            
                            if (derived4.LastBackupStatus != null)
                            {
                                propertiesValue["lastBackupStatus"] = derived4.LastBackupStatus;
                            }
                            
                            if (derived4.LastBackupTime != null)
                            {
                                propertiesValue["lastBackupTime"] = derived4.LastBackupTime.Value;
                            }
                            
                            if (derived4.ExtendedInfo != null)
                            {
                                JObject extendedInfoValue3 = new JObject();
                                propertiesValue["extendedInfo"] = extendedInfoValue3;
                                
                                if (derived4.ExtendedInfo.OldestRecoveryPoint != null)
                                {
                                    extendedInfoValue3["oldestRecoveryPoint"] = derived4.ExtendedInfo.OldestRecoveryPoint.Value;
                                }
                                
                                extendedInfoValue3["recoveryPointCount"] = derived4.ExtendedInfo.RecoveryPointCount;
                                
                                extendedInfoValue3["policyInconsistent"] = derived4.ExtendedInfo.PolicyInconsistent;
                            }
                            
                            if (derived4.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived4.BackupManagementType;
                            }
                            
                            if (derived4.WorkloadType != null)
                            {
                                propertiesValue["workloadType"] = derived4.WorkloadType;
                            }
                            
                            if (derived4.LastRecoveryPoint != null)
                            {
                                propertiesValue["lastRecoveryPoint"] = derived4.LastRecoveryPoint.Value;
                            }
                            
                            if (derived4.PolicyId != null)
                            {
                                propertiesValue["policyId"] = derived4.PolicyId;
                            }
                            
                            if (derived4.SourceResourceId != null)
                            {
                                propertiesValue["sourceResourceId"] = derived4.SourceResourceId;
                            }
                        }
                        if (request.Item.Properties is MabFileFolderProtectedItem)
                        {
                            propertiesValue["protectedItemType"] = "MabFileFolderProtectedItem";
                            MabFileFolderProtectedItem derived5 = ((MabFileFolderProtectedItem)request.Item.Properties);
                            
                            if (derived5.FriendlyName != null)
                            {
                                propertiesValue["friendlyName"] = derived5.FriendlyName;
                            }
                            
                            if (derived5.ComputerName != null)
                            {
                                propertiesValue["computerName"] = derived5.ComputerName;
                            }
                            
                            if (derived5.ExtendedInfo != null)
                            {
                                JObject extendedInfoValue4 = new JObject();
                                propertiesValue["extendedInfo"] = extendedInfoValue4;
                                
                                if (derived5.ExtendedInfo.OldestRecoveryPoint != null)
                                {
                                    extendedInfoValue4["oldestRecoveryPoint"] = derived5.ExtendedInfo.OldestRecoveryPoint.Value;
                                }
                                
                                extendedInfoValue4["recoveryPointCount"] = derived5.ExtendedInfo.RecoveryPointCount;
                            }
                            
                            if (derived5.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived5.BackupManagementType;
                            }
                            
                            if (derived5.WorkloadType != null)
                            {
                                propertiesValue["workloadType"] = derived5.WorkloadType;
                            }
                            
                            if (derived5.LastRecoveryPoint != null)
                            {
                                propertiesValue["lastRecoveryPoint"] = derived5.LastRecoveryPoint.Value;
                            }
                            
                            if (derived5.PolicyId != null)
                            {
                                propertiesValue["policyId"] = derived5.PolicyId;
                            }
                            
                            if (derived5.SourceResourceId != null)
                            {
                                propertiesValue["sourceResourceId"] = derived5.SourceResourceId;
                            }
                        }
                        if (request.Item.Properties is AzureSqlProtectedItem)
                        {
                            propertiesValue["protectedItemType"] = "Microsoft.Sql/servers/databases";
                            AzureSqlProtectedItem derived6 = ((AzureSqlProtectedItem)request.Item.Properties);
                            
                            if (derived6.ProtectedItemDataId != null)
                            {
                                propertiesValue["protectedItemDataId"] = derived6.ProtectedItemDataId;
                            }
                            
                            if (derived6.ProtectionState != null)
                            {
                                propertiesValue["protectionState"] = derived6.ProtectionState;
                            }
                            
                            if (derived6.ExtendedInfo != null)
                            {
                                JObject extendedInfoValue5 = new JObject();
                                propertiesValue["extendedInfo"] = extendedInfoValue5;
                                
                                if (derived6.ExtendedInfo.OldestRecoveryPoint != null)
                                {
                                    extendedInfoValue5["oldestRecoveryPoint"] = derived6.ExtendedInfo.OldestRecoveryPoint.Value;
                                }
                                
                                if (derived6.ExtendedInfo.RecoveryPointCount != null)
                                {
                                    extendedInfoValue5["recoveryPointCount"] = derived6.ExtendedInfo.RecoveryPointCount.Value;
                                }
                                
                                if (derived6.ExtendedInfo.PolicyState != null)
                                {
                                    extendedInfoValue5["policyState"] = derived6.ExtendedInfo.PolicyState;
                                }
                            }
                            
                            if (derived6.BackupManagementType != null)
                            {
                                propertiesValue["backupManagementType"] = derived6.BackupManagementType;
                            }
                            
                            if (derived6.WorkloadType != null)
                            {
                                propertiesValue["workloadType"] = derived6.WorkloadType;
                            }
                            
                            if (derived6.LastRecoveryPoint != null)
                            {
                                propertiesValue["lastRecoveryPoint"] = derived6.LastRecoveryPoint.Value;
                            }
                            
                            if (derived6.PolicyId != null)
                            {
                                propertiesValue["policyId"] = derived6.PolicyId;
                            }
                            
                            if (derived6.SourceResourceId != null)
                            {
                                propertiesValue["sourceResourceId"] = derived6.SourceResourceId;
                            }
                        }
                    }
                    
                    if (request.Item.Id != null)
                    {
                        itemValue["id"] = request.Item.Id;
                    }
                    
                    if (request.Item.Name != null)
                    {
                        itemValue["name"] = request.Item.Name;
                    }
                    
                    if (request.Item.Type != null)
                    {
                        itemValue["type"] = request.Item.Type;
                    }
                    
                    if (request.Item.Location != null)
                    {
                        itemValue["location"] = request.Item.Location;
                    }
                    
                    if (request.Item.Tags != null)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in request.Item.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        itemValue["tags"] = tagsDictionary;
                    }
                    
                    if (request.Item.ETag != null)
                    {
                        itemValue["eTag"] = request.Item.ETag;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BaseRecoveryServicesJobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BaseRecoveryServicesJobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete Protected Item Operation is used to disable protection
        /// of an item within a container. This operation marks the already
        /// existing protected item entity as not protected in the backend
        /// service. This is an asynchronous operation. To determine whether
        /// the backend service has finished processing the request, call the
        /// Get Item Operation Result API.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Required. Fabric name of the protected item.
        /// </param>
        /// <param name='containerName'>
        /// Required. Name of the container where the protected item belongs to.
        /// </param>
        /// <param name='protectedItemName'>
        /// Required. Name of the protected item which has to be backed up.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Required. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Base recovery job response for all the asynchronous operations.
        /// </returns>
        public async Task<BaseRecoveryServicesJobResponse> DeleteProtectedItemAsync(string resourceGroupName, string resourceName, string fabricName, string containerName, string protectedItemName, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (containerName == null)
            {
                throw new ArgumentNullException("containerName");
            }
            if (protectedItemName == null)
            {
                throw new ArgumentNullException("protectedItemName");
            }
            if (customRequestHeaders == null)
            {
                throw new ArgumentNullException("customRequestHeaders");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("containerName", containerName);
                tracingParameters.Add("protectedItemName", protectedItemName);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "DeleteProtectedItemAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/protectionContainers/";
            url = url + Uri.EscapeDataString(containerName);
            url = url + "/protectedItems/";
            url = url + Uri.EscapeDataString(protectedItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    BaseRecoveryServicesJobResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new BaseRecoveryServicesJobResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets Info for the given item present in the given container
        /// specified by the names passed in the arguments. When the query
        /// parameter is used to pass the expand flag, this operation would
        /// return the extended info as well for the given item.This is an
        /// asynchronous operation. To determine whether the backend service
        /// has finished processing the request, call the Get Item Operation
        /// Result API.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Required.
        /// </param>
        /// <param name='containerName'>
        /// Required.
        /// </param>
        /// <param name='protectedItemName'>
        /// Required.
        /// </param>
        /// <param name='queryFilter'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A single instance of a protected item response.
        /// </returns>
        public async Task<ProtectedItemResponse> GetAsync(string resourceGroupName, string resourceName, string fabricName, string containerName, string protectedItemName, GetProtectedItemQueryParam queryFilter, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (containerName == null)
            {
                throw new ArgumentNullException("containerName");
            }
            if (protectedItemName == null)
            {
                throw new ArgumentNullException("protectedItemName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("containerName", containerName);
                tracingParameters.Add("protectedItemName", protectedItemName);
                tracingParameters.Add("queryFilter", queryFilter);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/protectionContainers/";
            url = url + Uri.EscapeDataString(containerName);
            url = url + "/protectedItems/";
            url = url + Uri.EscapeDataString(protectedItemName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            List<string> odataFilter = new List<string>();
            if (queryFilter != null && queryFilter.Expand != null)
            {
                odataFilter.Add("expand eq '" + Uri.EscapeDataString(queryFilter.Expand) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectedItemResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectedItemResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectedItemResource itemInstance = new ProtectedItemResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["protectedItemType"]);
                                if (typeName == "ProtectedItem")
                                {
                                    ProtectedItem protectedItemInstance = new ProtectedItem();
                                    
                                    JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        protectedItemInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    
                                    JToken workloadTypeValue = propertiesValue["workloadType"];
                                    if (workloadTypeValue != null && workloadTypeValue.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance = ((string)workloadTypeValue);
                                        protectedItemInstance.WorkloadType = workloadTypeInstance;
                                    }
                                    
                                    JToken lastRecoveryPointValue = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue != null && lastRecoveryPointValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance = ((DateTime)lastRecoveryPointValue);
                                        protectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance;
                                    }
                                    
                                    JToken policyIdValue = propertiesValue["policyId"];
                                    if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance = ((string)policyIdValue);
                                        protectedItemInstance.PolicyId = policyIdInstance;
                                    }
                                    
                                    JToken sourceResourceIdValue = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue != null && sourceResourceIdValue.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance = ((string)sourceResourceIdValue);
                                        protectedItemInstance.SourceResourceId = sourceResourceIdInstance;
                                    }
                                    itemInstance.Properties = protectedItemInstance;
                                }
                                if (typeName == "AzureIaaSVMProtectedItem")
                                {
                                    AzureIaaSVMProtectedItem azureIaaSVMProtectedItemInstance = new AzureIaaSVMProtectedItem();
                                    
                                    JToken virtualMachineIdValue = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                        azureIaaSVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                    }
                                    
                                    JToken friendlyNameValue = propertiesValue["friendlyName"];
                                    if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance = ((string)friendlyNameValue);
                                        azureIaaSVMProtectedItemInstance.FriendlyName = friendlyNameInstance;
                                    }
                                    
                                    JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                    if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                    {
                                        string protectionStatusInstance = ((string)protectionStatusValue);
                                        azureIaaSVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance;
                                    }
                                    
                                    JToken protectionStateValue = propertiesValue["protectionState"];
                                    if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance = ((string)protectionStateValue);
                                        azureIaaSVMProtectedItemInstance.ProtectionState = protectionStateInstance;
                                    }
                                    
                                    JToken lastBackupStatusValue = propertiesValue["lastBackupStatus"];
                                    if (lastBackupStatusValue != null && lastBackupStatusValue.Type != JTokenType.Null)
                                    {
                                        string lastBackupStatusInstance = ((string)lastBackupStatusValue);
                                        azureIaaSVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance;
                                    }
                                    
                                    JToken lastBackupTimeValue = propertiesValue["lastBackupTime"];
                                    if (lastBackupTimeValue != null && lastBackupTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastBackupTimeInstance = ((DateTime)lastBackupTimeValue);
                                        azureIaaSVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance;
                                    }
                                    
                                    JToken extendedInfoValue = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue != null && extendedInfoValue.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance = new AzureIaaSVMProtectedItemExtendedInfo();
                                        azureIaaSVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance;
                                        
                                        JToken oldestRecoveryPointValue = extendedInfoValue["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue != null && oldestRecoveryPointValue.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance = ((DateTime)oldestRecoveryPointValue);
                                            extendedInfoInstance.OldestRecoveryPoint = oldestRecoveryPointInstance;
                                        }
                                        
                                        JToken recoveryPointCountValue = extendedInfoValue["recoveryPointCount"];
                                        if (recoveryPointCountValue != null && recoveryPointCountValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance = ((int)recoveryPointCountValue);
                                            extendedInfoInstance.RecoveryPointCount = recoveryPointCountInstance;
                                        }
                                        
                                        JToken policyInconsistentValue = extendedInfoValue["policyInconsistent"];
                                        if (policyInconsistentValue != null && policyInconsistentValue.Type != JTokenType.Null)
                                        {
                                            bool policyInconsistentInstance = ((bool)policyInconsistentValue);
                                            extendedInfoInstance.PolicyInconsistent = policyInconsistentInstance;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaaSVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    
                                    JToken workloadTypeValue2 = propertiesValue["workloadType"];
                                    if (workloadTypeValue2 != null && workloadTypeValue2.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance2 = ((string)workloadTypeValue2);
                                        azureIaaSVMProtectedItemInstance.WorkloadType = workloadTypeInstance2;
                                    }
                                    
                                    JToken lastRecoveryPointValue2 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue2 != null && lastRecoveryPointValue2.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance2 = ((DateTime)lastRecoveryPointValue2);
                                        azureIaaSVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance2;
                                    }
                                    
                                    JToken policyIdValue2 = propertiesValue["policyId"];
                                    if (policyIdValue2 != null && policyIdValue2.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance2 = ((string)policyIdValue2);
                                        azureIaaSVMProtectedItemInstance.PolicyId = policyIdInstance2;
                                    }
                                    
                                    JToken sourceResourceIdValue2 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue2 != null && sourceResourceIdValue2.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance2 = ((string)sourceResourceIdValue2);
                                        azureIaaSVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance2;
                                    }
                                    itemInstance.Properties = azureIaaSVMProtectedItemInstance;
                                }
                                if (typeName == "Microsoft.Compute/virtualMachines")
                                {
                                    AzureIaaSComputeVMProtectedItem azureIaaSComputeVMProtectedItemInstance = new AzureIaaSComputeVMProtectedItem();
                                    
                                    JToken virtualMachineIdValue2 = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue2 != null && virtualMachineIdValue2.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance2 = ((string)virtualMachineIdValue2);
                                        azureIaaSComputeVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance2;
                                    }
                                    
                                    JToken friendlyNameValue2 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                        azureIaaSComputeVMProtectedItemInstance.FriendlyName = friendlyNameInstance2;
                                    }
                                    
                                    JToken protectionStatusValue2 = propertiesValue["protectionStatus"];
                                    if (protectionStatusValue2 != null && protectionStatusValue2.Type != JTokenType.Null)
                                    {
                                        string protectionStatusInstance2 = ((string)protectionStatusValue2);
                                        azureIaaSComputeVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance2;
                                    }
                                    
                                    JToken protectionStateValue2 = propertiesValue["protectionState"];
                                    if (protectionStateValue2 != null && protectionStateValue2.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance2 = ((string)protectionStateValue2);
                                        azureIaaSComputeVMProtectedItemInstance.ProtectionState = protectionStateInstance2;
                                    }
                                    
                                    JToken lastBackupStatusValue2 = propertiesValue["lastBackupStatus"];
                                    if (lastBackupStatusValue2 != null && lastBackupStatusValue2.Type != JTokenType.Null)
                                    {
                                        string lastBackupStatusInstance2 = ((string)lastBackupStatusValue2);
                                        azureIaaSComputeVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance2;
                                    }
                                    
                                    JToken lastBackupTimeValue2 = propertiesValue["lastBackupTime"];
                                    if (lastBackupTimeValue2 != null && lastBackupTimeValue2.Type != JTokenType.Null)
                                    {
                                        DateTime lastBackupTimeInstance2 = ((DateTime)lastBackupTimeValue2);
                                        azureIaaSComputeVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance2;
                                    }
                                    
                                    JToken extendedInfoValue2 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue2 != null && extendedInfoValue2.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance2 = new AzureIaaSVMProtectedItemExtendedInfo();
                                        azureIaaSComputeVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance2;
                                        
                                        JToken oldestRecoveryPointValue2 = extendedInfoValue2["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue2 != null && oldestRecoveryPointValue2.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance2 = ((DateTime)oldestRecoveryPointValue2);
                                            extendedInfoInstance2.OldestRecoveryPoint = oldestRecoveryPointInstance2;
                                        }
                                        
                                        JToken recoveryPointCountValue2 = extendedInfoValue2["recoveryPointCount"];
                                        if (recoveryPointCountValue2 != null && recoveryPointCountValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance2 = ((int)recoveryPointCountValue2);
                                            extendedInfoInstance2.RecoveryPointCount = recoveryPointCountInstance2;
                                        }
                                        
                                        JToken policyInconsistentValue2 = extendedInfoValue2["policyInconsistent"];
                                        if (policyInconsistentValue2 != null && policyInconsistentValue2.Type != JTokenType.Null)
                                        {
                                            bool policyInconsistentInstance2 = ((bool)policyInconsistentValue2);
                                            extendedInfoInstance2.PolicyInconsistent = policyInconsistentInstance2;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue3 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue3 != null && backupManagementTypeValue3.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance3 = ((string)backupManagementTypeValue3);
                                        azureIaaSComputeVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance3;
                                    }
                                    
                                    JToken workloadTypeValue3 = propertiesValue["workloadType"];
                                    if (workloadTypeValue3 != null && workloadTypeValue3.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance3 = ((string)workloadTypeValue3);
                                        azureIaaSComputeVMProtectedItemInstance.WorkloadType = workloadTypeInstance3;
                                    }
                                    
                                    JToken lastRecoveryPointValue3 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue3 != null && lastRecoveryPointValue3.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance3 = ((DateTime)lastRecoveryPointValue3);
                                        azureIaaSComputeVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance3;
                                    }
                                    
                                    JToken policyIdValue3 = propertiesValue["policyId"];
                                    if (policyIdValue3 != null && policyIdValue3.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance3 = ((string)policyIdValue3);
                                        azureIaaSComputeVMProtectedItemInstance.PolicyId = policyIdInstance3;
                                    }
                                    
                                    JToken sourceResourceIdValue3 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue3 != null && sourceResourceIdValue3.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance3 = ((string)sourceResourceIdValue3);
                                        azureIaaSComputeVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance3;
                                    }
                                    itemInstance.Properties = azureIaaSComputeVMProtectedItemInstance;
                                }
                                if (typeName == "Microsoft.ClassicCompute/virtualMachines")
                                {
                                    AzureIaaSClassicComputeVMProtectedItem azureIaaSClassicComputeVMProtectedItemInstance = new AzureIaaSClassicComputeVMProtectedItem();
                                    
                                    JToken virtualMachineIdValue3 = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue3 != null && virtualMachineIdValue3.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance3 = ((string)virtualMachineIdValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance3;
                                    }
                                    
                                    JToken friendlyNameValue3 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue3 != null && friendlyNameValue3.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance3 = ((string)friendlyNameValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.FriendlyName = friendlyNameInstance3;
                                    }
                                    
                                    JToken protectionStatusValue3 = propertiesValue["protectionStatus"];
                                    if (protectionStatusValue3 != null && protectionStatusValue3.Type != JTokenType.Null)
                                    {
                                        string protectionStatusInstance3 = ((string)protectionStatusValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance3;
                                    }
                                    
                                    JToken protectionStateValue3 = propertiesValue["protectionState"];
                                    if (protectionStateValue3 != null && protectionStateValue3.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance3 = ((string)protectionStateValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.ProtectionState = protectionStateInstance3;
                                    }
                                    
                                    JToken lastBackupStatusValue3 = propertiesValue["lastBackupStatus"];
                                    if (lastBackupStatusValue3 != null && lastBackupStatusValue3.Type != JTokenType.Null)
                                    {
                                        string lastBackupStatusInstance3 = ((string)lastBackupStatusValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance3;
                                    }
                                    
                                    JToken lastBackupTimeValue3 = propertiesValue["lastBackupTime"];
                                    if (lastBackupTimeValue3 != null && lastBackupTimeValue3.Type != JTokenType.Null)
                                    {
                                        DateTime lastBackupTimeInstance3 = ((DateTime)lastBackupTimeValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance3;
                                    }
                                    
                                    JToken extendedInfoValue3 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue3 != null && extendedInfoValue3.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance3 = new AzureIaaSVMProtectedItemExtendedInfo();
                                        azureIaaSClassicComputeVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance3;
                                        
                                        JToken oldestRecoveryPointValue3 = extendedInfoValue3["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue3 != null && oldestRecoveryPointValue3.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance3 = ((DateTime)oldestRecoveryPointValue3);
                                            extendedInfoInstance3.OldestRecoveryPoint = oldestRecoveryPointInstance3;
                                        }
                                        
                                        JToken recoveryPointCountValue3 = extendedInfoValue3["recoveryPointCount"];
                                        if (recoveryPointCountValue3 != null && recoveryPointCountValue3.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance3 = ((int)recoveryPointCountValue3);
                                            extendedInfoInstance3.RecoveryPointCount = recoveryPointCountInstance3;
                                        }
                                        
                                        JToken policyInconsistentValue3 = extendedInfoValue3["policyInconsistent"];
                                        if (policyInconsistentValue3 != null && policyInconsistentValue3.Type != JTokenType.Null)
                                        {
                                            bool policyInconsistentInstance3 = ((bool)policyInconsistentValue3);
                                            extendedInfoInstance3.PolicyInconsistent = policyInconsistentInstance3;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue4 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue4 != null && backupManagementTypeValue4.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance4 = ((string)backupManagementTypeValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance4;
                                    }
                                    
                                    JToken workloadTypeValue4 = propertiesValue["workloadType"];
                                    if (workloadTypeValue4 != null && workloadTypeValue4.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance4 = ((string)workloadTypeValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.WorkloadType = workloadTypeInstance4;
                                    }
                                    
                                    JToken lastRecoveryPointValue4 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue4 != null && lastRecoveryPointValue4.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance4 = ((DateTime)lastRecoveryPointValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance4;
                                    }
                                    
                                    JToken policyIdValue4 = propertiesValue["policyId"];
                                    if (policyIdValue4 != null && policyIdValue4.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance4 = ((string)policyIdValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.PolicyId = policyIdInstance4;
                                    }
                                    
                                    JToken sourceResourceIdValue4 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue4 != null && sourceResourceIdValue4.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance4 = ((string)sourceResourceIdValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance4;
                                    }
                                    itemInstance.Properties = azureIaaSClassicComputeVMProtectedItemInstance;
                                }
                                if (typeName == "MabFileFolderProtectedItem")
                                {
                                    MabFileFolderProtectedItem mabFileFolderProtectedItemInstance = new MabFileFolderProtectedItem();
                                    
                                    JToken friendlyNameValue4 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue4 != null && friendlyNameValue4.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance4 = ((string)friendlyNameValue4);
                                        mabFileFolderProtectedItemInstance.FriendlyName = friendlyNameInstance4;
                                    }
                                    
                                    JToken computerNameValue = propertiesValue["computerName"];
                                    if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance = ((string)computerNameValue);
                                        mabFileFolderProtectedItemInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    JToken extendedInfoValue4 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue4 != null && extendedInfoValue4.Type != JTokenType.Null)
                                    {
                                        MabFileFolderProtectedItemExtendedInfo extendedInfoInstance4 = new MabFileFolderProtectedItemExtendedInfo();
                                        mabFileFolderProtectedItemInstance.ExtendedInfo = extendedInfoInstance4;
                                        
                                        JToken oldestRecoveryPointValue4 = extendedInfoValue4["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue4 != null && oldestRecoveryPointValue4.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance4 = ((DateTime)oldestRecoveryPointValue4);
                                            extendedInfoInstance4.OldestRecoveryPoint = oldestRecoveryPointInstance4;
                                        }
                                        
                                        JToken recoveryPointCountValue4 = extendedInfoValue4["recoveryPointCount"];
                                        if (recoveryPointCountValue4 != null && recoveryPointCountValue4.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance4 = ((int)recoveryPointCountValue4);
                                            extendedInfoInstance4.RecoveryPointCount = recoveryPointCountInstance4;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue5 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue5 != null && backupManagementTypeValue5.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance5 = ((string)backupManagementTypeValue5);
                                        mabFileFolderProtectedItemInstance.BackupManagementType = backupManagementTypeInstance5;
                                    }
                                    
                                    JToken workloadTypeValue5 = propertiesValue["workloadType"];
                                    if (workloadTypeValue5 != null && workloadTypeValue5.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance5 = ((string)workloadTypeValue5);
                                        mabFileFolderProtectedItemInstance.WorkloadType = workloadTypeInstance5;
                                    }
                                    
                                    JToken lastRecoveryPointValue5 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue5 != null && lastRecoveryPointValue5.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance5 = ((DateTime)lastRecoveryPointValue5);
                                        mabFileFolderProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance5;
                                    }
                                    
                                    JToken policyIdValue5 = propertiesValue["policyId"];
                                    if (policyIdValue5 != null && policyIdValue5.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance5 = ((string)policyIdValue5);
                                        mabFileFolderProtectedItemInstance.PolicyId = policyIdInstance5;
                                    }
                                    
                                    JToken sourceResourceIdValue5 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue5 != null && sourceResourceIdValue5.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance5 = ((string)sourceResourceIdValue5);
                                        mabFileFolderProtectedItemInstance.SourceResourceId = sourceResourceIdInstance5;
                                    }
                                    itemInstance.Properties = mabFileFolderProtectedItemInstance;
                                }
                                if (typeName == "Microsoft.Sql/servers/databases")
                                {
                                    AzureSqlProtectedItem azureSqlProtectedItemInstance = new AzureSqlProtectedItem();
                                    
                                    JToken protectedItemDataIdValue = propertiesValue["protectedItemDataId"];
                                    if (protectedItemDataIdValue != null && protectedItemDataIdValue.Type != JTokenType.Null)
                                    {
                                        string protectedItemDataIdInstance = ((string)protectedItemDataIdValue);
                                        azureSqlProtectedItemInstance.ProtectedItemDataId = protectedItemDataIdInstance;
                                    }
                                    
                                    JToken protectionStateValue4 = propertiesValue["protectionState"];
                                    if (protectionStateValue4 != null && protectionStateValue4.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance4 = ((string)protectionStateValue4);
                                        azureSqlProtectedItemInstance.ProtectionState = protectionStateInstance4;
                                    }
                                    
                                    JToken extendedInfoValue5 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue5 != null && extendedInfoValue5.Type != JTokenType.Null)
                                    {
                                        AzureSqlProtectedItemExtendedInfo extendedInfoInstance5 = new AzureSqlProtectedItemExtendedInfo();
                                        azureSqlProtectedItemInstance.ExtendedInfo = extendedInfoInstance5;
                                        
                                        JToken oldestRecoveryPointValue5 = extendedInfoValue5["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue5 != null && oldestRecoveryPointValue5.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance5 = ((DateTime)oldestRecoveryPointValue5);
                                            extendedInfoInstance5.OldestRecoveryPoint = oldestRecoveryPointInstance5;
                                        }
                                        
                                        JToken recoveryPointCountValue5 = extendedInfoValue5["recoveryPointCount"];
                                        if (recoveryPointCountValue5 != null && recoveryPointCountValue5.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance5 = ((int)recoveryPointCountValue5);
                                            extendedInfoInstance5.RecoveryPointCount = recoveryPointCountInstance5;
                                        }
                                        
                                        JToken policyStateValue = extendedInfoValue5["policyState"];
                                        if (policyStateValue != null && policyStateValue.Type != JTokenType.Null)
                                        {
                                            string policyStateInstance = ((string)policyStateValue);
                                            extendedInfoInstance5.PolicyState = policyStateInstance;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue6 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue6 != null && backupManagementTypeValue6.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance6 = ((string)backupManagementTypeValue6);
                                        azureSqlProtectedItemInstance.BackupManagementType = backupManagementTypeInstance6;
                                    }
                                    
                                    JToken workloadTypeValue6 = propertiesValue["workloadType"];
                                    if (workloadTypeValue6 != null && workloadTypeValue6.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance6 = ((string)workloadTypeValue6);
                                        azureSqlProtectedItemInstance.WorkloadType = workloadTypeInstance6;
                                    }
                                    
                                    JToken lastRecoveryPointValue6 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue6 != null && lastRecoveryPointValue6.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance6 = ((DateTime)lastRecoveryPointValue6);
                                        azureSqlProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance6;
                                    }
                                    
                                    JToken policyIdValue6 = propertiesValue["policyId"];
                                    if (policyIdValue6 != null && policyIdValue6.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance6 = ((string)policyIdValue6);
                                        azureSqlProtectedItemInstance.PolicyId = policyIdInstance6;
                                    }
                                    
                                    JToken sourceResourceIdValue6 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue6 != null && sourceResourceIdValue6.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance6 = ((string)sourceResourceIdValue6);
                                        azureSqlProtectedItemInstance.SourceResourceId = sourceResourceIdInstance6;
                                    }
                                    itemInstance.Properties = azureSqlProtectedItemInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    itemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Fetches the result of any operation on the protected item given the
        /// ID of operation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='fabricName'>
        /// Required.
        /// </param>
        /// <param name='containerName'>
        /// Required.
        /// </param>
        /// <param name='protectedItemName'>
        /// Required.
        /// </param>
        /// <param name='operationId'>
        /// Required.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A single instance of a protected item response.
        /// </returns>
        public async Task<ProtectedItemResponse> GetOperationResultAsync(string resourceGroupName, string resourceName, string fabricName, string containerName, string protectedItemName, string operationId, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            if (fabricName == null)
            {
                throw new ArgumentNullException("fabricName");
            }
            if (containerName == null)
            {
                throw new ArgumentNullException("containerName");
            }
            if (protectedItemName == null)
            {
                throw new ArgumentNullException("protectedItemName");
            }
            if (operationId == null)
            {
                throw new ArgumentNullException("operationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("fabricName", fabricName);
                tracingParameters.Add("containerName", containerName);
                tracingParameters.Add("protectedItemName", protectedItemName);
                tracingParameters.Add("operationId", operationId);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetOperationResultAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupFabrics/";
            url = url + Uri.EscapeDataString(fabricName);
            url = url + "/protectionContainers/";
            url = url + Uri.EscapeDataString(containerName);
            url = url + "/protectedItems/";
            url = url + Uri.EscapeDataString(protectedItemName);
            url = url + "/operationResults/";
            url = url + Uri.EscapeDataString(operationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectedItemResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectedItemResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectedItemResource itemInstance = new ProtectedItemResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["protectedItemType"]);
                                if (typeName == "ProtectedItem")
                                {
                                    ProtectedItem protectedItemInstance = new ProtectedItem();
                                    
                                    JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        protectedItemInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    
                                    JToken workloadTypeValue = propertiesValue["workloadType"];
                                    if (workloadTypeValue != null && workloadTypeValue.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance = ((string)workloadTypeValue);
                                        protectedItemInstance.WorkloadType = workloadTypeInstance;
                                    }
                                    
                                    JToken lastRecoveryPointValue = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue != null && lastRecoveryPointValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance = ((DateTime)lastRecoveryPointValue);
                                        protectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance;
                                    }
                                    
                                    JToken policyIdValue = propertiesValue["policyId"];
                                    if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance = ((string)policyIdValue);
                                        protectedItemInstance.PolicyId = policyIdInstance;
                                    }
                                    
                                    JToken sourceResourceIdValue = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue != null && sourceResourceIdValue.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance = ((string)sourceResourceIdValue);
                                        protectedItemInstance.SourceResourceId = sourceResourceIdInstance;
                                    }
                                    itemInstance.Properties = protectedItemInstance;
                                }
                                if (typeName == "AzureIaaSVMProtectedItem")
                                {
                                    AzureIaaSVMProtectedItem azureIaaSVMProtectedItemInstance = new AzureIaaSVMProtectedItem();
                                    
                                    JToken virtualMachineIdValue = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                        azureIaaSVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                    }
                                    
                                    JToken friendlyNameValue = propertiesValue["friendlyName"];
                                    if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance = ((string)friendlyNameValue);
                                        azureIaaSVMProtectedItemInstance.FriendlyName = friendlyNameInstance;
                                    }
                                    
                                    JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                    if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                    {
                                        string protectionStatusInstance = ((string)protectionStatusValue);
                                        azureIaaSVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance;
                                    }
                                    
                                    JToken protectionStateValue = propertiesValue["protectionState"];
                                    if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance = ((string)protectionStateValue);
                                        azureIaaSVMProtectedItemInstance.ProtectionState = protectionStateInstance;
                                    }
                                    
                                    JToken lastBackupStatusValue = propertiesValue["lastBackupStatus"];
                                    if (lastBackupStatusValue != null && lastBackupStatusValue.Type != JTokenType.Null)
                                    {
                                        string lastBackupStatusInstance = ((string)lastBackupStatusValue);
                                        azureIaaSVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance;
                                    }
                                    
                                    JToken lastBackupTimeValue = propertiesValue["lastBackupTime"];
                                    if (lastBackupTimeValue != null && lastBackupTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastBackupTimeInstance = ((DateTime)lastBackupTimeValue);
                                        azureIaaSVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance;
                                    }
                                    
                                    JToken extendedInfoValue = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue != null && extendedInfoValue.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance = new AzureIaaSVMProtectedItemExtendedInfo();
                                        azureIaaSVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance;
                                        
                                        JToken oldestRecoveryPointValue = extendedInfoValue["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue != null && oldestRecoveryPointValue.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance = ((DateTime)oldestRecoveryPointValue);
                                            extendedInfoInstance.OldestRecoveryPoint = oldestRecoveryPointInstance;
                                        }
                                        
                                        JToken recoveryPointCountValue = extendedInfoValue["recoveryPointCount"];
                                        if (recoveryPointCountValue != null && recoveryPointCountValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance = ((int)recoveryPointCountValue);
                                            extendedInfoInstance.RecoveryPointCount = recoveryPointCountInstance;
                                        }
                                        
                                        JToken policyInconsistentValue = extendedInfoValue["policyInconsistent"];
                                        if (policyInconsistentValue != null && policyInconsistentValue.Type != JTokenType.Null)
                                        {
                                            bool policyInconsistentInstance = ((bool)policyInconsistentValue);
                                            extendedInfoInstance.PolicyInconsistent = policyInconsistentInstance;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaaSVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    
                                    JToken workloadTypeValue2 = propertiesValue["workloadType"];
                                    if (workloadTypeValue2 != null && workloadTypeValue2.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance2 = ((string)workloadTypeValue2);
                                        azureIaaSVMProtectedItemInstance.WorkloadType = workloadTypeInstance2;
                                    }
                                    
                                    JToken lastRecoveryPointValue2 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue2 != null && lastRecoveryPointValue2.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance2 = ((DateTime)lastRecoveryPointValue2);
                                        azureIaaSVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance2;
                                    }
                                    
                                    JToken policyIdValue2 = propertiesValue["policyId"];
                                    if (policyIdValue2 != null && policyIdValue2.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance2 = ((string)policyIdValue2);
                                        azureIaaSVMProtectedItemInstance.PolicyId = policyIdInstance2;
                                    }
                                    
                                    JToken sourceResourceIdValue2 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue2 != null && sourceResourceIdValue2.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance2 = ((string)sourceResourceIdValue2);
                                        azureIaaSVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance2;
                                    }
                                    itemInstance.Properties = azureIaaSVMProtectedItemInstance;
                                }
                                if (typeName == "Microsoft.Compute/virtualMachines")
                                {
                                    AzureIaaSComputeVMProtectedItem azureIaaSComputeVMProtectedItemInstance = new AzureIaaSComputeVMProtectedItem();
                                    
                                    JToken virtualMachineIdValue2 = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue2 != null && virtualMachineIdValue2.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance2 = ((string)virtualMachineIdValue2);
                                        azureIaaSComputeVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance2;
                                    }
                                    
                                    JToken friendlyNameValue2 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                        azureIaaSComputeVMProtectedItemInstance.FriendlyName = friendlyNameInstance2;
                                    }
                                    
                                    JToken protectionStatusValue2 = propertiesValue["protectionStatus"];
                                    if (protectionStatusValue2 != null && protectionStatusValue2.Type != JTokenType.Null)
                                    {
                                        string protectionStatusInstance2 = ((string)protectionStatusValue2);
                                        azureIaaSComputeVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance2;
                                    }
                                    
                                    JToken protectionStateValue2 = propertiesValue["protectionState"];
                                    if (protectionStateValue2 != null && protectionStateValue2.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance2 = ((string)protectionStateValue2);
                                        azureIaaSComputeVMProtectedItemInstance.ProtectionState = protectionStateInstance2;
                                    }
                                    
                                    JToken lastBackupStatusValue2 = propertiesValue["lastBackupStatus"];
                                    if (lastBackupStatusValue2 != null && lastBackupStatusValue2.Type != JTokenType.Null)
                                    {
                                        string lastBackupStatusInstance2 = ((string)lastBackupStatusValue2);
                                        azureIaaSComputeVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance2;
                                    }
                                    
                                    JToken lastBackupTimeValue2 = propertiesValue["lastBackupTime"];
                                    if (lastBackupTimeValue2 != null && lastBackupTimeValue2.Type != JTokenType.Null)
                                    {
                                        DateTime lastBackupTimeInstance2 = ((DateTime)lastBackupTimeValue2);
                                        azureIaaSComputeVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance2;
                                    }
                                    
                                    JToken extendedInfoValue2 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue2 != null && extendedInfoValue2.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance2 = new AzureIaaSVMProtectedItemExtendedInfo();
                                        azureIaaSComputeVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance2;
                                        
                                        JToken oldestRecoveryPointValue2 = extendedInfoValue2["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue2 != null && oldestRecoveryPointValue2.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance2 = ((DateTime)oldestRecoveryPointValue2);
                                            extendedInfoInstance2.OldestRecoveryPoint = oldestRecoveryPointInstance2;
                                        }
                                        
                                        JToken recoveryPointCountValue2 = extendedInfoValue2["recoveryPointCount"];
                                        if (recoveryPointCountValue2 != null && recoveryPointCountValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance2 = ((int)recoveryPointCountValue2);
                                            extendedInfoInstance2.RecoveryPointCount = recoveryPointCountInstance2;
                                        }
                                        
                                        JToken policyInconsistentValue2 = extendedInfoValue2["policyInconsistent"];
                                        if (policyInconsistentValue2 != null && policyInconsistentValue2.Type != JTokenType.Null)
                                        {
                                            bool policyInconsistentInstance2 = ((bool)policyInconsistentValue2);
                                            extendedInfoInstance2.PolicyInconsistent = policyInconsistentInstance2;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue3 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue3 != null && backupManagementTypeValue3.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance3 = ((string)backupManagementTypeValue3);
                                        azureIaaSComputeVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance3;
                                    }
                                    
                                    JToken workloadTypeValue3 = propertiesValue["workloadType"];
                                    if (workloadTypeValue3 != null && workloadTypeValue3.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance3 = ((string)workloadTypeValue3);
                                        azureIaaSComputeVMProtectedItemInstance.WorkloadType = workloadTypeInstance3;
                                    }
                                    
                                    JToken lastRecoveryPointValue3 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue3 != null && lastRecoveryPointValue3.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance3 = ((DateTime)lastRecoveryPointValue3);
                                        azureIaaSComputeVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance3;
                                    }
                                    
                                    JToken policyIdValue3 = propertiesValue["policyId"];
                                    if (policyIdValue3 != null && policyIdValue3.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance3 = ((string)policyIdValue3);
                                        azureIaaSComputeVMProtectedItemInstance.PolicyId = policyIdInstance3;
                                    }
                                    
                                    JToken sourceResourceIdValue3 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue3 != null && sourceResourceIdValue3.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance3 = ((string)sourceResourceIdValue3);
                                        azureIaaSComputeVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance3;
                                    }
                                    itemInstance.Properties = azureIaaSComputeVMProtectedItemInstance;
                                }
                                if (typeName == "Microsoft.ClassicCompute/virtualMachines")
                                {
                                    AzureIaaSClassicComputeVMProtectedItem azureIaaSClassicComputeVMProtectedItemInstance = new AzureIaaSClassicComputeVMProtectedItem();
                                    
                                    JToken virtualMachineIdValue3 = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue3 != null && virtualMachineIdValue3.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance3 = ((string)virtualMachineIdValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance3;
                                    }
                                    
                                    JToken friendlyNameValue3 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue3 != null && friendlyNameValue3.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance3 = ((string)friendlyNameValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.FriendlyName = friendlyNameInstance3;
                                    }
                                    
                                    JToken protectionStatusValue3 = propertiesValue["protectionStatus"];
                                    if (protectionStatusValue3 != null && protectionStatusValue3.Type != JTokenType.Null)
                                    {
                                        string protectionStatusInstance3 = ((string)protectionStatusValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance3;
                                    }
                                    
                                    JToken protectionStateValue3 = propertiesValue["protectionState"];
                                    if (protectionStateValue3 != null && protectionStateValue3.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance3 = ((string)protectionStateValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.ProtectionState = protectionStateInstance3;
                                    }
                                    
                                    JToken lastBackupStatusValue3 = propertiesValue["lastBackupStatus"];
                                    if (lastBackupStatusValue3 != null && lastBackupStatusValue3.Type != JTokenType.Null)
                                    {
                                        string lastBackupStatusInstance3 = ((string)lastBackupStatusValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance3;
                                    }
                                    
                                    JToken lastBackupTimeValue3 = propertiesValue["lastBackupTime"];
                                    if (lastBackupTimeValue3 != null && lastBackupTimeValue3.Type != JTokenType.Null)
                                    {
                                        DateTime lastBackupTimeInstance3 = ((DateTime)lastBackupTimeValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance3;
                                    }
                                    
                                    JToken extendedInfoValue3 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue3 != null && extendedInfoValue3.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance3 = new AzureIaaSVMProtectedItemExtendedInfo();
                                        azureIaaSClassicComputeVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance3;
                                        
                                        JToken oldestRecoveryPointValue3 = extendedInfoValue3["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue3 != null && oldestRecoveryPointValue3.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance3 = ((DateTime)oldestRecoveryPointValue3);
                                            extendedInfoInstance3.OldestRecoveryPoint = oldestRecoveryPointInstance3;
                                        }
                                        
                                        JToken recoveryPointCountValue3 = extendedInfoValue3["recoveryPointCount"];
                                        if (recoveryPointCountValue3 != null && recoveryPointCountValue3.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance3 = ((int)recoveryPointCountValue3);
                                            extendedInfoInstance3.RecoveryPointCount = recoveryPointCountInstance3;
                                        }
                                        
                                        JToken policyInconsistentValue3 = extendedInfoValue3["policyInconsistent"];
                                        if (policyInconsistentValue3 != null && policyInconsistentValue3.Type != JTokenType.Null)
                                        {
                                            bool policyInconsistentInstance3 = ((bool)policyInconsistentValue3);
                                            extendedInfoInstance3.PolicyInconsistent = policyInconsistentInstance3;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue4 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue4 != null && backupManagementTypeValue4.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance4 = ((string)backupManagementTypeValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance4;
                                    }
                                    
                                    JToken workloadTypeValue4 = propertiesValue["workloadType"];
                                    if (workloadTypeValue4 != null && workloadTypeValue4.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance4 = ((string)workloadTypeValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.WorkloadType = workloadTypeInstance4;
                                    }
                                    
                                    JToken lastRecoveryPointValue4 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue4 != null && lastRecoveryPointValue4.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance4 = ((DateTime)lastRecoveryPointValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance4;
                                    }
                                    
                                    JToken policyIdValue4 = propertiesValue["policyId"];
                                    if (policyIdValue4 != null && policyIdValue4.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance4 = ((string)policyIdValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.PolicyId = policyIdInstance4;
                                    }
                                    
                                    JToken sourceResourceIdValue4 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue4 != null && sourceResourceIdValue4.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance4 = ((string)sourceResourceIdValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance4;
                                    }
                                    itemInstance.Properties = azureIaaSClassicComputeVMProtectedItemInstance;
                                }
                                if (typeName == "MabFileFolderProtectedItem")
                                {
                                    MabFileFolderProtectedItem mabFileFolderProtectedItemInstance = new MabFileFolderProtectedItem();
                                    
                                    JToken friendlyNameValue4 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue4 != null && friendlyNameValue4.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance4 = ((string)friendlyNameValue4);
                                        mabFileFolderProtectedItemInstance.FriendlyName = friendlyNameInstance4;
                                    }
                                    
                                    JToken computerNameValue = propertiesValue["computerName"];
                                    if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance = ((string)computerNameValue);
                                        mabFileFolderProtectedItemInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    JToken extendedInfoValue4 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue4 != null && extendedInfoValue4.Type != JTokenType.Null)
                                    {
                                        MabFileFolderProtectedItemExtendedInfo extendedInfoInstance4 = new MabFileFolderProtectedItemExtendedInfo();
                                        mabFileFolderProtectedItemInstance.ExtendedInfo = extendedInfoInstance4;
                                        
                                        JToken oldestRecoveryPointValue4 = extendedInfoValue4["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue4 != null && oldestRecoveryPointValue4.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance4 = ((DateTime)oldestRecoveryPointValue4);
                                            extendedInfoInstance4.OldestRecoveryPoint = oldestRecoveryPointInstance4;
                                        }
                                        
                                        JToken recoveryPointCountValue4 = extendedInfoValue4["recoveryPointCount"];
                                        if (recoveryPointCountValue4 != null && recoveryPointCountValue4.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance4 = ((int)recoveryPointCountValue4);
                                            extendedInfoInstance4.RecoveryPointCount = recoveryPointCountInstance4;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue5 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue5 != null && backupManagementTypeValue5.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance5 = ((string)backupManagementTypeValue5);
                                        mabFileFolderProtectedItemInstance.BackupManagementType = backupManagementTypeInstance5;
                                    }
                                    
                                    JToken workloadTypeValue5 = propertiesValue["workloadType"];
                                    if (workloadTypeValue5 != null && workloadTypeValue5.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance5 = ((string)workloadTypeValue5);
                                        mabFileFolderProtectedItemInstance.WorkloadType = workloadTypeInstance5;
                                    }
                                    
                                    JToken lastRecoveryPointValue5 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue5 != null && lastRecoveryPointValue5.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance5 = ((DateTime)lastRecoveryPointValue5);
                                        mabFileFolderProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance5;
                                    }
                                    
                                    JToken policyIdValue5 = propertiesValue["policyId"];
                                    if (policyIdValue5 != null && policyIdValue5.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance5 = ((string)policyIdValue5);
                                        mabFileFolderProtectedItemInstance.PolicyId = policyIdInstance5;
                                    }
                                    
                                    JToken sourceResourceIdValue5 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue5 != null && sourceResourceIdValue5.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance5 = ((string)sourceResourceIdValue5);
                                        mabFileFolderProtectedItemInstance.SourceResourceId = sourceResourceIdInstance5;
                                    }
                                    itemInstance.Properties = mabFileFolderProtectedItemInstance;
                                }
                                if (typeName == "Microsoft.Sql/servers/databases")
                                {
                                    AzureSqlProtectedItem azureSqlProtectedItemInstance = new AzureSqlProtectedItem();
                                    
                                    JToken protectedItemDataIdValue = propertiesValue["protectedItemDataId"];
                                    if (protectedItemDataIdValue != null && protectedItemDataIdValue.Type != JTokenType.Null)
                                    {
                                        string protectedItemDataIdInstance = ((string)protectedItemDataIdValue);
                                        azureSqlProtectedItemInstance.ProtectedItemDataId = protectedItemDataIdInstance;
                                    }
                                    
                                    JToken protectionStateValue4 = propertiesValue["protectionState"];
                                    if (protectionStateValue4 != null && protectionStateValue4.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance4 = ((string)protectionStateValue4);
                                        azureSqlProtectedItemInstance.ProtectionState = protectionStateInstance4;
                                    }
                                    
                                    JToken extendedInfoValue5 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue5 != null && extendedInfoValue5.Type != JTokenType.Null)
                                    {
                                        AzureSqlProtectedItemExtendedInfo extendedInfoInstance5 = new AzureSqlProtectedItemExtendedInfo();
                                        azureSqlProtectedItemInstance.ExtendedInfo = extendedInfoInstance5;
                                        
                                        JToken oldestRecoveryPointValue5 = extendedInfoValue5["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue5 != null && oldestRecoveryPointValue5.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance5 = ((DateTime)oldestRecoveryPointValue5);
                                            extendedInfoInstance5.OldestRecoveryPoint = oldestRecoveryPointInstance5;
                                        }
                                        
                                        JToken recoveryPointCountValue5 = extendedInfoValue5["recoveryPointCount"];
                                        if (recoveryPointCountValue5 != null && recoveryPointCountValue5.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance5 = ((int)recoveryPointCountValue5);
                                            extendedInfoInstance5.RecoveryPointCount = recoveryPointCountInstance5;
                                        }
                                        
                                        JToken policyStateValue = extendedInfoValue5["policyState"];
                                        if (policyStateValue != null && policyStateValue.Type != JTokenType.Null)
                                        {
                                            string policyStateInstance = ((string)policyStateValue);
                                            extendedInfoInstance5.PolicyState = policyStateInstance;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue6 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue6 != null && backupManagementTypeValue6.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance6 = ((string)backupManagementTypeValue6);
                                        azureSqlProtectedItemInstance.BackupManagementType = backupManagementTypeInstance6;
                                    }
                                    
                                    JToken workloadTypeValue6 = propertiesValue["workloadType"];
                                    if (workloadTypeValue6 != null && workloadTypeValue6.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance6 = ((string)workloadTypeValue6);
                                        azureSqlProtectedItemInstance.WorkloadType = workloadTypeInstance6;
                                    }
                                    
                                    JToken lastRecoveryPointValue6 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue6 != null && lastRecoveryPointValue6.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance6 = ((DateTime)lastRecoveryPointValue6);
                                        azureSqlProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance6;
                                    }
                                    
                                    JToken policyIdValue6 = propertiesValue["policyId"];
                                    if (policyIdValue6 != null && policyIdValue6.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance6 = ((string)policyIdValue6);
                                        azureSqlProtectedItemInstance.PolicyId = policyIdInstance6;
                                    }
                                    
                                    JToken sourceResourceIdValue6 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue6 != null && sourceResourceIdValue6.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance6 = ((string)sourceResourceIdValue6);
                                        azureSqlProtectedItemInstance.SourceResourceId = sourceResourceIdInstance6;
                                    }
                                    itemInstance.Properties = azureSqlProtectedItemInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    itemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Fetches the result of any operation on the protected item given the
        /// URL for tracking the operation as returned by APIs such as Create
        /// Or Update, Delete etc.
        /// </summary>
        /// <param name='operationResultLink'>
        /// Required. Location value returned by operation.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A single instance of a protected item response.
        /// </returns>
        public async Task<ProtectedItemResponse> GetProtectedItemOperationResultByURLAsync(string operationResultLink, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (operationResultLink == null)
            {
                throw new ArgumentNullException("operationResultLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationResultLink", operationResultLink);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "GetProtectedItemOperationResultByURLAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationResultLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectedItemResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectedItemResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectedItemResource itemInstance = new ProtectedItemResource();
                            result.Item = itemInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["protectedItemType"]);
                                if (typeName == "ProtectedItem")
                                {
                                    ProtectedItem protectedItemInstance = new ProtectedItem();
                                    
                                    JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                        protectedItemInstance.BackupManagementType = backupManagementTypeInstance;
                                    }
                                    
                                    JToken workloadTypeValue = propertiesValue["workloadType"];
                                    if (workloadTypeValue != null && workloadTypeValue.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance = ((string)workloadTypeValue);
                                        protectedItemInstance.WorkloadType = workloadTypeInstance;
                                    }
                                    
                                    JToken lastRecoveryPointValue = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue != null && lastRecoveryPointValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance = ((DateTime)lastRecoveryPointValue);
                                        protectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance;
                                    }
                                    
                                    JToken policyIdValue = propertiesValue["policyId"];
                                    if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance = ((string)policyIdValue);
                                        protectedItemInstance.PolicyId = policyIdInstance;
                                    }
                                    
                                    JToken sourceResourceIdValue = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue != null && sourceResourceIdValue.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance = ((string)sourceResourceIdValue);
                                        protectedItemInstance.SourceResourceId = sourceResourceIdInstance;
                                    }
                                    itemInstance.Properties = protectedItemInstance;
                                }
                                if (typeName == "AzureIaaSVMProtectedItem")
                                {
                                    AzureIaaSVMProtectedItem azureIaaSVMProtectedItemInstance = new AzureIaaSVMProtectedItem();
                                    
                                    JToken virtualMachineIdValue = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                        azureIaaSVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                    }
                                    
                                    JToken friendlyNameValue = propertiesValue["friendlyName"];
                                    if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance = ((string)friendlyNameValue);
                                        azureIaaSVMProtectedItemInstance.FriendlyName = friendlyNameInstance;
                                    }
                                    
                                    JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                    if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                    {
                                        string protectionStatusInstance = ((string)protectionStatusValue);
                                        azureIaaSVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance;
                                    }
                                    
                                    JToken protectionStateValue = propertiesValue["protectionState"];
                                    if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance = ((string)protectionStateValue);
                                        azureIaaSVMProtectedItemInstance.ProtectionState = protectionStateInstance;
                                    }
                                    
                                    JToken lastBackupStatusValue = propertiesValue["lastBackupStatus"];
                                    if (lastBackupStatusValue != null && lastBackupStatusValue.Type != JTokenType.Null)
                                    {
                                        string lastBackupStatusInstance = ((string)lastBackupStatusValue);
                                        azureIaaSVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance;
                                    }
                                    
                                    JToken lastBackupTimeValue = propertiesValue["lastBackupTime"];
                                    if (lastBackupTimeValue != null && lastBackupTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastBackupTimeInstance = ((DateTime)lastBackupTimeValue);
                                        azureIaaSVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance;
                                    }
                                    
                                    JToken extendedInfoValue = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue != null && extendedInfoValue.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance = new AzureIaaSVMProtectedItemExtendedInfo();
                                        azureIaaSVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance;
                                        
                                        JToken oldestRecoveryPointValue = extendedInfoValue["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue != null && oldestRecoveryPointValue.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance = ((DateTime)oldestRecoveryPointValue);
                                            extendedInfoInstance.OldestRecoveryPoint = oldestRecoveryPointInstance;
                                        }
                                        
                                        JToken recoveryPointCountValue = extendedInfoValue["recoveryPointCount"];
                                        if (recoveryPointCountValue != null && recoveryPointCountValue.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance = ((int)recoveryPointCountValue);
                                            extendedInfoInstance.RecoveryPointCount = recoveryPointCountInstance;
                                        }
                                        
                                        JToken policyInconsistentValue = extendedInfoValue["policyInconsistent"];
                                        if (policyInconsistentValue != null && policyInconsistentValue.Type != JTokenType.Null)
                                        {
                                            bool policyInconsistentInstance = ((bool)policyInconsistentValue);
                                            extendedInfoInstance.PolicyInconsistent = policyInconsistentInstance;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                        azureIaaSVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance2;
                                    }
                                    
                                    JToken workloadTypeValue2 = propertiesValue["workloadType"];
                                    if (workloadTypeValue2 != null && workloadTypeValue2.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance2 = ((string)workloadTypeValue2);
                                        azureIaaSVMProtectedItemInstance.WorkloadType = workloadTypeInstance2;
                                    }
                                    
                                    JToken lastRecoveryPointValue2 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue2 != null && lastRecoveryPointValue2.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance2 = ((DateTime)lastRecoveryPointValue2);
                                        azureIaaSVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance2;
                                    }
                                    
                                    JToken policyIdValue2 = propertiesValue["policyId"];
                                    if (policyIdValue2 != null && policyIdValue2.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance2 = ((string)policyIdValue2);
                                        azureIaaSVMProtectedItemInstance.PolicyId = policyIdInstance2;
                                    }
                                    
                                    JToken sourceResourceIdValue2 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue2 != null && sourceResourceIdValue2.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance2 = ((string)sourceResourceIdValue2);
                                        azureIaaSVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance2;
                                    }
                                    itemInstance.Properties = azureIaaSVMProtectedItemInstance;
                                }
                                if (typeName == "Microsoft.Compute/virtualMachines")
                                {
                                    AzureIaaSComputeVMProtectedItem azureIaaSComputeVMProtectedItemInstance = new AzureIaaSComputeVMProtectedItem();
                                    
                                    JToken virtualMachineIdValue2 = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue2 != null && virtualMachineIdValue2.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance2 = ((string)virtualMachineIdValue2);
                                        azureIaaSComputeVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance2;
                                    }
                                    
                                    JToken friendlyNameValue2 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                        azureIaaSComputeVMProtectedItemInstance.FriendlyName = friendlyNameInstance2;
                                    }
                                    
                                    JToken protectionStatusValue2 = propertiesValue["protectionStatus"];
                                    if (protectionStatusValue2 != null && protectionStatusValue2.Type != JTokenType.Null)
                                    {
                                        string protectionStatusInstance2 = ((string)protectionStatusValue2);
                                        azureIaaSComputeVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance2;
                                    }
                                    
                                    JToken protectionStateValue2 = propertiesValue["protectionState"];
                                    if (protectionStateValue2 != null && protectionStateValue2.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance2 = ((string)protectionStateValue2);
                                        azureIaaSComputeVMProtectedItemInstance.ProtectionState = protectionStateInstance2;
                                    }
                                    
                                    JToken lastBackupStatusValue2 = propertiesValue["lastBackupStatus"];
                                    if (lastBackupStatusValue2 != null && lastBackupStatusValue2.Type != JTokenType.Null)
                                    {
                                        string lastBackupStatusInstance2 = ((string)lastBackupStatusValue2);
                                        azureIaaSComputeVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance2;
                                    }
                                    
                                    JToken lastBackupTimeValue2 = propertiesValue["lastBackupTime"];
                                    if (lastBackupTimeValue2 != null && lastBackupTimeValue2.Type != JTokenType.Null)
                                    {
                                        DateTime lastBackupTimeInstance2 = ((DateTime)lastBackupTimeValue2);
                                        azureIaaSComputeVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance2;
                                    }
                                    
                                    JToken extendedInfoValue2 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue2 != null && extendedInfoValue2.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance2 = new AzureIaaSVMProtectedItemExtendedInfo();
                                        azureIaaSComputeVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance2;
                                        
                                        JToken oldestRecoveryPointValue2 = extendedInfoValue2["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue2 != null && oldestRecoveryPointValue2.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance2 = ((DateTime)oldestRecoveryPointValue2);
                                            extendedInfoInstance2.OldestRecoveryPoint = oldestRecoveryPointInstance2;
                                        }
                                        
                                        JToken recoveryPointCountValue2 = extendedInfoValue2["recoveryPointCount"];
                                        if (recoveryPointCountValue2 != null && recoveryPointCountValue2.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance2 = ((int)recoveryPointCountValue2);
                                            extendedInfoInstance2.RecoveryPointCount = recoveryPointCountInstance2;
                                        }
                                        
                                        JToken policyInconsistentValue2 = extendedInfoValue2["policyInconsistent"];
                                        if (policyInconsistentValue2 != null && policyInconsistentValue2.Type != JTokenType.Null)
                                        {
                                            bool policyInconsistentInstance2 = ((bool)policyInconsistentValue2);
                                            extendedInfoInstance2.PolicyInconsistent = policyInconsistentInstance2;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue3 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue3 != null && backupManagementTypeValue3.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance3 = ((string)backupManagementTypeValue3);
                                        azureIaaSComputeVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance3;
                                    }
                                    
                                    JToken workloadTypeValue3 = propertiesValue["workloadType"];
                                    if (workloadTypeValue3 != null && workloadTypeValue3.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance3 = ((string)workloadTypeValue3);
                                        azureIaaSComputeVMProtectedItemInstance.WorkloadType = workloadTypeInstance3;
                                    }
                                    
                                    JToken lastRecoveryPointValue3 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue3 != null && lastRecoveryPointValue3.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance3 = ((DateTime)lastRecoveryPointValue3);
                                        azureIaaSComputeVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance3;
                                    }
                                    
                                    JToken policyIdValue3 = propertiesValue["policyId"];
                                    if (policyIdValue3 != null && policyIdValue3.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance3 = ((string)policyIdValue3);
                                        azureIaaSComputeVMProtectedItemInstance.PolicyId = policyIdInstance3;
                                    }
                                    
                                    JToken sourceResourceIdValue3 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue3 != null && sourceResourceIdValue3.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance3 = ((string)sourceResourceIdValue3);
                                        azureIaaSComputeVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance3;
                                    }
                                    itemInstance.Properties = azureIaaSComputeVMProtectedItemInstance;
                                }
                                if (typeName == "Microsoft.ClassicCompute/virtualMachines")
                                {
                                    AzureIaaSClassicComputeVMProtectedItem azureIaaSClassicComputeVMProtectedItemInstance = new AzureIaaSClassicComputeVMProtectedItem();
                                    
                                    JToken virtualMachineIdValue3 = propertiesValue["virtualMachineId"];
                                    if (virtualMachineIdValue3 != null && virtualMachineIdValue3.Type != JTokenType.Null)
                                    {
                                        string virtualMachineIdInstance3 = ((string)virtualMachineIdValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance3;
                                    }
                                    
                                    JToken friendlyNameValue3 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue3 != null && friendlyNameValue3.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance3 = ((string)friendlyNameValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.FriendlyName = friendlyNameInstance3;
                                    }
                                    
                                    JToken protectionStatusValue3 = propertiesValue["protectionStatus"];
                                    if (protectionStatusValue3 != null && protectionStatusValue3.Type != JTokenType.Null)
                                    {
                                        string protectionStatusInstance3 = ((string)protectionStatusValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance3;
                                    }
                                    
                                    JToken protectionStateValue3 = propertiesValue["protectionState"];
                                    if (protectionStateValue3 != null && protectionStateValue3.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance3 = ((string)protectionStateValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.ProtectionState = protectionStateInstance3;
                                    }
                                    
                                    JToken lastBackupStatusValue3 = propertiesValue["lastBackupStatus"];
                                    if (lastBackupStatusValue3 != null && lastBackupStatusValue3.Type != JTokenType.Null)
                                    {
                                        string lastBackupStatusInstance3 = ((string)lastBackupStatusValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance3;
                                    }
                                    
                                    JToken lastBackupTimeValue3 = propertiesValue["lastBackupTime"];
                                    if (lastBackupTimeValue3 != null && lastBackupTimeValue3.Type != JTokenType.Null)
                                    {
                                        DateTime lastBackupTimeInstance3 = ((DateTime)lastBackupTimeValue3);
                                        azureIaaSClassicComputeVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance3;
                                    }
                                    
                                    JToken extendedInfoValue3 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue3 != null && extendedInfoValue3.Type != JTokenType.Null)
                                    {
                                        AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance3 = new AzureIaaSVMProtectedItemExtendedInfo();
                                        azureIaaSClassicComputeVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance3;
                                        
                                        JToken oldestRecoveryPointValue3 = extendedInfoValue3["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue3 != null && oldestRecoveryPointValue3.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance3 = ((DateTime)oldestRecoveryPointValue3);
                                            extendedInfoInstance3.OldestRecoveryPoint = oldestRecoveryPointInstance3;
                                        }
                                        
                                        JToken recoveryPointCountValue3 = extendedInfoValue3["recoveryPointCount"];
                                        if (recoveryPointCountValue3 != null && recoveryPointCountValue3.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance3 = ((int)recoveryPointCountValue3);
                                            extendedInfoInstance3.RecoveryPointCount = recoveryPointCountInstance3;
                                        }
                                        
                                        JToken policyInconsistentValue3 = extendedInfoValue3["policyInconsistent"];
                                        if (policyInconsistentValue3 != null && policyInconsistentValue3.Type != JTokenType.Null)
                                        {
                                            bool policyInconsistentInstance3 = ((bool)policyInconsistentValue3);
                                            extendedInfoInstance3.PolicyInconsistent = policyInconsistentInstance3;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue4 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue4 != null && backupManagementTypeValue4.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance4 = ((string)backupManagementTypeValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance4;
                                    }
                                    
                                    JToken workloadTypeValue4 = propertiesValue["workloadType"];
                                    if (workloadTypeValue4 != null && workloadTypeValue4.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance4 = ((string)workloadTypeValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.WorkloadType = workloadTypeInstance4;
                                    }
                                    
                                    JToken lastRecoveryPointValue4 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue4 != null && lastRecoveryPointValue4.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance4 = ((DateTime)lastRecoveryPointValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance4;
                                    }
                                    
                                    JToken policyIdValue4 = propertiesValue["policyId"];
                                    if (policyIdValue4 != null && policyIdValue4.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance4 = ((string)policyIdValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.PolicyId = policyIdInstance4;
                                    }
                                    
                                    JToken sourceResourceIdValue4 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue4 != null && sourceResourceIdValue4.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance4 = ((string)sourceResourceIdValue4);
                                        azureIaaSClassicComputeVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance4;
                                    }
                                    itemInstance.Properties = azureIaaSClassicComputeVMProtectedItemInstance;
                                }
                                if (typeName == "MabFileFolderProtectedItem")
                                {
                                    MabFileFolderProtectedItem mabFileFolderProtectedItemInstance = new MabFileFolderProtectedItem();
                                    
                                    JToken friendlyNameValue4 = propertiesValue["friendlyName"];
                                    if (friendlyNameValue4 != null && friendlyNameValue4.Type != JTokenType.Null)
                                    {
                                        string friendlyNameInstance4 = ((string)friendlyNameValue4);
                                        mabFileFolderProtectedItemInstance.FriendlyName = friendlyNameInstance4;
                                    }
                                    
                                    JToken computerNameValue = propertiesValue["computerName"];
                                    if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                    {
                                        string computerNameInstance = ((string)computerNameValue);
                                        mabFileFolderProtectedItemInstance.ComputerName = computerNameInstance;
                                    }
                                    
                                    JToken extendedInfoValue4 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue4 != null && extendedInfoValue4.Type != JTokenType.Null)
                                    {
                                        MabFileFolderProtectedItemExtendedInfo extendedInfoInstance4 = new MabFileFolderProtectedItemExtendedInfo();
                                        mabFileFolderProtectedItemInstance.ExtendedInfo = extendedInfoInstance4;
                                        
                                        JToken oldestRecoveryPointValue4 = extendedInfoValue4["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue4 != null && oldestRecoveryPointValue4.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance4 = ((DateTime)oldestRecoveryPointValue4);
                                            extendedInfoInstance4.OldestRecoveryPoint = oldestRecoveryPointInstance4;
                                        }
                                        
                                        JToken recoveryPointCountValue4 = extendedInfoValue4["recoveryPointCount"];
                                        if (recoveryPointCountValue4 != null && recoveryPointCountValue4.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance4 = ((int)recoveryPointCountValue4);
                                            extendedInfoInstance4.RecoveryPointCount = recoveryPointCountInstance4;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue5 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue5 != null && backupManagementTypeValue5.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance5 = ((string)backupManagementTypeValue5);
                                        mabFileFolderProtectedItemInstance.BackupManagementType = backupManagementTypeInstance5;
                                    }
                                    
                                    JToken workloadTypeValue5 = propertiesValue["workloadType"];
                                    if (workloadTypeValue5 != null && workloadTypeValue5.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance5 = ((string)workloadTypeValue5);
                                        mabFileFolderProtectedItemInstance.WorkloadType = workloadTypeInstance5;
                                    }
                                    
                                    JToken lastRecoveryPointValue5 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue5 != null && lastRecoveryPointValue5.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance5 = ((DateTime)lastRecoveryPointValue5);
                                        mabFileFolderProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance5;
                                    }
                                    
                                    JToken policyIdValue5 = propertiesValue["policyId"];
                                    if (policyIdValue5 != null && policyIdValue5.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance5 = ((string)policyIdValue5);
                                        mabFileFolderProtectedItemInstance.PolicyId = policyIdInstance5;
                                    }
                                    
                                    JToken sourceResourceIdValue5 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue5 != null && sourceResourceIdValue5.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance5 = ((string)sourceResourceIdValue5);
                                        mabFileFolderProtectedItemInstance.SourceResourceId = sourceResourceIdInstance5;
                                    }
                                    itemInstance.Properties = mabFileFolderProtectedItemInstance;
                                }
                                if (typeName == "Microsoft.Sql/servers/databases")
                                {
                                    AzureSqlProtectedItem azureSqlProtectedItemInstance = new AzureSqlProtectedItem();
                                    
                                    JToken protectedItemDataIdValue = propertiesValue["protectedItemDataId"];
                                    if (protectedItemDataIdValue != null && protectedItemDataIdValue.Type != JTokenType.Null)
                                    {
                                        string protectedItemDataIdInstance = ((string)protectedItemDataIdValue);
                                        azureSqlProtectedItemInstance.ProtectedItemDataId = protectedItemDataIdInstance;
                                    }
                                    
                                    JToken protectionStateValue4 = propertiesValue["protectionState"];
                                    if (protectionStateValue4 != null && protectionStateValue4.Type != JTokenType.Null)
                                    {
                                        string protectionStateInstance4 = ((string)protectionStateValue4);
                                        azureSqlProtectedItemInstance.ProtectionState = protectionStateInstance4;
                                    }
                                    
                                    JToken extendedInfoValue5 = propertiesValue["extendedInfo"];
                                    if (extendedInfoValue5 != null && extendedInfoValue5.Type != JTokenType.Null)
                                    {
                                        AzureSqlProtectedItemExtendedInfo extendedInfoInstance5 = new AzureSqlProtectedItemExtendedInfo();
                                        azureSqlProtectedItemInstance.ExtendedInfo = extendedInfoInstance5;
                                        
                                        JToken oldestRecoveryPointValue5 = extendedInfoValue5["oldestRecoveryPoint"];
                                        if (oldestRecoveryPointValue5 != null && oldestRecoveryPointValue5.Type != JTokenType.Null)
                                        {
                                            DateTime oldestRecoveryPointInstance5 = ((DateTime)oldestRecoveryPointValue5);
                                            extendedInfoInstance5.OldestRecoveryPoint = oldestRecoveryPointInstance5;
                                        }
                                        
                                        JToken recoveryPointCountValue5 = extendedInfoValue5["recoveryPointCount"];
                                        if (recoveryPointCountValue5 != null && recoveryPointCountValue5.Type != JTokenType.Null)
                                        {
                                            int recoveryPointCountInstance5 = ((int)recoveryPointCountValue5);
                                            extendedInfoInstance5.RecoveryPointCount = recoveryPointCountInstance5;
                                        }
                                        
                                        JToken policyStateValue = extendedInfoValue5["policyState"];
                                        if (policyStateValue != null && policyStateValue.Type != JTokenType.Null)
                                        {
                                            string policyStateInstance = ((string)policyStateValue);
                                            extendedInfoInstance5.PolicyState = policyStateInstance;
                                        }
                                    }
                                    
                                    JToken backupManagementTypeValue6 = propertiesValue["backupManagementType"];
                                    if (backupManagementTypeValue6 != null && backupManagementTypeValue6.Type != JTokenType.Null)
                                    {
                                        string backupManagementTypeInstance6 = ((string)backupManagementTypeValue6);
                                        azureSqlProtectedItemInstance.BackupManagementType = backupManagementTypeInstance6;
                                    }
                                    
                                    JToken workloadTypeValue6 = propertiesValue["workloadType"];
                                    if (workloadTypeValue6 != null && workloadTypeValue6.Type != JTokenType.Null)
                                    {
                                        string workloadTypeInstance6 = ((string)workloadTypeValue6);
                                        azureSqlProtectedItemInstance.WorkloadType = workloadTypeInstance6;
                                    }
                                    
                                    JToken lastRecoveryPointValue6 = propertiesValue["lastRecoveryPoint"];
                                    if (lastRecoveryPointValue6 != null && lastRecoveryPointValue6.Type != JTokenType.Null)
                                    {
                                        DateTime lastRecoveryPointInstance6 = ((DateTime)lastRecoveryPointValue6);
                                        azureSqlProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance6;
                                    }
                                    
                                    JToken policyIdValue6 = propertiesValue["policyId"];
                                    if (policyIdValue6 != null && policyIdValue6.Type != JTokenType.Null)
                                    {
                                        string policyIdInstance6 = ((string)policyIdValue6);
                                        azureSqlProtectedItemInstance.PolicyId = policyIdInstance6;
                                    }
                                    
                                    JToken sourceResourceIdValue6 = propertiesValue["sourceResourceId"];
                                    if (sourceResourceIdValue6 != null && sourceResourceIdValue6.Type != JTokenType.Null)
                                    {
                                        string sourceResourceIdInstance6 = ((string)sourceResourceIdValue6);
                                        azureSqlProtectedItemInstance.SourceResourceId = sourceResourceIdInstance6;
                                    }
                                    itemInstance.Properties = azureSqlProtectedItemInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                itemInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                itemInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                itemInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                itemInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    itemInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                itemInstance.ETag = eTagInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                result.Location = locationInstance2;
                            }
                            
                            JToken azureAsyncOperationValue = responseDoc["azureAsyncOperation"];
                            if (azureAsyncOperationValue != null && azureAsyncOperationValue.Type != JTokenType.Null)
                            {
                                string azureAsyncOperationInstance = ((string)azureAsyncOperationValue);
                                result.AzureAsyncOperation = azureAsyncOperationInstance;
                            }
                            
                            JToken retryAfterValue = responseDoc["retryAfter"];
                            if (retryAfterValue != null && retryAfterValue.Type != JTokenType.Null)
                            {
                                string retryAfterInstance = ((string)retryAfterValue);
                                result.RetryAfter = retryAfterInstance;
                            }
                            
                            JToken statusValue = responseDoc["Status"];
                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                            {
                                OperationStatus statusInstance = ((OperationStatus)Enum.Parse(typeof(OperationStatus), ((string)statusValue), true));
                                result.Status = statusInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = httpResponse.Headers.GetValues("Retry-After").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists all the items protected by your Recovery Services Vault
        /// according to the query and pagination parameters supplied in the
        /// arguments.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name of your recovery services vault.
        /// </param>
        /// <param name='resourceName'>
        /// Required. Name of your recovery services vault.
        /// </param>
        /// <param name='queryFilter'>
        /// Optional.
        /// </param>
        /// <param name='paginationParams'>
        /// Optional.
        /// </param>
        /// <param name='customRequestHeaders'>
        /// Optional. Request header parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of protected items returned as a response by the list
        /// protected item API.
        /// </returns>
        public async Task<ProtectedItemListResponse> ListAsync(string resourceGroupName, string resourceName, ProtectedItemListQueryParam queryFilter, PaginationRequest paginationParams, CustomRequestHeaders customRequestHeaders, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceName == null)
            {
                throw new ArgumentNullException("resourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("resourceName", resourceName);
                tracingParameters.Add("queryFilter", queryFilter);
                tracingParameters.Add("paginationParams", paginationParams);
                tracingParameters.Add("customRequestHeaders", customRequestHeaders);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/Subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId.ToString());
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/";
            url = url + "vaults";
            url = url + "/";
            url = url + Uri.EscapeDataString(resourceName);
            url = url + "/backupProtectedItems";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-05-01");
            List<string> odataFilter = new List<string>();
            if (queryFilter != null && queryFilter.BackupManagementType != null)
            {
                odataFilter.Add("backupManagementType eq '" + Uri.EscapeDataString(queryFilter.BackupManagementType) + "'");
            }
            if (queryFilter != null && queryFilter.DatasourceType != null)
            {
                odataFilter.Add("itemType eq '" + Uri.EscapeDataString(queryFilter.DatasourceType) + "'");
            }
            if (queryFilter != null && queryFilter.PolicyName != null)
            {
                odataFilter.Add("policyName eq '" + Uri.EscapeDataString(queryFilter.PolicyName) + "'");
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(" and ", odataFilter));
            }
            if (paginationParams != null && paginationParams.SkipToken != null)
            {
                queryParameters.Add("$skiptoken=" + Uri.EscapeDataString(paginationParams.SkipToken));
            }
            if (paginationParams != null && paginationParams.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(paginationParams.Top));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept-Language", customRequestHeaders.Culture);
                httpRequest.Headers.Add("x-ms-client-request-id", customRequestHeaders.ClientRequestId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProtectedItemListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProtectedItemListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProtectedItemResourceList itemListInstance = new ProtectedItemResourceList();
                            result.ItemList = itemListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProtectedItemResource protectedItemResourceInstance = new ProtectedItemResource();
                                    itemListInstance.Value.Add(protectedItemResourceInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["protectedItemType"]);
                                        if (typeName == "ProtectedItem")
                                        {
                                            ProtectedItem protectedItemInstance = new ProtectedItem();
                                            
                                            JToken backupManagementTypeValue = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue != null && backupManagementTypeValue.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance = ((string)backupManagementTypeValue);
                                                protectedItemInstance.BackupManagementType = backupManagementTypeInstance;
                                            }
                                            
                                            JToken workloadTypeValue = propertiesValue["workloadType"];
                                            if (workloadTypeValue != null && workloadTypeValue.Type != JTokenType.Null)
                                            {
                                                string workloadTypeInstance = ((string)workloadTypeValue);
                                                protectedItemInstance.WorkloadType = workloadTypeInstance;
                                            }
                                            
                                            JToken lastRecoveryPointValue = propertiesValue["lastRecoveryPoint"];
                                            if (lastRecoveryPointValue != null && lastRecoveryPointValue.Type != JTokenType.Null)
                                            {
                                                DateTime lastRecoveryPointInstance = ((DateTime)lastRecoveryPointValue);
                                                protectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance;
                                            }
                                            
                                            JToken policyIdValue = propertiesValue["policyId"];
                                            if (policyIdValue != null && policyIdValue.Type != JTokenType.Null)
                                            {
                                                string policyIdInstance = ((string)policyIdValue);
                                                protectedItemInstance.PolicyId = policyIdInstance;
                                            }
                                            
                                            JToken sourceResourceIdValue = propertiesValue["sourceResourceId"];
                                            if (sourceResourceIdValue != null && sourceResourceIdValue.Type != JTokenType.Null)
                                            {
                                                string sourceResourceIdInstance = ((string)sourceResourceIdValue);
                                                protectedItemInstance.SourceResourceId = sourceResourceIdInstance;
                                            }
                                            protectedItemResourceInstance.Properties = protectedItemInstance;
                                        }
                                        if (typeName == "AzureIaaSVMProtectedItem")
                                        {
                                            AzureIaaSVMProtectedItem azureIaaSVMProtectedItemInstance = new AzureIaaSVMProtectedItem();
                                            
                                            JToken virtualMachineIdValue = propertiesValue["virtualMachineId"];
                                            if (virtualMachineIdValue != null && virtualMachineIdValue.Type != JTokenType.Null)
                                            {
                                                string virtualMachineIdInstance = ((string)virtualMachineIdValue);
                                                azureIaaSVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance;
                                            }
                                            
                                            JToken friendlyNameValue = propertiesValue["friendlyName"];
                                            if (friendlyNameValue != null && friendlyNameValue.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance = ((string)friendlyNameValue);
                                                azureIaaSVMProtectedItemInstance.FriendlyName = friendlyNameInstance;
                                            }
                                            
                                            JToken protectionStatusValue = propertiesValue["protectionStatus"];
                                            if (protectionStatusValue != null && protectionStatusValue.Type != JTokenType.Null)
                                            {
                                                string protectionStatusInstance = ((string)protectionStatusValue);
                                                azureIaaSVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance;
                                            }
                                            
                                            JToken protectionStateValue = propertiesValue["protectionState"];
                                            if (protectionStateValue != null && protectionStateValue.Type != JTokenType.Null)
                                            {
                                                string protectionStateInstance = ((string)protectionStateValue);
                                                azureIaaSVMProtectedItemInstance.ProtectionState = protectionStateInstance;
                                            }
                                            
                                            JToken lastBackupStatusValue = propertiesValue["lastBackupStatus"];
                                            if (lastBackupStatusValue != null && lastBackupStatusValue.Type != JTokenType.Null)
                                            {
                                                string lastBackupStatusInstance = ((string)lastBackupStatusValue);
                                                azureIaaSVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance;
                                            }
                                            
                                            JToken lastBackupTimeValue = propertiesValue["lastBackupTime"];
                                            if (lastBackupTimeValue != null && lastBackupTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime lastBackupTimeInstance = ((DateTime)lastBackupTimeValue);
                                                azureIaaSVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance;
                                            }
                                            
                                            JToken extendedInfoValue = propertiesValue["extendedInfo"];
                                            if (extendedInfoValue != null && extendedInfoValue.Type != JTokenType.Null)
                                            {
                                                AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance = new AzureIaaSVMProtectedItemExtendedInfo();
                                                azureIaaSVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance;
                                                
                                                JToken oldestRecoveryPointValue = extendedInfoValue["oldestRecoveryPoint"];
                                                if (oldestRecoveryPointValue != null && oldestRecoveryPointValue.Type != JTokenType.Null)
                                                {
                                                    DateTime oldestRecoveryPointInstance = ((DateTime)oldestRecoveryPointValue);
                                                    extendedInfoInstance.OldestRecoveryPoint = oldestRecoveryPointInstance;
                                                }
                                                
                                                JToken recoveryPointCountValue = extendedInfoValue["recoveryPointCount"];
                                                if (recoveryPointCountValue != null && recoveryPointCountValue.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointCountInstance = ((int)recoveryPointCountValue);
                                                    extendedInfoInstance.RecoveryPointCount = recoveryPointCountInstance;
                                                }
                                                
                                                JToken policyInconsistentValue = extendedInfoValue["policyInconsistent"];
                                                if (policyInconsistentValue != null && policyInconsistentValue.Type != JTokenType.Null)
                                                {
                                                    bool policyInconsistentInstance = ((bool)policyInconsistentValue);
                                                    extendedInfoInstance.PolicyInconsistent = policyInconsistentInstance;
                                                }
                                            }
                                            
                                            JToken backupManagementTypeValue2 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue2 != null && backupManagementTypeValue2.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance2 = ((string)backupManagementTypeValue2);
                                                azureIaaSVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance2;
                                            }
                                            
                                            JToken workloadTypeValue2 = propertiesValue["workloadType"];
                                            if (workloadTypeValue2 != null && workloadTypeValue2.Type != JTokenType.Null)
                                            {
                                                string workloadTypeInstance2 = ((string)workloadTypeValue2);
                                                azureIaaSVMProtectedItemInstance.WorkloadType = workloadTypeInstance2;
                                            }
                                            
                                            JToken lastRecoveryPointValue2 = propertiesValue["lastRecoveryPoint"];
                                            if (lastRecoveryPointValue2 != null && lastRecoveryPointValue2.Type != JTokenType.Null)
                                            {
                                                DateTime lastRecoveryPointInstance2 = ((DateTime)lastRecoveryPointValue2);
                                                azureIaaSVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance2;
                                            }
                                            
                                            JToken policyIdValue2 = propertiesValue["policyId"];
                                            if (policyIdValue2 != null && policyIdValue2.Type != JTokenType.Null)
                                            {
                                                string policyIdInstance2 = ((string)policyIdValue2);
                                                azureIaaSVMProtectedItemInstance.PolicyId = policyIdInstance2;
                                            }
                                            
                                            JToken sourceResourceIdValue2 = propertiesValue["sourceResourceId"];
                                            if (sourceResourceIdValue2 != null && sourceResourceIdValue2.Type != JTokenType.Null)
                                            {
                                                string sourceResourceIdInstance2 = ((string)sourceResourceIdValue2);
                                                azureIaaSVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance2;
                                            }
                                            protectedItemResourceInstance.Properties = azureIaaSVMProtectedItemInstance;
                                        }
                                        if (typeName == "Microsoft.Compute/virtualMachines")
                                        {
                                            AzureIaaSComputeVMProtectedItem azureIaaSComputeVMProtectedItemInstance = new AzureIaaSComputeVMProtectedItem();
                                            
                                            JToken virtualMachineIdValue2 = propertiesValue["virtualMachineId"];
                                            if (virtualMachineIdValue2 != null && virtualMachineIdValue2.Type != JTokenType.Null)
                                            {
                                                string virtualMachineIdInstance2 = ((string)virtualMachineIdValue2);
                                                azureIaaSComputeVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance2;
                                            }
                                            
                                            JToken friendlyNameValue2 = propertiesValue["friendlyName"];
                                            if (friendlyNameValue2 != null && friendlyNameValue2.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance2 = ((string)friendlyNameValue2);
                                                azureIaaSComputeVMProtectedItemInstance.FriendlyName = friendlyNameInstance2;
                                            }
                                            
                                            JToken protectionStatusValue2 = propertiesValue["protectionStatus"];
                                            if (protectionStatusValue2 != null && protectionStatusValue2.Type != JTokenType.Null)
                                            {
                                                string protectionStatusInstance2 = ((string)protectionStatusValue2);
                                                azureIaaSComputeVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance2;
                                            }
                                            
                                            JToken protectionStateValue2 = propertiesValue["protectionState"];
                                            if (protectionStateValue2 != null && protectionStateValue2.Type != JTokenType.Null)
                                            {
                                                string protectionStateInstance2 = ((string)protectionStateValue2);
                                                azureIaaSComputeVMProtectedItemInstance.ProtectionState = protectionStateInstance2;
                                            }
                                            
                                            JToken lastBackupStatusValue2 = propertiesValue["lastBackupStatus"];
                                            if (lastBackupStatusValue2 != null && lastBackupStatusValue2.Type != JTokenType.Null)
                                            {
                                                string lastBackupStatusInstance2 = ((string)lastBackupStatusValue2);
                                                azureIaaSComputeVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance2;
                                            }
                                            
                                            JToken lastBackupTimeValue2 = propertiesValue["lastBackupTime"];
                                            if (lastBackupTimeValue2 != null && lastBackupTimeValue2.Type != JTokenType.Null)
                                            {
                                                DateTime lastBackupTimeInstance2 = ((DateTime)lastBackupTimeValue2);
                                                azureIaaSComputeVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance2;
                                            }
                                            
                                            JToken extendedInfoValue2 = propertiesValue["extendedInfo"];
                                            if (extendedInfoValue2 != null && extendedInfoValue2.Type != JTokenType.Null)
                                            {
                                                AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance2 = new AzureIaaSVMProtectedItemExtendedInfo();
                                                azureIaaSComputeVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance2;
                                                
                                                JToken oldestRecoveryPointValue2 = extendedInfoValue2["oldestRecoveryPoint"];
                                                if (oldestRecoveryPointValue2 != null && oldestRecoveryPointValue2.Type != JTokenType.Null)
                                                {
                                                    DateTime oldestRecoveryPointInstance2 = ((DateTime)oldestRecoveryPointValue2);
                                                    extendedInfoInstance2.OldestRecoveryPoint = oldestRecoveryPointInstance2;
                                                }
                                                
                                                JToken recoveryPointCountValue2 = extendedInfoValue2["recoveryPointCount"];
                                                if (recoveryPointCountValue2 != null && recoveryPointCountValue2.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointCountInstance2 = ((int)recoveryPointCountValue2);
                                                    extendedInfoInstance2.RecoveryPointCount = recoveryPointCountInstance2;
                                                }
                                                
                                                JToken policyInconsistentValue2 = extendedInfoValue2["policyInconsistent"];
                                                if (policyInconsistentValue2 != null && policyInconsistentValue2.Type != JTokenType.Null)
                                                {
                                                    bool policyInconsistentInstance2 = ((bool)policyInconsistentValue2);
                                                    extendedInfoInstance2.PolicyInconsistent = policyInconsistentInstance2;
                                                }
                                            }
                                            
                                            JToken backupManagementTypeValue3 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue3 != null && backupManagementTypeValue3.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance3 = ((string)backupManagementTypeValue3);
                                                azureIaaSComputeVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance3;
                                            }
                                            
                                            JToken workloadTypeValue3 = propertiesValue["workloadType"];
                                            if (workloadTypeValue3 != null && workloadTypeValue3.Type != JTokenType.Null)
                                            {
                                                string workloadTypeInstance3 = ((string)workloadTypeValue3);
                                                azureIaaSComputeVMProtectedItemInstance.WorkloadType = workloadTypeInstance3;
                                            }
                                            
                                            JToken lastRecoveryPointValue3 = propertiesValue["lastRecoveryPoint"];
                                            if (lastRecoveryPointValue3 != null && lastRecoveryPointValue3.Type != JTokenType.Null)
                                            {
                                                DateTime lastRecoveryPointInstance3 = ((DateTime)lastRecoveryPointValue3);
                                                azureIaaSComputeVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance3;
                                            }
                                            
                                            JToken policyIdValue3 = propertiesValue["policyId"];
                                            if (policyIdValue3 != null && policyIdValue3.Type != JTokenType.Null)
                                            {
                                                string policyIdInstance3 = ((string)policyIdValue3);
                                                azureIaaSComputeVMProtectedItemInstance.PolicyId = policyIdInstance3;
                                            }
                                            
                                            JToken sourceResourceIdValue3 = propertiesValue["sourceResourceId"];
                                            if (sourceResourceIdValue3 != null && sourceResourceIdValue3.Type != JTokenType.Null)
                                            {
                                                string sourceResourceIdInstance3 = ((string)sourceResourceIdValue3);
                                                azureIaaSComputeVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance3;
                                            }
                                            protectedItemResourceInstance.Properties = azureIaaSComputeVMProtectedItemInstance;
                                        }
                                        if (typeName == "Microsoft.ClassicCompute/virtualMachines")
                                        {
                                            AzureIaaSClassicComputeVMProtectedItem azureIaaSClassicComputeVMProtectedItemInstance = new AzureIaaSClassicComputeVMProtectedItem();
                                            
                                            JToken virtualMachineIdValue3 = propertiesValue["virtualMachineId"];
                                            if (virtualMachineIdValue3 != null && virtualMachineIdValue3.Type != JTokenType.Null)
                                            {
                                                string virtualMachineIdInstance3 = ((string)virtualMachineIdValue3);
                                                azureIaaSClassicComputeVMProtectedItemInstance.VirtualMachineId = virtualMachineIdInstance3;
                                            }
                                            
                                            JToken friendlyNameValue3 = propertiesValue["friendlyName"];
                                            if (friendlyNameValue3 != null && friendlyNameValue3.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance3 = ((string)friendlyNameValue3);
                                                azureIaaSClassicComputeVMProtectedItemInstance.FriendlyName = friendlyNameInstance3;
                                            }
                                            
                                            JToken protectionStatusValue3 = propertiesValue["protectionStatus"];
                                            if (protectionStatusValue3 != null && protectionStatusValue3.Type != JTokenType.Null)
                                            {
                                                string protectionStatusInstance3 = ((string)protectionStatusValue3);
                                                azureIaaSClassicComputeVMProtectedItemInstance.ProtectionStatus = protectionStatusInstance3;
                                            }
                                            
                                            JToken protectionStateValue3 = propertiesValue["protectionState"];
                                            if (protectionStateValue3 != null && protectionStateValue3.Type != JTokenType.Null)
                                            {
                                                string protectionStateInstance3 = ((string)protectionStateValue3);
                                                azureIaaSClassicComputeVMProtectedItemInstance.ProtectionState = protectionStateInstance3;
                                            }
                                            
                                            JToken lastBackupStatusValue3 = propertiesValue["lastBackupStatus"];
                                            if (lastBackupStatusValue3 != null && lastBackupStatusValue3.Type != JTokenType.Null)
                                            {
                                                string lastBackupStatusInstance3 = ((string)lastBackupStatusValue3);
                                                azureIaaSClassicComputeVMProtectedItemInstance.LastBackupStatus = lastBackupStatusInstance3;
                                            }
                                            
                                            JToken lastBackupTimeValue3 = propertiesValue["lastBackupTime"];
                                            if (lastBackupTimeValue3 != null && lastBackupTimeValue3.Type != JTokenType.Null)
                                            {
                                                DateTime lastBackupTimeInstance3 = ((DateTime)lastBackupTimeValue3);
                                                azureIaaSClassicComputeVMProtectedItemInstance.LastBackupTime = lastBackupTimeInstance3;
                                            }
                                            
                                            JToken extendedInfoValue3 = propertiesValue["extendedInfo"];
                                            if (extendedInfoValue3 != null && extendedInfoValue3.Type != JTokenType.Null)
                                            {
                                                AzureIaaSVMProtectedItemExtendedInfo extendedInfoInstance3 = new AzureIaaSVMProtectedItemExtendedInfo();
                                                azureIaaSClassicComputeVMProtectedItemInstance.ExtendedInfo = extendedInfoInstance3;
                                                
                                                JToken oldestRecoveryPointValue3 = extendedInfoValue3["oldestRecoveryPoint"];
                                                if (oldestRecoveryPointValue3 != null && oldestRecoveryPointValue3.Type != JTokenType.Null)
                                                {
                                                    DateTime oldestRecoveryPointInstance3 = ((DateTime)oldestRecoveryPointValue3);
                                                    extendedInfoInstance3.OldestRecoveryPoint = oldestRecoveryPointInstance3;
                                                }
                                                
                                                JToken recoveryPointCountValue3 = extendedInfoValue3["recoveryPointCount"];
                                                if (recoveryPointCountValue3 != null && recoveryPointCountValue3.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointCountInstance3 = ((int)recoveryPointCountValue3);
                                                    extendedInfoInstance3.RecoveryPointCount = recoveryPointCountInstance3;
                                                }
                                                
                                                JToken policyInconsistentValue3 = extendedInfoValue3["policyInconsistent"];
                                                if (policyInconsistentValue3 != null && policyInconsistentValue3.Type != JTokenType.Null)
                                                {
                                                    bool policyInconsistentInstance3 = ((bool)policyInconsistentValue3);
                                                    extendedInfoInstance3.PolicyInconsistent = policyInconsistentInstance3;
                                                }
                                            }
                                            
                                            JToken backupManagementTypeValue4 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue4 != null && backupManagementTypeValue4.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance4 = ((string)backupManagementTypeValue4);
                                                azureIaaSClassicComputeVMProtectedItemInstance.BackupManagementType = backupManagementTypeInstance4;
                                            }
                                            
                                            JToken workloadTypeValue4 = propertiesValue["workloadType"];
                                            if (workloadTypeValue4 != null && workloadTypeValue4.Type != JTokenType.Null)
                                            {
                                                string workloadTypeInstance4 = ((string)workloadTypeValue4);
                                                azureIaaSClassicComputeVMProtectedItemInstance.WorkloadType = workloadTypeInstance4;
                                            }
                                            
                                            JToken lastRecoveryPointValue4 = propertiesValue["lastRecoveryPoint"];
                                            if (lastRecoveryPointValue4 != null && lastRecoveryPointValue4.Type != JTokenType.Null)
                                            {
                                                DateTime lastRecoveryPointInstance4 = ((DateTime)lastRecoveryPointValue4);
                                                azureIaaSClassicComputeVMProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance4;
                                            }
                                            
                                            JToken policyIdValue4 = propertiesValue["policyId"];
                                            if (policyIdValue4 != null && policyIdValue4.Type != JTokenType.Null)
                                            {
                                                string policyIdInstance4 = ((string)policyIdValue4);
                                                azureIaaSClassicComputeVMProtectedItemInstance.PolicyId = policyIdInstance4;
                                            }
                                            
                                            JToken sourceResourceIdValue4 = propertiesValue["sourceResourceId"];
                                            if (sourceResourceIdValue4 != null && sourceResourceIdValue4.Type != JTokenType.Null)
                                            {
                                                string sourceResourceIdInstance4 = ((string)sourceResourceIdValue4);
                                                azureIaaSClassicComputeVMProtectedItemInstance.SourceResourceId = sourceResourceIdInstance4;
                                            }
                                            protectedItemResourceInstance.Properties = azureIaaSClassicComputeVMProtectedItemInstance;
                                        }
                                        if (typeName == "MabFileFolderProtectedItem")
                                        {
                                            MabFileFolderProtectedItem mabFileFolderProtectedItemInstance = new MabFileFolderProtectedItem();
                                            
                                            JToken friendlyNameValue4 = propertiesValue["friendlyName"];
                                            if (friendlyNameValue4 != null && friendlyNameValue4.Type != JTokenType.Null)
                                            {
                                                string friendlyNameInstance4 = ((string)friendlyNameValue4);
                                                mabFileFolderProtectedItemInstance.FriendlyName = friendlyNameInstance4;
                                            }
                                            
                                            JToken computerNameValue = propertiesValue["computerName"];
                                            if (computerNameValue != null && computerNameValue.Type != JTokenType.Null)
                                            {
                                                string computerNameInstance = ((string)computerNameValue);
                                                mabFileFolderProtectedItemInstance.ComputerName = computerNameInstance;
                                            }
                                            
                                            JToken extendedInfoValue4 = propertiesValue["extendedInfo"];
                                            if (extendedInfoValue4 != null && extendedInfoValue4.Type != JTokenType.Null)
                                            {
                                                MabFileFolderProtectedItemExtendedInfo extendedInfoInstance4 = new MabFileFolderProtectedItemExtendedInfo();
                                                mabFileFolderProtectedItemInstance.ExtendedInfo = extendedInfoInstance4;
                                                
                                                JToken oldestRecoveryPointValue4 = extendedInfoValue4["oldestRecoveryPoint"];
                                                if (oldestRecoveryPointValue4 != null && oldestRecoveryPointValue4.Type != JTokenType.Null)
                                                {
                                                    DateTime oldestRecoveryPointInstance4 = ((DateTime)oldestRecoveryPointValue4);
                                                    extendedInfoInstance4.OldestRecoveryPoint = oldestRecoveryPointInstance4;
                                                }
                                                
                                                JToken recoveryPointCountValue4 = extendedInfoValue4["recoveryPointCount"];
                                                if (recoveryPointCountValue4 != null && recoveryPointCountValue4.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointCountInstance4 = ((int)recoveryPointCountValue4);
                                                    extendedInfoInstance4.RecoveryPointCount = recoveryPointCountInstance4;
                                                }
                                            }
                                            
                                            JToken backupManagementTypeValue5 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue5 != null && backupManagementTypeValue5.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance5 = ((string)backupManagementTypeValue5);
                                                mabFileFolderProtectedItemInstance.BackupManagementType = backupManagementTypeInstance5;
                                            }
                                            
                                            JToken workloadTypeValue5 = propertiesValue["workloadType"];
                                            if (workloadTypeValue5 != null && workloadTypeValue5.Type != JTokenType.Null)
                                            {
                                                string workloadTypeInstance5 = ((string)workloadTypeValue5);
                                                mabFileFolderProtectedItemInstance.WorkloadType = workloadTypeInstance5;
                                            }
                                            
                                            JToken lastRecoveryPointValue5 = propertiesValue["lastRecoveryPoint"];
                                            if (lastRecoveryPointValue5 != null && lastRecoveryPointValue5.Type != JTokenType.Null)
                                            {
                                                DateTime lastRecoveryPointInstance5 = ((DateTime)lastRecoveryPointValue5);
                                                mabFileFolderProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance5;
                                            }
                                            
                                            JToken policyIdValue5 = propertiesValue["policyId"];
                                            if (policyIdValue5 != null && policyIdValue5.Type != JTokenType.Null)
                                            {
                                                string policyIdInstance5 = ((string)policyIdValue5);
                                                mabFileFolderProtectedItemInstance.PolicyId = policyIdInstance5;
                                            }
                                            
                                            JToken sourceResourceIdValue5 = propertiesValue["sourceResourceId"];
                                            if (sourceResourceIdValue5 != null && sourceResourceIdValue5.Type != JTokenType.Null)
                                            {
                                                string sourceResourceIdInstance5 = ((string)sourceResourceIdValue5);
                                                mabFileFolderProtectedItemInstance.SourceResourceId = sourceResourceIdInstance5;
                                            }
                                            protectedItemResourceInstance.Properties = mabFileFolderProtectedItemInstance;
                                        }
                                        if (typeName == "Microsoft.Sql/servers/databases")
                                        {
                                            AzureSqlProtectedItem azureSqlProtectedItemInstance = new AzureSqlProtectedItem();
                                            
                                            JToken protectedItemDataIdValue = propertiesValue["protectedItemDataId"];
                                            if (protectedItemDataIdValue != null && protectedItemDataIdValue.Type != JTokenType.Null)
                                            {
                                                string protectedItemDataIdInstance = ((string)protectedItemDataIdValue);
                                                azureSqlProtectedItemInstance.ProtectedItemDataId = protectedItemDataIdInstance;
                                            }
                                            
                                            JToken protectionStateValue4 = propertiesValue["protectionState"];
                                            if (protectionStateValue4 != null && protectionStateValue4.Type != JTokenType.Null)
                                            {
                                                string protectionStateInstance4 = ((string)protectionStateValue4);
                                                azureSqlProtectedItemInstance.ProtectionState = protectionStateInstance4;
                                            }
                                            
                                            JToken extendedInfoValue5 = propertiesValue["extendedInfo"];
                                            if (extendedInfoValue5 != null && extendedInfoValue5.Type != JTokenType.Null)
                                            {
                                                AzureSqlProtectedItemExtendedInfo extendedInfoInstance5 = new AzureSqlProtectedItemExtendedInfo();
                                                azureSqlProtectedItemInstance.ExtendedInfo = extendedInfoInstance5;
                                                
                                                JToken oldestRecoveryPointValue5 = extendedInfoValue5["oldestRecoveryPoint"];
                                                if (oldestRecoveryPointValue5 != null && oldestRecoveryPointValue5.Type != JTokenType.Null)
                                                {
                                                    DateTime oldestRecoveryPointInstance5 = ((DateTime)oldestRecoveryPointValue5);
                                                    extendedInfoInstance5.OldestRecoveryPoint = oldestRecoveryPointInstance5;
                                                }
                                                
                                                JToken recoveryPointCountValue5 = extendedInfoValue5["recoveryPointCount"];
                                                if (recoveryPointCountValue5 != null && recoveryPointCountValue5.Type != JTokenType.Null)
                                                {
                                                    int recoveryPointCountInstance5 = ((int)recoveryPointCountValue5);
                                                    extendedInfoInstance5.RecoveryPointCount = recoveryPointCountInstance5;
                                                }
                                                
                                                JToken policyStateValue = extendedInfoValue5["policyState"];
                                                if (policyStateValue != null && policyStateValue.Type != JTokenType.Null)
                                                {
                                                    string policyStateInstance = ((string)policyStateValue);
                                                    extendedInfoInstance5.PolicyState = policyStateInstance;
                                                }
                                            }
                                            
                                            JToken backupManagementTypeValue6 = propertiesValue["backupManagementType"];
                                            if (backupManagementTypeValue6 != null && backupManagementTypeValue6.Type != JTokenType.Null)
                                            {
                                                string backupManagementTypeInstance6 = ((string)backupManagementTypeValue6);
                                                azureSqlProtectedItemInstance.BackupManagementType = backupManagementTypeInstance6;
                                            }
                                            
                                            JToken workloadTypeValue6 = propertiesValue["workloadType"];
                                            if (workloadTypeValue6 != null && workloadTypeValue6.Type != JTokenType.Null)
                                            {
                                                string workloadTypeInstance6 = ((string)workloadTypeValue6);
                                                azureSqlProtectedItemInstance.WorkloadType = workloadTypeInstance6;
                                            }
                                            
                                            JToken lastRecoveryPointValue6 = propertiesValue["lastRecoveryPoint"];
                                            if (lastRecoveryPointValue6 != null && lastRecoveryPointValue6.Type != JTokenType.Null)
                                            {
                                                DateTime lastRecoveryPointInstance6 = ((DateTime)lastRecoveryPointValue6);
                                                azureSqlProtectedItemInstance.LastRecoveryPoint = lastRecoveryPointInstance6;
                                            }
                                            
                                            JToken policyIdValue6 = propertiesValue["policyId"];
                                            if (policyIdValue6 != null && policyIdValue6.Type != JTokenType.Null)
                                            {
                                                string policyIdInstance6 = ((string)policyIdValue6);
                                                azureSqlProtectedItemInstance.PolicyId = policyIdInstance6;
                                            }
                                            
                                            JToken sourceResourceIdValue6 = propertiesValue["sourceResourceId"];
                                            if (sourceResourceIdValue6 != null && sourceResourceIdValue6.Type != JTokenType.Null)
                                            {
                                                string sourceResourceIdInstance6 = ((string)sourceResourceIdValue6);
                                                azureSqlProtectedItemInstance.SourceResourceId = sourceResourceIdInstance6;
                                            }
                                            protectedItemResourceInstance.Properties = azureSqlProtectedItemInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        protectedItemResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        protectedItemResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        protectedItemResourceInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        protectedItemResourceInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            protectedItemResourceInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken eTagValue = valueValue["eTag"];
                                    if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                                    {
                                        string eTagInstance = ((string)eTagValue);
                                        protectedItemResourceInstance.ETag = eTagInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                itemListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
