// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ResourceManager
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for AppliancesOperations.
    /// </summary>
    public static partial class AppliancesOperationsExtensions
    {
            /// <summary>
            /// Gets the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            public static Appliance Get(this IAppliancesOperations operations, string resourceGroupName, string applianceName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).GetAsync(resourceGroupName, applianceName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Appliance> GetAsync(this IAppliancesOperations operations, string resourceGroupName, string applianceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, applianceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            public static void Delete(this IAppliancesOperations operations, string resourceGroupName, string applianceName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).DeleteAsync(resourceGroupName, applianceName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IAppliancesOperations operations, string resourceGroupName, string applianceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, applianceName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance.
            /// </param>
            public static Appliance CreateOrUpdate(this IAppliancesOperations operations, string resourceGroupName, string applianceName, Appliance parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).CreateOrUpdateAsync(resourceGroupName, applianceName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Appliance> CreateOrUpdateAsync(this IAppliancesOperations operations, string resourceGroupName, string applianceName, Appliance parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, applianceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing appliance. The only value that can be updated via
            /// PATCH currently is the tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update an existing appliance.
            /// </param>
            public static Appliance Update(this IAppliancesOperations operations, string resourceGroupName, string applianceName, Appliance parameters = default(Appliance))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).UpdateAsync(resourceGroupName, applianceName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing appliance. The only value that can be updated via
            /// PATCH currently is the tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update an existing appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Appliance> UpdateAsync(this IAppliancesOperations operations, string resourceGroupName, string applianceName, Appliance parameters = default(Appliance), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, applianceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the appliances within a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<Appliance> ListByResourceGroup(this IAppliancesOperations operations, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).ListByResourceGroupAsync(resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the appliances within a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<Appliance>> ListByResourceGroupAsync(this IAppliancesOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the appliances within a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<Appliance> ListBySubscription(this IAppliancesOperations operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).ListBySubscriptionAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the appliances within a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<Appliance>> ListBySubscriptionAsync(this IAppliancesOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            public static Appliance GetById(this IAppliancesOperations operations, string applianceId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).GetByIdAsync(applianceId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Appliance> GetByIdAsync(this IAppliancesOperations operations, string applianceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(applianceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            public static void DeleteById(this IAppliancesOperations operations, string applianceId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).DeleteByIdAsync(applianceId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteByIdAsync(this IAppliancesOperations operations, string applianceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteByIdWithHttpMessagesAsync(applianceId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance.
            /// </param>
            public static Appliance CreateOrUpdateById(this IAppliancesOperations operations, string applianceId, Appliance parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).CreateOrUpdateByIdAsync(applianceId, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Appliance> CreateOrUpdateByIdAsync(this IAppliancesOperations operations, string applianceId, Appliance parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateByIdWithHttpMessagesAsync(applianceId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing appliance. The only value that can be updated via
            /// PATCH currently is the tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update an existing appliance.
            /// </param>
            public static Appliance UpdateById(this IAppliancesOperations operations, string applianceId, Appliance parameters = default(Appliance))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).UpdateByIdAsync(applianceId, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing appliance. The only value that can be updated via
            /// PATCH currently is the tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to update an existing appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Appliance> UpdateByIdAsync(this IAppliancesOperations operations, string applianceId, Appliance parameters = default(Appliance), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateByIdWithHttpMessagesAsync(applianceId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            public static void BeginDelete(this IAppliancesOperations operations, string resourceGroupName, string applianceName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).BeginDeleteAsync(resourceGroupName, applianceName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeleteAsync(this IAppliancesOperations operations, string resourceGroupName, string applianceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, applianceName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance.
            /// </param>
            public static Appliance BeginCreateOrUpdate(this IAppliancesOperations operations, string resourceGroupName, string applianceName, Appliance parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, applianceName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group. The name is case insensitive.
            /// </param>
            /// <param name='applianceName'>
            /// The name of the appliance.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Appliance> BeginCreateOrUpdateAsync(this IAppliancesOperations operations, string resourceGroupName, string applianceName, Appliance parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, applianceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            public static void BeginDeleteById(this IAppliancesOperations operations, string applianceId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).BeginDeleteByIdAsync(applianceId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeleteByIdAsync(this IAppliancesOperations operations, string applianceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginDeleteByIdWithHttpMessagesAsync(applianceId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance.
            /// </param>
            public static Appliance BeginCreateOrUpdateById(this IAppliancesOperations operations, string applianceId, Appliance parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).BeginCreateOrUpdateByIdAsync(applianceId, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new appliance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='applianceId'>
            /// The fully qualified ID of the appliance, including the appliance name and
            /// the appliance resource type. Use the format,
            /// /subscriptions/{guid}/resourceGroups/{resource-group-name}/Microsoft.Solutions/appliances/{appliance-name}
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create or update an appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<Appliance> BeginCreateOrUpdateByIdAsync(this IAppliancesOperations operations, string applianceId, Appliance parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateByIdWithHttpMessagesAsync(applianceId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the appliances within a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<Appliance> ListByResourceGroupNext(this IAppliancesOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the appliances within a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<Appliance>> ListByResourceGroupNextAsync(this IAppliancesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the appliances within a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<Appliance> ListBySubscriptionNext(this IAppliancesOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppliancesOperations)s).ListBySubscriptionNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the appliances within a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<Appliance>> ListBySubscriptionNextAsync(this IAppliancesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
