// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using System.Linq;

    /// <summary>
    /// Information about appliance.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AppliancePatchable : GenericResource
    {
        /// <summary>
        /// Initializes a new instance of the AppliancePatchable class.
        /// </summary>
        public AppliancePatchable() { }

        /// <summary>
        /// Initializes a new instance of the AppliancePatchable class.
        /// </summary>
        /// <param name="id">Resource ID</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="managedBy">ID of the resource that manages this
        /// resource.</param>
        /// <param name="sku">The SKU of the resource.</param>
        /// <param name="identity">The identity of the resource.</param>
        /// <param name="managedResourceGroupId">The managed resource group
        /// Id.</param>
        /// <param name="applianceDefinitionId">The fully qualified path of
        /// appliance definition Id.</param>
        /// <param name="parameters">Name and value pairs that define the
        /// appliance parameters. It can be a JObject or a well formed JSON
        /// string.</param>
        /// <param name="outputs">Name and value pairs that define the
        /// appliance outputs.</param>
        /// <param name="provisioningState">The appliance provisioning state.
        /// Possible values include: 'Accepted', 'Running', 'Ready',
        /// 'Creating', 'Created', 'Deleting', 'Deleted', 'Canceled',
        /// 'Failed', 'Succeeded', 'Updating'</param>
        /// <param name="uiDefinitionUri">The blob URI where the UI definition
        /// file is located.</param>
        /// <param name="plan">The plan information.</param>
        /// <param name="kind">The kind of the appliance. Allowed values are
        /// MarketPlace and ServiceCatalog.</param>
        public AppliancePatchable(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string managedBy = default(string), Sku sku = default(Sku), Identity identity = default(Identity), string managedResourceGroupId = default(string), string applianceDefinitionId = default(string), object parameters = default(object), object outputs = default(object), string provisioningState = default(string), string uiDefinitionUri = default(string), PlanPatchable plan = default(PlanPatchable), string kind = default(string))
            : base(id, name, type, location, tags, managedBy, sku, identity)
        {
            ManagedResourceGroupId = managedResourceGroupId;
            ApplianceDefinitionId = applianceDefinitionId;
            Parameters = parameters;
            Outputs = outputs;
            ProvisioningState = provisioningState;
            UiDefinitionUri = uiDefinitionUri;
            Plan = plan;
            Kind = kind;
        }

        /// <summary>
        /// Gets or sets the managed resource group Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managedResourceGroupId")]
        public string ManagedResourceGroupId { get; set; }

        /// <summary>
        /// Gets or sets the fully qualified path of appliance definition Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.applianceDefinitionId")]
        public string ApplianceDefinitionId { get; set; }

        /// <summary>
        /// Gets or sets name and value pairs that define the appliance
        /// parameters. It can be a JObject or a well formed JSON string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.parameters")]
        public object Parameters { get; set; }

        /// <summary>
        /// Gets name and value pairs that define the appliance outputs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outputs")]
        public object Outputs { get; private set; }

        /// <summary>
        /// Gets the appliance provisioning state. Possible values include:
        /// 'Accepted', 'Running', 'Ready', 'Creating', 'Created',
        /// 'Deleting', 'Deleted', 'Canceled', 'Failed', 'Succeeded',
        /// 'Updating'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the blob URI where the UI definition file is located.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.uiDefinitionUri")]
        public string UiDefinitionUri { get; set; }

        /// <summary>
        /// Gets or sets the plan information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "plan")]
        public PlanPatchable Plan { get; set; }

        /// <summary>
        /// Gets or sets the kind of the appliance. Allowed values are
        /// MarketPlace and ServiceCatalog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Kind != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Kind, "^[-\\w\\._,\\(\\)]+$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "Kind", "^[-\\w\\._,\\(\\)]+$");
                }
            }
        }
    }
}
