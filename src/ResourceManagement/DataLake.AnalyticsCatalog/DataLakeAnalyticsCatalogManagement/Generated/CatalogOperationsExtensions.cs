// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.DataLake.AnalyticsCatalog;
using Microsoft.Azure.Management.DataLake.AnalyticsCatalog.Models;

namespace Microsoft.Azure.Management.DataLake.AnalyticsCatalog
{
    /// <summary>
    /// Creates an Azure Data Lake Analytics catalog management client.
    /// </summary>
    public static partial class CatalogOperationsExtensions
    {
        /// <summary>
        /// Creates the specified secret for use with external data sources in
        /// the specified database
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to create the secret in.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create the secret (name and
        /// password)
        /// </param>
        /// <returns>
        /// The create secret operation response.
        /// </returns>
        public static CatalogSecretCreateResponse CreateSecret(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).CreateSecretAsync(resourceGroupName, accountName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates the specified secret for use with external data sources in
        /// the specified database
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to create the secret in.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create the secret (name and
        /// password)
        /// </param>
        /// <returns>
        /// The create secret operation response.
        /// </returns>
        public static Task<CatalogSecretCreateResponse> CreateSecretAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
        {
            return operations.CreateSecretAsync(resourceGroupName, accountName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the specified secret in the specified database
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to delete the secret from.
        /// </param>
        /// <param name='secretName'>
        /// Optional. The name of the secret to delete
        /// </param>
        /// <returns>
        /// The create secret operation response.
        /// </returns>
        public static CatalogSecretCreateResponse DeleteSecret(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string secretName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).DeleteSecretAsync(resourceGroupName, accountName, databaseName, secretName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the specified secret in the specified database
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to delete the secret from.
        /// </param>
        /// <param name='secretName'>
        /// Optional. The name of the secret to delete
        /// </param>
        /// <returns>
        /// The create secret operation response.
        /// </returns>
        public static Task<CatalogSecretCreateResponse> DeleteSecretAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string secretName)
        {
            return operations.DeleteSecretAsync(resourceGroupName, accountName, databaseName, secretName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the specified assembly from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the assembly in.
        /// </param>
        /// <param name='assemblyName'>
        /// Required. The name of the assembly to find.
        /// </param>
        /// <returns>
        /// The Get Database operation response.
        /// </returns>
        public static CatalogAssemblyGetResponse GetAssembly(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string assemblyName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetAssemblyAsync(resourceGroupName, accountName, databaseName, assemblyName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the specified assembly from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the assembly in.
        /// </param>
        /// <param name='assemblyName'>
        /// Required. The name of the assembly to find.
        /// </param>
        /// <returns>
        /// The Get Database operation response.
        /// </returns>
        public static Task<CatalogAssemblyGetResponse> GetAssemblyAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string assemblyName)
        {
            return operations.GetAssemblyAsync(resourceGroupName, accountName, databaseName, assemblyName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the specified credential from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <param name='credentialName'>
        /// Required. The name of the credential to find.
        /// </param>
        /// <returns>
        /// The Get credential operation response.
        /// </returns>
        public static CatalogCredentialGetResponse GetCredential(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string credentialName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetCredentialAsync(resourceGroupName, accountName, databaseName, credentialName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the specified credential from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <param name='credentialName'>
        /// Required. The name of the credential to find.
        /// </param>
        /// <returns>
        /// The Get credential operation response.
        /// </returns>
        public static Task<CatalogCredentialGetResponse> GetCredentialAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string credentialName)
        {
            return operations.GetCredentialAsync(resourceGroupName, accountName, databaseName, credentialName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the specified database from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The path to the file to create.
        /// </param>
        /// <returns>
        /// The Get Database operation response.
        /// </returns>
        public static CatalogDatabaseGetResponse GetDatabase(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetDatabaseAsync(resourceGroupName, accountName, databaseName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the specified database from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The path to the file to create.
        /// </param>
        /// <returns>
        /// The Get Database operation response.
        /// </returns>
        public static Task<CatalogDatabaseGetResponse> GetDatabaseAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
            return operations.GetDatabaseAsync(resourceGroupName, accountName, databaseName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the specified external data source from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the external Data Source
        /// in.
        /// </param>
        /// <param name='externalDataSourceName'>
        /// Required. The name of the external Data Source to find.
        /// </param>
        /// <returns>
        /// The Get external data source operation response.
        /// </returns>
        public static CatalogExternalDataSourceGetResponse GetExternalDataSource(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string externalDataSourceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetExternalDataSourceAsync(resourceGroupName, accountName, databaseName, externalDataSourceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the specified external data source from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the external Data Source
        /// in.
        /// </param>
        /// <param name='externalDataSourceName'>
        /// Required. The name of the external Data Source to find.
        /// </param>
        /// <returns>
        /// The Get external data source operation response.
        /// </returns>
        public static Task<CatalogExternalDataSourceGetResponse> GetExternalDataSourceAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string externalDataSourceName)
        {
            return operations.GetExternalDataSourceAsync(resourceGroupName, accountName, databaseName, externalDataSourceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the specified procedure from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the procedure in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the procedure in.
        /// </param>
        /// <param name='procedureName'>
        /// Required. The name of the procedure to find.
        /// </param>
        /// <returns>
        /// The Get procedure operation response.
        /// </returns>
        public static CatalogProcedureGetResponse GetProcedure(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string procedureName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetProcedureAsync(resourceGroupName, accountName, databaseName, schemaName, procedureName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the specified procedure from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the procedure in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the procedure in.
        /// </param>
        /// <param name='procedureName'>
        /// Required. The name of the procedure to find.
        /// </param>
        /// <returns>
        /// The Get procedure operation response.
        /// </returns>
        public static Task<CatalogProcedureGetResponse> GetProcedureAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string procedureName)
        {
            return operations.GetProcedureAsync(resourceGroupName, accountName, databaseName, schemaName, procedureName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the specified schema from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find.
        /// </param>
        /// <returns>
        /// The Get schema operation response.
        /// </returns>
        public static CatalogSchemaGetResponse GetSchema(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetSchemaAsync(resourceGroupName, accountName, databaseName, schemaName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the specified schema from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find.
        /// </param>
        /// <returns>
        /// The Get schema operation response.
        /// </returns>
        public static Task<CatalogSchemaGetResponse> GetSchemaAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName)
        {
            return operations.GetSchemaAsync(resourceGroupName, accountName, databaseName, schemaName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the specified secret in the specified database
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to get the secret from.
        /// </param>
        /// <param name='secretName'>
        /// Required. The name of the secret to get
        /// </param>
        /// <returns>
        /// The Get secret operation response.
        /// </returns>
        public static CatalogSecretGetResponse GetSecret(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string secretName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetSecretAsync(resourceGroupName, accountName, databaseName, secretName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the specified secret in the specified database
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to get the secret from.
        /// </param>
        /// <param name='secretName'>
        /// Required. The name of the secret to get
        /// </param>
        /// <returns>
        /// The Get secret operation response.
        /// </returns>
        public static Task<CatalogSecretGetResponse> GetSecretAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string secretName)
        {
            return operations.GetSecretAsync(resourceGroupName, accountName, databaseName, secretName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the specified table from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the table in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the table in.
        /// </param>
        /// <param name='tableName'>
        /// Required. The name of the table to find.
        /// </param>
        /// <returns>
        /// The Get table operation response.
        /// </returns>
        public static CatalogTableGetResponse GetTable(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string tableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetTableAsync(resourceGroupName, accountName, databaseName, schemaName, tableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the specified table from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the table in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the table in.
        /// </param>
        /// <param name='tableName'>
        /// Required. The name of the table to find.
        /// </param>
        /// <returns>
        /// The Get table operation response.
        /// </returns>
        public static Task<CatalogTableGetResponse> GetTableAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string tableName)
        {
            return operations.GetTableAsync(resourceGroupName, accountName, databaseName, schemaName, tableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the specified table from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the statistics in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the statistics in.
        /// </param>
        /// <param name='tableName'>
        /// Required. The name of the table to find the statistics in.
        /// </param>
        /// <param name='statisticsName'>
        /// Required. The name of the table statistics to find.
        /// </param>
        /// <returns>
        /// The Get table statistics operation response.
        /// </returns>
        public static CatalogTableStatisticsGetResponse GetTableStatistic(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string tableName, string statisticsName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetTableStatisticAsync(resourceGroupName, accountName, databaseName, schemaName, tableName, statisticsName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the specified table from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the statistics in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the statistics in.
        /// </param>
        /// <param name='tableName'>
        /// Required. The name of the table to find the statistics in.
        /// </param>
        /// <param name='statisticsName'>
        /// Required. The name of the table statistics to find.
        /// </param>
        /// <returns>
        /// The Get table statistics operation response.
        /// </returns>
        public static Task<CatalogTableStatisticsGetResponse> GetTableStatisticAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string tableName, string statisticsName)
        {
            return operations.GetTableStatisticAsync(resourceGroupName, accountName, databaseName, schemaName, tableName, statisticsName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the specified table valued function from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the table valued
        /// function in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the table valued function
        /// in.
        /// </param>
        /// <param name='tableValuedFunctionName'>
        /// Required. The name of the tableValuedFunction to find.
        /// </param>
        /// <returns>
        /// The Get table valued function operation response.
        /// </returns>
        public static CatalogTableValuedFunctionGetResponse GetTableValuedFunction(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string tableValuedFunctionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetTableValuedFunctionAsync(resourceGroupName, accountName, databaseName, schemaName, tableValuedFunctionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the specified table valued function from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the table valued
        /// function in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the table valued function
        /// in.
        /// </param>
        /// <param name='tableValuedFunctionName'>
        /// Required. The name of the tableValuedFunction to find.
        /// </param>
        /// <returns>
        /// The Get table valued function operation response.
        /// </returns>
        public static Task<CatalogTableValuedFunctionGetResponse> GetTableValuedFunctionAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string tableValuedFunctionName)
        {
            return operations.GetTableValuedFunctionAsync(resourceGroupName, accountName, databaseName, schemaName, tableValuedFunctionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the specified view from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the view in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the view in.
        /// </param>
        /// <param name='viewName'>
        /// Required. The name of the view to find.
        /// </param>
        /// <returns>
        /// The Get view operation response.
        /// </returns>
        public static CatalogViewGetResponse GetView(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string viewName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).GetViewAsync(resourceGroupName, accountName, databaseName, schemaName, viewName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the specified view from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the view in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the view in.
        /// </param>
        /// <param name='viewName'>
        /// Required. The name of the view to find.
        /// </param>
        /// <returns>
        /// The Get view operation response.
        /// </returns>
        public static Task<CatalogViewGetResponse> GetViewAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string viewName)
        {
            return operations.GetViewAsync(resourceGroupName, accountName, databaseName, schemaName, viewName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of assemblies from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the assembly in.
        /// </param>
        /// <returns>
        /// The List Database operation response.
        /// </returns>
        public static CatalogAssemblyListGetResponse ListAssemblies(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListAssembliesAsync(resourceGroupName, accountName, databaseName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of assemblies from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the assembly in.
        /// </param>
        /// <returns>
        /// The List Database operation response.
        /// </returns>
        public static Task<CatalogAssemblyListGetResponse> ListAssembliesAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
            return operations.ListAssembliesAsync(resourceGroupName, accountName, databaseName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of credentials from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <returns>
        /// The List schema operation response.
        /// </returns>
        public static CatalogCredentialListResponse ListCredentials(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListCredentialsAsync(resourceGroupName, accountName, databaseName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of credentials from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <returns>
        /// The List schema operation response.
        /// </returns>
        public static Task<CatalogCredentialListResponse> ListCredentialsAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
            return operations.ListCredentialsAsync(resourceGroupName, accountName, databaseName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of databases from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// The List Database operation response.
        /// </returns>
        public static CatalogDatabaseListResponse ListDatabases(this ICatalogOperations operations, string resourceGroupName, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListDatabasesAsync(resourceGroupName, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of databases from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// The List Database operation response.
        /// </returns>
        public static Task<CatalogDatabaseListResponse> ListDatabasesAsync(this ICatalogOperations operations, string resourceGroupName, string accountName)
        {
            return operations.ListDatabasesAsync(resourceGroupName, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of external data sources from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the external Data Source
        /// in.
        /// </param>
        /// <returns>
        /// The List external data source operation response.
        /// </returns>
        public static CatalogExternalDataSourceListResponse ListExternalDataSources(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListExternalDataSourcesAsync(resourceGroupName, accountName, databaseName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of external data sources from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the external Data Source
        /// in.
        /// </param>
        /// <returns>
        /// The List external data source operation response.
        /// </returns>
        public static Task<CatalogExternalDataSourceListResponse> ListExternalDataSourcesAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
            return operations.ListExternalDataSourcesAsync(resourceGroupName, accountName, databaseName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of procedures from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the procedures in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the procedures in.
        /// </param>
        /// <returns>
        /// The List procedures operation response.
        /// </returns>
        public static CatalogProcedureListResponse ListProcedures(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListProceduresAsync(resourceGroupName, accountName, databaseName, schemaName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of procedures from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the procedures in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the procedures in.
        /// </param>
        /// <returns>
        /// The List procedures operation response.
        /// </returns>
        public static Task<CatalogProcedureListResponse> ListProceduresAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName)
        {
            return operations.ListProceduresAsync(resourceGroupName, accountName, databaseName, schemaName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of schemas from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <returns>
        /// The List schema operation response.
        /// </returns>
        public static CatalogSchemaListResponse ListSchemas(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListSchemasAsync(resourceGroupName, accountName, databaseName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of schemas from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <returns>
        /// The List schema operation response.
        /// </returns>
        public static Task<CatalogSchemaListResponse> ListSchemasAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName)
        {
            return operations.ListSchemasAsync(resourceGroupName, accountName, databaseName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of tables from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the tables in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the tables in.
        /// </param>
        /// <returns>
        /// The List tables operation response.
        /// </returns>
        public static CatalogTableListResponse ListTables(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListTablesAsync(resourceGroupName, accountName, databaseName, schemaName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of tables from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the tables in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the tables in.
        /// </param>
        /// <returns>
        /// The List tables operation response.
        /// </returns>
        public static Task<CatalogTableListResponse> ListTablesAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName)
        {
            return operations.ListTablesAsync(resourceGroupName, accountName, databaseName, schemaName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of tables from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the statistics in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the statistics in.
        /// </param>
        /// <param name='tableName'>
        /// Required. The name of the table to find the statistics in.
        /// </param>
        /// <returns>
        /// The List table statistics operation response.
        /// </returns>
        public static CatalogTableStatisticsListResponse ListTableStatistics(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string tableName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListTableStatisticsAsync(resourceGroupName, accountName, databaseName, schemaName, tableName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of tables from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the statistics in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the statistics in.
        /// </param>
        /// <param name='tableName'>
        /// Required. The name of the table to find the statistics in.
        /// </param>
        /// <returns>
        /// The List table statistics operation response.
        /// </returns>
        public static Task<CatalogTableStatisticsListResponse> ListTableStatisticsAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, string tableName)
        {
            return operations.ListTableStatisticsAsync(resourceGroupName, accountName, databaseName, schemaName, tableName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of table valued functions from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the table valued
        /// functions in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the table valued functions
        /// in.
        /// </param>
        /// <returns>
        /// The List table valued functions operation response.
        /// </returns>
        public static CatalogTableValuedFunctionListResponse ListTableValuedFunctions(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListTableValuedFunctionsAsync(resourceGroupName, accountName, databaseName, schemaName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of table valued functions from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the table valued
        /// functions in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the table valued functions
        /// in.
        /// </param>
        /// <returns>
        /// The List table valued functions operation response.
        /// </returns>
        public static Task<CatalogTableValuedFunctionListResponse> ListTableValuedFunctionsAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName)
        {
            return operations.ListTableValuedFunctionsAsync(resourceGroupName, accountName, databaseName, schemaName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of catalog types within the specified database
        /// and schema for the current Data Lake Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the types in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the types in.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all catalog
        /// type items.
        /// </param>
        /// <returns>
        /// The List types operation response.
        /// </returns>
        public static CatalogTypeListResponse ListTypes(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, TypeListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListTypesAsync(resourceGroupName, accountName, databaseName, schemaName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of catalog types within the specified database
        /// and schema for the current Data Lake Analytics catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the types in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the types in.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all catalog
        /// type items.
        /// </param>
        /// <returns>
        /// The List types operation response.
        /// </returns>
        public static Task<CatalogTypeListResponse> ListTypesAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName, TypeListParameters parameters)
        {
            return operations.ListTypesAsync(resourceGroupName, accountName, databaseName, schemaName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieves the list of views from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the views in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the views in.
        /// </param>
        /// <returns>
        /// The List views operation response.
        /// </returns>
        public static CatalogViewListResponse ListViews(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).ListViewsAsync(resourceGroupName, accountName, databaseName, schemaName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieves the list of views from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the views in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the views in.
        /// </param>
        /// <returns>
        /// The List views operation response.
        /// </returns>
        public static Task<CatalogViewListResponse> ListViewsAsync(this ICatalogOperations operations, string resourceGroupName, string accountName, string databaseName, string schemaName)
        {
            return operations.ListViewsAsync(resourceGroupName, accountName, databaseName, schemaName, CancellationToken.None);
        }
        
        /// <summary>
        /// Modifies the specified secret for use with external data sources in
        /// the specified database
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to modify the secret in.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to modify the secret (name and
        /// password)
        /// </param>
        /// <returns>
        /// The create secret operation response.
        /// </returns>
        public static CatalogSecretCreateResponse UpdateSecret(this ICatalogOperations operations, string accountName, string resourceGroupName, string databaseName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICatalogOperations)s).UpdateSecretAsync(accountName, resourceGroupName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Modifies the specified secret for use with external data sources in
        /// the specified database
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.ICatalogOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to modify the secret in.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to modify the secret (name and
        /// password)
        /// </param>
        /// <returns>
        /// The create secret operation response.
        /// </returns>
        public static Task<CatalogSecretCreateResponse> UpdateSecretAsync(this ICatalogOperations operations, string accountName, string resourceGroupName, string databaseName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters)
        {
            return operations.UpdateSecretAsync(accountName, resourceGroupName, databaseName, parameters, CancellationToken.None);
        }
    }
}
