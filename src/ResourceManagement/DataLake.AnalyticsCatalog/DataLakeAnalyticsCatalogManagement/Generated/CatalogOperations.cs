// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.DataLake.AnalyticsCatalog;
using Microsoft.Azure.Management.DataLake.AnalyticsCatalog.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataLake.AnalyticsCatalog
{
    /// <summary>
    /// Operations for managing the Data Lake Analytics catalog
    /// </summary>
    internal partial class CatalogOperations : IServiceOperations<DataLakeAnalyticsCatalogManagementClient>, ICatalogOperations
    {
        /// <summary>
        /// Initializes a new instance of the CatalogOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal CatalogOperations(DataLakeAnalyticsCatalogManagementClient client)
        {
            this._client = client;
        }
        
        private DataLakeAnalyticsCatalogManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsCatalog.DataLakeAnalyticsCatalogManagementClient.
        /// </summary>
        public DataLakeAnalyticsCatalogManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates the specified secret for use with external data sources in
        /// the specified database
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to create the secret in.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create the secret (name and
        /// password)
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create secret operation response.
        /// </returns>
        public async Task<CatalogSecretCreateResponse> CreateSecretAsync(string resourceGroupName, string accountName, string databaseName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Password == null)
            {
                throw new ArgumentNullException("parameters.Password");
            }
            if (parameters.SecretName == null)
            {
                throw new ArgumentNullException("parameters.SecretName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateSecretAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/secrets/";
            url = url + Uri.EscapeDataString(parameters.SecretName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue = new JObject();
                requestDoc = dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue;
                
                dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue["password"] = parameters.Password;
                
                if (parameters.Uri != null)
                {
                    dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue["uri"] = parameters.Uri;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogSecretCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogSecretCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlSecret secretInstance = new USqlSecret();
                            result.Secret = secretInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                secretInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken credentialNameValue = responseDoc["credentialName"];
                            if (credentialNameValue != null && credentialNameValue.Type != JTokenType.Null)
                            {
                                string credentialNameInstance = ((string)credentialNameValue);
                                secretInstance.Name = credentialNameInstance;
                            }
                            
                            JToken userNameValue = responseDoc["userName"];
                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                            {
                                string userNameInstance = ((string)userNameValue);
                                secretInstance.UserName = userNameInstance;
                            }
                            
                            JToken creationTimeValue = responseDoc["creationTime"];
                            if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                secretInstance.CreationTime = creationTimeInstance;
                            }
                            
                            JToken identityValue = responseDoc["identity"];
                            if (identityValue != null && identityValue.Type != JTokenType.Null)
                            {
                                Guid identityInstance = Guid.Parse(((string)identityValue));
                                secretInstance.Identity = identityInstance;
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                secretInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                secretInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes the specified secret in the specified database
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to delete the secret from.
        /// </param>
        /// <param name='secretName'>
        /// Optional. The name of the secret to delete
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create secret operation response.
        /// </returns>
        public async Task<CatalogSecretCreateResponse> DeleteSecretAsync(string resourceGroupName, string accountName, string databaseName, string secretName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("secretName", secretName);
                TracingAdapter.Enter(invocationId, this, "DeleteSecretAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/secrets";
            if (secretName != null)
            {
                url = url + "/" + Uri.EscapeDataString(secretName);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogSecretCreateResponse result = null;
                    // Deserialize Response
                    result = new CatalogSecretCreateResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the specified assembly from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the assembly in.
        /// </param>
        /// <param name='assemblyName'>
        /// Required. The name of the assembly to find.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Database operation response.
        /// </returns>
        public async Task<CatalogAssemblyGetResponse> GetAssemblyAsync(string resourceGroupName, string accountName, string databaseName, string assemblyName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (assemblyName == null)
            {
                throw new ArgumentNullException("assemblyName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("assemblyName", assemblyName);
                TracingAdapter.Enter(invocationId, this, "GetAssemblyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/assemblies/";
            url = url + Uri.EscapeDataString(assemblyName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogAssemblyGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogAssemblyGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlAssembly assemblyInstance = new USqlAssembly();
                            result.Assembly = assemblyInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                assemblyInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken assemblyNameValue = responseDoc["assemblyName"];
                            if (assemblyNameValue != null && assemblyNameValue.Type != JTokenType.Null)
                            {
                                string assemblyNameInstance = ((string)assemblyNameValue);
                                assemblyInstance.Name = assemblyNameInstance;
                            }
                            
                            JToken clrNameValue = responseDoc["clrName"];
                            if (clrNameValue != null && clrNameValue.Type != JTokenType.Null)
                            {
                                string clrNameInstance = ((string)clrNameValue);
                                assemblyInstance.ClrName = clrNameInstance;
                            }
                            
                            JToken isVisibleValue = responseDoc["isVisible"];
                            if (isVisibleValue != null && isVisibleValue.Type != JTokenType.Null)
                            {
                                bool isVisibleInstance = ((bool)isVisibleValue);
                                assemblyInstance.IsVisible = isVisibleInstance;
                            }
                            
                            JToken isUserDefinedValue = responseDoc["isUserDefined"];
                            if (isUserDefinedValue != null && isUserDefinedValue.Type != JTokenType.Null)
                            {
                                bool isUserDefinedInstance = ((bool)isUserDefinedValue);
                                assemblyInstance.IsUserDefined = isUserDefinedInstance;
                            }
                            
                            JToken filesArray = responseDoc["files"];
                            if (filesArray != null && filesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken filesValue in ((JArray)filesArray))
                                {
                                    USqlAssemblyFileInfo uSqlAssemblyFileInfoInstance = new USqlAssemblyFileInfo();
                                    assemblyInstance.Files.Add(uSqlAssemblyFileInfoInstance);
                                    
                                    JToken typeValue = filesValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        FileType typeInstance = DataLakeAnalyticsCatalogManagementClient.ParseFileType(((string)typeValue));
                                        uSqlAssemblyFileInfoInstance.Type = typeInstance;
                                    }
                                    
                                    JToken originalPathValue = filesValue["originalPath"];
                                    if (originalPathValue != null && originalPathValue.Type != JTokenType.Null)
                                    {
                                        string originalPathInstance = ((string)originalPathValue);
                                        uSqlAssemblyFileInfoInstance.OriginalPath = originalPathInstance;
                                    }
                                    
                                    JToken contentPathValue = filesValue["contentPath"];
                                    if (contentPathValue != null && contentPathValue.Type != JTokenType.Null)
                                    {
                                        string contentPathInstance = ((string)contentPathValue);
                                        uSqlAssemblyFileInfoInstance.ContentPath = contentPathInstance;
                                    }
                                }
                            }
                            
                            JToken dependenciesArray = responseDoc["dependencies"];
                            if (dependenciesArray != null && dependenciesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken dependenciesValue in ((JArray)dependenciesArray))
                                {
                                    USqlAssemblyDependencyInfo uSqlAssemblyDependencyInfoInstance = new USqlAssemblyDependencyInfo();
                                    assemblyInstance.Dependencies.Add(uSqlAssemblyDependencyInfoInstance);
                                    
                                    JToken entityIdValue = dependenciesValue["entityId"];
                                    if (entityIdValue != null && entityIdValue.Type != JTokenType.Null)
                                    {
                                        EntityId entityIdInstance = new EntityId();
                                        uSqlAssemblyDependencyInfoInstance.EntityId = entityIdInstance;
                                        
                                        JToken nameValue = entityIdValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            DdlName nameInstance = new DdlName();
                                            entityIdInstance.Name = nameInstance;
                                            
                                            JToken firstPartValue = nameValue["firstPart"];
                                            if (firstPartValue != null && firstPartValue.Type != JTokenType.Null)
                                            {
                                                string firstPartInstance = ((string)firstPartValue);
                                                nameInstance.FirstPart = firstPartInstance;
                                            }
                                            
                                            JToken secondPartValue = nameValue["secondPart"];
                                            if (secondPartValue != null && secondPartValue.Type != JTokenType.Null)
                                            {
                                                string secondPartInstance = ((string)secondPartValue);
                                                nameInstance.SecondPart = secondPartInstance;
                                            }
                                            
                                            JToken thirdPartValue = nameValue["thirdPart"];
                                            if (thirdPartValue != null && thirdPartValue.Type != JTokenType.Null)
                                            {
                                                string thirdPartInstance = ((string)thirdPartValue);
                                                nameInstance.ThirdPart = thirdPartInstance;
                                            }
                                            
                                            JToken serverValue = nameValue["server"];
                                            if (serverValue != null && serverValue.Type != JTokenType.Null)
                                            {
                                                string serverInstance = ((string)serverValue);
                                                nameInstance.Server = serverInstance;
                                            }
                                        }
                                        
                                        JToken versionValue = entityIdValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            Guid versionInstance = Guid.Parse(((string)versionValue));
                                            entityIdInstance.Version = versionInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                assemblyInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue2 = responseDoc["version"];
                            if (versionValue2 != null && versionValue2.Type != JTokenType.Null)
                            {
                                Guid versionInstance2 = Guid.Parse(((string)versionValue2));
                                assemblyInstance.Version = versionInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the specified credential from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <param name='credentialName'>
        /// Required. The name of the credential to find.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get credential operation response.
        /// </returns>
        public async Task<CatalogCredentialGetResponse> GetCredentialAsync(string resourceGroupName, string accountName, string databaseName, string credentialName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (credentialName == null)
            {
                throw new ArgumentNullException("credentialName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("credentialName", credentialName);
                TracingAdapter.Enter(invocationId, this, "GetCredentialAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/credentials/";
            url = url + Uri.EscapeDataString(credentialName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogCredentialGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogCredentialGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlCredential credentialInstance = new USqlCredential();
                            result.Credential = credentialInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                credentialInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken identityValue = responseDoc["identity"];
                            if (identityValue != null && identityValue.Type != JTokenType.Null)
                            {
                                string identityInstance = ((string)identityValue);
                                credentialInstance.Identity = identityInstance;
                            }
                            
                            JToken credentialNameValue = responseDoc["credentialName"];
                            if (credentialNameValue != null && credentialNameValue.Type != JTokenType.Null)
                            {
                                string credentialNameInstance = ((string)credentialNameValue);
                                credentialInstance.Name = credentialNameInstance;
                            }
                            
                            JToken userNameValue = responseDoc["userName"];
                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                            {
                                string userNameInstance = ((string)userNameValue);
                                credentialInstance.UserName = userNameInstance;
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                credentialInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                credentialInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the specified database from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The path to the file to create.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Database operation response.
        /// </returns>
        public async Task<CatalogDatabaseGetResponse> GetDatabaseAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "GetDatabaseAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogDatabaseGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogDatabaseGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlDatabase databaseInstance = new USqlDatabase();
                            result.Database = databaseInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                databaseInstance.Name = databaseNameInstance;
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                databaseInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                databaseInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the specified external data source from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the external Data Source
        /// in.
        /// </param>
        /// <param name='externalDataSourceName'>
        /// Required. The name of the external Data Source to find.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get external data source operation response.
        /// </returns>
        public async Task<CatalogExternalDataSourceGetResponse> GetExternalDataSourceAsync(string resourceGroupName, string accountName, string databaseName, string externalDataSourceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (externalDataSourceName == null)
            {
                throw new ArgumentNullException("externalDataSourceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("externalDataSourceName", externalDataSourceName);
                TracingAdapter.Enter(invocationId, this, "GetExternalDataSourceAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/externaldatasources/";
            url = url + Uri.EscapeDataString(externalDataSourceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogExternalDataSourceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogExternalDataSourceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlExternalDataSource externalDataSourceInstance = new USqlExternalDataSource();
                            result.ExternalDataSource = externalDataSourceInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                externalDataSourceInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken externalDataSourceNameValue = responseDoc["externalDataSourceName"];
                            if (externalDataSourceNameValue != null && externalDataSourceNameValue.Type != JTokenType.Null)
                            {
                                string externalDataSourceNameInstance = ((string)externalDataSourceNameValue);
                                externalDataSourceInstance.Name = externalDataSourceNameInstance;
                            }
                            
                            JToken providerValue = responseDoc["provider"];
                            if (providerValue != null && providerValue.Type != JTokenType.Null)
                            {
                                string providerInstance = ((string)providerValue);
                                externalDataSourceInstance.Provider = providerInstance;
                            }
                            
                            JToken providerStringValue = responseDoc["providerString"];
                            if (providerStringValue != null && providerStringValue.Type != JTokenType.Null)
                            {
                                string providerStringInstance = ((string)providerStringValue);
                                externalDataSourceInstance.ProviderString = providerStringInstance;
                            }
                            
                            JToken pushdownTypesArray = responseDoc["pushdownTypes"];
                            if (pushdownTypesArray != null && pushdownTypesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken pushdownTypesValue in ((JArray)pushdownTypesArray))
                                {
                                    externalDataSourceInstance.PushdownTypes.Add(((string)pushdownTypesValue));
                                }
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                externalDataSourceInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                externalDataSourceInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the specified procedure from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the procedure in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the procedure in.
        /// </param>
        /// <param name='procedureName'>
        /// Required. The name of the procedure to find.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get procedure operation response.
        /// </returns>
        public async Task<CatalogProcedureGetResponse> GetProcedureAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, string procedureName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            if (procedureName == null)
            {
                throw new ArgumentNullException("procedureName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                tracingParameters.Add("procedureName", procedureName);
                TracingAdapter.Enter(invocationId, this, "GetProcedureAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/procedures/";
            url = url + Uri.EscapeDataString(procedureName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogProcedureGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogProcedureGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlProcedure procedureInstance = new USqlProcedure();
                            result.Procedure = procedureInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                procedureInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken schemaNameValue = responseDoc["schemaName"];
                            if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                            {
                                string schemaNameInstance = ((string)schemaNameValue);
                                procedureInstance.SchemaName = schemaNameInstance;
                            }
                            
                            JToken procNameValue = responseDoc["procName"];
                            if (procNameValue != null && procNameValue.Type != JTokenType.Null)
                            {
                                string procNameInstance = ((string)procNameValue);
                                procedureInstance.Name = procNameInstance;
                            }
                            
                            JToken definitionValue = responseDoc["definition"];
                            if (definitionValue != null && definitionValue.Type != JTokenType.Null)
                            {
                                string definitionInstance = ((string)definitionValue);
                                procedureInstance.Definition = definitionInstance;
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                procedureInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                procedureInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the specified schema from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get schema operation response.
        /// </returns>
        public async Task<CatalogSchemaGetResponse> GetSchemaAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                TracingAdapter.Enter(invocationId, this, "GetSchemaAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogSchemaGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogSchemaGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlSchema schemaInstance = new USqlSchema();
                            result.Schema = schemaInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                schemaInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken schemaNameValue = responseDoc["schemaName"];
                            if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                            {
                                string schemaNameInstance = ((string)schemaNameValue);
                                schemaInstance.Name = schemaNameInstance;
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                schemaInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                schemaInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the specified secret in the specified database
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to get the secret from.
        /// </param>
        /// <param name='secretName'>
        /// Required. The name of the secret to get
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get secret operation response.
        /// </returns>
        public async Task<CatalogSecretGetResponse> GetSecretAsync(string resourceGroupName, string accountName, string databaseName, string secretName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (secretName == null)
            {
                throw new ArgumentNullException("secretName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("secretName", secretName);
                TracingAdapter.Enter(invocationId, this, "GetSecretAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/secrets/";
            url = url + Uri.EscapeDataString(secretName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogSecretGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogSecretGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlSecret secretInstance = new USqlSecret();
                            result.Secret = secretInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                secretInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken credentialNameValue = responseDoc["credentialName"];
                            if (credentialNameValue != null && credentialNameValue.Type != JTokenType.Null)
                            {
                                string credentialNameInstance = ((string)credentialNameValue);
                                secretInstance.Name = credentialNameInstance;
                            }
                            
                            JToken userNameValue = responseDoc["userName"];
                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                            {
                                string userNameInstance = ((string)userNameValue);
                                secretInstance.UserName = userNameInstance;
                            }
                            
                            JToken creationTimeValue = responseDoc["creationTime"];
                            if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                secretInstance.CreationTime = creationTimeInstance;
                            }
                            
                            JToken identityValue = responseDoc["identity"];
                            if (identityValue != null && identityValue.Type != JTokenType.Null)
                            {
                                Guid identityInstance = Guid.Parse(((string)identityValue));
                                secretInstance.Identity = identityInstance;
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                secretInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                secretInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the specified table from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the table in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the table in.
        /// </param>
        /// <param name='tableName'>
        /// Required. The name of the table to find.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get table operation response.
        /// </returns>
        public async Task<CatalogTableGetResponse> GetTableAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, string tableName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            if (tableName == null)
            {
                throw new ArgumentNullException("tableName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                tracingParameters.Add("tableName", tableName);
                TracingAdapter.Enter(invocationId, this, "GetTableAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/tables/";
            url = url + Uri.EscapeDataString(tableName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogTableGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogTableGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlTable tableInstance = new USqlTable();
                            result.Table = tableInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                tableInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken schemaNameValue = responseDoc["schemaName"];
                            if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                            {
                                string schemaNameInstance = ((string)schemaNameValue);
                                tableInstance.SchemaName = schemaNameInstance;
                            }
                            
                            JToken tableNameValue = responseDoc["tableName"];
                            if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                            {
                                string tableNameInstance = ((string)tableNameValue);
                                tableInstance.Name = tableNameInstance;
                            }
                            
                            JToken columnListArray = responseDoc["columnList"];
                            if (columnListArray != null && columnListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken columnListValue in ((JArray)columnListArray))
                                {
                                    USqlTableColumn uSqlTableColumnInstance = new USqlTableColumn();
                                    tableInstance.ColumnList.Add(uSqlTableColumnInstance);
                                    
                                    JToken nameValue = columnListValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        uSqlTableColumnInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = columnListValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        uSqlTableColumnInstance.Type = typeInstance;
                                    }
                                }
                            }
                            
                            JToken indexListArray = responseDoc["indexList"];
                            if (indexListArray != null && indexListArray.Type != JTokenType.Null)
                            {
                                foreach (JToken indexListValue in ((JArray)indexListArray))
                                {
                                    USqlIndex uSqlIndexInstance = new USqlIndex();
                                    tableInstance.IndexList.Add(uSqlIndexInstance);
                                    
                                    JToken nameValue2 = indexListValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        uSqlIndexInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken indexKeysArray = indexListValue["indexKeys"];
                                    if (indexKeysArray != null && indexKeysArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken indexKeysValue in ((JArray)indexKeysArray))
                                        {
                                            USqlDirectedColumn uSqlDirectedColumnInstance = new USqlDirectedColumn();
                                            uSqlIndexInstance.IndexKeys.Add(uSqlDirectedColumnInstance);
                                            
                                            JToken nameValue3 = indexKeysValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                uSqlDirectedColumnInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken descendingValue = indexKeysValue["descending"];
                                            if (descendingValue != null && descendingValue.Type != JTokenType.Null)
                                            {
                                                bool descendingInstance = ((bool)descendingValue);
                                                uSqlDirectedColumnInstance.Descending = descendingInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken columnsArray = indexListValue["columns"];
                                    if (columnsArray != null && columnsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken columnsValue in ((JArray)columnsArray))
                                        {
                                            uSqlIndexInstance.Columns.Add(((string)columnsValue));
                                        }
                                    }
                                    
                                    JToken distributionInfoValue = indexListValue["distributionInfo"];
                                    if (distributionInfoValue != null && distributionInfoValue.Type != JTokenType.Null)
                                    {
                                        USqlDistributionInfo distributionInfoInstance = new USqlDistributionInfo();
                                        uSqlIndexInstance.DistributionInfo = distributionInfoInstance;
                                        
                                        JToken typeValue2 = distributionInfoValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            int typeInstance2 = ((int)typeValue2);
                                            distributionInfoInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken keysArray = distributionInfoValue["keys"];
                                        if (keysArray != null && keysArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken keysValue in ((JArray)keysArray))
                                            {
                                                USqlDirectedColumn uSqlDirectedColumnInstance2 = new USqlDirectedColumn();
                                                distributionInfoInstance.Keys.Add(uSqlDirectedColumnInstance2);
                                                
                                                JToken nameValue4 = keysValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    uSqlDirectedColumnInstance2.Name = nameInstance4;
                                                }
                                                
                                                JToken descendingValue2 = keysValue["descending"];
                                                if (descendingValue2 != null && descendingValue2.Type != JTokenType.Null)
                                                {
                                                    bool descendingInstance2 = ((bool)descendingValue2);
                                                    uSqlDirectedColumnInstance2.Descending = descendingInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken countValue = distributionInfoValue["count"];
                                        if (countValue != null && countValue.Type != JTokenType.Null)
                                        {
                                            int countInstance = ((int)countValue);
                                            distributionInfoInstance.Count = countInstance;
                                        }
                                    }
                                    
                                    JToken partitionFunctionValue = indexListValue["partitionFunction"];
                                    if (partitionFunctionValue != null && partitionFunctionValue.Type != JTokenType.Null)
                                    {
                                        Guid partitionFunctionInstance = Guid.Parse(((string)partitionFunctionValue));
                                        uSqlIndexInstance.PartitionFunction = partitionFunctionInstance;
                                    }
                                    
                                    JToken partitionKeyListArray = indexListValue["partitionKeyList"];
                                    if (partitionKeyListArray != null && partitionKeyListArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken partitionKeyListValue in ((JArray)partitionKeyListArray))
                                        {
                                            uSqlIndexInstance.PartitionKeyList.Add(((string)partitionKeyListValue));
                                        }
                                    }
                                    
                                    JToken streamNamesArray = indexListValue["streamNames"];
                                    if (streamNamesArray != null && streamNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken streamNamesValue in ((JArray)streamNamesArray))
                                        {
                                            uSqlIndexInstance.StreamNames.Add(((string)streamNamesValue));
                                        }
                                    }
                                    
                                    JToken isColumnstoreValue = indexListValue["isColumnstore"];
                                    if (isColumnstoreValue != null && isColumnstoreValue.Type != JTokenType.Null)
                                    {
                                        bool isColumnstoreInstance = ((bool)isColumnstoreValue);
                                        uSqlIndexInstance.IsColumnstore = isColumnstoreInstance;
                                    }
                                    
                                    JToken indexIdValue = indexListValue["indexId"];
                                    if (indexIdValue != null && indexIdValue.Type != JTokenType.Null)
                                    {
                                        int indexIdInstance = ((int)indexIdValue);
                                        uSqlIndexInstance.IndexId = indexIdInstance;
                                    }
                                    
                                    JToken isUniqueValue = indexListValue["isUnique"];
                                    if (isUniqueValue != null && isUniqueValue.Type != JTokenType.Null)
                                    {
                                        bool isUniqueInstance = ((bool)isUniqueValue);
                                        uSqlIndexInstance.IsCoIsUniquelumnstore = isUniqueInstance;
                                    }
                                }
                            }
                            
                            JToken partitionKeyListArray2 = responseDoc["partitionKeyList"];
                            if (partitionKeyListArray2 != null && partitionKeyListArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken partitionKeyListValue2 in ((JArray)partitionKeyListArray2))
                                {
                                    tableInstance.PartitionKeyList.Add(((string)partitionKeyListValue2));
                                }
                            }
                            
                            JToken externalTableValue = responseDoc["externalTable"];
                            if (externalTableValue != null && externalTableValue.Type != JTokenType.Null)
                            {
                                ExternalTable externalTableInstance = new ExternalTable();
                                tableInstance.ExternalTable = externalTableInstance;
                                
                                JToken tableNameValue2 = externalTableValue["tableName"];
                                if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                {
                                    string tableNameInstance2 = ((string)tableNameValue2);
                                    externalTableInstance.TableName = tableNameInstance2;
                                }
                                
                                JToken dataSourceValue = externalTableValue["dataSource"];
                                if (dataSourceValue != null && dataSourceValue.Type != JTokenType.Null)
                                {
                                    EntityId dataSourceInstance = new EntityId();
                                    externalTableInstance.DataSource = dataSourceInstance;
                                    
                                    JToken nameValue5 = dataSourceValue["name"];
                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                    {
                                        DdlName nameInstance5 = new DdlName();
                                        dataSourceInstance.Name = nameInstance5;
                                        
                                        JToken firstPartValue = nameValue5["firstPart"];
                                        if (firstPartValue != null && firstPartValue.Type != JTokenType.Null)
                                        {
                                            string firstPartInstance = ((string)firstPartValue);
                                            nameInstance5.FirstPart = firstPartInstance;
                                        }
                                        
                                        JToken secondPartValue = nameValue5["secondPart"];
                                        if (secondPartValue != null && secondPartValue.Type != JTokenType.Null)
                                        {
                                            string secondPartInstance = ((string)secondPartValue);
                                            nameInstance5.SecondPart = secondPartInstance;
                                        }
                                        
                                        JToken thirdPartValue = nameValue5["thirdPart"];
                                        if (thirdPartValue != null && thirdPartValue.Type != JTokenType.Null)
                                        {
                                            string thirdPartInstance = ((string)thirdPartValue);
                                            nameInstance5.ThirdPart = thirdPartInstance;
                                        }
                                        
                                        JToken serverValue = nameValue5["server"];
                                        if (serverValue != null && serverValue.Type != JTokenType.Null)
                                        {
                                            string serverInstance = ((string)serverValue);
                                            nameInstance5.Server = serverInstance;
                                        }
                                    }
                                    
                                    JToken versionValue = dataSourceValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        dataSourceInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                tableInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue2 = responseDoc["version"];
                            if (versionValue2 != null && versionValue2.Type != JTokenType.Null)
                            {
                                Guid versionInstance2 = Guid.Parse(((string)versionValue2));
                                tableInstance.Version = versionInstance2;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the specified table from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the statistics in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the statistics in.
        /// </param>
        /// <param name='tableName'>
        /// Required. The name of the table to find the statistics in.
        /// </param>
        /// <param name='statisticsName'>
        /// Required. The name of the table statistics to find.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get table statistics operation response.
        /// </returns>
        public async Task<CatalogTableStatisticsGetResponse> GetTableStatisticAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, string tableName, string statisticsName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            if (tableName == null)
            {
                throw new ArgumentNullException("tableName");
            }
            if (statisticsName == null)
            {
                throw new ArgumentNullException("statisticsName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                tracingParameters.Add("tableName", tableName);
                tracingParameters.Add("statisticsName", statisticsName);
                TracingAdapter.Enter(invocationId, this, "GetTableStatisticAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/tables/";
            url = url + Uri.EscapeDataString(tableName);
            url = url + "/statistics/";
            url = url + Uri.EscapeDataString(statisticsName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogTableStatisticsGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogTableStatisticsGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlTableStatistics statisticsInstance = new USqlTableStatistics();
                            result.Statistics = statisticsInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                statisticsInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken schemaNameValue = responseDoc["schemaName"];
                            if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                            {
                                string schemaNameInstance = ((string)schemaNameValue);
                                statisticsInstance.SchemaName = schemaNameInstance;
                            }
                            
                            JToken tableNameValue = responseDoc["tableName"];
                            if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                            {
                                string tableNameInstance = ((string)tableNameValue);
                                statisticsInstance.TableName = tableNameInstance;
                            }
                            
                            JToken statisticsNameValue = responseDoc["statisticsName"];
                            if (statisticsNameValue != null && statisticsNameValue.Type != JTokenType.Null)
                            {
                                string statisticsNameInstance = ((string)statisticsNameValue);
                                statisticsInstance.Name = statisticsNameInstance;
                            }
                            
                            JToken userStatNameValue = responseDoc["userStatName"];
                            if (userStatNameValue != null && userStatNameValue.Type != JTokenType.Null)
                            {
                                string userStatNameInstance = ((string)userStatNameValue);
                                statisticsInstance.UserStatName = userStatNameInstance;
                            }
                            
                            JToken statDataPathValue = responseDoc["statDataPath"];
                            if (statDataPathValue != null && statDataPathValue.Type != JTokenType.Null)
                            {
                                string statDataPathInstance = ((string)statDataPathValue);
                                statisticsInstance.StatDataPath = statDataPathInstance;
                            }
                            
                            JToken createTimeValue = responseDoc["createTime"];
                            if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset createTimeInstance = ((DateTimeOffset)createTimeValue);
                                statisticsInstance.CreateTime = createTimeInstance;
                            }
                            
                            JToken updateTimeValue = responseDoc["updateTime"];
                            if (updateTimeValue != null && updateTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset updateTimeInstance = ((DateTimeOffset)updateTimeValue);
                                statisticsInstance.UpdateTime = updateTimeInstance;
                            }
                            
                            JToken isUserCreatedValue = responseDoc["isUserCreated"];
                            if (isUserCreatedValue != null && isUserCreatedValue.Type != JTokenType.Null)
                            {
                                bool isUserCreatedInstance = ((bool)isUserCreatedValue);
                                statisticsInstance.IsUserCreated = isUserCreatedInstance;
                            }
                            
                            JToken isAutoCreatedValue = responseDoc["isAutoCreated"];
                            if (isAutoCreatedValue != null && isAutoCreatedValue.Type != JTokenType.Null)
                            {
                                bool isAutoCreatedInstance = ((bool)isAutoCreatedValue);
                                statisticsInstance.IsAutoCreated = isAutoCreatedInstance;
                            }
                            
                            JToken hasFilterValue = responseDoc["hasFilter"];
                            if (hasFilterValue != null && hasFilterValue.Type != JTokenType.Null)
                            {
                                bool hasFilterInstance = ((bool)hasFilterValue);
                                statisticsInstance.HasFilter = hasFilterInstance;
                            }
                            
                            JToken filterDefinitionValue = responseDoc["filterDefinition"];
                            if (filterDefinitionValue != null && filterDefinitionValue.Type != JTokenType.Null)
                            {
                                string filterDefinitionInstance = ((string)filterDefinitionValue);
                                statisticsInstance.FilterDefinition = filterDefinitionInstance;
                            }
                            
                            JToken colNamesArray = responseDoc["colNames"];
                            if (colNamesArray != null && colNamesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken colNamesValue in ((JArray)colNamesArray))
                                {
                                    statisticsInstance.ColNames.Add(((string)colNamesValue));
                                }
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                statisticsInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                statisticsInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the specified table valued function from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the table valued
        /// function in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the table valued function
        /// in.
        /// </param>
        /// <param name='tableValuedFunctionName'>
        /// Required. The name of the tableValuedFunction to find.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get table valued function operation response.
        /// </returns>
        public async Task<CatalogTableValuedFunctionGetResponse> GetTableValuedFunctionAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, string tableValuedFunctionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            if (tableValuedFunctionName == null)
            {
                throw new ArgumentNullException("tableValuedFunctionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                tracingParameters.Add("tableValuedFunctionName", tableValuedFunctionName);
                TracingAdapter.Enter(invocationId, this, "GetTableValuedFunctionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/tablevaluedfunctions/";
            url = url + Uri.EscapeDataString(tableValuedFunctionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogTableValuedFunctionGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogTableValuedFunctionGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlTableValuedFunction tableValuedFunctionInstance = new USqlTableValuedFunction();
                            result.TableValuedFunction = tableValuedFunctionInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                tableValuedFunctionInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken schemaNameValue = responseDoc["schemaName"];
                            if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                            {
                                string schemaNameInstance = ((string)schemaNameValue);
                                tableValuedFunctionInstance.SchemaName = schemaNameInstance;
                            }
                            
                            JToken tvfNameValue = responseDoc["tvfName"];
                            if (tvfNameValue != null && tvfNameValue.Type != JTokenType.Null)
                            {
                                string tvfNameInstance = ((string)tvfNameValue);
                                tableValuedFunctionInstance.Name = tvfNameInstance;
                            }
                            
                            JToken definitionValue = responseDoc["definition"];
                            if (definitionValue != null && definitionValue.Type != JTokenType.Null)
                            {
                                string definitionInstance = ((string)definitionValue);
                                tableValuedFunctionInstance.Definition = definitionInstance;
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                tableValuedFunctionInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                tableValuedFunctionInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the specified view from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the view in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the view in.
        /// </param>
        /// <param name='viewName'>
        /// Required. The name of the view to find.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get view operation response.
        /// </returns>
        public async Task<CatalogViewGetResponse> GetViewAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, string viewName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            if (viewName == null)
            {
                throw new ArgumentNullException("viewName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                tracingParameters.Add("viewName", viewName);
                TracingAdapter.Enter(invocationId, this, "GetViewAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/views/";
            url = url + Uri.EscapeDataString(viewName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogViewGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogViewGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlView viewInstance = new USqlView();
                            result.View = viewInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                viewInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken schemaNameValue = responseDoc["schemaName"];
                            if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                            {
                                string schemaNameInstance = ((string)schemaNameValue);
                                viewInstance.SchemaName = schemaNameInstance;
                            }
                            
                            JToken viewNameValue = responseDoc["viewName"];
                            if (viewNameValue != null && viewNameValue.Type != JTokenType.Null)
                            {
                                string viewNameInstance = ((string)viewNameValue);
                                viewInstance.Name = viewNameInstance;
                            }
                            
                            JToken definitionValue = responseDoc["definition"];
                            if (definitionValue != null && definitionValue.Type != JTokenType.Null)
                            {
                                string definitionInstance = ((string)definitionValue);
                                viewInstance.Definition = definitionInstance;
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                viewInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                viewInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of assemblies from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the assembly in.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Database operation response.
        /// </returns>
        public async Task<CatalogAssemblyListGetResponse> ListAssembliesAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "ListAssembliesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/assemblies";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogAssemblyListGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogAssemblyListGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlAssemblyList assemblyListInstance = new USqlAssemblyList();
                            result.AssemblyList = assemblyListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlAssemblyClr uSqlAssemblyClrInstance = new USqlAssemblyClr();
                                    assemblyListInstance.Value.Add(uSqlAssemblyClrInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlAssemblyClrInstance.DatabaseName = databaseNameInstance;
                                    }
                                    
                                    JToken assemblyClrNameValue = valueValue["assemblyClrName"];
                                    if (assemblyClrNameValue != null && assemblyClrNameValue.Type != JTokenType.Null)
                                    {
                                        string assemblyClrNameInstance = ((string)assemblyClrNameValue);
                                        uSqlAssemblyClrInstance.Name = assemblyClrNameInstance;
                                    }
                                    
                                    JToken clrNameValue = valueValue["clrName"];
                                    if (clrNameValue != null && clrNameValue.Type != JTokenType.Null)
                                    {
                                        string clrNameInstance = ((string)clrNameValue);
                                        uSqlAssemblyClrInstance.ClrName = clrNameInstance;
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlAssemblyClrInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue = valueValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        uSqlAssemblyClrInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                assemblyListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                assemblyListInstance.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                assemblyListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of credentials from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List schema operation response.
        /// </returns>
        public async Task<CatalogCredentialListResponse> ListCredentialsAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "ListCredentialsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/credentials";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogCredentialListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogCredentialListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlCredentialList credentialListInstance = new USqlCredentialList();
                            result.CredentialList = credentialListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlCredential uSqlCredentialInstance = new USqlCredential();
                                    credentialListInstance.Value.Add(uSqlCredentialInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlCredentialInstance.DatabaseName = databaseNameInstance;
                                    }
                                    
                                    JToken identityValue = valueValue["identity"];
                                    if (identityValue != null && identityValue.Type != JTokenType.Null)
                                    {
                                        string identityInstance = ((string)identityValue);
                                        uSqlCredentialInstance.Identity = identityInstance;
                                    }
                                    
                                    JToken credentialNameValue = valueValue["credentialName"];
                                    if (credentialNameValue != null && credentialNameValue.Type != JTokenType.Null)
                                    {
                                        string credentialNameInstance = ((string)credentialNameValue);
                                        uSqlCredentialInstance.Name = credentialNameInstance;
                                    }
                                    
                                    JToken userNameValue = valueValue["userName"];
                                    if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                    {
                                        string userNameInstance = ((string)userNameValue);
                                        uSqlCredentialInstance.UserName = userNameInstance;
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlCredentialInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue = valueValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        uSqlCredentialInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                credentialListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                credentialListInstance.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                credentialListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of databases from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Database operation response.
        /// </returns>
        public async Task<CatalogDatabaseListResponse> ListDatabasesAsync(string resourceGroupName, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "ListDatabasesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogDatabaseListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogDatabaseListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlDatabaseList databaseListInstance = new USqlDatabaseList();
                            result.DatabaseList = databaseListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlDatabase uSqlDatabaseInstance = new USqlDatabase();
                                    databaseListInstance.Value.Add(uSqlDatabaseInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlDatabaseInstance.Name = databaseNameInstance;
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlDatabaseInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue = valueValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        uSqlDatabaseInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                databaseListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                databaseListInstance.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                databaseListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of external data sources from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the external Data Source
        /// in.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List external data source operation response.
        /// </returns>
        public async Task<CatalogExternalDataSourceListResponse> ListExternalDataSourcesAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "ListExternalDataSourcesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/externaldatasources";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogExternalDataSourceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogExternalDataSourceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlExternalDataSourceList externalDataSourceListInstance = new USqlExternalDataSourceList();
                            result.ExternalDataSourceList = externalDataSourceListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlExternalDataSource uSqlExternalDataSourceInstance = new USqlExternalDataSource();
                                    externalDataSourceListInstance.Value.Add(uSqlExternalDataSourceInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlExternalDataSourceInstance.DatabaseName = databaseNameInstance;
                                    }
                                    
                                    JToken externalDataSourceNameValue = valueValue["externalDataSourceName"];
                                    if (externalDataSourceNameValue != null && externalDataSourceNameValue.Type != JTokenType.Null)
                                    {
                                        string externalDataSourceNameInstance = ((string)externalDataSourceNameValue);
                                        uSqlExternalDataSourceInstance.Name = externalDataSourceNameInstance;
                                    }
                                    
                                    JToken providerValue = valueValue["provider"];
                                    if (providerValue != null && providerValue.Type != JTokenType.Null)
                                    {
                                        string providerInstance = ((string)providerValue);
                                        uSqlExternalDataSourceInstance.Provider = providerInstance;
                                    }
                                    
                                    JToken providerStringValue = valueValue["providerString"];
                                    if (providerStringValue != null && providerStringValue.Type != JTokenType.Null)
                                    {
                                        string providerStringInstance = ((string)providerStringValue);
                                        uSqlExternalDataSourceInstance.ProviderString = providerStringInstance;
                                    }
                                    
                                    JToken pushdownTypesArray = valueValue["pushdownTypes"];
                                    if (pushdownTypesArray != null && pushdownTypesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken pushdownTypesValue in ((JArray)pushdownTypesArray))
                                        {
                                            uSqlExternalDataSourceInstance.PushdownTypes.Add(((string)pushdownTypesValue));
                                        }
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlExternalDataSourceInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue = valueValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        uSqlExternalDataSourceInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                externalDataSourceListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                externalDataSourceListInstance.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                externalDataSourceListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of procedures from the current Data Lake
        /// Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the procedures in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the procedures in.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List procedures operation response.
        /// </returns>
        public async Task<CatalogProcedureListResponse> ListProceduresAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                TracingAdapter.Enter(invocationId, this, "ListProceduresAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/procedures";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogProcedureListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogProcedureListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlProcedureList procedureListInstance = new USqlProcedureList();
                            result.ProcedureList = procedureListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlProcedure uSqlProcedureInstance = new USqlProcedure();
                                    procedureListInstance.Value.Add(uSqlProcedureInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlProcedureInstance.DatabaseName = databaseNameInstance;
                                    }
                                    
                                    JToken schemaNameValue = valueValue["schemaName"];
                                    if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                                    {
                                        string schemaNameInstance = ((string)schemaNameValue);
                                        uSqlProcedureInstance.SchemaName = schemaNameInstance;
                                    }
                                    
                                    JToken procNameValue = valueValue["procName"];
                                    if (procNameValue != null && procNameValue.Type != JTokenType.Null)
                                    {
                                        string procNameInstance = ((string)procNameValue);
                                        uSqlProcedureInstance.Name = procNameInstance;
                                    }
                                    
                                    JToken definitionValue = valueValue["definition"];
                                    if (definitionValue != null && definitionValue.Type != JTokenType.Null)
                                    {
                                        string definitionInstance = ((string)definitionValue);
                                        uSqlProcedureInstance.Definition = definitionInstance;
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlProcedureInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue = valueValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        uSqlProcedureInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                procedureListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                procedureListInstance.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                procedureListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of schemas from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the schema in.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List schema operation response.
        /// </returns>
        public async Task<CatalogSchemaListResponse> ListSchemasAsync(string resourceGroupName, string accountName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "ListSchemasAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogSchemaListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogSchemaListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlSchemaList schemaListInstance = new USqlSchemaList();
                            result.SchemaList = schemaListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlSchema uSqlSchemaInstance = new USqlSchema();
                                    schemaListInstance.Value.Add(uSqlSchemaInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlSchemaInstance.DatabaseName = databaseNameInstance;
                                    }
                                    
                                    JToken schemaNameValue = valueValue["schemaName"];
                                    if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                                    {
                                        string schemaNameInstance = ((string)schemaNameValue);
                                        uSqlSchemaInstance.Name = schemaNameInstance;
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlSchemaInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue = valueValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        uSqlSchemaInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                schemaListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                schemaListInstance.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                schemaListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of tables from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the tables in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the tables in.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List tables operation response.
        /// </returns>
        public async Task<CatalogTableListResponse> ListTablesAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                TracingAdapter.Enter(invocationId, this, "ListTablesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/tables";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogTableListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogTableListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlTableList tableListInstance = new USqlTableList();
                            result.TableList = tableListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlTable uSqlTableInstance = new USqlTable();
                                    tableListInstance.Value.Add(uSqlTableInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlTableInstance.DatabaseName = databaseNameInstance;
                                    }
                                    
                                    JToken schemaNameValue = valueValue["schemaName"];
                                    if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                                    {
                                        string schemaNameInstance = ((string)schemaNameValue);
                                        uSqlTableInstance.SchemaName = schemaNameInstance;
                                    }
                                    
                                    JToken tableNameValue = valueValue["tableName"];
                                    if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance = ((string)tableNameValue);
                                        uSqlTableInstance.Name = tableNameInstance;
                                    }
                                    
                                    JToken columnListArray = valueValue["columnList"];
                                    if (columnListArray != null && columnListArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken columnListValue in ((JArray)columnListArray))
                                        {
                                            USqlTableColumn uSqlTableColumnInstance = new USqlTableColumn();
                                            uSqlTableInstance.ColumnList.Add(uSqlTableColumnInstance);
                                            
                                            JToken nameValue = columnListValue["name"];
                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                            {
                                                string nameInstance = ((string)nameValue);
                                                uSqlTableColumnInstance.Name = nameInstance;
                                            }
                                            
                                            JToken typeValue = columnListValue["type"];
                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                            {
                                                string typeInstance = ((string)typeValue);
                                                uSqlTableColumnInstance.Type = typeInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken indexListArray = valueValue["indexList"];
                                    if (indexListArray != null && indexListArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken indexListValue in ((JArray)indexListArray))
                                        {
                                            USqlIndex uSqlIndexInstance = new USqlIndex();
                                            uSqlTableInstance.IndexList.Add(uSqlIndexInstance);
                                            
                                            JToken nameValue2 = indexListValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                uSqlIndexInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken indexKeysArray = indexListValue["indexKeys"];
                                            if (indexKeysArray != null && indexKeysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken indexKeysValue in ((JArray)indexKeysArray))
                                                {
                                                    USqlDirectedColumn uSqlDirectedColumnInstance = new USqlDirectedColumn();
                                                    uSqlIndexInstance.IndexKeys.Add(uSqlDirectedColumnInstance);
                                                    
                                                    JToken nameValue3 = indexKeysValue["name"];
                                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance3 = ((string)nameValue3);
                                                        uSqlDirectedColumnInstance.Name = nameInstance3;
                                                    }
                                                    
                                                    JToken descendingValue = indexKeysValue["descending"];
                                                    if (descendingValue != null && descendingValue.Type != JTokenType.Null)
                                                    {
                                                        bool descendingInstance = ((bool)descendingValue);
                                                        uSqlDirectedColumnInstance.Descending = descendingInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken columnsArray = indexListValue["columns"];
                                            if (columnsArray != null && columnsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken columnsValue in ((JArray)columnsArray))
                                                {
                                                    uSqlIndexInstance.Columns.Add(((string)columnsValue));
                                                }
                                            }
                                            
                                            JToken distributionInfoValue = indexListValue["distributionInfo"];
                                            if (distributionInfoValue != null && distributionInfoValue.Type != JTokenType.Null)
                                            {
                                                USqlDistributionInfo distributionInfoInstance = new USqlDistributionInfo();
                                                uSqlIndexInstance.DistributionInfo = distributionInfoInstance;
                                                
                                                JToken typeValue2 = distributionInfoValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    int typeInstance2 = ((int)typeValue2);
                                                    distributionInfoInstance.Type = typeInstance2;
                                                }
                                                
                                                JToken keysArray = distributionInfoValue["keys"];
                                                if (keysArray != null && keysArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken keysValue in ((JArray)keysArray))
                                                    {
                                                        USqlDirectedColumn uSqlDirectedColumnInstance2 = new USqlDirectedColumn();
                                                        distributionInfoInstance.Keys.Add(uSqlDirectedColumnInstance2);
                                                        
                                                        JToken nameValue4 = keysValue["name"];
                                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance4 = ((string)nameValue4);
                                                            uSqlDirectedColumnInstance2.Name = nameInstance4;
                                                        }
                                                        
                                                        JToken descendingValue2 = keysValue["descending"];
                                                        if (descendingValue2 != null && descendingValue2.Type != JTokenType.Null)
                                                        {
                                                            bool descendingInstance2 = ((bool)descendingValue2);
                                                            uSqlDirectedColumnInstance2.Descending = descendingInstance2;
                                                        }
                                                    }
                                                }
                                                
                                                JToken countValue = distributionInfoValue["count"];
                                                if (countValue != null && countValue.Type != JTokenType.Null)
                                                {
                                                    int countInstance = ((int)countValue);
                                                    distributionInfoInstance.Count = countInstance;
                                                }
                                            }
                                            
                                            JToken partitionFunctionValue = indexListValue["partitionFunction"];
                                            if (partitionFunctionValue != null && partitionFunctionValue.Type != JTokenType.Null)
                                            {
                                                Guid partitionFunctionInstance = Guid.Parse(((string)partitionFunctionValue));
                                                uSqlIndexInstance.PartitionFunction = partitionFunctionInstance;
                                            }
                                            
                                            JToken partitionKeyListArray = indexListValue["partitionKeyList"];
                                            if (partitionKeyListArray != null && partitionKeyListArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken partitionKeyListValue in ((JArray)partitionKeyListArray))
                                                {
                                                    uSqlIndexInstance.PartitionKeyList.Add(((string)partitionKeyListValue));
                                                }
                                            }
                                            
                                            JToken streamNamesArray = indexListValue["streamNames"];
                                            if (streamNamesArray != null && streamNamesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken streamNamesValue in ((JArray)streamNamesArray))
                                                {
                                                    uSqlIndexInstance.StreamNames.Add(((string)streamNamesValue));
                                                }
                                            }
                                            
                                            JToken isColumnstoreValue = indexListValue["isColumnstore"];
                                            if (isColumnstoreValue != null && isColumnstoreValue.Type != JTokenType.Null)
                                            {
                                                bool isColumnstoreInstance = ((bool)isColumnstoreValue);
                                                uSqlIndexInstance.IsColumnstore = isColumnstoreInstance;
                                            }
                                            
                                            JToken indexIdValue = indexListValue["indexId"];
                                            if (indexIdValue != null && indexIdValue.Type != JTokenType.Null)
                                            {
                                                int indexIdInstance = ((int)indexIdValue);
                                                uSqlIndexInstance.IndexId = indexIdInstance;
                                            }
                                            
                                            JToken isUniqueValue = indexListValue["isUnique"];
                                            if (isUniqueValue != null && isUniqueValue.Type != JTokenType.Null)
                                            {
                                                bool isUniqueInstance = ((bool)isUniqueValue);
                                                uSqlIndexInstance.IsCoIsUniquelumnstore = isUniqueInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken partitionKeyListArray2 = valueValue["partitionKeyList"];
                                    if (partitionKeyListArray2 != null && partitionKeyListArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken partitionKeyListValue2 in ((JArray)partitionKeyListArray2))
                                        {
                                            uSqlTableInstance.PartitionKeyList.Add(((string)partitionKeyListValue2));
                                        }
                                    }
                                    
                                    JToken externalTableValue = valueValue["externalTable"];
                                    if (externalTableValue != null && externalTableValue.Type != JTokenType.Null)
                                    {
                                        ExternalTable externalTableInstance = new ExternalTable();
                                        uSqlTableInstance.ExternalTable = externalTableInstance;
                                        
                                        JToken tableNameValue2 = externalTableValue["tableName"];
                                        if (tableNameValue2 != null && tableNameValue2.Type != JTokenType.Null)
                                        {
                                            string tableNameInstance2 = ((string)tableNameValue2);
                                            externalTableInstance.TableName = tableNameInstance2;
                                        }
                                        
                                        JToken dataSourceValue = externalTableValue["dataSource"];
                                        if (dataSourceValue != null && dataSourceValue.Type != JTokenType.Null)
                                        {
                                            EntityId dataSourceInstance = new EntityId();
                                            externalTableInstance.DataSource = dataSourceInstance;
                                            
                                            JToken nameValue5 = dataSourceValue["name"];
                                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                            {
                                                DdlName nameInstance5 = new DdlName();
                                                dataSourceInstance.Name = nameInstance5;
                                                
                                                JToken firstPartValue = nameValue5["firstPart"];
                                                if (firstPartValue != null && firstPartValue.Type != JTokenType.Null)
                                                {
                                                    string firstPartInstance = ((string)firstPartValue);
                                                    nameInstance5.FirstPart = firstPartInstance;
                                                }
                                                
                                                JToken secondPartValue = nameValue5["secondPart"];
                                                if (secondPartValue != null && secondPartValue.Type != JTokenType.Null)
                                                {
                                                    string secondPartInstance = ((string)secondPartValue);
                                                    nameInstance5.SecondPart = secondPartInstance;
                                                }
                                                
                                                JToken thirdPartValue = nameValue5["thirdPart"];
                                                if (thirdPartValue != null && thirdPartValue.Type != JTokenType.Null)
                                                {
                                                    string thirdPartInstance = ((string)thirdPartValue);
                                                    nameInstance5.ThirdPart = thirdPartInstance;
                                                }
                                                
                                                JToken serverValue = nameValue5["server"];
                                                if (serverValue != null && serverValue.Type != JTokenType.Null)
                                                {
                                                    string serverInstance = ((string)serverValue);
                                                    nameInstance5.Server = serverInstance;
                                                }
                                            }
                                            
                                            JToken versionValue = dataSourceValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                                dataSourceInstance.Version = versionInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlTableInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue2 = valueValue["version"];
                                    if (versionValue2 != null && versionValue2.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance2 = Guid.Parse(((string)versionValue2));
                                        uSqlTableInstance.Version = versionInstance2;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                tableListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue2 = responseDoc["count"];
                            if (countValue2 != null && countValue2.Type != JTokenType.Null)
                            {
                                int countInstance2 = ((int)countValue2);
                                tableListInstance.Count = countInstance2;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                tableListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of tables from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the statistics in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the statistics in.
        /// </param>
        /// <param name='tableName'>
        /// Required. The name of the table to find the statistics in.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List table statistics operation response.
        /// </returns>
        public async Task<CatalogTableStatisticsListResponse> ListTableStatisticsAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, string tableName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            if (tableName == null)
            {
                throw new ArgumentNullException("tableName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                tracingParameters.Add("tableName", tableName);
                TracingAdapter.Enter(invocationId, this, "ListTableStatisticsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/tables/";
            url = url + Uri.EscapeDataString(tableName);
            url = url + "/statistics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogTableStatisticsListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogTableStatisticsListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlTableStatisticsList statisticsListInstance = new USqlTableStatisticsList();
                            result.StatisticsList = statisticsListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlTableStatistics uSqlTableStatisticsInstance = new USqlTableStatistics();
                                    statisticsListInstance.Value.Add(uSqlTableStatisticsInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlTableStatisticsInstance.DatabaseName = databaseNameInstance;
                                    }
                                    
                                    JToken schemaNameValue = valueValue["schemaName"];
                                    if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                                    {
                                        string schemaNameInstance = ((string)schemaNameValue);
                                        uSqlTableStatisticsInstance.SchemaName = schemaNameInstance;
                                    }
                                    
                                    JToken tableNameValue = valueValue["tableName"];
                                    if (tableNameValue != null && tableNameValue.Type != JTokenType.Null)
                                    {
                                        string tableNameInstance = ((string)tableNameValue);
                                        uSqlTableStatisticsInstance.TableName = tableNameInstance;
                                    }
                                    
                                    JToken statisticsNameValue = valueValue["statisticsName"];
                                    if (statisticsNameValue != null && statisticsNameValue.Type != JTokenType.Null)
                                    {
                                        string statisticsNameInstance = ((string)statisticsNameValue);
                                        uSqlTableStatisticsInstance.Name = statisticsNameInstance;
                                    }
                                    
                                    JToken userStatNameValue = valueValue["userStatName"];
                                    if (userStatNameValue != null && userStatNameValue.Type != JTokenType.Null)
                                    {
                                        string userStatNameInstance = ((string)userStatNameValue);
                                        uSqlTableStatisticsInstance.UserStatName = userStatNameInstance;
                                    }
                                    
                                    JToken statDataPathValue = valueValue["statDataPath"];
                                    if (statDataPathValue != null && statDataPathValue.Type != JTokenType.Null)
                                    {
                                        string statDataPathInstance = ((string)statDataPathValue);
                                        uSqlTableStatisticsInstance.StatDataPath = statDataPathInstance;
                                    }
                                    
                                    JToken createTimeValue = valueValue["createTime"];
                                    if (createTimeValue != null && createTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset createTimeInstance = ((DateTimeOffset)createTimeValue);
                                        uSqlTableStatisticsInstance.CreateTime = createTimeInstance;
                                    }
                                    
                                    JToken updateTimeValue = valueValue["updateTime"];
                                    if (updateTimeValue != null && updateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset updateTimeInstance = ((DateTimeOffset)updateTimeValue);
                                        uSqlTableStatisticsInstance.UpdateTime = updateTimeInstance;
                                    }
                                    
                                    JToken isUserCreatedValue = valueValue["isUserCreated"];
                                    if (isUserCreatedValue != null && isUserCreatedValue.Type != JTokenType.Null)
                                    {
                                        bool isUserCreatedInstance = ((bool)isUserCreatedValue);
                                        uSqlTableStatisticsInstance.IsUserCreated = isUserCreatedInstance;
                                    }
                                    
                                    JToken isAutoCreatedValue = valueValue["isAutoCreated"];
                                    if (isAutoCreatedValue != null && isAutoCreatedValue.Type != JTokenType.Null)
                                    {
                                        bool isAutoCreatedInstance = ((bool)isAutoCreatedValue);
                                        uSqlTableStatisticsInstance.IsAutoCreated = isAutoCreatedInstance;
                                    }
                                    
                                    JToken hasFilterValue = valueValue["hasFilter"];
                                    if (hasFilterValue != null && hasFilterValue.Type != JTokenType.Null)
                                    {
                                        bool hasFilterInstance = ((bool)hasFilterValue);
                                        uSqlTableStatisticsInstance.HasFilter = hasFilterInstance;
                                    }
                                    
                                    JToken filterDefinitionValue = valueValue["filterDefinition"];
                                    if (filterDefinitionValue != null && filterDefinitionValue.Type != JTokenType.Null)
                                    {
                                        string filterDefinitionInstance = ((string)filterDefinitionValue);
                                        uSqlTableStatisticsInstance.FilterDefinition = filterDefinitionInstance;
                                    }
                                    
                                    JToken colNamesArray = valueValue["colNames"];
                                    if (colNamesArray != null && colNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken colNamesValue in ((JArray)colNamesArray))
                                        {
                                            uSqlTableStatisticsInstance.ColNames.Add(((string)colNamesValue));
                                        }
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlTableStatisticsInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue = valueValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        uSqlTableStatisticsInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                statisticsListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                statisticsListInstance.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                statisticsListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of table valued functions from the current Data
        /// Lake Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the table valued
        /// functions in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the table valued functions
        /// in.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List table valued functions operation response.
        /// </returns>
        public async Task<CatalogTableValuedFunctionListResponse> ListTableValuedFunctionsAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                TracingAdapter.Enter(invocationId, this, "ListTableValuedFunctionsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/tablevaluedfunctions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogTableValuedFunctionListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogTableValuedFunctionListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlTableValuedFunctionList tableValuedFunctionListInstance = new USqlTableValuedFunctionList();
                            result.TableValuedFunctionList = tableValuedFunctionListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlTableValuedFunction uSqlTableValuedFunctionInstance = new USqlTableValuedFunction();
                                    tableValuedFunctionListInstance.Value.Add(uSqlTableValuedFunctionInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlTableValuedFunctionInstance.DatabaseName = databaseNameInstance;
                                    }
                                    
                                    JToken schemaNameValue = valueValue["schemaName"];
                                    if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                                    {
                                        string schemaNameInstance = ((string)schemaNameValue);
                                        uSqlTableValuedFunctionInstance.SchemaName = schemaNameInstance;
                                    }
                                    
                                    JToken tvfNameValue = valueValue["tvfName"];
                                    if (tvfNameValue != null && tvfNameValue.Type != JTokenType.Null)
                                    {
                                        string tvfNameInstance = ((string)tvfNameValue);
                                        uSqlTableValuedFunctionInstance.Name = tvfNameInstance;
                                    }
                                    
                                    JToken definitionValue = valueValue["definition"];
                                    if (definitionValue != null && definitionValue.Type != JTokenType.Null)
                                    {
                                        string definitionInstance = ((string)definitionValue);
                                        uSqlTableValuedFunctionInstance.Definition = definitionInstance;
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlTableValuedFunctionInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue = valueValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        uSqlTableValuedFunctionInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                tableValuedFunctionListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                tableValuedFunctionListInstance.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                tableValuedFunctionListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of catalog types within the specified database
        /// and schema for the current Data Lake Analytics catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the types in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the types in.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all catalog
        /// type items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List types operation response.
        /// </returns>
        public async Task<CatalogTypeListResponse> ListTypesAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, TypeListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListTypesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/types";
            List<string> queryParameters = new List<string>();
            if (parameters != null && parameters.Filter != null)
            {
                queryParameters.Add("$filter=" + Uri.EscapeDataString(parameters.Filter));
            }
            if (parameters != null && parameters.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(parameters.Top.Value.ToString()));
            }
            if (parameters != null && parameters.Skip != null)
            {
                queryParameters.Add("$skip=" + Uri.EscapeDataString(parameters.Skip.Value.ToString()));
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                queryParameters.Add("$orderby=" + Uri.EscapeDataString(parameters.OrderBy));
            }
            if (parameters != null && parameters.Select != null)
            {
                queryParameters.Add("$select=" + Uri.EscapeDataString(parameters.Select));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogTypeListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogTypeListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlTypeList typeListInstance = new USqlTypeList();
                            result.TypeList = typeListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlType uSqlTypeInstance = new USqlType();
                                    typeListInstance.Value.Add(uSqlTypeInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlTypeInstance.DatabaseName = databaseNameInstance;
                                    }
                                    
                                    JToken schemaNameValue = valueValue["schemaName"];
                                    if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                                    {
                                        string schemaNameInstance = ((string)schemaNameValue);
                                        uSqlTypeInstance.SchemaName = schemaNameInstance;
                                    }
                                    
                                    JToken typeNameValue = valueValue["typeName"];
                                    if (typeNameValue != null && typeNameValue.Type != JTokenType.Null)
                                    {
                                        string typeNameInstance = ((string)typeNameValue);
                                        uSqlTypeInstance.Name = typeNameInstance;
                                    }
                                    
                                    JToken typeFamilyValue = valueValue["typeFamily"];
                                    if (typeFamilyValue != null && typeFamilyValue.Type != JTokenType.Null)
                                    {
                                        string typeFamilyInstance = ((string)typeFamilyValue);
                                        uSqlTypeInstance.TypeFamily = typeFamilyInstance;
                                    }
                                    
                                    JToken cSharpNameValue = valueValue["cSharpName"];
                                    if (cSharpNameValue != null && cSharpNameValue.Type != JTokenType.Null)
                                    {
                                        string cSharpNameInstance = ((string)cSharpNameValue);
                                        uSqlTypeInstance.CSharpName = cSharpNameInstance;
                                    }
                                    
                                    JToken fullCSharpNameValue = valueValue["fullCSharpName"];
                                    if (fullCSharpNameValue != null && fullCSharpNameValue.Type != JTokenType.Null)
                                    {
                                        string fullCSharpNameInstance = ((string)fullCSharpNameValue);
                                        uSqlTypeInstance.FullCSharpName = fullCSharpNameInstance;
                                    }
                                    
                                    JToken systemTypeIdValue = valueValue["systemTypeId"];
                                    if (systemTypeIdValue != null && systemTypeIdValue.Type != JTokenType.Null)
                                    {
                                        int systemTypeIdInstance = ((int)systemTypeIdValue);
                                        uSqlTypeInstance.SystemTypeId = systemTypeIdInstance;
                                    }
                                    
                                    JToken userTypeIdValue = valueValue["userTypeId"];
                                    if (userTypeIdValue != null && userTypeIdValue.Type != JTokenType.Null)
                                    {
                                        int userTypeIdInstance = ((int)userTypeIdValue);
                                        uSqlTypeInstance.UserTypeId = userTypeIdInstance;
                                    }
                                    
                                    JToken schemaIdValue = valueValue["schemaId"];
                                    if (schemaIdValue != null && schemaIdValue.Type != JTokenType.Null)
                                    {
                                        int schemaIdInstance = ((int)schemaIdValue);
                                        uSqlTypeInstance.SchemaId = schemaIdInstance;
                                    }
                                    
                                    JToken principalIdValue = valueValue["principalId"];
                                    if (principalIdValue != null && principalIdValue.Type != JTokenType.Null)
                                    {
                                        int principalIdInstance = ((int)principalIdValue);
                                        uSqlTypeInstance.PrincipalId = principalIdInstance;
                                    }
                                    
                                    JToken isNullableValue = valueValue["isNullable"];
                                    if (isNullableValue != null && isNullableValue.Type != JTokenType.Null)
                                    {
                                        bool isNullableInstance = ((bool)isNullableValue);
                                        uSqlTypeInstance.IsNullable = isNullableInstance;
                                    }
                                    
                                    JToken isUserDefinedValue = valueValue["isUserDefined"];
                                    if (isUserDefinedValue != null && isUserDefinedValue.Type != JTokenType.Null)
                                    {
                                        bool isUserDefinedInstance = ((bool)isUserDefinedValue);
                                        uSqlTypeInstance.IsUserDefined = isUserDefinedInstance;
                                    }
                                    
                                    JToken isAssemblyTypeValue = valueValue["isAssemblyType"];
                                    if (isAssemblyTypeValue != null && isAssemblyTypeValue.Type != JTokenType.Null)
                                    {
                                        bool isAssemblyTypeInstance = ((bool)isAssemblyTypeValue);
                                        uSqlTypeInstance.IsAssemblyType = isAssemblyTypeInstance;
                                    }
                                    
                                    JToken isTableTypeValue = valueValue["isTableType"];
                                    if (isTableTypeValue != null && isTableTypeValue.Type != JTokenType.Null)
                                    {
                                        bool isTableTypeInstance = ((bool)isTableTypeValue);
                                        uSqlTypeInstance.IsTableType = isTableTypeInstance;
                                    }
                                    
                                    JToken isComplexTypeValue = valueValue["isComplexType"];
                                    if (isComplexTypeValue != null && isComplexTypeValue.Type != JTokenType.Null)
                                    {
                                        bool isComplexTypeInstance = ((bool)isComplexTypeValue);
                                        uSqlTypeInstance.IsComplexType = isComplexTypeInstance;
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlTypeInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue = valueValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        uSqlTypeInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                typeListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                typeListInstance.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                typeListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieves the list of views from the current Data Lake Analytics
        /// catalog
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to find the views in.
        /// </param>
        /// <param name='schemaName'>
        /// Required. The name of the schema to find the views in.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List views operation response.
        /// </returns>
        public async Task<CatalogViewListResponse> ListViewsAsync(string resourceGroupName, string accountName, string databaseName, string schemaName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (schemaName == null)
            {
                throw new ArgumentNullException("schemaName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("schemaName", schemaName);
                TracingAdapter.Enter(invocationId, this, "ListViewsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/schemas/";
            url = url + Uri.EscapeDataString(schemaName);
            url = url + "/views";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogViewListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogViewListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlViewList viewListInstance = new USqlViewList();
                            result.ViewList = viewListInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    USqlView uSqlViewInstance = new USqlView();
                                    viewListInstance.Value.Add(uSqlViewInstance);
                                    
                                    JToken databaseNameValue = valueValue["databaseName"];
                                    if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                    {
                                        string databaseNameInstance = ((string)databaseNameValue);
                                        uSqlViewInstance.DatabaseName = databaseNameInstance;
                                    }
                                    
                                    JToken schemaNameValue = valueValue["schemaName"];
                                    if (schemaNameValue != null && schemaNameValue.Type != JTokenType.Null)
                                    {
                                        string schemaNameInstance = ((string)schemaNameValue);
                                        uSqlViewInstance.SchemaName = schemaNameInstance;
                                    }
                                    
                                    JToken viewNameValue = valueValue["viewName"];
                                    if (viewNameValue != null && viewNameValue.Type != JTokenType.Null)
                                    {
                                        string viewNameInstance = ((string)viewNameValue);
                                        uSqlViewInstance.Name = viewNameInstance;
                                    }
                                    
                                    JToken definitionValue = valueValue["definition"];
                                    if (definitionValue != null && definitionValue.Type != JTokenType.Null)
                                    {
                                        string definitionInstance = ((string)definitionValue);
                                        uSqlViewInstance.Definition = definitionInstance;
                                    }
                                    
                                    JToken computeAccountNameValue = valueValue["computeAccountName"];
                                    if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                                    {
                                        string computeAccountNameInstance = ((string)computeAccountNameValue);
                                        uSqlViewInstance.ComputeAccountName = computeAccountNameInstance;
                                    }
                                    
                                    JToken versionValue = valueValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        Guid versionInstance = Guid.Parse(((string)versionValue));
                                        uSqlViewInstance.Version = versionInstance;
                                    }
                                }
                            }
                            
                            JToken itemTypeValue = responseDoc["itemType"];
                            if (itemTypeValue != null && itemTypeValue.Type != JTokenType.Null)
                            {
                                string itemTypeInstance = ((string)itemTypeValue);
                                viewListInstance.ItemType = itemTypeInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                int countInstance = ((int)countValue);
                                viewListInstance.Count = countInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                viewListInstance.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Modifies the specified secret for use with external data sources in
        /// the specified database
        /// </summary>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resourceGroup the Data Lake Analytics
        /// account is in
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the database to modify the secret in.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to modify the secret (name and
        /// password)
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create secret operation response.
        /// </returns>
        public async Task<CatalogSecretCreateResponse> UpdateSecretAsync(string accountName, string resourceGroupName, string databaseName, DataLakeAnalyticsCatalogSecretCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Password == null)
            {
                throw new ArgumentNullException("parameters.Password");
            }
            if (parameters.SecretName == null)
            {
                throw new ArgumentNullException("parameters.SecretName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateSecretAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.CatalogServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.CatalogServiceUri);
            }
            url = url + "/catalog/usql/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/secrets/";
            url = url + Uri.EscapeDataString(parameters.SecretName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsCatalog 0.9.3-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue = new JObject();
                requestDoc = dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue;
                
                dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue["password"] = parameters.Password;
                
                if (parameters.Uri != null)
                {
                    dataLakeAnalyticsCatalogSecretCreateOrUpdateParametersValue["uri"] = parameters.Uri;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    CatalogSecretCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new CatalogSecretCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            USqlSecret secretInstance = new USqlSecret();
                            result.Secret = secretInstance;
                            
                            JToken databaseNameValue = responseDoc["databaseName"];
                            if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                            {
                                string databaseNameInstance = ((string)databaseNameValue);
                                secretInstance.DatabaseName = databaseNameInstance;
                            }
                            
                            JToken credentialNameValue = responseDoc["credentialName"];
                            if (credentialNameValue != null && credentialNameValue.Type != JTokenType.Null)
                            {
                                string credentialNameInstance = ((string)credentialNameValue);
                                secretInstance.Name = credentialNameInstance;
                            }
                            
                            JToken userNameValue = responseDoc["userName"];
                            if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                            {
                                string userNameInstance = ((string)userNameValue);
                                secretInstance.UserName = userNameInstance;
                            }
                            
                            JToken creationTimeValue = responseDoc["creationTime"];
                            if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                secretInstance.CreationTime = creationTimeInstance;
                            }
                            
                            JToken identityValue = responseDoc["identity"];
                            if (identityValue != null && identityValue.Type != JTokenType.Null)
                            {
                                Guid identityInstance = Guid.Parse(((string)identityValue));
                                secretInstance.Identity = identityInstance;
                            }
                            
                            JToken computeAccountNameValue = responseDoc["computeAccountName"];
                            if (computeAccountNameValue != null && computeAccountNameValue.Type != JTokenType.Null)
                            {
                                string computeAccountNameInstance = ((string)computeAccountNameValue);
                                secretInstance.ComputeAccountName = computeAccountNameInstance;
                            }
                            
                            JToken versionValue = responseDoc["version"];
                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                            {
                                Guid versionInstance = Guid.Parse(((string)versionValue));
                                secretInstance.Version = versionInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
