// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Inbound NAT pool of the loadbalancer
    /// </summary>
    public partial class InboundNatPool : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the InboundNatPool class.
        /// </summary>
        public InboundNatPool() { }

        /// <summary>
        /// Initializes a new instance of the InboundNatPool class.
        /// </summary>
        public InboundNatPool(string protocol, int? frontendPortRangeStart, int? frontendPortRangeEnd, int? backendPort, string name = default(string), string etag = default(string), SubResource frontendIPConfiguration = default(SubResource), string provisioningState = default(string))
        {
            Name = name;
            Etag = etag;
            FrontendIPConfiguration = frontendIPConfiguration;
            Protocol = protocol;
            FrontendPortRangeStart = frontendPortRangeStart;
            FrontendPortRangeEnd = frontendPortRangeEnd;
            BackendPort = backendPort;
            ProvisioningState = provisioningState;
        }

        /// <summary>
        /// Gets name of the resource that is unique within a resource group.
        /// This name can be used to access the resource
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is
        /// updated
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or sets a reference to frontend IP Addresses
        /// </summary>
        [JsonProperty(PropertyName = "properties.frontendIPConfiguration")]
        public SubResource FrontendIPConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the transport potocol for the external endpoint.
        /// Possible values are Udp or Tcp. Possible values for this property
        /// include: 'Udp', 'Tcp'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or sets the starting port range for the NAT pool. You can
        /// spcify any port number you choose, but the port numbers specified
        /// for each role in the service must be unique. Possible values
        /// range between 1 and 65535, inclusive
        /// </summary>
        [JsonProperty(PropertyName = "properties.frontendPortRangeStart")]
        public int? FrontendPortRangeStart { get; set; }

        /// <summary>
        /// Gets or sets the ending port range for the NAT pool. You can
        /// spcify any port number you choose, but the port numbers specified
        /// for each role in the service must be unique. Possible values
        /// range between 1 and 65535, inclusive
        /// </summary>
        [JsonProperty(PropertyName = "properties.frontendPortRangeEnd")]
        public int? FrontendPortRangeEnd { get; set; }

        /// <summary>
        /// Gets or sets a port used for internal connections on the endpoint.
        /// The localPort attribute maps the eternal port of the endpoint to
        /// an internal port on a role. This is useful in scenarios where a
        /// role must communicate to an internal compotnent on a port that is
        /// different from the one that is exposed externally. If not
        /// specified, the value of localPort is the same as the port
        /// attribute. Set the value of localPort to '*' to automatically
        /// assign an unallocated port that is discoverable using the runtime
        /// API
        /// </summary>
        [JsonProperty(PropertyName = "properties.backendPort")]
        public int? BackendPort { get; set; }

        /// <summary>
        /// Gets or sets Provisioning state of the PublicIP resource
        /// Updating/Deleting/Failed
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Validate the object. Throws ArgumentException or ArgumentNullException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Protocol == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Protocol");
            }
            if (FrontendPortRangeStart == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FrontendPortRangeStart");
            }
            if (FrontendPortRangeEnd == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FrontendPortRangeEnd");
            }
            if (BackendPort == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BackendPort");
            }
        }
    }
}
