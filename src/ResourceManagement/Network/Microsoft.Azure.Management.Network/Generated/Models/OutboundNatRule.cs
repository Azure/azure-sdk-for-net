// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.13.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Outbound NAT pool of the loadbalancer
    /// </summary>
    public partial class OutboundNatRule : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the OutboundNatRule class.
        /// </summary>
        public OutboundNatRule() { }

        /// <summary>
        /// Initializes a new instance of the OutboundNatRule class.
        /// </summary>
        public OutboundNatRule(int? allocatedOutboundPorts, SubResource backendAddressPool, string name = default(string), string etag = default(string), IList<SubResource> frontendIPConfigurations = default(IList<SubResource>), string provisioningState = default(string))
        {
            Name = name;
            Etag = etag;
            AllocatedOutboundPorts = allocatedOutboundPorts;
            FrontendIPConfigurations = frontendIPConfigurations;
            BackendAddressPool = backendAddressPool;
            ProvisioningState = provisioningState;
        }

        /// <summary>
        /// Gets name of the resource that is unique within a resource group.
        /// This name can be used to access the resource
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// A unique read-only string that changes whenever the resource is
        /// updated
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or sets the number of outbound ports to be used for SNAT
        /// </summary>
        [JsonProperty(PropertyName = "properties.allocatedOutboundPorts")]
        public int? AllocatedOutboundPorts { get; set; }

        /// <summary>
        /// Gets or sets Frontend IP addresses of the load balancer
        /// </summary>
        [JsonProperty(PropertyName = "properties.frontendIPConfigurations")]
        public IList<SubResource> FrontendIPConfigurations { get; set; }

        /// <summary>
        /// Gets or sets a reference to a pool of DIPs. Outbound traffic is
        /// randomly load balanced across IPs in the backend IPs
        /// </summary>
        [JsonProperty(PropertyName = "properties.backendAddressPool")]
        public SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// Gets or sets Provisioning state of the PublicIP resource
        /// Updating/Deleting/Failed
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Validate the object. Throws ArgumentException or ArgumentNullException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (AllocatedOutboundPorts == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AllocatedOutboundPorts");
            }
            if (BackendAddressPool == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BackendAddressPool");
            }
        }
    }
}
