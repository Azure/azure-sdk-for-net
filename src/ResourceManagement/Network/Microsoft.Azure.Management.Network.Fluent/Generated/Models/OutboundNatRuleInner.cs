// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using Azure;
    using Management;
    using Network;
    using Fluent;
    using Rest;
    using Rest.Azure;
    using Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Outbound NAT pool of the load balancer.
    /// </summary>
    [JsonTransformation]
    public partial class OutboundNatRuleInner : Microsoft.Azure.Management.ResourceManager.Fluent.SubResource
    {
        /// <summary>
        /// Initializes a new instance of the OutboundNatRuleInner class.
        /// </summary>
        public OutboundNatRuleInner() { }

        /// <summary>
        /// Initializes a new instance of the OutboundNatRuleInner class.
        /// </summary>
        /// <param name="backendAddressPool">A reference to a pool of DIPs.
        /// Outbound traffic is randomly load balanced across IPs in the
        /// backend IPs.</param>
        /// <param name="allocatedOutboundPorts">The number of outbound ports
        /// to be used for NAT.</param>
        /// <param name="frontendIPConfigurations">The Frontend IP addresses of
        /// the load balancer.</param>
        /// <param name="provisioningState">Gets the provisioning state of the
        /// PublicIP resource. Possible values are: 'Updating', 'Deleting', and
        /// 'Failed'.</param>
        /// <param name="name">The name of the resource that is unique within a
        /// resource group. This name can be used to access the
        /// resource.</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated.</param>
        public OutboundNatRuleInner(ResourceManager.Fluent.SubResource backendAddressPool, string id = default(string), int? allocatedOutboundPorts = default(int?), IList<ResourceManager.Fluent.SubResource> frontendIPConfigurations = default(IList<ResourceManager.Fluent.SubResource>), string provisioningState = default(string), string name = default(string), string etag = default(string))
            : base(id)
        {
            AllocatedOutboundPorts = allocatedOutboundPorts;
            FrontendIPConfigurations = frontendIPConfigurations;
            BackendAddressPool = backendAddressPool;
            ProvisioningState = provisioningState;
            Name = name;
            Etag = etag;
        }

        /// <summary>
        /// Gets or sets the number of outbound ports to be used for NAT.
        /// </summary>
        [JsonProperty(PropertyName = "properties.allocatedOutboundPorts")]
        public int? AllocatedOutboundPorts { get; set; }

        /// <summary>
        /// Gets or sets the Frontend IP addresses of the load balancer.
        /// </summary>
        [JsonProperty(PropertyName = "properties.frontendIPConfigurations")]
        public IList<ResourceManager.Fluent.SubResource> FrontendIPConfigurations { get; set; }

        /// <summary>
        /// Gets or sets a reference to a pool of DIPs. Outbound traffic is
        /// randomly load balanced across IPs in the backend IPs.
        /// </summary>
        [JsonProperty(PropertyName = "properties.backendAddressPool")]
        public ResourceManager.Fluent.SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// Gets the provisioning state of the PublicIP resource. Possible
        /// values are: 'Updating', 'Deleting', and 'Failed'.
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets or sets the name of the resource that is unique within a
        /// resource group. This name can be used to access the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets a unique read-only string that changes whenever the
        /// resource is updated.
        /// </summary>
        [JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BackendAddressPool == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "BackendAddressPool");
            }
        }
    }
}

