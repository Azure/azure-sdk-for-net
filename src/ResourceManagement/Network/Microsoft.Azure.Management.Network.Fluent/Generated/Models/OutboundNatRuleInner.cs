// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Network.Fluent.Models
{
    using System.Linq;

    /// <summary>
    /// Outbound NAT pool of the loadbalancer
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class OutboundNatRuleInner : Microsoft.Azure.Management.Resource.Fluent.SubResource
    {
        /// <summary>
        /// Initializes a new instance of the OutboundNatRuleInner class.
        /// </summary>
        public OutboundNatRuleInner() { }

        /// <summary>
        /// Initializes a new instance of the OutboundNatRuleInner class.
        /// </summary>
        /// <param name="backendAddressPool">Gets or sets a reference to a
        /// pool of DIPs. Outbound traffic is randomly load balanced across
        /// IPs in the backend IPs</param>
        /// <param name="allocatedOutboundPorts">Gets or sets the number of
        /// outbound ports to be used for SNAT</param>
        /// <param name="frontendIPConfigurations">Gets or sets Frontend IP
        /// addresses of the load balancer</param>
        /// <param name="provisioningState">Gets provisioning state of the
        /// PublicIP resource Updating/Deleting/Failed</param>
        /// <param name="name">Gets name of the resource that is unique within
        /// a resource group. This name can be used to access the
        /// resource</param>
        /// <param name="etag">A unique read-only string that changes whenever
        /// the resource is updated</param>
        public OutboundNatRuleInner(Microsoft.Azure.Management.Resource.Fluent.SubResource backendAddressPool, string id = default(string), int? allocatedOutboundPorts = default(int?), System.Collections.Generic.IList<Microsoft.Azure.Management.Resource.Fluent.SubResource> frontendIPConfigurations = default(System.Collections.Generic.IList<Microsoft.Azure.Management.Resource.Fluent.SubResource>), string provisioningState = default(string), string name = default(string), string etag = default(string))
            : base(id)
        {
            AllocatedOutboundPorts = allocatedOutboundPorts;
            FrontendIPConfigurations = frontendIPConfigurations;
            BackendAddressPool = backendAddressPool;
            ProvisioningState = provisioningState;
            Name = name;
            Etag = etag;
        }

        /// <summary>
        /// Gets or sets the number of outbound ports to be used for SNAT
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allocatedOutboundPorts")]
        public int? AllocatedOutboundPorts { get; set; }

        /// <summary>
        /// Gets or sets Frontend IP addresses of the load balancer
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendIPConfigurations")]
        public System.Collections.Generic.IList<Microsoft.Azure.Management.Resource.Fluent.SubResource> FrontendIPConfigurations { get; set; }

        /// <summary>
        /// Gets or sets a reference to a pool of DIPs. Outbound traffic is
        /// randomly load balanced across IPs in the backend IPs
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendAddressPool")]
        public Microsoft.Azure.Management.Resource.Fluent.SubResource BackendAddressPool { get; set; }

        /// <summary>
        /// Gets provisioning state of the PublicIP resource
        /// Updating/Deleting/Failed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets name of the resource that is unique within a resource group.
        /// This name can be used to access the resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets a unique read-only string that changes whenever the
        /// resource is updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (BackendAddressPool == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "BackendAddressPool");
            }
        }
    }
}
