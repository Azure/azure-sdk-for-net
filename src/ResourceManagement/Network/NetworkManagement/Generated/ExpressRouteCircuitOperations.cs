// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Network
{
    /// <summary>
    /// The Network Resource Provider API includes operations for managing the
    /// ExpressRouteCircuits for your subscription.
    /// </summary>
    internal partial class ExpressRouteCircuitOperations : IServiceOperations<NetworkResourceProviderClient>, IExpressRouteCircuitOperations
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteCircuitOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ExpressRouteCircuitOperations(NetworkResourceProviderClient client)
        {
            this._client = client;
        }
        
        private NetworkResourceProviderClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Network.NetworkResourceProviderClient.
        /// </summary>
        public NetworkResourceProviderClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Put ExpressRouteCircuit operation creates/updates a
        /// ExpressRouteCircuit
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the circuit.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create/delete
        /// ExpressRouteCircuit operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of a PUT ExpressRouteCircuit operation
        /// </returns>
        public async Task<ExpressRouteCircuitPutResponse> BeginCreateOrUpdatingAsync(string resourceGroupName, string circuitName, ExpressRouteCircuit parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (circuitName == null)
            {
                throw new ArgumentNullException("circuitName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.BillingType == null)
            {
                throw new ArgumentNullException("parameters.BillingType");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits/";
            url = url + Uri.EscapeDataString(circuitName);
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject expressRouteCircuitJsonFormatValue = new JObject();
                requestDoc = expressRouteCircuitJsonFormatValue;
                
                if (parameters.Sku != null)
                {
                    JObject skuValue = new JObject();
                    expressRouteCircuitJsonFormatValue["sku"] = skuValue;
                    
                    if (parameters.Sku.Name != null)
                    {
                        skuValue["name"] = parameters.Sku.Name;
                    }
                    
                    if (parameters.Sku.Tier != null)
                    {
                        skuValue["tier"] = parameters.Sku.Tier;
                    }
                    
                    if (parameters.Sku.Family != null)
                    {
                        skuValue["family"] = parameters.Sku.Family;
                    }
                }
                
                JObject propertiesValue = new JObject();
                expressRouteCircuitJsonFormatValue["properties"] = propertiesValue;
                
                if (parameters.CircuitProvisioningState != null)
                {
                    propertiesValue["circuitProvisioningState"] = parameters.CircuitProvisioningState;
                }
                
                if (parameters.ServiceProviderProvisioningState != null)
                {
                    propertiesValue["serviceProviderProvisioningState"] = parameters.ServiceProviderProvisioningState;
                }
                
                if (parameters.Authorizations != null)
                {
                    if (parameters.Authorizations is ILazyCollection == false || ((ILazyCollection)parameters.Authorizations).IsInitialized)
                    {
                        JArray authorizationsArray = new JArray();
                        foreach (ExpressRouteCircuitAuthorization authorizationsItem in parameters.Authorizations)
                        {
                            JObject authorizationJsonFormatValue = new JObject();
                            authorizationsArray.Add(authorizationJsonFormatValue);
                            
                            JObject propertiesValue2 = new JObject();
                            authorizationJsonFormatValue["properties"] = propertiesValue2;
                            
                            if (authorizationsItem.AuthorizationKey != null)
                            {
                                propertiesValue2["authorizationKey"] = authorizationsItem.AuthorizationKey;
                            }
                            
                            if (authorizationsItem.AuthorizationUseStatus != null)
                            {
                                propertiesValue2["authorizationUseStatus"] = authorizationsItem.AuthorizationUseStatus;
                            }
                            
                            if (authorizationsItem.ProvisioningState != null)
                            {
                                propertiesValue2["provisioningState"] = authorizationsItem.ProvisioningState;
                            }
                            
                            if (authorizationsItem.Name != null)
                            {
                                authorizationJsonFormatValue["name"] = authorizationsItem.Name;
                            }
                            
                            if (authorizationsItem.Etag != null)
                            {
                                authorizationJsonFormatValue["etag"] = authorizationsItem.Etag;
                            }
                            
                            if (authorizationsItem.Id != null)
                            {
                                authorizationJsonFormatValue["id"] = authorizationsItem.Id;
                            }
                        }
                        propertiesValue["authorizations"] = authorizationsArray;
                    }
                }
                
                if (parameters.Peerings != null)
                {
                    if (parameters.Peerings is ILazyCollection == false || ((ILazyCollection)parameters.Peerings).IsInitialized)
                    {
                        JArray peeringsArray = new JArray();
                        foreach (ExpressRouteCircuitPeering peeringsItem in parameters.Peerings)
                        {
                            JObject expressRouteCircuitPeeringJsonFormatValue = new JObject();
                            peeringsArray.Add(expressRouteCircuitPeeringJsonFormatValue);
                            
                            JObject propertiesValue3 = new JObject();
                            expressRouteCircuitPeeringJsonFormatValue["properties"] = propertiesValue3;
                            
                            if (peeringsItem.PeeringType != null)
                            {
                                propertiesValue3["peeringType"] = peeringsItem.PeeringType;
                            }
                            
                            if (peeringsItem.State != null)
                            {
                                propertiesValue3["state"] = peeringsItem.State;
                            }
                            
                            propertiesValue3["azureASN"] = peeringsItem.AzureASN;
                            
                            propertiesValue3["peerASN"] = peeringsItem.PeerASN;
                            
                            if (peeringsItem.PrimaryPeerAddressPrefix != null)
                            {
                                propertiesValue3["primaryPeerAddressPrefix"] = peeringsItem.PrimaryPeerAddressPrefix;
                            }
                            
                            if (peeringsItem.SecondaryPeerAddressPrefix != null)
                            {
                                propertiesValue3["secondaryPeerAddressPrefix"] = peeringsItem.SecondaryPeerAddressPrefix;
                            }
                            
                            if (peeringsItem.PrimaryAzurePort != null)
                            {
                                propertiesValue3["primaryAzurePort"] = peeringsItem.PrimaryAzurePort;
                            }
                            
                            if (peeringsItem.SecondaryAzurePort != null)
                            {
                                propertiesValue3["secondaryAzurePort"] = peeringsItem.SecondaryAzurePort;
                            }
                            
                            if (peeringsItem.SharedKey != null)
                            {
                                propertiesValue3["sharedKey"] = peeringsItem.SharedKey;
                            }
                            
                            propertiesValue3["vlanId"] = peeringsItem.VlanId;
                            
                            if (peeringsItem.MicrosoftPeeringConfig != null)
                            {
                                JObject microsoftPeeringConfigValue = new JObject();
                                propertiesValue3["microsoftPeeringConfig"] = microsoftPeeringConfigValue;
                                
                                if (peeringsItem.MicrosoftPeeringConfig.AdvertisedPublicPrefixes != null)
                                {
                                    if (peeringsItem.MicrosoftPeeringConfig.AdvertisedPublicPrefixes is ILazyCollection == false || ((ILazyCollection)peeringsItem.MicrosoftPeeringConfig.AdvertisedPublicPrefixes).IsInitialized)
                                    {
                                        JArray advertisedPublicPrefixesArray = new JArray();
                                        foreach (string advertisedPublicPrefixesItem in peeringsItem.MicrosoftPeeringConfig.AdvertisedPublicPrefixes)
                                        {
                                            advertisedPublicPrefixesArray.Add(advertisedPublicPrefixesItem);
                                        }
                                        microsoftPeeringConfigValue["advertisedPublicPrefixes"] = advertisedPublicPrefixesArray;
                                    }
                                }
                                
                                if (peeringsItem.MicrosoftPeeringConfig.AdvertisedPublicPrefixesState != null)
                                {
                                    microsoftPeeringConfigValue["advertisedPublicPrefixesState"] = peeringsItem.MicrosoftPeeringConfig.AdvertisedPublicPrefixesState;
                                }
                                
                                microsoftPeeringConfigValue["customerASN"] = peeringsItem.MicrosoftPeeringConfig.CustomerASN;
                                
                                if (peeringsItem.MicrosoftPeeringConfig.RoutingRegistryName != null)
                                {
                                    microsoftPeeringConfigValue["routingRegistryName"] = peeringsItem.MicrosoftPeeringConfig.RoutingRegistryName;
                                }
                            }
                            
                            if (peeringsItem.Stats != null)
                            {
                                JObject statsValue = new JObject();
                                propertiesValue3["stats"] = statsValue;
                                
                                statsValue["bytesIn"] = peeringsItem.Stats.BytesIn;
                                
                                statsValue["bytesOut"] = peeringsItem.Stats.BytesOut;
                            }
                            
                            if (peeringsItem.ProvisioningState != null)
                            {
                                propertiesValue3["provisioningState"] = peeringsItem.ProvisioningState;
                            }
                            
                            if (peeringsItem.Name != null)
                            {
                                expressRouteCircuitPeeringJsonFormatValue["name"] = peeringsItem.Name;
                            }
                            
                            if (peeringsItem.Etag != null)
                            {
                                expressRouteCircuitPeeringJsonFormatValue["etag"] = peeringsItem.Etag;
                            }
                            
                            if (peeringsItem.Id != null)
                            {
                                expressRouteCircuitPeeringJsonFormatValue["id"] = peeringsItem.Id;
                            }
                        }
                        propertiesValue["peerings"] = peeringsArray;
                    }
                }
                
                if (parameters.ServiceKey != null)
                {
                    propertiesValue["serviceKey"] = parameters.ServiceKey;
                }
                
                if (parameters.ServiceProviderNotes != null)
                {
                    propertiesValue["serviceProviderNotes"] = parameters.ServiceProviderNotes;
                }
                
                if (parameters.ServiceProviderProperties != null)
                {
                    JObject serviceProviderPropertiesValue = new JObject();
                    propertiesValue["serviceProviderProperties"] = serviceProviderPropertiesValue;
                    
                    if (parameters.ServiceProviderProperties.ServiceProviderName != null)
                    {
                        serviceProviderPropertiesValue["serviceProviderName"] = parameters.ServiceProviderProperties.ServiceProviderName;
                    }
                    
                    if (parameters.ServiceProviderProperties.PeeringLocation != null)
                    {
                        serviceProviderPropertiesValue["peeringLocation"] = parameters.ServiceProviderProperties.PeeringLocation;
                    }
                    
                    serviceProviderPropertiesValue["bandwidthInMbps"] = parameters.ServiceProviderProperties.BandwidthInMbps;
                }
                
                if (parameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = parameters.ProvisioningState;
                }
                
                if (parameters.Etag != null)
                {
                    expressRouteCircuitJsonFormatValue["etag"] = parameters.Etag;
                }
                
                if (parameters.Id != null)
                {
                    expressRouteCircuitJsonFormatValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    expressRouteCircuitJsonFormatValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    expressRouteCircuitJsonFormatValue["type"] = parameters.Type;
                }
                
                expressRouteCircuitJsonFormatValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    expressRouteCircuitJsonFormatValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteCircuitPutResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteCircuitPutResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ExpressRouteCircuit expressRouteCircuitInstance = new ExpressRouteCircuit();
                            result.ExpressRouteCircuit = expressRouteCircuitInstance;
                            
                            JToken skuValue2 = responseDoc["sku"];
                            if (skuValue2 != null && skuValue2.Type != JTokenType.Null)
                            {
                                ExpressRouteCircuitSku skuInstance = new ExpressRouteCircuitSku();
                                expressRouteCircuitInstance.Sku = skuInstance;
                                
                                JToken nameValue = skuValue2["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    skuInstance.Name = nameInstance;
                                }
                                
                                JToken tierValue = skuValue2["tier"];
                                if (tierValue != null && tierValue.Type != JTokenType.Null)
                                {
                                    string tierInstance = ((string)tierValue);
                                    skuInstance.Tier = tierInstance;
                                }
                                
                                JToken familyValue = skuValue2["family"];
                                if (familyValue != null && familyValue.Type != JTokenType.Null)
                                {
                                    string familyInstance = ((string)familyValue);
                                    skuInstance.Family = familyInstance;
                                }
                            }
                            
                            JToken propertiesValue4 = responseDoc["properties"];
                            if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                            {
                                JToken circuitProvisioningStateValue = propertiesValue4["circuitProvisioningState"];
                                if (circuitProvisioningStateValue != null && circuitProvisioningStateValue.Type != JTokenType.Null)
                                {
                                    string circuitProvisioningStateInstance = ((string)circuitProvisioningStateValue);
                                    expressRouteCircuitInstance.CircuitProvisioningState = circuitProvisioningStateInstance;
                                }
                                
                                JToken serviceProviderProvisioningStateValue = propertiesValue4["serviceProviderProvisioningState"];
                                if (serviceProviderProvisioningStateValue != null && serviceProviderProvisioningStateValue.Type != JTokenType.Null)
                                {
                                    string serviceProviderProvisioningStateInstance = ((string)serviceProviderProvisioningStateValue);
                                    expressRouteCircuitInstance.ServiceProviderProvisioningState = serviceProviderProvisioningStateInstance;
                                }
                                
                                JToken authorizationsArray2 = propertiesValue4["authorizations"];
                                if (authorizationsArray2 != null && authorizationsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken authorizationsValue in ((JArray)authorizationsArray2))
                                    {
                                        ExpressRouteCircuitAuthorization authorizationJsonFormatInstance = new ExpressRouteCircuitAuthorization();
                                        expressRouteCircuitInstance.Authorizations.Add(authorizationJsonFormatInstance);
                                        
                                        JToken propertiesValue5 = authorizationsValue["properties"];
                                        if (propertiesValue5 != null && propertiesValue5.Type != JTokenType.Null)
                                        {
                                            JToken authorizationKeyValue = propertiesValue5["authorizationKey"];
                                            if (authorizationKeyValue != null && authorizationKeyValue.Type != JTokenType.Null)
                                            {
                                                string authorizationKeyInstance = ((string)authorizationKeyValue);
                                                authorizationJsonFormatInstance.AuthorizationKey = authorizationKeyInstance;
                                            }
                                            
                                            JToken authorizationUseStatusValue = propertiesValue5["authorizationUseStatus"];
                                            if (authorizationUseStatusValue != null && authorizationUseStatusValue.Type != JTokenType.Null)
                                            {
                                                string authorizationUseStatusInstance = ((string)authorizationUseStatusValue);
                                                authorizationJsonFormatInstance.AuthorizationUseStatus = authorizationUseStatusInstance;
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue5["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                authorizationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                        }
                                        
                                        JToken nameValue2 = authorizationsValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            authorizationJsonFormatInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken etagValue = authorizationsValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            authorizationJsonFormatInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken idValue = authorizationsValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            authorizationJsonFormatInstance.Id = idInstance;
                                        }
                                    }
                                }
                                
                                JToken peeringsArray2 = propertiesValue4["peerings"];
                                if (peeringsArray2 != null && peeringsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken peeringsValue in ((JArray)peeringsArray2))
                                    {
                                        ExpressRouteCircuitPeering expressRouteCircuitPeeringJsonFormatInstance = new ExpressRouteCircuitPeering();
                                        expressRouteCircuitInstance.Peerings.Add(expressRouteCircuitPeeringJsonFormatInstance);
                                        
                                        JToken propertiesValue6 = peeringsValue["properties"];
                                        if (propertiesValue6 != null && propertiesValue6.Type != JTokenType.Null)
                                        {
                                            JToken peeringTypeValue = propertiesValue6["peeringType"];
                                            if (peeringTypeValue != null && peeringTypeValue.Type != JTokenType.Null)
                                            {
                                                string peeringTypeInstance = ((string)peeringTypeValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.PeeringType = peeringTypeInstance;
                                            }
                                            
                                            JToken stateValue = propertiesValue6["state"];
                                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                                            {
                                                string stateInstance = ((string)stateValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.State = stateInstance;
                                            }
                                            
                                            JToken azureASNValue = propertiesValue6["azureASN"];
                                            if (azureASNValue != null && azureASNValue.Type != JTokenType.Null)
                                            {
                                                int azureASNInstance = ((int)azureASNValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.AzureASN = azureASNInstance;
                                            }
                                            
                                            JToken peerASNValue = propertiesValue6["peerASN"];
                                            if (peerASNValue != null && peerASNValue.Type != JTokenType.Null)
                                            {
                                                int peerASNInstance = ((int)peerASNValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.PeerASN = peerASNInstance;
                                            }
                                            
                                            JToken primaryPeerAddressPrefixValue = propertiesValue6["primaryPeerAddressPrefix"];
                                            if (primaryPeerAddressPrefixValue != null && primaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                            {
                                                string primaryPeerAddressPrefixInstance = ((string)primaryPeerAddressPrefixValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.PrimaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                                            }
                                            
                                            JToken secondaryPeerAddressPrefixValue = propertiesValue6["secondaryPeerAddressPrefix"];
                                            if (secondaryPeerAddressPrefixValue != null && secondaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                            {
                                                string secondaryPeerAddressPrefixInstance = ((string)secondaryPeerAddressPrefixValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.SecondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                                            }
                                            
                                            JToken primaryAzurePortValue = propertiesValue6["primaryAzurePort"];
                                            if (primaryAzurePortValue != null && primaryAzurePortValue.Type != JTokenType.Null)
                                            {
                                                string primaryAzurePortInstance = ((string)primaryAzurePortValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.PrimaryAzurePort = primaryAzurePortInstance;
                                            }
                                            
                                            JToken secondaryAzurePortValue = propertiesValue6["secondaryAzurePort"];
                                            if (secondaryAzurePortValue != null && secondaryAzurePortValue.Type != JTokenType.Null)
                                            {
                                                string secondaryAzurePortInstance = ((string)secondaryAzurePortValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.SecondaryAzurePort = secondaryAzurePortInstance;
                                            }
                                            
                                            JToken sharedKeyValue = propertiesValue6["sharedKey"];
                                            if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                            {
                                                string sharedKeyInstance = ((string)sharedKeyValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.SharedKey = sharedKeyInstance;
                                            }
                                            
                                            JToken vlanIdValue = propertiesValue6["vlanId"];
                                            if (vlanIdValue != null && vlanIdValue.Type != JTokenType.Null)
                                            {
                                                int vlanIdInstance = ((int)vlanIdValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.VlanId = vlanIdInstance;
                                            }
                                            
                                            JToken microsoftPeeringConfigValue2 = propertiesValue6["microsoftPeeringConfig"];
                                            if (microsoftPeeringConfigValue2 != null && microsoftPeeringConfigValue2.Type != JTokenType.Null)
                                            {
                                                ExpressRouteCircuitPeeringConfig microsoftPeeringConfigInstance = new ExpressRouteCircuitPeeringConfig();
                                                expressRouteCircuitPeeringJsonFormatInstance.MicrosoftPeeringConfig = microsoftPeeringConfigInstance;
                                                
                                                JToken advertisedPublicPrefixesArray2 = microsoftPeeringConfigValue2["advertisedPublicPrefixes"];
                                                if (advertisedPublicPrefixesArray2 != null && advertisedPublicPrefixesArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken advertisedPublicPrefixesValue in ((JArray)advertisedPublicPrefixesArray2))
                                                    {
                                                        microsoftPeeringConfigInstance.AdvertisedPublicPrefixes.Add(((string)advertisedPublicPrefixesValue));
                                                    }
                                                }
                                                
                                                JToken advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue2["advertisedPublicPrefixesState"];
                                                if (advertisedPublicPrefixesStateValue != null && advertisedPublicPrefixesStateValue.Type != JTokenType.Null)
                                                {
                                                    string advertisedPublicPrefixesStateInstance = ((string)advertisedPublicPrefixesStateValue);
                                                    microsoftPeeringConfigInstance.AdvertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                                                }
                                                
                                                JToken customerASNValue = microsoftPeeringConfigValue2["customerASN"];
                                                if (customerASNValue != null && customerASNValue.Type != JTokenType.Null)
                                                {
                                                    int customerASNInstance = ((int)customerASNValue);
                                                    microsoftPeeringConfigInstance.CustomerASN = customerASNInstance;
                                                }
                                                
                                                JToken routingRegistryNameValue = microsoftPeeringConfigValue2["routingRegistryName"];
                                                if (routingRegistryNameValue != null && routingRegistryNameValue.Type != JTokenType.Null)
                                                {
                                                    string routingRegistryNameInstance = ((string)routingRegistryNameValue);
                                                    microsoftPeeringConfigInstance.RoutingRegistryName = routingRegistryNameInstance;
                                                }
                                            }
                                            
                                            JToken statsValue2 = propertiesValue6["stats"];
                                            if (statsValue2 != null && statsValue2.Type != JTokenType.Null)
                                            {
                                                ExpressRouteCircuitStats statsInstance = new ExpressRouteCircuitStats();
                                                expressRouteCircuitPeeringJsonFormatInstance.Stats = statsInstance;
                                                
                                                JToken bytesInValue = statsValue2["bytesIn"];
                                                if (bytesInValue != null && bytesInValue.Type != JTokenType.Null)
                                                {
                                                    int bytesInInstance = ((int)bytesInValue);
                                                    statsInstance.BytesIn = bytesInInstance;
                                                }
                                                
                                                JToken bytesOutValue = statsValue2["bytesOut"];
                                                if (bytesOutValue != null && bytesOutValue.Type != JTokenType.Null)
                                                {
                                                    int bytesOutInstance = ((int)bytesOutValue);
                                                    statsInstance.BytesOut = bytesOutInstance;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue2 = propertiesValue6["provisioningState"];
                                            if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                expressRouteCircuitPeeringJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                            }
                                        }
                                        
                                        JToken nameValue3 = peeringsValue["name"];
                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                        {
                                            string nameInstance3 = ((string)nameValue3);
                                            expressRouteCircuitPeeringJsonFormatInstance.Name = nameInstance3;
                                        }
                                        
                                        JToken etagValue2 = peeringsValue["etag"];
                                        if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                        {
                                            string etagInstance2 = ((string)etagValue2);
                                            expressRouteCircuitPeeringJsonFormatInstance.Etag = etagInstance2;
                                        }
                                        
                                        JToken idValue2 = peeringsValue["id"];
                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                        {
                                            string idInstance2 = ((string)idValue2);
                                            expressRouteCircuitPeeringJsonFormatInstance.Id = idInstance2;
                                        }
                                    }
                                }
                                
                                JToken serviceKeyValue = propertiesValue4["serviceKey"];
                                if (serviceKeyValue != null && serviceKeyValue.Type != JTokenType.Null)
                                {
                                    string serviceKeyInstance = ((string)serviceKeyValue);
                                    expressRouteCircuitInstance.ServiceKey = serviceKeyInstance;
                                }
                                
                                JToken serviceProviderNotesValue = propertiesValue4["serviceProviderNotes"];
                                if (serviceProviderNotesValue != null && serviceProviderNotesValue.Type != JTokenType.Null)
                                {
                                    string serviceProviderNotesInstance = ((string)serviceProviderNotesValue);
                                    expressRouteCircuitInstance.ServiceProviderNotes = serviceProviderNotesInstance;
                                }
                                
                                JToken serviceProviderPropertiesValue2 = propertiesValue4["serviceProviderProperties"];
                                if (serviceProviderPropertiesValue2 != null && serviceProviderPropertiesValue2.Type != JTokenType.Null)
                                {
                                    ExpressRouteCircuitServiceProviderProperties serviceProviderPropertiesInstance = new ExpressRouteCircuitServiceProviderProperties();
                                    expressRouteCircuitInstance.ServiceProviderProperties = serviceProviderPropertiesInstance;
                                    
                                    JToken serviceProviderNameValue = serviceProviderPropertiesValue2["serviceProviderName"];
                                    if (serviceProviderNameValue != null && serviceProviderNameValue.Type != JTokenType.Null)
                                    {
                                        string serviceProviderNameInstance = ((string)serviceProviderNameValue);
                                        serviceProviderPropertiesInstance.ServiceProviderName = serviceProviderNameInstance;
                                    }
                                    
                                    JToken peeringLocationValue = serviceProviderPropertiesValue2["peeringLocation"];
                                    if (peeringLocationValue != null && peeringLocationValue.Type != JTokenType.Null)
                                    {
                                        string peeringLocationInstance = ((string)peeringLocationValue);
                                        serviceProviderPropertiesInstance.PeeringLocation = peeringLocationInstance;
                                    }
                                    
                                    JToken bandwidthInMbpsValue = serviceProviderPropertiesValue2["bandwidthInMbps"];
                                    if (bandwidthInMbpsValue != null && bandwidthInMbpsValue.Type != JTokenType.Null)
                                    {
                                        int bandwidthInMbpsInstance = ((int)bandwidthInMbpsValue);
                                        serviceProviderPropertiesInstance.BandwidthInMbps = bandwidthInMbpsInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue3 = propertiesValue4["provisioningState"];
                                if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                    expressRouteCircuitInstance.ProvisioningState = provisioningStateInstance3;
                                }
                            }
                            
                            JToken etagValue3 = responseDoc["etag"];
                            if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                            {
                                string etagInstance3 = ((string)etagValue3);
                                expressRouteCircuitInstance.Etag = etagInstance3;
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                expressRouteCircuitInstance.Id = idInstance3;
                            }
                            
                            JToken nameValue4 = responseDoc["name"];
                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                            {
                                string nameInstance4 = ((string)nameValue4);
                                expressRouteCircuitInstance.Name = nameInstance4;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                expressRouteCircuitInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                expressRouteCircuitInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    expressRouteCircuitInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                Error errorInstance = new Error();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken targetValue = errorValue["target"];
                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                {
                                    string targetInstance = ((string)targetValue);
                                    errorInstance.Target = targetInstance;
                                }
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        errorInstance.Details.Add(errorDetailsInstance);
                                        
                                        JToken codeValue2 = detailsValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            errorDetailsInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken targetValue2 = detailsValue["target"];
                                        if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                        {
                                            string targetInstance2 = ((string)targetValue2);
                                            errorDetailsInstance.Target = targetInstance2;
                                        }
                                        
                                        JToken messageValue2 = detailsValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            errorDetailsInstance.Message = messageInstance2;
                                        }
                                    }
                                }
                                
                                JToken innerErrorValue = errorValue["innerError"];
                                if (innerErrorValue != null && innerErrorValue.Type != JTokenType.Null)
                                {
                                    string innerErrorInstance = ((string)innerErrorValue);
                                    errorInstance.InnerError = innerErrorInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The delete ExpressRouteCircuit operation deletes the specified
        /// ExpressRouteCircuit.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route Circuit.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// If the resource provide needs to return an error to any operation,
        /// it should return the appropriate HTTP error code and a message
        /// body as can be seen below.The message should be localized per the
        /// Accept-Language header specified in the original request such
        /// thatit could be directly be exposed to users
        /// </returns>
        public async Task<UpdateOperationResponse> BeginDeletingAsync(string resourceGroupName, string circuitName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (circuitName == null)
            {
                throw new ArgumentNullException("circuitName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits/";
            url = url + Uri.EscapeDataString(circuitName);
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdateOperationResponse result = null;
                    // Deserialize Response
                    result = new UpdateOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Put ExpressRouteCircuit operation creates/updates a
        /// ExpressRouteCircuit
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the ExpressRouteCircuit.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create/update
        /// ExpressRouteCircuit operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string circuitName, ExpressRouteCircuit parameters, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ExpressRouteCircuitPutResponse response = await client.ExpressRouteCircuits.BeginCreateOrUpdatingAsync(resourceGroupName, circuitName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == NetworkOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the express route circuit.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string circuitName, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            UpdateOperationResponse response = await client.ExpressRouteCircuits.BeginDeletingAsync(resourceGroupName, circuitName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == NetworkOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get ExpressRouteCircuit operation retreives information about
        /// the specified ExpressRouteCircuit.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the circuit.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of a GET ExpressRouteCircuit operation
        /// </returns>
        public async Task<ExpressRouteCircuitGetResponse> GetAsync(string resourceGroupName, string circuitName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (circuitName == null)
            {
                throw new ArgumentNullException("circuitName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits/";
            url = url + Uri.EscapeDataString(circuitName);
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteCircuitGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteCircuitGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ExpressRouteCircuit expressRouteCircuitInstance = new ExpressRouteCircuit();
                            result.ExpressRouteCircuit = expressRouteCircuitInstance;
                            
                            JToken skuValue = responseDoc["sku"];
                            if (skuValue != null && skuValue.Type != JTokenType.Null)
                            {
                                ExpressRouteCircuitSku skuInstance = new ExpressRouteCircuitSku();
                                expressRouteCircuitInstance.Sku = skuInstance;
                                
                                JToken nameValue = skuValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    skuInstance.Name = nameInstance;
                                }
                                
                                JToken tierValue = skuValue["tier"];
                                if (tierValue != null && tierValue.Type != JTokenType.Null)
                                {
                                    string tierInstance = ((string)tierValue);
                                    skuInstance.Tier = tierInstance;
                                }
                                
                                JToken familyValue = skuValue["family"];
                                if (familyValue != null && familyValue.Type != JTokenType.Null)
                                {
                                    string familyInstance = ((string)familyValue);
                                    skuInstance.Family = familyInstance;
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken circuitProvisioningStateValue = propertiesValue["circuitProvisioningState"];
                                if (circuitProvisioningStateValue != null && circuitProvisioningStateValue.Type != JTokenType.Null)
                                {
                                    string circuitProvisioningStateInstance = ((string)circuitProvisioningStateValue);
                                    expressRouteCircuitInstance.CircuitProvisioningState = circuitProvisioningStateInstance;
                                }
                                
                                JToken serviceProviderProvisioningStateValue = propertiesValue["serviceProviderProvisioningState"];
                                if (serviceProviderProvisioningStateValue != null && serviceProviderProvisioningStateValue.Type != JTokenType.Null)
                                {
                                    string serviceProviderProvisioningStateInstance = ((string)serviceProviderProvisioningStateValue);
                                    expressRouteCircuitInstance.ServiceProviderProvisioningState = serviceProviderProvisioningStateInstance;
                                }
                                
                                JToken authorizationsArray = propertiesValue["authorizations"];
                                if (authorizationsArray != null && authorizationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken authorizationsValue in ((JArray)authorizationsArray))
                                    {
                                        ExpressRouteCircuitAuthorization authorizationJsonFormatInstance = new ExpressRouteCircuitAuthorization();
                                        expressRouteCircuitInstance.Authorizations.Add(authorizationJsonFormatInstance);
                                        
                                        JToken propertiesValue2 = authorizationsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            JToken authorizationKeyValue = propertiesValue2["authorizationKey"];
                                            if (authorizationKeyValue != null && authorizationKeyValue.Type != JTokenType.Null)
                                            {
                                                string authorizationKeyInstance = ((string)authorizationKeyValue);
                                                authorizationJsonFormatInstance.AuthorizationKey = authorizationKeyInstance;
                                            }
                                            
                                            JToken authorizationUseStatusValue = propertiesValue2["authorizationUseStatus"];
                                            if (authorizationUseStatusValue != null && authorizationUseStatusValue.Type != JTokenType.Null)
                                            {
                                                string authorizationUseStatusInstance = ((string)authorizationUseStatusValue);
                                                authorizationJsonFormatInstance.AuthorizationUseStatus = authorizationUseStatusInstance;
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                authorizationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                        }
                                        
                                        JToken nameValue2 = authorizationsValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            authorizationJsonFormatInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken etagValue = authorizationsValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            authorizationJsonFormatInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken idValue = authorizationsValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            authorizationJsonFormatInstance.Id = idInstance;
                                        }
                                    }
                                }
                                
                                JToken peeringsArray = propertiesValue["peerings"];
                                if (peeringsArray != null && peeringsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken peeringsValue in ((JArray)peeringsArray))
                                    {
                                        ExpressRouteCircuitPeering expressRouteCircuitPeeringJsonFormatInstance = new ExpressRouteCircuitPeering();
                                        expressRouteCircuitInstance.Peerings.Add(expressRouteCircuitPeeringJsonFormatInstance);
                                        
                                        JToken propertiesValue3 = peeringsValue["properties"];
                                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                        {
                                            JToken peeringTypeValue = propertiesValue3["peeringType"];
                                            if (peeringTypeValue != null && peeringTypeValue.Type != JTokenType.Null)
                                            {
                                                string peeringTypeInstance = ((string)peeringTypeValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.PeeringType = peeringTypeInstance;
                                            }
                                            
                                            JToken stateValue = propertiesValue3["state"];
                                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                                            {
                                                string stateInstance = ((string)stateValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.State = stateInstance;
                                            }
                                            
                                            JToken azureASNValue = propertiesValue3["azureASN"];
                                            if (azureASNValue != null && azureASNValue.Type != JTokenType.Null)
                                            {
                                                int azureASNInstance = ((int)azureASNValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.AzureASN = azureASNInstance;
                                            }
                                            
                                            JToken peerASNValue = propertiesValue3["peerASN"];
                                            if (peerASNValue != null && peerASNValue.Type != JTokenType.Null)
                                            {
                                                int peerASNInstance = ((int)peerASNValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.PeerASN = peerASNInstance;
                                            }
                                            
                                            JToken primaryPeerAddressPrefixValue = propertiesValue3["primaryPeerAddressPrefix"];
                                            if (primaryPeerAddressPrefixValue != null && primaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                            {
                                                string primaryPeerAddressPrefixInstance = ((string)primaryPeerAddressPrefixValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.PrimaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                                            }
                                            
                                            JToken secondaryPeerAddressPrefixValue = propertiesValue3["secondaryPeerAddressPrefix"];
                                            if (secondaryPeerAddressPrefixValue != null && secondaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                            {
                                                string secondaryPeerAddressPrefixInstance = ((string)secondaryPeerAddressPrefixValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.SecondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                                            }
                                            
                                            JToken primaryAzurePortValue = propertiesValue3["primaryAzurePort"];
                                            if (primaryAzurePortValue != null && primaryAzurePortValue.Type != JTokenType.Null)
                                            {
                                                string primaryAzurePortInstance = ((string)primaryAzurePortValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.PrimaryAzurePort = primaryAzurePortInstance;
                                            }
                                            
                                            JToken secondaryAzurePortValue = propertiesValue3["secondaryAzurePort"];
                                            if (secondaryAzurePortValue != null && secondaryAzurePortValue.Type != JTokenType.Null)
                                            {
                                                string secondaryAzurePortInstance = ((string)secondaryAzurePortValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.SecondaryAzurePort = secondaryAzurePortInstance;
                                            }
                                            
                                            JToken sharedKeyValue = propertiesValue3["sharedKey"];
                                            if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                            {
                                                string sharedKeyInstance = ((string)sharedKeyValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.SharedKey = sharedKeyInstance;
                                            }
                                            
                                            JToken vlanIdValue = propertiesValue3["vlanId"];
                                            if (vlanIdValue != null && vlanIdValue.Type != JTokenType.Null)
                                            {
                                                int vlanIdInstance = ((int)vlanIdValue);
                                                expressRouteCircuitPeeringJsonFormatInstance.VlanId = vlanIdInstance;
                                            }
                                            
                                            JToken microsoftPeeringConfigValue = propertiesValue3["microsoftPeeringConfig"];
                                            if (microsoftPeeringConfigValue != null && microsoftPeeringConfigValue.Type != JTokenType.Null)
                                            {
                                                ExpressRouteCircuitPeeringConfig microsoftPeeringConfigInstance = new ExpressRouteCircuitPeeringConfig();
                                                expressRouteCircuitPeeringJsonFormatInstance.MicrosoftPeeringConfig = microsoftPeeringConfigInstance;
                                                
                                                JToken advertisedPublicPrefixesArray = microsoftPeeringConfigValue["advertisedPublicPrefixes"];
                                                if (advertisedPublicPrefixesArray != null && advertisedPublicPrefixesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken advertisedPublicPrefixesValue in ((JArray)advertisedPublicPrefixesArray))
                                                    {
                                                        microsoftPeeringConfigInstance.AdvertisedPublicPrefixes.Add(((string)advertisedPublicPrefixesValue));
                                                    }
                                                }
                                                
                                                JToken advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue["advertisedPublicPrefixesState"];
                                                if (advertisedPublicPrefixesStateValue != null && advertisedPublicPrefixesStateValue.Type != JTokenType.Null)
                                                {
                                                    string advertisedPublicPrefixesStateInstance = ((string)advertisedPublicPrefixesStateValue);
                                                    microsoftPeeringConfigInstance.AdvertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                                                }
                                                
                                                JToken customerASNValue = microsoftPeeringConfigValue["customerASN"];
                                                if (customerASNValue != null && customerASNValue.Type != JTokenType.Null)
                                                {
                                                    int customerASNInstance = ((int)customerASNValue);
                                                    microsoftPeeringConfigInstance.CustomerASN = customerASNInstance;
                                                }
                                                
                                                JToken routingRegistryNameValue = microsoftPeeringConfigValue["routingRegistryName"];
                                                if (routingRegistryNameValue != null && routingRegistryNameValue.Type != JTokenType.Null)
                                                {
                                                    string routingRegistryNameInstance = ((string)routingRegistryNameValue);
                                                    microsoftPeeringConfigInstance.RoutingRegistryName = routingRegistryNameInstance;
                                                }
                                            }
                                            
                                            JToken statsValue = propertiesValue3["stats"];
                                            if (statsValue != null && statsValue.Type != JTokenType.Null)
                                            {
                                                ExpressRouteCircuitStats statsInstance = new ExpressRouteCircuitStats();
                                                expressRouteCircuitPeeringJsonFormatInstance.Stats = statsInstance;
                                                
                                                JToken bytesInValue = statsValue["bytesIn"];
                                                if (bytesInValue != null && bytesInValue.Type != JTokenType.Null)
                                                {
                                                    int bytesInInstance = ((int)bytesInValue);
                                                    statsInstance.BytesIn = bytesInInstance;
                                                }
                                                
                                                JToken bytesOutValue = statsValue["bytesOut"];
                                                if (bytesOutValue != null && bytesOutValue.Type != JTokenType.Null)
                                                {
                                                    int bytesOutInstance = ((int)bytesOutValue);
                                                    statsInstance.BytesOut = bytesOutInstance;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                            if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                expressRouteCircuitPeeringJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                            }
                                        }
                                        
                                        JToken nameValue3 = peeringsValue["name"];
                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                        {
                                            string nameInstance3 = ((string)nameValue3);
                                            expressRouteCircuitPeeringJsonFormatInstance.Name = nameInstance3;
                                        }
                                        
                                        JToken etagValue2 = peeringsValue["etag"];
                                        if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                        {
                                            string etagInstance2 = ((string)etagValue2);
                                            expressRouteCircuitPeeringJsonFormatInstance.Etag = etagInstance2;
                                        }
                                        
                                        JToken idValue2 = peeringsValue["id"];
                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                        {
                                            string idInstance2 = ((string)idValue2);
                                            expressRouteCircuitPeeringJsonFormatInstance.Id = idInstance2;
                                        }
                                    }
                                }
                                
                                JToken serviceKeyValue = propertiesValue["serviceKey"];
                                if (serviceKeyValue != null && serviceKeyValue.Type != JTokenType.Null)
                                {
                                    string serviceKeyInstance = ((string)serviceKeyValue);
                                    expressRouteCircuitInstance.ServiceKey = serviceKeyInstance;
                                }
                                
                                JToken serviceProviderNotesValue = propertiesValue["serviceProviderNotes"];
                                if (serviceProviderNotesValue != null && serviceProviderNotesValue.Type != JTokenType.Null)
                                {
                                    string serviceProviderNotesInstance = ((string)serviceProviderNotesValue);
                                    expressRouteCircuitInstance.ServiceProviderNotes = serviceProviderNotesInstance;
                                }
                                
                                JToken serviceProviderPropertiesValue = propertiesValue["serviceProviderProperties"];
                                if (serviceProviderPropertiesValue != null && serviceProviderPropertiesValue.Type != JTokenType.Null)
                                {
                                    ExpressRouteCircuitServiceProviderProperties serviceProviderPropertiesInstance = new ExpressRouteCircuitServiceProviderProperties();
                                    expressRouteCircuitInstance.ServiceProviderProperties = serviceProviderPropertiesInstance;
                                    
                                    JToken serviceProviderNameValue = serviceProviderPropertiesValue["serviceProviderName"];
                                    if (serviceProviderNameValue != null && serviceProviderNameValue.Type != JTokenType.Null)
                                    {
                                        string serviceProviderNameInstance = ((string)serviceProviderNameValue);
                                        serviceProviderPropertiesInstance.ServiceProviderName = serviceProviderNameInstance;
                                    }
                                    
                                    JToken peeringLocationValue = serviceProviderPropertiesValue["peeringLocation"];
                                    if (peeringLocationValue != null && peeringLocationValue.Type != JTokenType.Null)
                                    {
                                        string peeringLocationInstance = ((string)peeringLocationValue);
                                        serviceProviderPropertiesInstance.PeeringLocation = peeringLocationInstance;
                                    }
                                    
                                    JToken bandwidthInMbpsValue = serviceProviderPropertiesValue["bandwidthInMbps"];
                                    if (bandwidthInMbpsValue != null && bandwidthInMbpsValue.Type != JTokenType.Null)
                                    {
                                        int bandwidthInMbpsInstance = ((int)bandwidthInMbpsValue);
                                        serviceProviderPropertiesInstance.BandwidthInMbps = bandwidthInMbpsInstance;
                                    }
                                }
                                
                                JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                    expressRouteCircuitInstance.ProvisioningState = provisioningStateInstance3;
                                }
                            }
                            
                            JToken etagValue3 = responseDoc["etag"];
                            if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                            {
                                string etagInstance3 = ((string)etagValue3);
                                expressRouteCircuitInstance.Etag = etagInstance3;
                            }
                            
                            JToken idValue3 = responseDoc["id"];
                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                            {
                                string idInstance3 = ((string)idValue3);
                                expressRouteCircuitInstance.Id = idInstance3;
                            }
                            
                            JToken nameValue4 = responseDoc["name"];
                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                            {
                                string nameInstance4 = ((string)nameValue4);
                                expressRouteCircuitInstance.Name = nameInstance4;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                expressRouteCircuitInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                expressRouteCircuitInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    expressRouteCircuitInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List ExpressRouteCircuit opertion retrieves all the
        /// ExpressRouteCircuits in a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListExpressRouteCircuit Api service call
        /// </returns>
        public async Task<ExpressRouteCircuitListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteCircuitListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteCircuitListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ExpressRouteCircuit expressRouteCircuitJsonFormatInstance = new ExpressRouteCircuit();
                                    result.ExpressRouteCircuits.Add(expressRouteCircuitJsonFormatInstance);
                                    
                                    JToken skuValue = valueValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        ExpressRouteCircuitSku skuInstance = new ExpressRouteCircuitSku();
                                        expressRouteCircuitJsonFormatInstance.Sku = skuInstance;
                                        
                                        JToken nameValue = skuValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            skuInstance.Name = nameInstance;
                                        }
                                        
                                        JToken tierValue = skuValue["tier"];
                                        if (tierValue != null && tierValue.Type != JTokenType.Null)
                                        {
                                            string tierInstance = ((string)tierValue);
                                            skuInstance.Tier = tierInstance;
                                        }
                                        
                                        JToken familyValue = skuValue["family"];
                                        if (familyValue != null && familyValue.Type != JTokenType.Null)
                                        {
                                            string familyInstance = ((string)familyValue);
                                            skuInstance.Family = familyInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken circuitProvisioningStateValue = propertiesValue["circuitProvisioningState"];
                                        if (circuitProvisioningStateValue != null && circuitProvisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string circuitProvisioningStateInstance = ((string)circuitProvisioningStateValue);
                                            expressRouteCircuitJsonFormatInstance.CircuitProvisioningState = circuitProvisioningStateInstance;
                                        }
                                        
                                        JToken serviceProviderProvisioningStateValue = propertiesValue["serviceProviderProvisioningState"];
                                        if (serviceProviderProvisioningStateValue != null && serviceProviderProvisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string serviceProviderProvisioningStateInstance = ((string)serviceProviderProvisioningStateValue);
                                            expressRouteCircuitJsonFormatInstance.ServiceProviderProvisioningState = serviceProviderProvisioningStateInstance;
                                        }
                                        
                                        JToken authorizationsArray = propertiesValue["authorizations"];
                                        if (authorizationsArray != null && authorizationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken authorizationsValue in ((JArray)authorizationsArray))
                                            {
                                                ExpressRouteCircuitAuthorization authorizationJsonFormatInstance = new ExpressRouteCircuitAuthorization();
                                                expressRouteCircuitJsonFormatInstance.Authorizations.Add(authorizationJsonFormatInstance);
                                                
                                                JToken propertiesValue2 = authorizationsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    JToken authorizationKeyValue = propertiesValue2["authorizationKey"];
                                                    if (authorizationKeyValue != null && authorizationKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string authorizationKeyInstance = ((string)authorizationKeyValue);
                                                        authorizationJsonFormatInstance.AuthorizationKey = authorizationKeyInstance;
                                                    }
                                                    
                                                    JToken authorizationUseStatusValue = propertiesValue2["authorizationUseStatus"];
                                                    if (authorizationUseStatusValue != null && authorizationUseStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string authorizationUseStatusInstance = ((string)authorizationUseStatusValue);
                                                        authorizationJsonFormatInstance.AuthorizationUseStatus = authorizationUseStatusInstance;
                                                    }
                                                    
                                                    JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        authorizationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                }
                                                
                                                JToken nameValue2 = authorizationsValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    authorizationJsonFormatInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken etagValue = authorizationsValue["etag"];
                                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                                {
                                                    string etagInstance = ((string)etagValue);
                                                    authorizationJsonFormatInstance.Etag = etagInstance;
                                                }
                                                
                                                JToken idValue = authorizationsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    authorizationJsonFormatInstance.Id = idInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken peeringsArray = propertiesValue["peerings"];
                                        if (peeringsArray != null && peeringsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken peeringsValue in ((JArray)peeringsArray))
                                            {
                                                ExpressRouteCircuitPeering expressRouteCircuitPeeringJsonFormatInstance = new ExpressRouteCircuitPeering();
                                                expressRouteCircuitJsonFormatInstance.Peerings.Add(expressRouteCircuitPeeringJsonFormatInstance);
                                                
                                                JToken propertiesValue3 = peeringsValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    JToken peeringTypeValue = propertiesValue3["peeringType"];
                                                    if (peeringTypeValue != null && peeringTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string peeringTypeInstance = ((string)peeringTypeValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.PeeringType = peeringTypeInstance;
                                                    }
                                                    
                                                    JToken stateValue = propertiesValue3["state"];
                                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                                    {
                                                        string stateInstance = ((string)stateValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.State = stateInstance;
                                                    }
                                                    
                                                    JToken azureASNValue = propertiesValue3["azureASN"];
                                                    if (azureASNValue != null && azureASNValue.Type != JTokenType.Null)
                                                    {
                                                        int azureASNInstance = ((int)azureASNValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.AzureASN = azureASNInstance;
                                                    }
                                                    
                                                    JToken peerASNValue = propertiesValue3["peerASN"];
                                                    if (peerASNValue != null && peerASNValue.Type != JTokenType.Null)
                                                    {
                                                        int peerASNInstance = ((int)peerASNValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.PeerASN = peerASNInstance;
                                                    }
                                                    
                                                    JToken primaryPeerAddressPrefixValue = propertiesValue3["primaryPeerAddressPrefix"];
                                                    if (primaryPeerAddressPrefixValue != null && primaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                                    {
                                                        string primaryPeerAddressPrefixInstance = ((string)primaryPeerAddressPrefixValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.PrimaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                                                    }
                                                    
                                                    JToken secondaryPeerAddressPrefixValue = propertiesValue3["secondaryPeerAddressPrefix"];
                                                    if (secondaryPeerAddressPrefixValue != null && secondaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                                    {
                                                        string secondaryPeerAddressPrefixInstance = ((string)secondaryPeerAddressPrefixValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.SecondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                                                    }
                                                    
                                                    JToken primaryAzurePortValue = propertiesValue3["primaryAzurePort"];
                                                    if (primaryAzurePortValue != null && primaryAzurePortValue.Type != JTokenType.Null)
                                                    {
                                                        string primaryAzurePortInstance = ((string)primaryAzurePortValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.PrimaryAzurePort = primaryAzurePortInstance;
                                                    }
                                                    
                                                    JToken secondaryAzurePortValue = propertiesValue3["secondaryAzurePort"];
                                                    if (secondaryAzurePortValue != null && secondaryAzurePortValue.Type != JTokenType.Null)
                                                    {
                                                        string secondaryAzurePortInstance = ((string)secondaryAzurePortValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.SecondaryAzurePort = secondaryAzurePortInstance;
                                                    }
                                                    
                                                    JToken sharedKeyValue = propertiesValue3["sharedKey"];
                                                    if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string sharedKeyInstance = ((string)sharedKeyValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.SharedKey = sharedKeyInstance;
                                                    }
                                                    
                                                    JToken vlanIdValue = propertiesValue3["vlanId"];
                                                    if (vlanIdValue != null && vlanIdValue.Type != JTokenType.Null)
                                                    {
                                                        int vlanIdInstance = ((int)vlanIdValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.VlanId = vlanIdInstance;
                                                    }
                                                    
                                                    JToken microsoftPeeringConfigValue = propertiesValue3["microsoftPeeringConfig"];
                                                    if (microsoftPeeringConfigValue != null && microsoftPeeringConfigValue.Type != JTokenType.Null)
                                                    {
                                                        ExpressRouteCircuitPeeringConfig microsoftPeeringConfigInstance = new ExpressRouteCircuitPeeringConfig();
                                                        expressRouteCircuitPeeringJsonFormatInstance.MicrosoftPeeringConfig = microsoftPeeringConfigInstance;
                                                        
                                                        JToken advertisedPublicPrefixesArray = microsoftPeeringConfigValue["advertisedPublicPrefixes"];
                                                        if (advertisedPublicPrefixesArray != null && advertisedPublicPrefixesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken advertisedPublicPrefixesValue in ((JArray)advertisedPublicPrefixesArray))
                                                            {
                                                                microsoftPeeringConfigInstance.AdvertisedPublicPrefixes.Add(((string)advertisedPublicPrefixesValue));
                                                            }
                                                        }
                                                        
                                                        JToken advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue["advertisedPublicPrefixesState"];
                                                        if (advertisedPublicPrefixesStateValue != null && advertisedPublicPrefixesStateValue.Type != JTokenType.Null)
                                                        {
                                                            string advertisedPublicPrefixesStateInstance = ((string)advertisedPublicPrefixesStateValue);
                                                            microsoftPeeringConfigInstance.AdvertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                                                        }
                                                        
                                                        JToken customerASNValue = microsoftPeeringConfigValue["customerASN"];
                                                        if (customerASNValue != null && customerASNValue.Type != JTokenType.Null)
                                                        {
                                                            int customerASNInstance = ((int)customerASNValue);
                                                            microsoftPeeringConfigInstance.CustomerASN = customerASNInstance;
                                                        }
                                                        
                                                        JToken routingRegistryNameValue = microsoftPeeringConfigValue["routingRegistryName"];
                                                        if (routingRegistryNameValue != null && routingRegistryNameValue.Type != JTokenType.Null)
                                                        {
                                                            string routingRegistryNameInstance = ((string)routingRegistryNameValue);
                                                            microsoftPeeringConfigInstance.RoutingRegistryName = routingRegistryNameInstance;
                                                        }
                                                    }
                                                    
                                                    JToken statsValue = propertiesValue3["stats"];
                                                    if (statsValue != null && statsValue.Type != JTokenType.Null)
                                                    {
                                                        ExpressRouteCircuitStats statsInstance = new ExpressRouteCircuitStats();
                                                        expressRouteCircuitPeeringJsonFormatInstance.Stats = statsInstance;
                                                        
                                                        JToken bytesInValue = statsValue["bytesIn"];
                                                        if (bytesInValue != null && bytesInValue.Type != JTokenType.Null)
                                                        {
                                                            int bytesInInstance = ((int)bytesInValue);
                                                            statsInstance.BytesIn = bytesInInstance;
                                                        }
                                                        
                                                        JToken bytesOutValue = statsValue["bytesOut"];
                                                        if (bytesOutValue != null && bytesOutValue.Type != JTokenType.Null)
                                                        {
                                                            int bytesOutInstance = ((int)bytesOutValue);
                                                            statsInstance.BytesOut = bytesOutInstance;
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                                    if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                        expressRouteCircuitPeeringJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                                    }
                                                }
                                                
                                                JToken nameValue3 = peeringsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    expressRouteCircuitPeeringJsonFormatInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken etagValue2 = peeringsValue["etag"];
                                                if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                                {
                                                    string etagInstance2 = ((string)etagValue2);
                                                    expressRouteCircuitPeeringJsonFormatInstance.Etag = etagInstance2;
                                                }
                                                
                                                JToken idValue2 = peeringsValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    expressRouteCircuitPeeringJsonFormatInstance.Id = idInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken serviceKeyValue = propertiesValue["serviceKey"];
                                        if (serviceKeyValue != null && serviceKeyValue.Type != JTokenType.Null)
                                        {
                                            string serviceKeyInstance = ((string)serviceKeyValue);
                                            expressRouteCircuitJsonFormatInstance.ServiceKey = serviceKeyInstance;
                                        }
                                        
                                        JToken serviceProviderNotesValue = propertiesValue["serviceProviderNotes"];
                                        if (serviceProviderNotesValue != null && serviceProviderNotesValue.Type != JTokenType.Null)
                                        {
                                            string serviceProviderNotesInstance = ((string)serviceProviderNotesValue);
                                            expressRouteCircuitJsonFormatInstance.ServiceProviderNotes = serviceProviderNotesInstance;
                                        }
                                        
                                        JToken serviceProviderPropertiesValue = propertiesValue["serviceProviderProperties"];
                                        if (serviceProviderPropertiesValue != null && serviceProviderPropertiesValue.Type != JTokenType.Null)
                                        {
                                            ExpressRouteCircuitServiceProviderProperties serviceProviderPropertiesInstance = new ExpressRouteCircuitServiceProviderProperties();
                                            expressRouteCircuitJsonFormatInstance.ServiceProviderProperties = serviceProviderPropertiesInstance;
                                            
                                            JToken serviceProviderNameValue = serviceProviderPropertiesValue["serviceProviderName"];
                                            if (serviceProviderNameValue != null && serviceProviderNameValue.Type != JTokenType.Null)
                                            {
                                                string serviceProviderNameInstance = ((string)serviceProviderNameValue);
                                                serviceProviderPropertiesInstance.ServiceProviderName = serviceProviderNameInstance;
                                            }
                                            
                                            JToken peeringLocationValue = serviceProviderPropertiesValue["peeringLocation"];
                                            if (peeringLocationValue != null && peeringLocationValue.Type != JTokenType.Null)
                                            {
                                                string peeringLocationInstance = ((string)peeringLocationValue);
                                                serviceProviderPropertiesInstance.PeeringLocation = peeringLocationInstance;
                                            }
                                            
                                            JToken bandwidthInMbpsValue = serviceProviderPropertiesValue["bandwidthInMbps"];
                                            if (bandwidthInMbpsValue != null && bandwidthInMbpsValue.Type != JTokenType.Null)
                                            {
                                                int bandwidthInMbpsInstance = ((int)bandwidthInMbpsValue);
                                                serviceProviderPropertiesInstance.BandwidthInMbps = bandwidthInMbpsInstance;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                            expressRouteCircuitJsonFormatInstance.ProvisioningState = provisioningStateInstance3;
                                        }
                                    }
                                    
                                    JToken etagValue3 = valueValue["etag"];
                                    if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                    {
                                        string etagInstance3 = ((string)etagValue3);
                                        expressRouteCircuitJsonFormatInstance.Etag = etagInstance3;
                                    }
                                    
                                    JToken idValue3 = valueValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        expressRouteCircuitJsonFormatInstance.Id = idInstance3;
                                    }
                                    
                                    JToken nameValue4 = valueValue["name"];
                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                    {
                                        string nameInstance4 = ((string)nameValue4);
                                        expressRouteCircuitJsonFormatInstance.Name = nameInstance4;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        expressRouteCircuitJsonFormatInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        expressRouteCircuitJsonFormatInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            expressRouteCircuitJsonFormatInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List ExpressRouteCircuit opertion retrieves all the
        /// ExpressRouteCircuits in a subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListExpressRouteCircuit Api service call
        /// </returns>
        public async Task<ExpressRouteCircuitListResponse> ListAllAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteCircuitListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteCircuitListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ExpressRouteCircuit expressRouteCircuitJsonFormatInstance = new ExpressRouteCircuit();
                                    result.ExpressRouteCircuits.Add(expressRouteCircuitJsonFormatInstance);
                                    
                                    JToken skuValue = valueValue["sku"];
                                    if (skuValue != null && skuValue.Type != JTokenType.Null)
                                    {
                                        ExpressRouteCircuitSku skuInstance = new ExpressRouteCircuitSku();
                                        expressRouteCircuitJsonFormatInstance.Sku = skuInstance;
                                        
                                        JToken nameValue = skuValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            skuInstance.Name = nameInstance;
                                        }
                                        
                                        JToken tierValue = skuValue["tier"];
                                        if (tierValue != null && tierValue.Type != JTokenType.Null)
                                        {
                                            string tierInstance = ((string)tierValue);
                                            skuInstance.Tier = tierInstance;
                                        }
                                        
                                        JToken familyValue = skuValue["family"];
                                        if (familyValue != null && familyValue.Type != JTokenType.Null)
                                        {
                                            string familyInstance = ((string)familyValue);
                                            skuInstance.Family = familyInstance;
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken circuitProvisioningStateValue = propertiesValue["circuitProvisioningState"];
                                        if (circuitProvisioningStateValue != null && circuitProvisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string circuitProvisioningStateInstance = ((string)circuitProvisioningStateValue);
                                            expressRouteCircuitJsonFormatInstance.CircuitProvisioningState = circuitProvisioningStateInstance;
                                        }
                                        
                                        JToken serviceProviderProvisioningStateValue = propertiesValue["serviceProviderProvisioningState"];
                                        if (serviceProviderProvisioningStateValue != null && serviceProviderProvisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string serviceProviderProvisioningStateInstance = ((string)serviceProviderProvisioningStateValue);
                                            expressRouteCircuitJsonFormatInstance.ServiceProviderProvisioningState = serviceProviderProvisioningStateInstance;
                                        }
                                        
                                        JToken authorizationsArray = propertiesValue["authorizations"];
                                        if (authorizationsArray != null && authorizationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken authorizationsValue in ((JArray)authorizationsArray))
                                            {
                                                ExpressRouteCircuitAuthorization authorizationJsonFormatInstance = new ExpressRouteCircuitAuthorization();
                                                expressRouteCircuitJsonFormatInstance.Authorizations.Add(authorizationJsonFormatInstance);
                                                
                                                JToken propertiesValue2 = authorizationsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    JToken authorizationKeyValue = propertiesValue2["authorizationKey"];
                                                    if (authorizationKeyValue != null && authorizationKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string authorizationKeyInstance = ((string)authorizationKeyValue);
                                                        authorizationJsonFormatInstance.AuthorizationKey = authorizationKeyInstance;
                                                    }
                                                    
                                                    JToken authorizationUseStatusValue = propertiesValue2["authorizationUseStatus"];
                                                    if (authorizationUseStatusValue != null && authorizationUseStatusValue.Type != JTokenType.Null)
                                                    {
                                                        string authorizationUseStatusInstance = ((string)authorizationUseStatusValue);
                                                        authorizationJsonFormatInstance.AuthorizationUseStatus = authorizationUseStatusInstance;
                                                    }
                                                    
                                                    JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        authorizationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                }
                                                
                                                JToken nameValue2 = authorizationsValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    authorizationJsonFormatInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken etagValue = authorizationsValue["etag"];
                                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                                {
                                                    string etagInstance = ((string)etagValue);
                                                    authorizationJsonFormatInstance.Etag = etagInstance;
                                                }
                                                
                                                JToken idValue = authorizationsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    authorizationJsonFormatInstance.Id = idInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken peeringsArray = propertiesValue["peerings"];
                                        if (peeringsArray != null && peeringsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken peeringsValue in ((JArray)peeringsArray))
                                            {
                                                ExpressRouteCircuitPeering expressRouteCircuitPeeringJsonFormatInstance = new ExpressRouteCircuitPeering();
                                                expressRouteCircuitJsonFormatInstance.Peerings.Add(expressRouteCircuitPeeringJsonFormatInstance);
                                                
                                                JToken propertiesValue3 = peeringsValue["properties"];
                                                if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                {
                                                    JToken peeringTypeValue = propertiesValue3["peeringType"];
                                                    if (peeringTypeValue != null && peeringTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string peeringTypeInstance = ((string)peeringTypeValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.PeeringType = peeringTypeInstance;
                                                    }
                                                    
                                                    JToken stateValue = propertiesValue3["state"];
                                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                                    {
                                                        string stateInstance = ((string)stateValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.State = stateInstance;
                                                    }
                                                    
                                                    JToken azureASNValue = propertiesValue3["azureASN"];
                                                    if (azureASNValue != null && azureASNValue.Type != JTokenType.Null)
                                                    {
                                                        int azureASNInstance = ((int)azureASNValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.AzureASN = azureASNInstance;
                                                    }
                                                    
                                                    JToken peerASNValue = propertiesValue3["peerASN"];
                                                    if (peerASNValue != null && peerASNValue.Type != JTokenType.Null)
                                                    {
                                                        int peerASNInstance = ((int)peerASNValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.PeerASN = peerASNInstance;
                                                    }
                                                    
                                                    JToken primaryPeerAddressPrefixValue = propertiesValue3["primaryPeerAddressPrefix"];
                                                    if (primaryPeerAddressPrefixValue != null && primaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                                    {
                                                        string primaryPeerAddressPrefixInstance = ((string)primaryPeerAddressPrefixValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.PrimaryPeerAddressPrefix = primaryPeerAddressPrefixInstance;
                                                    }
                                                    
                                                    JToken secondaryPeerAddressPrefixValue = propertiesValue3["secondaryPeerAddressPrefix"];
                                                    if (secondaryPeerAddressPrefixValue != null && secondaryPeerAddressPrefixValue.Type != JTokenType.Null)
                                                    {
                                                        string secondaryPeerAddressPrefixInstance = ((string)secondaryPeerAddressPrefixValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.SecondaryPeerAddressPrefix = secondaryPeerAddressPrefixInstance;
                                                    }
                                                    
                                                    JToken primaryAzurePortValue = propertiesValue3["primaryAzurePort"];
                                                    if (primaryAzurePortValue != null && primaryAzurePortValue.Type != JTokenType.Null)
                                                    {
                                                        string primaryAzurePortInstance = ((string)primaryAzurePortValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.PrimaryAzurePort = primaryAzurePortInstance;
                                                    }
                                                    
                                                    JToken secondaryAzurePortValue = propertiesValue3["secondaryAzurePort"];
                                                    if (secondaryAzurePortValue != null && secondaryAzurePortValue.Type != JTokenType.Null)
                                                    {
                                                        string secondaryAzurePortInstance = ((string)secondaryAzurePortValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.SecondaryAzurePort = secondaryAzurePortInstance;
                                                    }
                                                    
                                                    JToken sharedKeyValue = propertiesValue3["sharedKey"];
                                                    if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                                    {
                                                        string sharedKeyInstance = ((string)sharedKeyValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.SharedKey = sharedKeyInstance;
                                                    }
                                                    
                                                    JToken vlanIdValue = propertiesValue3["vlanId"];
                                                    if (vlanIdValue != null && vlanIdValue.Type != JTokenType.Null)
                                                    {
                                                        int vlanIdInstance = ((int)vlanIdValue);
                                                        expressRouteCircuitPeeringJsonFormatInstance.VlanId = vlanIdInstance;
                                                    }
                                                    
                                                    JToken microsoftPeeringConfigValue = propertiesValue3["microsoftPeeringConfig"];
                                                    if (microsoftPeeringConfigValue != null && microsoftPeeringConfigValue.Type != JTokenType.Null)
                                                    {
                                                        ExpressRouteCircuitPeeringConfig microsoftPeeringConfigInstance = new ExpressRouteCircuitPeeringConfig();
                                                        expressRouteCircuitPeeringJsonFormatInstance.MicrosoftPeeringConfig = microsoftPeeringConfigInstance;
                                                        
                                                        JToken advertisedPublicPrefixesArray = microsoftPeeringConfigValue["advertisedPublicPrefixes"];
                                                        if (advertisedPublicPrefixesArray != null && advertisedPublicPrefixesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken advertisedPublicPrefixesValue in ((JArray)advertisedPublicPrefixesArray))
                                                            {
                                                                microsoftPeeringConfigInstance.AdvertisedPublicPrefixes.Add(((string)advertisedPublicPrefixesValue));
                                                            }
                                                        }
                                                        
                                                        JToken advertisedPublicPrefixesStateValue = microsoftPeeringConfigValue["advertisedPublicPrefixesState"];
                                                        if (advertisedPublicPrefixesStateValue != null && advertisedPublicPrefixesStateValue.Type != JTokenType.Null)
                                                        {
                                                            string advertisedPublicPrefixesStateInstance = ((string)advertisedPublicPrefixesStateValue);
                                                            microsoftPeeringConfigInstance.AdvertisedPublicPrefixesState = advertisedPublicPrefixesStateInstance;
                                                        }
                                                        
                                                        JToken customerASNValue = microsoftPeeringConfigValue["customerASN"];
                                                        if (customerASNValue != null && customerASNValue.Type != JTokenType.Null)
                                                        {
                                                            int customerASNInstance = ((int)customerASNValue);
                                                            microsoftPeeringConfigInstance.CustomerASN = customerASNInstance;
                                                        }
                                                        
                                                        JToken routingRegistryNameValue = microsoftPeeringConfigValue["routingRegistryName"];
                                                        if (routingRegistryNameValue != null && routingRegistryNameValue.Type != JTokenType.Null)
                                                        {
                                                            string routingRegistryNameInstance = ((string)routingRegistryNameValue);
                                                            microsoftPeeringConfigInstance.RoutingRegistryName = routingRegistryNameInstance;
                                                        }
                                                    }
                                                    
                                                    JToken statsValue = propertiesValue3["stats"];
                                                    if (statsValue != null && statsValue.Type != JTokenType.Null)
                                                    {
                                                        ExpressRouteCircuitStats statsInstance = new ExpressRouteCircuitStats();
                                                        expressRouteCircuitPeeringJsonFormatInstance.Stats = statsInstance;
                                                        
                                                        JToken bytesInValue = statsValue["bytesIn"];
                                                        if (bytesInValue != null && bytesInValue.Type != JTokenType.Null)
                                                        {
                                                            int bytesInInstance = ((int)bytesInValue);
                                                            statsInstance.BytesIn = bytesInInstance;
                                                        }
                                                        
                                                        JToken bytesOutValue = statsValue["bytesOut"];
                                                        if (bytesOutValue != null && bytesOutValue.Type != JTokenType.Null)
                                                        {
                                                            int bytesOutInstance = ((int)bytesOutValue);
                                                            statsInstance.BytesOut = bytesOutInstance;
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                                    if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                        expressRouteCircuitPeeringJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                                    }
                                                }
                                                
                                                JToken nameValue3 = peeringsValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    expressRouteCircuitPeeringJsonFormatInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken etagValue2 = peeringsValue["etag"];
                                                if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                                {
                                                    string etagInstance2 = ((string)etagValue2);
                                                    expressRouteCircuitPeeringJsonFormatInstance.Etag = etagInstance2;
                                                }
                                                
                                                JToken idValue2 = peeringsValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    expressRouteCircuitPeeringJsonFormatInstance.Id = idInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken serviceKeyValue = propertiesValue["serviceKey"];
                                        if (serviceKeyValue != null && serviceKeyValue.Type != JTokenType.Null)
                                        {
                                            string serviceKeyInstance = ((string)serviceKeyValue);
                                            expressRouteCircuitJsonFormatInstance.ServiceKey = serviceKeyInstance;
                                        }
                                        
                                        JToken serviceProviderNotesValue = propertiesValue["serviceProviderNotes"];
                                        if (serviceProviderNotesValue != null && serviceProviderNotesValue.Type != JTokenType.Null)
                                        {
                                            string serviceProviderNotesInstance = ((string)serviceProviderNotesValue);
                                            expressRouteCircuitJsonFormatInstance.ServiceProviderNotes = serviceProviderNotesInstance;
                                        }
                                        
                                        JToken serviceProviderPropertiesValue = propertiesValue["serviceProviderProperties"];
                                        if (serviceProviderPropertiesValue != null && serviceProviderPropertiesValue.Type != JTokenType.Null)
                                        {
                                            ExpressRouteCircuitServiceProviderProperties serviceProviderPropertiesInstance = new ExpressRouteCircuitServiceProviderProperties();
                                            expressRouteCircuitJsonFormatInstance.ServiceProviderProperties = serviceProviderPropertiesInstance;
                                            
                                            JToken serviceProviderNameValue = serviceProviderPropertiesValue["serviceProviderName"];
                                            if (serviceProviderNameValue != null && serviceProviderNameValue.Type != JTokenType.Null)
                                            {
                                                string serviceProviderNameInstance = ((string)serviceProviderNameValue);
                                                serviceProviderPropertiesInstance.ServiceProviderName = serviceProviderNameInstance;
                                            }
                                            
                                            JToken peeringLocationValue = serviceProviderPropertiesValue["peeringLocation"];
                                            if (peeringLocationValue != null && peeringLocationValue.Type != JTokenType.Null)
                                            {
                                                string peeringLocationInstance = ((string)peeringLocationValue);
                                                serviceProviderPropertiesInstance.PeeringLocation = peeringLocationInstance;
                                            }
                                            
                                            JToken bandwidthInMbpsValue = serviceProviderPropertiesValue["bandwidthInMbps"];
                                            if (bandwidthInMbpsValue != null && bandwidthInMbpsValue.Type != JTokenType.Null)
                                            {
                                                int bandwidthInMbpsInstance = ((int)bandwidthInMbpsValue);
                                                serviceProviderPropertiesInstance.BandwidthInMbps = bandwidthInMbpsInstance;
                                            }
                                        }
                                        
                                        JToken provisioningStateValue3 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                            expressRouteCircuitJsonFormatInstance.ProvisioningState = provisioningStateInstance3;
                                        }
                                    }
                                    
                                    JToken etagValue3 = valueValue["etag"];
                                    if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                    {
                                        string etagInstance3 = ((string)etagValue3);
                                        expressRouteCircuitJsonFormatInstance.Etag = etagInstance3;
                                    }
                                    
                                    JToken idValue3 = valueValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        expressRouteCircuitJsonFormatInstance.Id = idInstance3;
                                    }
                                    
                                    JToken nameValue4 = valueValue["name"];
                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                    {
                                        string nameInstance4 = ((string)nameValue4);
                                        expressRouteCircuitJsonFormatInstance.Name = nameInstance4;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        expressRouteCircuitJsonFormatInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        expressRouteCircuitJsonFormatInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            expressRouteCircuitJsonFormatInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The ListArpTable from ExpressRouteCircuit opertion retrieves the
        /// currently advertised arp table associated with the
        /// ExpressRouteCircuits in a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the circuit.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListArpTable associated with the Express Route
        /// Circuits Api
        /// </returns>
        public async Task<ExpressRouteCircuitsArpTableListResponse> ListArpTableAsync(string resourceGroupName, string circuitName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (circuitName == null)
            {
                throw new ArgumentNullException("circuitName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                TracingAdapter.Enter(invocationId, this, "ListArpTableAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits/";
            url = url + Uri.EscapeDataString(circuitName);
            url = url + "arpTable";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteCircuitsArpTableListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteCircuitsArpTableListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ExpressRouteCircuitArpTable expressRouteCircuitArpTableInstance = new ExpressRouteCircuitArpTable();
                                    result.ArpTable.Add(expressRouteCircuitArpTableInstance);
                                    
                                    JToken ipAddressValue = valueValue["ipAddress"];
                                    if (ipAddressValue != null && ipAddressValue.Type != JTokenType.Null)
                                    {
                                        string ipAddressInstance = ((string)ipAddressValue);
                                        expressRouteCircuitArpTableInstance.IPAddress = ipAddressInstance;
                                    }
                                    
                                    JToken macAddressValue = valueValue["macAddress"];
                                    if (macAddressValue != null && macAddressValue.Type != JTokenType.Null)
                                    {
                                        string macAddressInstance = ((string)macAddressValue);
                                        expressRouteCircuitArpTableInstance.MacAddress = macAddressInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The ListRoutesTable from ExpressRouteCircuit opertion retrieves the
        /// currently advertised routes table associated with the
        /// ExpressRouteCircuits in a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the circuit.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListRoutesTable associated with the Express Route
        /// Circuits Api
        /// </returns>
        public async Task<ExpressRouteCircuitsRoutesTableListResponse> ListRoutesTableAsync(string resourceGroupName, string circuitName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (circuitName == null)
            {
                throw new ArgumentNullException("circuitName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                TracingAdapter.Enter(invocationId, this, "ListRoutesTableAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits/";
            url = url + Uri.EscapeDataString(circuitName);
            url = url + "routesTable";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteCircuitsRoutesTableListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteCircuitsRoutesTableListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ExpressRouteCircuitRoutesTable expressRouteCircuitRoutesTableInstance = new ExpressRouteCircuitRoutesTable();
                                    result.RoutesTable.Add(expressRouteCircuitRoutesTableInstance);
                                    
                                    JToken addressPrefixValue = valueValue["addressPrefix"];
                                    if (addressPrefixValue != null && addressPrefixValue.Type != JTokenType.Null)
                                    {
                                        string addressPrefixInstance = ((string)addressPrefixValue);
                                        expressRouteCircuitRoutesTableInstance.AddressPrefix = addressPrefixInstance;
                                    }
                                    
                                    JToken nextHopTypeValue = valueValue["nextHopType"];
                                    if (nextHopTypeValue != null && nextHopTypeValue.Type != JTokenType.Null)
                                    {
                                        string nextHopTypeInstance = ((string)nextHopTypeValue);
                                        expressRouteCircuitRoutesTableInstance.NextHopType = nextHopTypeInstance;
                                    }
                                    
                                    JToken nextHopIPValue = valueValue["nextHopIP"];
                                    if (nextHopIPValue != null && nextHopIPValue.Type != JTokenType.Null)
                                    {
                                        string nextHopIPInstance = ((string)nextHopIPValue);
                                        expressRouteCircuitRoutesTableInstance.NextHopIP = nextHopIPInstance;
                                    }
                                    
                                    JToken asPathValue = valueValue["asPath"];
                                    if (asPathValue != null && asPathValue.Type != JTokenType.Null)
                                    {
                                        string asPathInstance = ((string)asPathValue);
                                        expressRouteCircuitRoutesTableInstance.AsPath = asPathInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Liststats ExpressRouteCircuit opertion retrieves all the stats
        /// from a ExpressRouteCircuits in a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='circuitName'>
        /// Required. The name of the loadBalancer.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListStats from Express Route Circuits Api service call
        /// </returns>
        public async Task<ExpressRouteCircuitsStatsListResponse> ListStatsAsync(string resourceGroupName, string circuitName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (circuitName == null)
            {
                throw new ArgumentNullException("circuitName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("circuitName", circuitName);
                TracingAdapter.Enter(invocationId, this, "ListStatsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/expressRouteCircuits/";
            url = url + Uri.EscapeDataString(circuitName);
            url = url + "stats";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ExpressRouteCircuitsStatsListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ExpressRouteCircuitsStatsListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ExpressRouteCircuitStats expressRouteCircuitStatsInstance = new ExpressRouteCircuitStats();
                                    result.Stats.Add(expressRouteCircuitStatsInstance);
                                    
                                    JToken bytesInValue = valueValue["bytesIn"];
                                    if (bytesInValue != null && bytesInValue.Type != JTokenType.Null)
                                    {
                                        int bytesInInstance = ((int)bytesInValue);
                                        expressRouteCircuitStatsInstance.BytesIn = bytesInInstance;
                                    }
                                    
                                    JToken bytesOutValue = valueValue["bytesOut"];
                                    if (bytesOutValue != null && bytesOutValue.Type != JTokenType.Null)
                                    {
                                        int bytesOutInstance = ((int)bytesOutValue);
                                        expressRouteCircuitStatsInstance.BytesOut = bytesOutInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
