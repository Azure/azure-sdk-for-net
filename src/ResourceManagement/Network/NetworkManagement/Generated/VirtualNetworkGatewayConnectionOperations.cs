// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Network
{
    /// <summary>
    /// The Network Resource Provider API includes operations for managing the
    /// Virtual network Gateway for your subscription.
    /// </summary>
    internal partial class VirtualNetworkGatewayConnectionOperations : IServiceOperations<NetworkResourceProviderClient>, IVirtualNetworkGatewayConnectionOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// VirtualNetworkGatewayConnectionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal VirtualNetworkGatewayConnectionOperations(NetworkResourceProviderClient client)
        {
            this._client = client;
        }
        
        private NetworkResourceProviderClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Network.NetworkResourceProviderClient.
        /// </summary>
        public NetworkResourceProviderClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Put VirtualNetworkGatewayConnection operation creates/updates a
        /// virtual network gateway connection in the specified resource group
        /// through Network resource provider.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkGatewayConnectionName'>
        /// Required. The name of the virtual network gateway conenction.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Create or update Virtual
        /// Network Gateway connection operation through Network resource
        /// provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for CreateOrUpdateVirtualNetworkGatewayConnection Api
        /// servive call
        /// </returns>
        public async Task<VirtualNetworkGatewayConnectionPutResponse> BeginCreateOrUpdatingAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, VirtualNetworkGatewayConnection parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (virtualNetworkGatewayConnectionName == null)
            {
                throw new ArgumentNullException("virtualNetworkGatewayConnectionName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.LocalNetworkGateway2 != null)
            {
                if (parameters.LocalNetworkGateway2.Location == null)
                {
                    throw new ArgumentNullException("parameters.LocalNetworkGateway2.Location");
                }
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            if (parameters.VirtualNetworkGateway1 != null)
            {
                if (parameters.VirtualNetworkGateway1.GatewayDefaultSite != null)
                {
                    if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.Location == null)
                    {
                        throw new ArgumentNullException("parameters.VirtualNetworkGateway1.GatewayDefaultSite.Location");
                    }
                }
                if (parameters.VirtualNetworkGateway1.Location == null)
                {
                    throw new ArgumentNullException("parameters.VirtualNetworkGateway1.Location");
                }
            }
            if (parameters.VirtualNetworkGateway2 != null)
            {
                if (parameters.VirtualNetworkGateway2.GatewayDefaultSite != null)
                {
                    if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.Location == null)
                    {
                        throw new ArgumentNullException("parameters.VirtualNetworkGateway2.GatewayDefaultSite.Location");
                    }
                }
                if (parameters.VirtualNetworkGateway2.Location == null)
                {
                    throw new ArgumentNullException("parameters.VirtualNetworkGateway2.Location");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkGatewayConnectionName", virtualNetworkGatewayConnectionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/connections/";
            url = url + Uri.EscapeDataString(virtualNetworkGatewayConnectionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject virtualNetworkGatewayConnectionJsonFormatValue = new JObject();
                requestDoc = virtualNetworkGatewayConnectionJsonFormatValue;
                
                JObject propertiesValue = new JObject();
                virtualNetworkGatewayConnectionJsonFormatValue["properties"] = propertiesValue;
                
                if (parameters.VirtualNetworkGateway1 != null)
                {
                    JObject virtualNetworkGateway1Value = new JObject();
                    propertiesValue["virtualNetworkGateway1"] = virtualNetworkGateway1Value;
                    
                    if (parameters.VirtualNetworkGateway1.IpConfigurations != null)
                    {
                        if (parameters.VirtualNetworkGateway1.IpConfigurations is ILazyCollection == false || ((ILazyCollection)parameters.VirtualNetworkGateway1.IpConfigurations).IsInitialized)
                        {
                            JArray ipConfigurationsArray = new JArray();
                            foreach (VirtualNetworkGatewayIpConfiguration ipConfigurationsItem in parameters.VirtualNetworkGateway1.IpConfigurations)
                            {
                                JObject virtualNetworkGatewayIpConfigurationValue = new JObject();
                                ipConfigurationsArray.Add(virtualNetworkGatewayIpConfigurationValue);
                                
                                if (ipConfigurationsItem.PrivateIpAddress != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue["privateIPAddress"] = ipConfigurationsItem.PrivateIpAddress;
                                }
                                
                                if (ipConfigurationsItem.PrivateIpAllocationMethod != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue["privateIPAllocationMethod"] = ipConfigurationsItem.PrivateIpAllocationMethod;
                                }
                                
                                if (ipConfigurationsItem.Subnet != null)
                                {
                                    JObject subnetValue = new JObject();
                                    virtualNetworkGatewayIpConfigurationValue["subnet"] = subnetValue;
                                    
                                    if (ipConfigurationsItem.Subnet.Id != null)
                                    {
                                        subnetValue["id"] = ipConfigurationsItem.Subnet.Id;
                                    }
                                }
                                
                                if (ipConfigurationsItem.PublicIpAddress != null)
                                {
                                    JObject publicIPAddressValue = new JObject();
                                    virtualNetworkGatewayIpConfigurationValue["publicIPAddress"] = publicIPAddressValue;
                                    
                                    if (ipConfigurationsItem.PublicIpAddress.Id != null)
                                    {
                                        publicIPAddressValue["id"] = ipConfigurationsItem.PublicIpAddress.Id;
                                    }
                                }
                                
                                if (ipConfigurationsItem.ProvisioningState != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue["provisioningState"] = ipConfigurationsItem.ProvisioningState;
                                }
                                
                                if (ipConfigurationsItem.Name != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue["name"] = ipConfigurationsItem.Name;
                                }
                                
                                if (ipConfigurationsItem.Etag != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue["etag"] = ipConfigurationsItem.Etag;
                                }
                                
                                if (ipConfigurationsItem.Id != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue["id"] = ipConfigurationsItem.Id;
                                }
                            }
                            virtualNetworkGateway1Value["ipConfigurations"] = ipConfigurationsArray;
                        }
                    }
                    
                    if (parameters.VirtualNetworkGateway1.GatewayType != null)
                    {
                        virtualNetworkGateway1Value["gatewayType"] = parameters.VirtualNetworkGateway1.GatewayType;
                    }
                    
                    if (parameters.VirtualNetworkGateway1.VpnType != null)
                    {
                        virtualNetworkGateway1Value["vpnType"] = parameters.VirtualNetworkGateway1.VpnType;
                    }
                    
                    virtualNetworkGateway1Value["enableBgp"] = parameters.VirtualNetworkGateway1.EnableBgp;
                    
                    if (parameters.VirtualNetworkGateway1.GatewayDefaultSite != null)
                    {
                        JObject gatewaydefaultsiteValue = new JObject();
                        virtualNetworkGateway1Value["gatewaydefaultsite"] = gatewaydefaultsiteValue;
                        
                        if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.LocalNetworkAddressSpace != null)
                        {
                            JObject localNetworkAddressSpaceValue = new JObject();
                            gatewaydefaultsiteValue["localNetworkAddressSpace"] = localNetworkAddressSpaceValue;
                            
                            if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.LocalNetworkAddressSpace.AddressPrefixes != null)
                            {
                                if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.LocalNetworkAddressSpace.AddressPrefixes is ILazyCollection == false || ((ILazyCollection)parameters.VirtualNetworkGateway1.GatewayDefaultSite.LocalNetworkAddressSpace.AddressPrefixes).IsInitialized)
                                {
                                    JArray addressPrefixesArray = new JArray();
                                    foreach (string addressPrefixesItem in parameters.VirtualNetworkGateway1.GatewayDefaultSite.LocalNetworkAddressSpace.AddressPrefixes)
                                    {
                                        addressPrefixesArray.Add(addressPrefixesItem);
                                    }
                                    localNetworkAddressSpaceValue["addressPrefixes"] = addressPrefixesArray;
                                }
                            }
                        }
                        
                        if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.GatewayIpAddress != null)
                        {
                            gatewaydefaultsiteValue["gatewayIpAddress"] = parameters.VirtualNetworkGateway1.GatewayDefaultSite.GatewayIpAddress;
                        }
                        
                        if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.ProvisioningState != null)
                        {
                            gatewaydefaultsiteValue["provisioningState"] = parameters.VirtualNetworkGateway1.GatewayDefaultSite.ProvisioningState;
                        }
                        
                        if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.ResourceGuid != null)
                        {
                            gatewaydefaultsiteValue["resourceGuid"] = parameters.VirtualNetworkGateway1.GatewayDefaultSite.ResourceGuid;
                        }
                        
                        if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.Etag != null)
                        {
                            gatewaydefaultsiteValue["etag"] = parameters.VirtualNetworkGateway1.GatewayDefaultSite.Etag;
                        }
                        
                        if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.Id != null)
                        {
                            gatewaydefaultsiteValue["id"] = parameters.VirtualNetworkGateway1.GatewayDefaultSite.Id;
                        }
                        
                        if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.Name != null)
                        {
                            gatewaydefaultsiteValue["name"] = parameters.VirtualNetworkGateway1.GatewayDefaultSite.Name;
                        }
                        
                        if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.Type != null)
                        {
                            gatewaydefaultsiteValue["type"] = parameters.VirtualNetworkGateway1.GatewayDefaultSite.Type;
                        }
                        
                        gatewaydefaultsiteValue["location"] = parameters.VirtualNetworkGateway1.GatewayDefaultSite.Location;
                        
                        if (parameters.VirtualNetworkGateway1.GatewayDefaultSite.Tags != null)
                        {
                            JObject tagsDictionary = new JObject();
                            foreach (KeyValuePair<string, string> pair in parameters.VirtualNetworkGateway1.GatewayDefaultSite.Tags)
                            {
                                string tagsKey = pair.Key;
                                string tagsValue = pair.Value;
                                tagsDictionary[tagsKey] = tagsValue;
                            }
                            gatewaydefaultsiteValue["tags"] = tagsDictionary;
                        }
                    }
                    
                    if (parameters.VirtualNetworkGateway1.ProvisioningState != null)
                    {
                        virtualNetworkGateway1Value["provisioningState"] = parameters.VirtualNetworkGateway1.ProvisioningState;
                    }
                    
                    if (parameters.VirtualNetworkGateway1.ResourceGuid != null)
                    {
                        virtualNetworkGateway1Value["resourceGuid"] = parameters.VirtualNetworkGateway1.ResourceGuid;
                    }
                    
                    if (parameters.VirtualNetworkGateway1.Etag != null)
                    {
                        virtualNetworkGateway1Value["etag"] = parameters.VirtualNetworkGateway1.Etag;
                    }
                    
                    if (parameters.VirtualNetworkGateway1.Id != null)
                    {
                        virtualNetworkGateway1Value["id"] = parameters.VirtualNetworkGateway1.Id;
                    }
                    
                    if (parameters.VirtualNetworkGateway1.Name != null)
                    {
                        virtualNetworkGateway1Value["name"] = parameters.VirtualNetworkGateway1.Name;
                    }
                    
                    if (parameters.VirtualNetworkGateway1.Type != null)
                    {
                        virtualNetworkGateway1Value["type"] = parameters.VirtualNetworkGateway1.Type;
                    }
                    
                    virtualNetworkGateway1Value["location"] = parameters.VirtualNetworkGateway1.Location;
                    
                    if (parameters.VirtualNetworkGateway1.Tags != null)
                    {
                        JObject tagsDictionary2 = new JObject();
                        foreach (KeyValuePair<string, string> pair2 in parameters.VirtualNetworkGateway1.Tags)
                        {
                            string tagsKey2 = pair2.Key;
                            string tagsValue2 = pair2.Value;
                            tagsDictionary2[tagsKey2] = tagsValue2;
                        }
                        virtualNetworkGateway1Value["tags"] = tagsDictionary2;
                    }
                }
                
                if (parameters.VirtualNetworkGateway2 != null)
                {
                    JObject virtualNetworkGateway2Value = new JObject();
                    propertiesValue["virtualNetworkGateway2"] = virtualNetworkGateway2Value;
                    
                    if (parameters.VirtualNetworkGateway2.IpConfigurations != null)
                    {
                        if (parameters.VirtualNetworkGateway2.IpConfigurations is ILazyCollection == false || ((ILazyCollection)parameters.VirtualNetworkGateway2.IpConfigurations).IsInitialized)
                        {
                            JArray ipConfigurationsArray2 = new JArray();
                            foreach (VirtualNetworkGatewayIpConfiguration ipConfigurationsItem2 in parameters.VirtualNetworkGateway2.IpConfigurations)
                            {
                                JObject virtualNetworkGatewayIpConfigurationValue2 = new JObject();
                                ipConfigurationsArray2.Add(virtualNetworkGatewayIpConfigurationValue2);
                                
                                if (ipConfigurationsItem2.PrivateIpAddress != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue2["privateIPAddress"] = ipConfigurationsItem2.PrivateIpAddress;
                                }
                                
                                if (ipConfigurationsItem2.PrivateIpAllocationMethod != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue2["privateIPAllocationMethod"] = ipConfigurationsItem2.PrivateIpAllocationMethod;
                                }
                                
                                if (ipConfigurationsItem2.Subnet != null)
                                {
                                    JObject subnetValue2 = new JObject();
                                    virtualNetworkGatewayIpConfigurationValue2["subnet"] = subnetValue2;
                                    
                                    if (ipConfigurationsItem2.Subnet.Id != null)
                                    {
                                        subnetValue2["id"] = ipConfigurationsItem2.Subnet.Id;
                                    }
                                }
                                
                                if (ipConfigurationsItem2.PublicIpAddress != null)
                                {
                                    JObject publicIPAddressValue2 = new JObject();
                                    virtualNetworkGatewayIpConfigurationValue2["publicIPAddress"] = publicIPAddressValue2;
                                    
                                    if (ipConfigurationsItem2.PublicIpAddress.Id != null)
                                    {
                                        publicIPAddressValue2["id"] = ipConfigurationsItem2.PublicIpAddress.Id;
                                    }
                                }
                                
                                if (ipConfigurationsItem2.ProvisioningState != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue2["provisioningState"] = ipConfigurationsItem2.ProvisioningState;
                                }
                                
                                if (ipConfigurationsItem2.Name != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue2["name"] = ipConfigurationsItem2.Name;
                                }
                                
                                if (ipConfigurationsItem2.Etag != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue2["etag"] = ipConfigurationsItem2.Etag;
                                }
                                
                                if (ipConfigurationsItem2.Id != null)
                                {
                                    virtualNetworkGatewayIpConfigurationValue2["id"] = ipConfigurationsItem2.Id;
                                }
                            }
                            virtualNetworkGateway2Value["ipConfigurations"] = ipConfigurationsArray2;
                        }
                    }
                    
                    if (parameters.VirtualNetworkGateway2.GatewayType != null)
                    {
                        virtualNetworkGateway2Value["gatewayType"] = parameters.VirtualNetworkGateway2.GatewayType;
                    }
                    
                    if (parameters.VirtualNetworkGateway2.VpnType != null)
                    {
                        virtualNetworkGateway2Value["vpnType"] = parameters.VirtualNetworkGateway2.VpnType;
                    }
                    
                    virtualNetworkGateway2Value["enableBgp"] = parameters.VirtualNetworkGateway2.EnableBgp;
                    
                    if (parameters.VirtualNetworkGateway2.GatewayDefaultSite != null)
                    {
                        JObject gatewaydefaultsiteValue2 = new JObject();
                        virtualNetworkGateway2Value["gatewaydefaultsite"] = gatewaydefaultsiteValue2;
                        
                        if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.LocalNetworkAddressSpace != null)
                        {
                            JObject localNetworkAddressSpaceValue2 = new JObject();
                            gatewaydefaultsiteValue2["localNetworkAddressSpace"] = localNetworkAddressSpaceValue2;
                            
                            if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.LocalNetworkAddressSpace.AddressPrefixes != null)
                            {
                                if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.LocalNetworkAddressSpace.AddressPrefixes is ILazyCollection == false || ((ILazyCollection)parameters.VirtualNetworkGateway2.GatewayDefaultSite.LocalNetworkAddressSpace.AddressPrefixes).IsInitialized)
                                {
                                    JArray addressPrefixesArray2 = new JArray();
                                    foreach (string addressPrefixesItem2 in parameters.VirtualNetworkGateway2.GatewayDefaultSite.LocalNetworkAddressSpace.AddressPrefixes)
                                    {
                                        addressPrefixesArray2.Add(addressPrefixesItem2);
                                    }
                                    localNetworkAddressSpaceValue2["addressPrefixes"] = addressPrefixesArray2;
                                }
                            }
                        }
                        
                        if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.GatewayIpAddress != null)
                        {
                            gatewaydefaultsiteValue2["gatewayIpAddress"] = parameters.VirtualNetworkGateway2.GatewayDefaultSite.GatewayIpAddress;
                        }
                        
                        if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.ProvisioningState != null)
                        {
                            gatewaydefaultsiteValue2["provisioningState"] = parameters.VirtualNetworkGateway2.GatewayDefaultSite.ProvisioningState;
                        }
                        
                        if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.ResourceGuid != null)
                        {
                            gatewaydefaultsiteValue2["resourceGuid"] = parameters.VirtualNetworkGateway2.GatewayDefaultSite.ResourceGuid;
                        }
                        
                        if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.Etag != null)
                        {
                            gatewaydefaultsiteValue2["etag"] = parameters.VirtualNetworkGateway2.GatewayDefaultSite.Etag;
                        }
                        
                        if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.Id != null)
                        {
                            gatewaydefaultsiteValue2["id"] = parameters.VirtualNetworkGateway2.GatewayDefaultSite.Id;
                        }
                        
                        if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.Name != null)
                        {
                            gatewaydefaultsiteValue2["name"] = parameters.VirtualNetworkGateway2.GatewayDefaultSite.Name;
                        }
                        
                        if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.Type != null)
                        {
                            gatewaydefaultsiteValue2["type"] = parameters.VirtualNetworkGateway2.GatewayDefaultSite.Type;
                        }
                        
                        gatewaydefaultsiteValue2["location"] = parameters.VirtualNetworkGateway2.GatewayDefaultSite.Location;
                        
                        if (parameters.VirtualNetworkGateway2.GatewayDefaultSite.Tags != null)
                        {
                            JObject tagsDictionary3 = new JObject();
                            foreach (KeyValuePair<string, string> pair3 in parameters.VirtualNetworkGateway2.GatewayDefaultSite.Tags)
                            {
                                string tagsKey3 = pair3.Key;
                                string tagsValue3 = pair3.Value;
                                tagsDictionary3[tagsKey3] = tagsValue3;
                            }
                            gatewaydefaultsiteValue2["tags"] = tagsDictionary3;
                        }
                    }
                    
                    if (parameters.VirtualNetworkGateway2.ProvisioningState != null)
                    {
                        virtualNetworkGateway2Value["provisioningState"] = parameters.VirtualNetworkGateway2.ProvisioningState;
                    }
                    
                    if (parameters.VirtualNetworkGateway2.ResourceGuid != null)
                    {
                        virtualNetworkGateway2Value["resourceGuid"] = parameters.VirtualNetworkGateway2.ResourceGuid;
                    }
                    
                    if (parameters.VirtualNetworkGateway2.Etag != null)
                    {
                        virtualNetworkGateway2Value["etag"] = parameters.VirtualNetworkGateway2.Etag;
                    }
                    
                    if (parameters.VirtualNetworkGateway2.Id != null)
                    {
                        virtualNetworkGateway2Value["id"] = parameters.VirtualNetworkGateway2.Id;
                    }
                    
                    if (parameters.VirtualNetworkGateway2.Name != null)
                    {
                        virtualNetworkGateway2Value["name"] = parameters.VirtualNetworkGateway2.Name;
                    }
                    
                    if (parameters.VirtualNetworkGateway2.Type != null)
                    {
                        virtualNetworkGateway2Value["type"] = parameters.VirtualNetworkGateway2.Type;
                    }
                    
                    virtualNetworkGateway2Value["location"] = parameters.VirtualNetworkGateway2.Location;
                    
                    if (parameters.VirtualNetworkGateway2.Tags != null)
                    {
                        JObject tagsDictionary4 = new JObject();
                        foreach (KeyValuePair<string, string> pair4 in parameters.VirtualNetworkGateway2.Tags)
                        {
                            string tagsKey4 = pair4.Key;
                            string tagsValue4 = pair4.Value;
                            tagsDictionary4[tagsKey4] = tagsValue4;
                        }
                        virtualNetworkGateway2Value["tags"] = tagsDictionary4;
                    }
                }
                
                if (parameters.LocalNetworkGateway2 != null)
                {
                    JObject localNetworkGateway2Value = new JObject();
                    propertiesValue["localNetworkGateway2"] = localNetworkGateway2Value;
                    
                    if (parameters.LocalNetworkGateway2.LocalNetworkAddressSpace != null)
                    {
                        JObject localNetworkAddressSpaceValue3 = new JObject();
                        localNetworkGateway2Value["localNetworkAddressSpace"] = localNetworkAddressSpaceValue3;
                        
                        if (parameters.LocalNetworkGateway2.LocalNetworkAddressSpace.AddressPrefixes != null)
                        {
                            if (parameters.LocalNetworkGateway2.LocalNetworkAddressSpace.AddressPrefixes is ILazyCollection == false || ((ILazyCollection)parameters.LocalNetworkGateway2.LocalNetworkAddressSpace.AddressPrefixes).IsInitialized)
                            {
                                JArray addressPrefixesArray3 = new JArray();
                                foreach (string addressPrefixesItem3 in parameters.LocalNetworkGateway2.LocalNetworkAddressSpace.AddressPrefixes)
                                {
                                    addressPrefixesArray3.Add(addressPrefixesItem3);
                                }
                                localNetworkAddressSpaceValue3["addressPrefixes"] = addressPrefixesArray3;
                            }
                        }
                    }
                    
                    if (parameters.LocalNetworkGateway2.GatewayIpAddress != null)
                    {
                        localNetworkGateway2Value["gatewayIpAddress"] = parameters.LocalNetworkGateway2.GatewayIpAddress;
                    }
                    
                    if (parameters.LocalNetworkGateway2.ProvisioningState != null)
                    {
                        localNetworkGateway2Value["provisioningState"] = parameters.LocalNetworkGateway2.ProvisioningState;
                    }
                    
                    if (parameters.LocalNetworkGateway2.ResourceGuid != null)
                    {
                        localNetworkGateway2Value["resourceGuid"] = parameters.LocalNetworkGateway2.ResourceGuid;
                    }
                    
                    if (parameters.LocalNetworkGateway2.Etag != null)
                    {
                        localNetworkGateway2Value["etag"] = parameters.LocalNetworkGateway2.Etag;
                    }
                    
                    if (parameters.LocalNetworkGateway2.Id != null)
                    {
                        localNetworkGateway2Value["id"] = parameters.LocalNetworkGateway2.Id;
                    }
                    
                    if (parameters.LocalNetworkGateway2.Name != null)
                    {
                        localNetworkGateway2Value["name"] = parameters.LocalNetworkGateway2.Name;
                    }
                    
                    if (parameters.LocalNetworkGateway2.Type != null)
                    {
                        localNetworkGateway2Value["type"] = parameters.LocalNetworkGateway2.Type;
                    }
                    
                    localNetworkGateway2Value["location"] = parameters.LocalNetworkGateway2.Location;
                    
                    if (parameters.LocalNetworkGateway2.Tags != null)
                    {
                        JObject tagsDictionary5 = new JObject();
                        foreach (KeyValuePair<string, string> pair5 in parameters.LocalNetworkGateway2.Tags)
                        {
                            string tagsKey5 = pair5.Key;
                            string tagsValue5 = pair5.Value;
                            tagsDictionary5[tagsKey5] = tagsValue5;
                        }
                        localNetworkGateway2Value["tags"] = tagsDictionary5;
                    }
                }
                
                if (parameters.ConnectionType != null)
                {
                    propertiesValue["connectionType"] = parameters.ConnectionType;
                }
                
                propertiesValue["routingWeight"] = parameters.RoutingWeight;
                
                if (parameters.SharedKey != null)
                {
                    propertiesValue["sharedKey"] = parameters.SharedKey;
                }
                
                if (parameters.ConnectionStatus != null)
                {
                    propertiesValue["connectionStatus"] = parameters.ConnectionStatus;
                }
                
                propertiesValue["egressBytesTransferred"] = parameters.EgressBytesTransferred;
                
                propertiesValue["ingressBytesTransferred"] = parameters.IngressBytesTransferred;
                
                if (parameters.Peer != null)
                {
                    JObject peerValue = new JObject();
                    propertiesValue["peer"] = peerValue;
                    
                    if (parameters.Peer.Id != null)
                    {
                        peerValue["id"] = parameters.Peer.Id;
                    }
                }
                
                if (parameters.ResourceGuid != null)
                {
                    propertiesValue["resourceGuid"] = parameters.ResourceGuid;
                }
                
                if (parameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = parameters.ProvisioningState;
                }
                
                if (parameters.Etag != null)
                {
                    virtualNetworkGatewayConnectionJsonFormatValue["etag"] = parameters.Etag;
                }
                
                if (parameters.Id != null)
                {
                    virtualNetworkGatewayConnectionJsonFormatValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    virtualNetworkGatewayConnectionJsonFormatValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    virtualNetworkGatewayConnectionJsonFormatValue["type"] = parameters.Type;
                }
                
                virtualNetworkGatewayConnectionJsonFormatValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary6 = new JObject();
                    foreach (KeyValuePair<string, string> pair6 in parameters.Tags)
                    {
                        string tagsKey6 = pair6.Key;
                        string tagsValue6 = pair6.Value;
                        tagsDictionary6[tagsKey6] = tagsValue6;
                    }
                    virtualNetworkGatewayConnectionJsonFormatValue["tags"] = tagsDictionary6;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkGatewayConnectionPutResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkGatewayConnectionPutResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualNetworkGatewayConnection virtualNetworkGatewayConnectionInstance = new VirtualNetworkGatewayConnection();
                            result.VirtualNetworkGatewayConnection = virtualNetworkGatewayConnectionInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                JToken virtualNetworkGateway1Value2 = propertiesValue2["virtualNetworkGateway1"];
                                if (virtualNetworkGateway1Value2 != null && virtualNetworkGateway1Value2.Type != JTokenType.Null)
                                {
                                    VirtualNetworkGateway virtualNetworkGateway1Instance = new VirtualNetworkGateway();
                                    virtualNetworkGatewayConnectionInstance.VirtualNetworkGateway1 = virtualNetworkGateway1Instance;
                                    
                                    JToken ipConfigurationsArray3 = virtualNetworkGateway1Value2["ipConfigurations"];
                                    if (ipConfigurationsArray3 != null && ipConfigurationsArray3.Type != JTokenType.Null)
                                    {
                                        foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray3))
                                        {
                                            VirtualNetworkGatewayIpConfiguration virtualNetworkGatewayIpConfigurationInstance = new VirtualNetworkGatewayIpConfiguration();
                                            virtualNetworkGateway1Instance.IpConfigurations.Add(virtualNetworkGatewayIpConfigurationInstance);
                                            
                                            JToken privateIPAddressValue = ipConfigurationsValue["privateIPAddress"];
                                            if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                virtualNetworkGatewayIpConfigurationInstance.PrivateIpAddress = privateIPAddressInstance;
                                            }
                                            
                                            JToken privateIPAllocationMethodValue = ipConfigurationsValue["privateIPAllocationMethod"];
                                            if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                virtualNetworkGatewayIpConfigurationInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                            }
                                            
                                            JToken subnetValue3 = ipConfigurationsValue["subnet"];
                                            if (subnetValue3 != null && subnetValue3.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance = new ResourceId();
                                                virtualNetworkGatewayIpConfigurationInstance.Subnet = subnetInstance;
                                                
                                                JToken idValue = subnetValue3["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    subnetInstance.Id = idInstance;
                                                }
                                            }
                                            
                                            JToken publicIPAddressValue3 = ipConfigurationsValue["publicIPAddress"];
                                            if (publicIPAddressValue3 != null && publicIPAddressValue3.Type != JTokenType.Null)
                                            {
                                                ResourceId publicIPAddressInstance = new ResourceId();
                                                virtualNetworkGatewayIpConfigurationInstance.PublicIpAddress = publicIPAddressInstance;
                                                
                                                JToken idValue2 = publicIPAddressValue3["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    publicIPAddressInstance.Id = idInstance2;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue = ipConfigurationsValue["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                virtualNetworkGatewayIpConfigurationInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                            
                                            JToken nameValue = ipConfigurationsValue["name"];
                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                            {
                                                string nameInstance = ((string)nameValue);
                                                virtualNetworkGatewayIpConfigurationInstance.Name = nameInstance;
                                            }
                                            
                                            JToken etagValue = ipConfigurationsValue["etag"];
                                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                                            {
                                                string etagInstance = ((string)etagValue);
                                                virtualNetworkGatewayIpConfigurationInstance.Etag = etagInstance;
                                            }
                                            
                                            JToken idValue3 = ipConfigurationsValue["id"];
                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                            {
                                                string idInstance3 = ((string)idValue3);
                                                virtualNetworkGatewayIpConfigurationInstance.Id = idInstance3;
                                            }
                                        }
                                    }
                                    
                                    JToken gatewayTypeValue = virtualNetworkGateway1Value2["gatewayType"];
                                    if (gatewayTypeValue != null && gatewayTypeValue.Type != JTokenType.Null)
                                    {
                                        string gatewayTypeInstance = ((string)gatewayTypeValue);
                                        virtualNetworkGateway1Instance.GatewayType = gatewayTypeInstance;
                                    }
                                    
                                    JToken vpnTypeValue = virtualNetworkGateway1Value2["vpnType"];
                                    if (vpnTypeValue != null && vpnTypeValue.Type != JTokenType.Null)
                                    {
                                        string vpnTypeInstance = ((string)vpnTypeValue);
                                        virtualNetworkGateway1Instance.VpnType = vpnTypeInstance;
                                    }
                                    
                                    JToken enableBgpValue = virtualNetworkGateway1Value2["enableBgp"];
                                    if (enableBgpValue != null && enableBgpValue.Type != JTokenType.Null)
                                    {
                                        bool enableBgpInstance = ((bool)enableBgpValue);
                                        virtualNetworkGateway1Instance.EnableBgp = enableBgpInstance;
                                    }
                                    
                                    JToken gatewaydefaultsiteValue3 = virtualNetworkGateway1Value2["gatewaydefaultsite"];
                                    if (gatewaydefaultsiteValue3 != null && gatewaydefaultsiteValue3.Type != JTokenType.Null)
                                    {
                                        LocalNetworkGateway gatewaydefaultsiteInstance = new LocalNetworkGateway();
                                        virtualNetworkGateway1Instance.GatewayDefaultSite = gatewaydefaultsiteInstance;
                                        
                                        JToken localNetworkAddressSpaceValue4 = gatewaydefaultsiteValue3["localNetworkAddressSpace"];
                                        if (localNetworkAddressSpaceValue4 != null && localNetworkAddressSpaceValue4.Type != JTokenType.Null)
                                        {
                                            AddressSpace localNetworkAddressSpaceInstance = new AddressSpace();
                                            gatewaydefaultsiteInstance.LocalNetworkAddressSpace = localNetworkAddressSpaceInstance;
                                            
                                            JToken addressPrefixesArray4 = localNetworkAddressSpaceValue4["addressPrefixes"];
                                            if (addressPrefixesArray4 != null && addressPrefixesArray4.Type != JTokenType.Null)
                                            {
                                                foreach (JToken addressPrefixesValue in ((JArray)addressPrefixesArray4))
                                                {
                                                    localNetworkAddressSpaceInstance.AddressPrefixes.Add(((string)addressPrefixesValue));
                                                }
                                            }
                                        }
                                        
                                        JToken gatewayIpAddressValue = gatewaydefaultsiteValue3["gatewayIpAddress"];
                                        if (gatewayIpAddressValue != null && gatewayIpAddressValue.Type != JTokenType.Null)
                                        {
                                            string gatewayIpAddressInstance = ((string)gatewayIpAddressValue);
                                            gatewaydefaultsiteInstance.GatewayIpAddress = gatewayIpAddressInstance;
                                        }
                                        
                                        JToken provisioningStateValue2 = gatewaydefaultsiteValue3["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            gatewaydefaultsiteInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                        
                                        JToken resourceGuidValue = gatewaydefaultsiteValue3["resourceGuid"];
                                        if (resourceGuidValue != null && resourceGuidValue.Type != JTokenType.Null)
                                        {
                                            string resourceGuidInstance = ((string)resourceGuidValue);
                                            gatewaydefaultsiteInstance.ResourceGuid = resourceGuidInstance;
                                        }
                                        
                                        JToken etagValue2 = gatewaydefaultsiteValue3["etag"];
                                        if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                        {
                                            string etagInstance2 = ((string)etagValue2);
                                            gatewaydefaultsiteInstance.Etag = etagInstance2;
                                        }
                                        
                                        JToken idValue4 = gatewaydefaultsiteValue3["id"];
                                        if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                        {
                                            string idInstance4 = ((string)idValue4);
                                            gatewaydefaultsiteInstance.Id = idInstance4;
                                        }
                                        
                                        JToken nameValue2 = gatewaydefaultsiteValue3["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            gatewaydefaultsiteInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken typeValue = gatewaydefaultsiteValue3["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            gatewaydefaultsiteInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = gatewaydefaultsiteValue3["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            gatewaydefaultsiteInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)gatewaydefaultsiteValue3["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in tagsSequenceElement)
                                            {
                                                string tagsKey7 = ((string)property.Name);
                                                string tagsValue7 = ((string)property.Value);
                                                gatewaydefaultsiteInstance.Tags.Add(tagsKey7, tagsValue7);
                                            }
                                        }
                                    }
                                    
                                    JToken provisioningStateValue3 = virtualNetworkGateway1Value2["provisioningState"];
                                    if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                        virtualNetworkGateway1Instance.ProvisioningState = provisioningStateInstance3;
                                    }
                                    
                                    JToken resourceGuidValue2 = virtualNetworkGateway1Value2["resourceGuid"];
                                    if (resourceGuidValue2 != null && resourceGuidValue2.Type != JTokenType.Null)
                                    {
                                        string resourceGuidInstance2 = ((string)resourceGuidValue2);
                                        virtualNetworkGateway1Instance.ResourceGuid = resourceGuidInstance2;
                                    }
                                    
                                    JToken etagValue3 = virtualNetworkGateway1Value2["etag"];
                                    if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                    {
                                        string etagInstance3 = ((string)etagValue3);
                                        virtualNetworkGateway1Instance.Etag = etagInstance3;
                                    }
                                    
                                    JToken idValue5 = virtualNetworkGateway1Value2["id"];
                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                    {
                                        string idInstance5 = ((string)idValue5);
                                        virtualNetworkGateway1Instance.Id = idInstance5;
                                    }
                                    
                                    JToken nameValue3 = virtualNetworkGateway1Value2["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        virtualNetworkGateway1Instance.Name = nameInstance3;
                                    }
                                    
                                    JToken typeValue2 = virtualNetworkGateway1Value2["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        virtualNetworkGateway1Instance.Type = typeInstance2;
                                    }
                                    
                                    JToken locationValue2 = virtualNetworkGateway1Value2["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualNetworkGateway1Instance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)virtualNetworkGateway1Value2["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey8 = ((string)property2.Name);
                                            string tagsValue8 = ((string)property2.Value);
                                            virtualNetworkGateway1Instance.Tags.Add(tagsKey8, tagsValue8);
                                        }
                                    }
                                }
                                
                                JToken virtualNetworkGateway2Value2 = propertiesValue2["virtualNetworkGateway2"];
                                if (virtualNetworkGateway2Value2 != null && virtualNetworkGateway2Value2.Type != JTokenType.Null)
                                {
                                    VirtualNetworkGateway virtualNetworkGateway2Instance = new VirtualNetworkGateway();
                                    virtualNetworkGatewayConnectionInstance.VirtualNetworkGateway2 = virtualNetworkGateway2Instance;
                                    
                                    JToken ipConfigurationsArray4 = virtualNetworkGateway2Value2["ipConfigurations"];
                                    if (ipConfigurationsArray4 != null && ipConfigurationsArray4.Type != JTokenType.Null)
                                    {
                                        foreach (JToken ipConfigurationsValue2 in ((JArray)ipConfigurationsArray4))
                                        {
                                            VirtualNetworkGatewayIpConfiguration virtualNetworkGatewayIpConfigurationInstance2 = new VirtualNetworkGatewayIpConfiguration();
                                            virtualNetworkGateway2Instance.IpConfigurations.Add(virtualNetworkGatewayIpConfigurationInstance2);
                                            
                                            JToken privateIPAddressValue2 = ipConfigurationsValue2["privateIPAddress"];
                                            if (privateIPAddressValue2 != null && privateIPAddressValue2.Type != JTokenType.Null)
                                            {
                                                string privateIPAddressInstance2 = ((string)privateIPAddressValue2);
                                                virtualNetworkGatewayIpConfigurationInstance2.PrivateIpAddress = privateIPAddressInstance2;
                                            }
                                            
                                            JToken privateIPAllocationMethodValue2 = ipConfigurationsValue2["privateIPAllocationMethod"];
                                            if (privateIPAllocationMethodValue2 != null && privateIPAllocationMethodValue2.Type != JTokenType.Null)
                                            {
                                                string privateIPAllocationMethodInstance2 = ((string)privateIPAllocationMethodValue2);
                                                virtualNetworkGatewayIpConfigurationInstance2.PrivateIpAllocationMethod = privateIPAllocationMethodInstance2;
                                            }
                                            
                                            JToken subnetValue4 = ipConfigurationsValue2["subnet"];
                                            if (subnetValue4 != null && subnetValue4.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance2 = new ResourceId();
                                                virtualNetworkGatewayIpConfigurationInstance2.Subnet = subnetInstance2;
                                                
                                                JToken idValue6 = subnetValue4["id"];
                                                if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                {
                                                    string idInstance6 = ((string)idValue6);
                                                    subnetInstance2.Id = idInstance6;
                                                }
                                            }
                                            
                                            JToken publicIPAddressValue4 = ipConfigurationsValue2["publicIPAddress"];
                                            if (publicIPAddressValue4 != null && publicIPAddressValue4.Type != JTokenType.Null)
                                            {
                                                ResourceId publicIPAddressInstance2 = new ResourceId();
                                                virtualNetworkGatewayIpConfigurationInstance2.PublicIpAddress = publicIPAddressInstance2;
                                                
                                                JToken idValue7 = publicIPAddressValue4["id"];
                                                if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                                {
                                                    string idInstance7 = ((string)idValue7);
                                                    publicIPAddressInstance2.Id = idInstance7;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue4 = ipConfigurationsValue2["provisioningState"];
                                            if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                                virtualNetworkGatewayIpConfigurationInstance2.ProvisioningState = provisioningStateInstance4;
                                            }
                                            
                                            JToken nameValue4 = ipConfigurationsValue2["name"];
                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                            {
                                                string nameInstance4 = ((string)nameValue4);
                                                virtualNetworkGatewayIpConfigurationInstance2.Name = nameInstance4;
                                            }
                                            
                                            JToken etagValue4 = ipConfigurationsValue2["etag"];
                                            if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                            {
                                                string etagInstance4 = ((string)etagValue4);
                                                virtualNetworkGatewayIpConfigurationInstance2.Etag = etagInstance4;
                                            }
                                            
                                            JToken idValue8 = ipConfigurationsValue2["id"];
                                            if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                            {
                                                string idInstance8 = ((string)idValue8);
                                                virtualNetworkGatewayIpConfigurationInstance2.Id = idInstance8;
                                            }
                                        }
                                    }
                                    
                                    JToken gatewayTypeValue2 = virtualNetworkGateway2Value2["gatewayType"];
                                    if (gatewayTypeValue2 != null && gatewayTypeValue2.Type != JTokenType.Null)
                                    {
                                        string gatewayTypeInstance2 = ((string)gatewayTypeValue2);
                                        virtualNetworkGateway2Instance.GatewayType = gatewayTypeInstance2;
                                    }
                                    
                                    JToken vpnTypeValue2 = virtualNetworkGateway2Value2["vpnType"];
                                    if (vpnTypeValue2 != null && vpnTypeValue2.Type != JTokenType.Null)
                                    {
                                        string vpnTypeInstance2 = ((string)vpnTypeValue2);
                                        virtualNetworkGateway2Instance.VpnType = vpnTypeInstance2;
                                    }
                                    
                                    JToken enableBgpValue2 = virtualNetworkGateway2Value2["enableBgp"];
                                    if (enableBgpValue2 != null && enableBgpValue2.Type != JTokenType.Null)
                                    {
                                        bool enableBgpInstance2 = ((bool)enableBgpValue2);
                                        virtualNetworkGateway2Instance.EnableBgp = enableBgpInstance2;
                                    }
                                    
                                    JToken gatewaydefaultsiteValue4 = virtualNetworkGateway2Value2["gatewaydefaultsite"];
                                    if (gatewaydefaultsiteValue4 != null && gatewaydefaultsiteValue4.Type != JTokenType.Null)
                                    {
                                        LocalNetworkGateway gatewaydefaultsiteInstance2 = new LocalNetworkGateway();
                                        virtualNetworkGateway2Instance.GatewayDefaultSite = gatewaydefaultsiteInstance2;
                                        
                                        JToken localNetworkAddressSpaceValue5 = gatewaydefaultsiteValue4["localNetworkAddressSpace"];
                                        if (localNetworkAddressSpaceValue5 != null && localNetworkAddressSpaceValue5.Type != JTokenType.Null)
                                        {
                                            AddressSpace localNetworkAddressSpaceInstance2 = new AddressSpace();
                                            gatewaydefaultsiteInstance2.LocalNetworkAddressSpace = localNetworkAddressSpaceInstance2;
                                            
                                            JToken addressPrefixesArray5 = localNetworkAddressSpaceValue5["addressPrefixes"];
                                            if (addressPrefixesArray5 != null && addressPrefixesArray5.Type != JTokenType.Null)
                                            {
                                                foreach (JToken addressPrefixesValue2 in ((JArray)addressPrefixesArray5))
                                                {
                                                    localNetworkAddressSpaceInstance2.AddressPrefixes.Add(((string)addressPrefixesValue2));
                                                }
                                            }
                                        }
                                        
                                        JToken gatewayIpAddressValue2 = gatewaydefaultsiteValue4["gatewayIpAddress"];
                                        if (gatewayIpAddressValue2 != null && gatewayIpAddressValue2.Type != JTokenType.Null)
                                        {
                                            string gatewayIpAddressInstance2 = ((string)gatewayIpAddressValue2);
                                            gatewaydefaultsiteInstance2.GatewayIpAddress = gatewayIpAddressInstance2;
                                        }
                                        
                                        JToken provisioningStateValue5 = gatewaydefaultsiteValue4["provisioningState"];
                                        if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                            gatewaydefaultsiteInstance2.ProvisioningState = provisioningStateInstance5;
                                        }
                                        
                                        JToken resourceGuidValue3 = gatewaydefaultsiteValue4["resourceGuid"];
                                        if (resourceGuidValue3 != null && resourceGuidValue3.Type != JTokenType.Null)
                                        {
                                            string resourceGuidInstance3 = ((string)resourceGuidValue3);
                                            gatewaydefaultsiteInstance2.ResourceGuid = resourceGuidInstance3;
                                        }
                                        
                                        JToken etagValue5 = gatewaydefaultsiteValue4["etag"];
                                        if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                        {
                                            string etagInstance5 = ((string)etagValue5);
                                            gatewaydefaultsiteInstance2.Etag = etagInstance5;
                                        }
                                        
                                        JToken idValue9 = gatewaydefaultsiteValue4["id"];
                                        if (idValue9 != null && idValue9.Type != JTokenType.Null)
                                        {
                                            string idInstance9 = ((string)idValue9);
                                            gatewaydefaultsiteInstance2.Id = idInstance9;
                                        }
                                        
                                        JToken nameValue5 = gatewaydefaultsiteValue4["name"];
                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                        {
                                            string nameInstance5 = ((string)nameValue5);
                                            gatewaydefaultsiteInstance2.Name = nameInstance5;
                                        }
                                        
                                        JToken typeValue3 = gatewaydefaultsiteValue4["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            gatewaydefaultsiteInstance2.Type = typeInstance3;
                                        }
                                        
                                        JToken locationValue3 = gatewaydefaultsiteValue4["location"];
                                        if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                        {
                                            string locationInstance3 = ((string)locationValue3);
                                            gatewaydefaultsiteInstance2.Location = locationInstance3;
                                        }
                                        
                                        JToken tagsSequenceElement3 = ((JToken)gatewaydefaultsiteValue4["tags"]);
                                        if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property3 in tagsSequenceElement3)
                                            {
                                                string tagsKey9 = ((string)property3.Name);
                                                string tagsValue9 = ((string)property3.Value);
                                                gatewaydefaultsiteInstance2.Tags.Add(tagsKey9, tagsValue9);
                                            }
                                        }
                                    }
                                    
                                    JToken provisioningStateValue6 = virtualNetworkGateway2Value2["provisioningState"];
                                    if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                        virtualNetworkGateway2Instance.ProvisioningState = provisioningStateInstance6;
                                    }
                                    
                                    JToken resourceGuidValue4 = virtualNetworkGateway2Value2["resourceGuid"];
                                    if (resourceGuidValue4 != null && resourceGuidValue4.Type != JTokenType.Null)
                                    {
                                        string resourceGuidInstance4 = ((string)resourceGuidValue4);
                                        virtualNetworkGateway2Instance.ResourceGuid = resourceGuidInstance4;
                                    }
                                    
                                    JToken etagValue6 = virtualNetworkGateway2Value2["etag"];
                                    if (etagValue6 != null && etagValue6.Type != JTokenType.Null)
                                    {
                                        string etagInstance6 = ((string)etagValue6);
                                        virtualNetworkGateway2Instance.Etag = etagInstance6;
                                    }
                                    
                                    JToken idValue10 = virtualNetworkGateway2Value2["id"];
                                    if (idValue10 != null && idValue10.Type != JTokenType.Null)
                                    {
                                        string idInstance10 = ((string)idValue10);
                                        virtualNetworkGateway2Instance.Id = idInstance10;
                                    }
                                    
                                    JToken nameValue6 = virtualNetworkGateway2Value2["name"];
                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                    {
                                        string nameInstance6 = ((string)nameValue6);
                                        virtualNetworkGateway2Instance.Name = nameInstance6;
                                    }
                                    
                                    JToken typeValue4 = virtualNetworkGateway2Value2["type"];
                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                    {
                                        string typeInstance4 = ((string)typeValue4);
                                        virtualNetworkGateway2Instance.Type = typeInstance4;
                                    }
                                    
                                    JToken locationValue4 = virtualNetworkGateway2Value2["location"];
                                    if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                                    {
                                        string locationInstance4 = ((string)locationValue4);
                                        virtualNetworkGateway2Instance.Location = locationInstance4;
                                    }
                                    
                                    JToken tagsSequenceElement4 = ((JToken)virtualNetworkGateway2Value2["tags"]);
                                    if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property4 in tagsSequenceElement4)
                                        {
                                            string tagsKey10 = ((string)property4.Name);
                                            string tagsValue10 = ((string)property4.Value);
                                            virtualNetworkGateway2Instance.Tags.Add(tagsKey10, tagsValue10);
                                        }
                                    }
                                }
                                
                                JToken localNetworkGateway2Value2 = propertiesValue2["localNetworkGateway2"];
                                if (localNetworkGateway2Value2 != null && localNetworkGateway2Value2.Type != JTokenType.Null)
                                {
                                    LocalNetworkGateway localNetworkGateway2Instance = new LocalNetworkGateway();
                                    virtualNetworkGatewayConnectionInstance.LocalNetworkGateway2 = localNetworkGateway2Instance;
                                    
                                    JToken localNetworkAddressSpaceValue6 = localNetworkGateway2Value2["localNetworkAddressSpace"];
                                    if (localNetworkAddressSpaceValue6 != null && localNetworkAddressSpaceValue6.Type != JTokenType.Null)
                                    {
                                        AddressSpace localNetworkAddressSpaceInstance3 = new AddressSpace();
                                        localNetworkGateway2Instance.LocalNetworkAddressSpace = localNetworkAddressSpaceInstance3;
                                        
                                        JToken addressPrefixesArray6 = localNetworkAddressSpaceValue6["addressPrefixes"];
                                        if (addressPrefixesArray6 != null && addressPrefixesArray6.Type != JTokenType.Null)
                                        {
                                            foreach (JToken addressPrefixesValue3 in ((JArray)addressPrefixesArray6))
                                            {
                                                localNetworkAddressSpaceInstance3.AddressPrefixes.Add(((string)addressPrefixesValue3));
                                            }
                                        }
                                    }
                                    
                                    JToken gatewayIpAddressValue3 = localNetworkGateway2Value2["gatewayIpAddress"];
                                    if (gatewayIpAddressValue3 != null && gatewayIpAddressValue3.Type != JTokenType.Null)
                                    {
                                        string gatewayIpAddressInstance3 = ((string)gatewayIpAddressValue3);
                                        localNetworkGateway2Instance.GatewayIpAddress = gatewayIpAddressInstance3;
                                    }
                                    
                                    JToken provisioningStateValue7 = localNetworkGateway2Value2["provisioningState"];
                                    if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance7 = ((string)provisioningStateValue7);
                                        localNetworkGateway2Instance.ProvisioningState = provisioningStateInstance7;
                                    }
                                    
                                    JToken resourceGuidValue5 = localNetworkGateway2Value2["resourceGuid"];
                                    if (resourceGuidValue5 != null && resourceGuidValue5.Type != JTokenType.Null)
                                    {
                                        string resourceGuidInstance5 = ((string)resourceGuidValue5);
                                        localNetworkGateway2Instance.ResourceGuid = resourceGuidInstance5;
                                    }
                                    
                                    JToken etagValue7 = localNetworkGateway2Value2["etag"];
                                    if (etagValue7 != null && etagValue7.Type != JTokenType.Null)
                                    {
                                        string etagInstance7 = ((string)etagValue7);
                                        localNetworkGateway2Instance.Etag = etagInstance7;
                                    }
                                    
                                    JToken idValue11 = localNetworkGateway2Value2["id"];
                                    if (idValue11 != null && idValue11.Type != JTokenType.Null)
                                    {
                                        string idInstance11 = ((string)idValue11);
                                        localNetworkGateway2Instance.Id = idInstance11;
                                    }
                                    
                                    JToken nameValue7 = localNetworkGateway2Value2["name"];
                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                    {
                                        string nameInstance7 = ((string)nameValue7);
                                        localNetworkGateway2Instance.Name = nameInstance7;
                                    }
                                    
                                    JToken typeValue5 = localNetworkGateway2Value2["type"];
                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                    {
                                        string typeInstance5 = ((string)typeValue5);
                                        localNetworkGateway2Instance.Type = typeInstance5;
                                    }
                                    
                                    JToken locationValue5 = localNetworkGateway2Value2["location"];
                                    if (locationValue5 != null && locationValue5.Type != JTokenType.Null)
                                    {
                                        string locationInstance5 = ((string)locationValue5);
                                        localNetworkGateway2Instance.Location = locationInstance5;
                                    }
                                    
                                    JToken tagsSequenceElement5 = ((JToken)localNetworkGateway2Value2["tags"]);
                                    if (tagsSequenceElement5 != null && tagsSequenceElement5.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property5 in tagsSequenceElement5)
                                        {
                                            string tagsKey11 = ((string)property5.Name);
                                            string tagsValue11 = ((string)property5.Value);
                                            localNetworkGateway2Instance.Tags.Add(tagsKey11, tagsValue11);
                                        }
                                    }
                                }
                                
                                JToken connectionTypeValue = propertiesValue2["connectionType"];
                                if (connectionTypeValue != null && connectionTypeValue.Type != JTokenType.Null)
                                {
                                    string connectionTypeInstance = ((string)connectionTypeValue);
                                    virtualNetworkGatewayConnectionInstance.ConnectionType = connectionTypeInstance;
                                }
                                
                                JToken routingWeightValue = propertiesValue2["routingWeight"];
                                if (routingWeightValue != null && routingWeightValue.Type != JTokenType.Null)
                                {
                                    int routingWeightInstance = ((int)routingWeightValue);
                                    virtualNetworkGatewayConnectionInstance.RoutingWeight = routingWeightInstance;
                                }
                                
                                JToken sharedKeyValue = propertiesValue2["sharedKey"];
                                if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                {
                                    string sharedKeyInstance = ((string)sharedKeyValue);
                                    virtualNetworkGatewayConnectionInstance.SharedKey = sharedKeyInstance;
                                }
                                
                                JToken connectionStatusValue = propertiesValue2["connectionStatus"];
                                if (connectionStatusValue != null && connectionStatusValue.Type != JTokenType.Null)
                                {
                                    string connectionStatusInstance = ((string)connectionStatusValue);
                                    virtualNetworkGatewayConnectionInstance.ConnectionStatus = connectionStatusInstance;
                                }
                                
                                JToken egressBytesTransferredValue = propertiesValue2["egressBytesTransferred"];
                                if (egressBytesTransferredValue != null && egressBytesTransferredValue.Type != JTokenType.Null)
                                {
                                    ulong egressBytesTransferredInstance = ((ulong)egressBytesTransferredValue);
                                    virtualNetworkGatewayConnectionInstance.EgressBytesTransferred = egressBytesTransferredInstance;
                                }
                                
                                JToken ingressBytesTransferredValue = propertiesValue2["ingressBytesTransferred"];
                                if (ingressBytesTransferredValue != null && ingressBytesTransferredValue.Type != JTokenType.Null)
                                {
                                    ulong ingressBytesTransferredInstance = ((ulong)ingressBytesTransferredValue);
                                    virtualNetworkGatewayConnectionInstance.IngressBytesTransferred = ingressBytesTransferredInstance;
                                }
                                
                                JToken peerValue2 = propertiesValue2["peer"];
                                if (peerValue2 != null && peerValue2.Type != JTokenType.Null)
                                {
                                    ResourceId peerInstance = new ResourceId();
                                    virtualNetworkGatewayConnectionInstance.Peer = peerInstance;
                                    
                                    JToken idValue12 = peerValue2["id"];
                                    if (idValue12 != null && idValue12.Type != JTokenType.Null)
                                    {
                                        string idInstance12 = ((string)idValue12);
                                        peerInstance.Id = idInstance12;
                                    }
                                }
                                
                                JToken resourceGuidValue6 = propertiesValue2["resourceGuid"];
                                if (resourceGuidValue6 != null && resourceGuidValue6.Type != JTokenType.Null)
                                {
                                    string resourceGuidInstance6 = ((string)resourceGuidValue6);
                                    virtualNetworkGatewayConnectionInstance.ResourceGuid = resourceGuidInstance6;
                                }
                                
                                JToken provisioningStateValue8 = propertiesValue2["provisioningState"];
                                if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance8 = ((string)provisioningStateValue8);
                                    virtualNetworkGatewayConnectionInstance.ProvisioningState = provisioningStateInstance8;
                                }
                            }
                            
                            JToken etagValue8 = responseDoc["etag"];
                            if (etagValue8 != null && etagValue8.Type != JTokenType.Null)
                            {
                                string etagInstance8 = ((string)etagValue8);
                                virtualNetworkGatewayConnectionInstance.Etag = etagInstance8;
                            }
                            
                            JToken idValue13 = responseDoc["id"];
                            if (idValue13 != null && idValue13.Type != JTokenType.Null)
                            {
                                string idInstance13 = ((string)idValue13);
                                virtualNetworkGatewayConnectionInstance.Id = idInstance13;
                            }
                            
                            JToken nameValue8 = responseDoc["name"];
                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                            {
                                string nameInstance8 = ((string)nameValue8);
                                virtualNetworkGatewayConnectionInstance.Name = nameInstance8;
                            }
                            
                            JToken typeValue6 = responseDoc["type"];
                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                            {
                                string typeInstance6 = ((string)typeValue6);
                                virtualNetworkGatewayConnectionInstance.Type = typeInstance6;
                            }
                            
                            JToken locationValue6 = responseDoc["location"];
                            if (locationValue6 != null && locationValue6.Type != JTokenType.Null)
                            {
                                string locationInstance6 = ((string)locationValue6);
                                virtualNetworkGatewayConnectionInstance.Location = locationInstance6;
                            }
                            
                            JToken tagsSequenceElement6 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement6 != null && tagsSequenceElement6.Type != JTokenType.Null)
                            {
                                foreach (JProperty property6 in tagsSequenceElement6)
                                {
                                    string tagsKey12 = ((string)property6.Name);
                                    string tagsValue12 = ((string)property6.Value);
                                    virtualNetworkGatewayConnectionInstance.Tags.Add(tagsKey12, tagsValue12);
                                }
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                Error errorInstance = new Error();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken targetValue = errorValue["target"];
                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                {
                                    string targetInstance = ((string)targetValue);
                                    errorInstance.Target = targetInstance;
                                }
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        errorInstance.Details.Add(errorDetailsInstance);
                                        
                                        JToken codeValue2 = detailsValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            errorDetailsInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken targetValue2 = detailsValue["target"];
                                        if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                        {
                                            string targetInstance2 = ((string)targetValue2);
                                            errorDetailsInstance.Target = targetInstance2;
                                        }
                                        
                                        JToken messageValue2 = detailsValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            errorDetailsInstance.Message = messageInstance2;
                                        }
                                    }
                                }
                                
                                JToken innerErrorValue = errorValue["innerError"];
                                if (innerErrorValue != null && innerErrorValue.Type != JTokenType.Null)
                                {
                                    string innerErrorInstance = ((string)innerErrorValue);
                                    errorInstance.InnerError = innerErrorInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Delete VirtualNetworkGatewayConnection operation deletes the
        /// specifed virtual network Gateway connection through Network
        /// resource provider.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkGatewayConnectionName'>
        /// Required. The name of the virtual network gateway connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// If the resource provide needs to return an error to any operation,
        /// it should return the appropriate HTTP error code and a message
        /// body as can be seen below.The message should be localized per the
        /// Accept-Language header specified in the original request such
        /// thatit could be directly be exposed to users
        /// </returns>
        public async Task<UpdateOperationResponse> BeginDeletingAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (virtualNetworkGatewayConnectionName == null)
            {
                throw new ArgumentNullException("virtualNetworkGatewayConnectionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkGatewayConnectionName", virtualNetworkGatewayConnectionName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/connections/";
            url = url + Uri.EscapeDataString(virtualNetworkGatewayConnectionName);
            url = url + "/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdateOperationResponse result = null;
                    // Deserialize Response
                    result = new UpdateOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The VirtualNetworkGatewayConnectionResetSharedKey operation resets
        /// the virtual network gateway connection shared key for passed
        /// virtual network gateway connection in the specified resource group
        /// through Network resource provider.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkGatewayConnectionName'>
        /// Required. The virtual network gateway connection reset shared key
        /// Name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Reset Virtual Network
        /// Gateway connection shared key operation through Network resource
        /// provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for PutVirtualNetworkGatewayConnectionResetSharedKey Api
        /// servive call
        /// </returns>
        public async Task<ConnectionResetSharedKeyPutResponse> BeginResetSharedKeyAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, ConnectionResetSharedKey parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (virtualNetworkGatewayConnectionName == null)
            {
                throw new ArgumentNullException("virtualNetworkGatewayConnectionName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkGatewayConnectionName", virtualNetworkGatewayConnectionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginResetSharedKeyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/connections/";
            url = url + Uri.EscapeDataString(virtualNetworkGatewayConnectionName);
            url = url + "/sharedkey/reset";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject connectionResetSharedKeyJsonFormatValue = new JObject();
                requestDoc = connectionResetSharedKeyJsonFormatValue;
                
                connectionResetSharedKeyJsonFormatValue["keyLength"] = parameters.KeyLength;
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ConnectionResetSharedKeyPutResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ConnectionResetSharedKeyPutResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ConnectionResetSharedKey connectionResetSharedKeyInstance = new ConnectionResetSharedKey();
                            result.ConnectionResetSharedKey = connectionResetSharedKeyInstance;
                            
                            JToken keyLengthValue = responseDoc["keyLength"];
                            if (keyLengthValue != null && keyLengthValue.Type != JTokenType.Null)
                            {
                                uint keyLengthInstance = ((uint)keyLengthValue);
                                connectionResetSharedKeyInstance.KeyLength = keyLengthInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                Error errorInstance = new Error();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken targetValue = errorValue["target"];
                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                {
                                    string targetInstance = ((string)targetValue);
                                    errorInstance.Target = targetInstance;
                                }
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        errorInstance.Details.Add(errorDetailsInstance);
                                        
                                        JToken codeValue2 = detailsValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            errorDetailsInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken targetValue2 = detailsValue["target"];
                                        if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                        {
                                            string targetInstance2 = ((string)targetValue2);
                                            errorDetailsInstance.Target = targetInstance2;
                                        }
                                        
                                        JToken messageValue2 = detailsValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            errorDetailsInstance.Message = messageInstance2;
                                        }
                                    }
                                }
                                
                                JToken innerErrorValue = errorValue["innerError"];
                                if (innerErrorValue != null && innerErrorValue.Type != JTokenType.Null)
                                {
                                    string innerErrorInstance = ((string)innerErrorValue);
                                    errorInstance.InnerError = innerErrorInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Put VirtualNetworkGatewayConnectionSharedKey operation sets the
        /// virtual network gateway connection shared key for passed virtual
        /// network gateway connection in the specified resource group through
        /// Network resource provider.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkGatewayConnectionName'>
        /// Required. The virtual network gateway connection name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Set Virtual Network
        /// Gateway conection Shared key operation throughNetwork resource
        /// provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for PutVirtualNetworkGatewayConnectionSharedKey Api
        /// servive call
        /// </returns>
        public async Task<ConnectionSharedKeyPutResponse> BeginSetSharedKeyAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, ConnectionSharedKey parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (virtualNetworkGatewayConnectionName == null)
            {
                throw new ArgumentNullException("virtualNetworkGatewayConnectionName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkGatewayConnectionName", virtualNetworkGatewayConnectionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginSetSharedKeyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/connections/";
            url = url + Uri.EscapeDataString(virtualNetworkGatewayConnectionName);
            url = url + "/sharedkey";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject connectionSharedKeyJsonFormatValue = new JObject();
                requestDoc = connectionSharedKeyJsonFormatValue;
                
                if (parameters.Value != null)
                {
                    connectionSharedKeyJsonFormatValue["value"] = parameters.Value;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ConnectionSharedKeyPutResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ConnectionSharedKeyPutResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ConnectionSharedKey connectionSharedKeyInstance = new ConnectionSharedKey();
                            result.ConnectionSharedKey = connectionSharedKeyInstance;
                            
                            JToken valueValue = responseDoc["value"];
                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                            {
                                string valueInstance = ((string)valueValue);
                                connectionSharedKeyInstance.Value = valueInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                Error errorInstance = new Error();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken targetValue = errorValue["target"];
                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                {
                                    string targetInstance = ((string)targetValue);
                                    errorInstance.Target = targetInstance;
                                }
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        errorInstance.Details.Add(errorDetailsInstance);
                                        
                                        JToken codeValue2 = detailsValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            errorDetailsInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken targetValue2 = detailsValue["target"];
                                        if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                        {
                                            string targetInstance2 = ((string)targetValue2);
                                            errorDetailsInstance.Target = targetInstance2;
                                        }
                                        
                                        JToken messageValue2 = detailsValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            errorDetailsInstance.Message = messageInstance2;
                                        }
                                    }
                                }
                                
                                JToken innerErrorValue = errorValue["innerError"];
                                if (innerErrorValue != null && innerErrorValue.Type != JTokenType.Null)
                                {
                                    string innerErrorInstance = ((string)innerErrorValue);
                                    errorInstance.InnerError = innerErrorInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The CreateOrUpdate Virtual network Gateway connection creates a new
        /// or updates an existing virtualnetwork gateway connection through
        /// Network resource provider.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkGatewayConnectionName'>
        /// Required. The name of the virtual network gateway conenction.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Create or update Virtual
        /// Network Gateway connection operation through Network resource
        /// provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, VirtualNetworkGatewayConnection parameters, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkGatewayConnectionName", virtualNetworkGatewayConnectionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            VirtualNetworkGatewayConnectionPutResponse response = await client.VirtualNetworkGatewayConnections.BeginCreateOrUpdatingAsync(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == NetworkOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 30;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The Delete VirtualNetworkGatewayConnection operation deletes the
        /// specifed virtual network Gateway connection through Network
        /// resource provider.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkGatewayConnectionName'>
        /// Required. The name of the virtual network gateway connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkGatewayConnectionName", virtualNetworkGatewayConnectionName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            UpdateOperationResponse response = await client.VirtualNetworkGatewayConnections.BeginDeletingAsync(resourceGroupName, virtualNetworkGatewayConnectionName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == NetworkOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 30;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get VirtualNetworkGatewayConnection operation retrieves
        /// information about the specified virtual network gateway connection
        /// through Network resource provider.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkGatewayConnectionName'>
        /// Required. The name of the virtual network gateway connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for GetVitualNetworkGatewayConnection Api servive call.
        /// </returns>
        public async Task<VirtualNetworkGatewayConnectionGetResponse> GetAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (virtualNetworkGatewayConnectionName == null)
            {
                throw new ArgumentNullException("virtualNetworkGatewayConnectionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkGatewayConnectionName", virtualNetworkGatewayConnectionName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/connections/";
            url = url + Uri.EscapeDataString(virtualNetworkGatewayConnectionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkGatewayConnectionGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkGatewayConnectionGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            VirtualNetworkGatewayConnection virtualNetworkGatewayConnectionInstance = new VirtualNetworkGatewayConnection();
                            result.VirtualNetworkGatewayConnection = virtualNetworkGatewayConnectionInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken virtualNetworkGateway1Value = propertiesValue["virtualNetworkGateway1"];
                                if (virtualNetworkGateway1Value != null && virtualNetworkGateway1Value.Type != JTokenType.Null)
                                {
                                    VirtualNetworkGateway virtualNetworkGateway1Instance = new VirtualNetworkGateway();
                                    virtualNetworkGatewayConnectionInstance.VirtualNetworkGateway1 = virtualNetworkGateway1Instance;
                                    
                                    JToken ipConfigurationsArray = virtualNetworkGateway1Value["ipConfigurations"];
                                    if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                        {
                                            VirtualNetworkGatewayIpConfiguration virtualNetworkGatewayIpConfigurationInstance = new VirtualNetworkGatewayIpConfiguration();
                                            virtualNetworkGateway1Instance.IpConfigurations.Add(virtualNetworkGatewayIpConfigurationInstance);
                                            
                                            JToken privateIPAddressValue = ipConfigurationsValue["privateIPAddress"];
                                            if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                virtualNetworkGatewayIpConfigurationInstance.PrivateIpAddress = privateIPAddressInstance;
                                            }
                                            
                                            JToken privateIPAllocationMethodValue = ipConfigurationsValue["privateIPAllocationMethod"];
                                            if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                virtualNetworkGatewayIpConfigurationInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                            }
                                            
                                            JToken subnetValue = ipConfigurationsValue["subnet"];
                                            if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance = new ResourceId();
                                                virtualNetworkGatewayIpConfigurationInstance.Subnet = subnetInstance;
                                                
                                                JToken idValue = subnetValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    subnetInstance.Id = idInstance;
                                                }
                                            }
                                            
                                            JToken publicIPAddressValue = ipConfigurationsValue["publicIPAddress"];
                                            if (publicIPAddressValue != null && publicIPAddressValue.Type != JTokenType.Null)
                                            {
                                                ResourceId publicIPAddressInstance = new ResourceId();
                                                virtualNetworkGatewayIpConfigurationInstance.PublicIpAddress = publicIPAddressInstance;
                                                
                                                JToken idValue2 = publicIPAddressValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    publicIPAddressInstance.Id = idInstance2;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue = ipConfigurationsValue["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                virtualNetworkGatewayIpConfigurationInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                            
                                            JToken nameValue = ipConfigurationsValue["name"];
                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                            {
                                                string nameInstance = ((string)nameValue);
                                                virtualNetworkGatewayIpConfigurationInstance.Name = nameInstance;
                                            }
                                            
                                            JToken etagValue = ipConfigurationsValue["etag"];
                                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                                            {
                                                string etagInstance = ((string)etagValue);
                                                virtualNetworkGatewayIpConfigurationInstance.Etag = etagInstance;
                                            }
                                            
                                            JToken idValue3 = ipConfigurationsValue["id"];
                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                            {
                                                string idInstance3 = ((string)idValue3);
                                                virtualNetworkGatewayIpConfigurationInstance.Id = idInstance3;
                                            }
                                        }
                                    }
                                    
                                    JToken gatewayTypeValue = virtualNetworkGateway1Value["gatewayType"];
                                    if (gatewayTypeValue != null && gatewayTypeValue.Type != JTokenType.Null)
                                    {
                                        string gatewayTypeInstance = ((string)gatewayTypeValue);
                                        virtualNetworkGateway1Instance.GatewayType = gatewayTypeInstance;
                                    }
                                    
                                    JToken vpnTypeValue = virtualNetworkGateway1Value["vpnType"];
                                    if (vpnTypeValue != null && vpnTypeValue.Type != JTokenType.Null)
                                    {
                                        string vpnTypeInstance = ((string)vpnTypeValue);
                                        virtualNetworkGateway1Instance.VpnType = vpnTypeInstance;
                                    }
                                    
                                    JToken enableBgpValue = virtualNetworkGateway1Value["enableBgp"];
                                    if (enableBgpValue != null && enableBgpValue.Type != JTokenType.Null)
                                    {
                                        bool enableBgpInstance = ((bool)enableBgpValue);
                                        virtualNetworkGateway1Instance.EnableBgp = enableBgpInstance;
                                    }
                                    
                                    JToken gatewaydefaultsiteValue = virtualNetworkGateway1Value["gatewaydefaultsite"];
                                    if (gatewaydefaultsiteValue != null && gatewaydefaultsiteValue.Type != JTokenType.Null)
                                    {
                                        LocalNetworkGateway gatewaydefaultsiteInstance = new LocalNetworkGateway();
                                        virtualNetworkGateway1Instance.GatewayDefaultSite = gatewaydefaultsiteInstance;
                                        
                                        JToken localNetworkAddressSpaceValue = gatewaydefaultsiteValue["localNetworkAddressSpace"];
                                        if (localNetworkAddressSpaceValue != null && localNetworkAddressSpaceValue.Type != JTokenType.Null)
                                        {
                                            AddressSpace localNetworkAddressSpaceInstance = new AddressSpace();
                                            gatewaydefaultsiteInstance.LocalNetworkAddressSpace = localNetworkAddressSpaceInstance;
                                            
                                            JToken addressPrefixesArray = localNetworkAddressSpaceValue["addressPrefixes"];
                                            if (addressPrefixesArray != null && addressPrefixesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken addressPrefixesValue in ((JArray)addressPrefixesArray))
                                                {
                                                    localNetworkAddressSpaceInstance.AddressPrefixes.Add(((string)addressPrefixesValue));
                                                }
                                            }
                                        }
                                        
                                        JToken gatewayIpAddressValue = gatewaydefaultsiteValue["gatewayIpAddress"];
                                        if (gatewayIpAddressValue != null && gatewayIpAddressValue.Type != JTokenType.Null)
                                        {
                                            string gatewayIpAddressInstance = ((string)gatewayIpAddressValue);
                                            gatewaydefaultsiteInstance.GatewayIpAddress = gatewayIpAddressInstance;
                                        }
                                        
                                        JToken provisioningStateValue2 = gatewaydefaultsiteValue["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            gatewaydefaultsiteInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                        
                                        JToken resourceGuidValue = gatewaydefaultsiteValue["resourceGuid"];
                                        if (resourceGuidValue != null && resourceGuidValue.Type != JTokenType.Null)
                                        {
                                            string resourceGuidInstance = ((string)resourceGuidValue);
                                            gatewaydefaultsiteInstance.ResourceGuid = resourceGuidInstance;
                                        }
                                        
                                        JToken etagValue2 = gatewaydefaultsiteValue["etag"];
                                        if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                        {
                                            string etagInstance2 = ((string)etagValue2);
                                            gatewaydefaultsiteInstance.Etag = etagInstance2;
                                        }
                                        
                                        JToken idValue4 = gatewaydefaultsiteValue["id"];
                                        if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                        {
                                            string idInstance4 = ((string)idValue4);
                                            gatewaydefaultsiteInstance.Id = idInstance4;
                                        }
                                        
                                        JToken nameValue2 = gatewaydefaultsiteValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            gatewaydefaultsiteInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken typeValue = gatewaydefaultsiteValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            gatewaydefaultsiteInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = gatewaydefaultsiteValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            gatewaydefaultsiteInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)gatewaydefaultsiteValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property.Name);
                                                string tagsValue = ((string)property.Value);
                                                gatewaydefaultsiteInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                    
                                    JToken provisioningStateValue3 = virtualNetworkGateway1Value["provisioningState"];
                                    if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                        virtualNetworkGateway1Instance.ProvisioningState = provisioningStateInstance3;
                                    }
                                    
                                    JToken resourceGuidValue2 = virtualNetworkGateway1Value["resourceGuid"];
                                    if (resourceGuidValue2 != null && resourceGuidValue2.Type != JTokenType.Null)
                                    {
                                        string resourceGuidInstance2 = ((string)resourceGuidValue2);
                                        virtualNetworkGateway1Instance.ResourceGuid = resourceGuidInstance2;
                                    }
                                    
                                    JToken etagValue3 = virtualNetworkGateway1Value["etag"];
                                    if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                    {
                                        string etagInstance3 = ((string)etagValue3);
                                        virtualNetworkGateway1Instance.Etag = etagInstance3;
                                    }
                                    
                                    JToken idValue5 = virtualNetworkGateway1Value["id"];
                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                    {
                                        string idInstance5 = ((string)idValue5);
                                        virtualNetworkGateway1Instance.Id = idInstance5;
                                    }
                                    
                                    JToken nameValue3 = virtualNetworkGateway1Value["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        virtualNetworkGateway1Instance.Name = nameInstance3;
                                    }
                                    
                                    JToken typeValue2 = virtualNetworkGateway1Value["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        virtualNetworkGateway1Instance.Type = typeInstance2;
                                    }
                                    
                                    JToken locationValue2 = virtualNetworkGateway1Value["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        virtualNetworkGateway1Instance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)virtualNetworkGateway1Value["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property2.Name);
                                            string tagsValue2 = ((string)property2.Value);
                                            virtualNetworkGateway1Instance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                                
                                JToken virtualNetworkGateway2Value = propertiesValue["virtualNetworkGateway2"];
                                if (virtualNetworkGateway2Value != null && virtualNetworkGateway2Value.Type != JTokenType.Null)
                                {
                                    VirtualNetworkGateway virtualNetworkGateway2Instance = new VirtualNetworkGateway();
                                    virtualNetworkGatewayConnectionInstance.VirtualNetworkGateway2 = virtualNetworkGateway2Instance;
                                    
                                    JToken ipConfigurationsArray2 = virtualNetworkGateway2Value["ipConfigurations"];
                                    if (ipConfigurationsArray2 != null && ipConfigurationsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken ipConfigurationsValue2 in ((JArray)ipConfigurationsArray2))
                                        {
                                            VirtualNetworkGatewayIpConfiguration virtualNetworkGatewayIpConfigurationInstance2 = new VirtualNetworkGatewayIpConfiguration();
                                            virtualNetworkGateway2Instance.IpConfigurations.Add(virtualNetworkGatewayIpConfigurationInstance2);
                                            
                                            JToken privateIPAddressValue2 = ipConfigurationsValue2["privateIPAddress"];
                                            if (privateIPAddressValue2 != null && privateIPAddressValue2.Type != JTokenType.Null)
                                            {
                                                string privateIPAddressInstance2 = ((string)privateIPAddressValue2);
                                                virtualNetworkGatewayIpConfigurationInstance2.PrivateIpAddress = privateIPAddressInstance2;
                                            }
                                            
                                            JToken privateIPAllocationMethodValue2 = ipConfigurationsValue2["privateIPAllocationMethod"];
                                            if (privateIPAllocationMethodValue2 != null && privateIPAllocationMethodValue2.Type != JTokenType.Null)
                                            {
                                                string privateIPAllocationMethodInstance2 = ((string)privateIPAllocationMethodValue2);
                                                virtualNetworkGatewayIpConfigurationInstance2.PrivateIpAllocationMethod = privateIPAllocationMethodInstance2;
                                            }
                                            
                                            JToken subnetValue2 = ipConfigurationsValue2["subnet"];
                                            if (subnetValue2 != null && subnetValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance2 = new ResourceId();
                                                virtualNetworkGatewayIpConfigurationInstance2.Subnet = subnetInstance2;
                                                
                                                JToken idValue6 = subnetValue2["id"];
                                                if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                {
                                                    string idInstance6 = ((string)idValue6);
                                                    subnetInstance2.Id = idInstance6;
                                                }
                                            }
                                            
                                            JToken publicIPAddressValue2 = ipConfigurationsValue2["publicIPAddress"];
                                            if (publicIPAddressValue2 != null && publicIPAddressValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId publicIPAddressInstance2 = new ResourceId();
                                                virtualNetworkGatewayIpConfigurationInstance2.PublicIpAddress = publicIPAddressInstance2;
                                                
                                                JToken idValue7 = publicIPAddressValue2["id"];
                                                if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                                {
                                                    string idInstance7 = ((string)idValue7);
                                                    publicIPAddressInstance2.Id = idInstance7;
                                                }
                                            }
                                            
                                            JToken provisioningStateValue4 = ipConfigurationsValue2["provisioningState"];
                                            if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                                virtualNetworkGatewayIpConfigurationInstance2.ProvisioningState = provisioningStateInstance4;
                                            }
                                            
                                            JToken nameValue4 = ipConfigurationsValue2["name"];
                                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                            {
                                                string nameInstance4 = ((string)nameValue4);
                                                virtualNetworkGatewayIpConfigurationInstance2.Name = nameInstance4;
                                            }
                                            
                                            JToken etagValue4 = ipConfigurationsValue2["etag"];
                                            if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                            {
                                                string etagInstance4 = ((string)etagValue4);
                                                virtualNetworkGatewayIpConfigurationInstance2.Etag = etagInstance4;
                                            }
                                            
                                            JToken idValue8 = ipConfigurationsValue2["id"];
                                            if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                            {
                                                string idInstance8 = ((string)idValue8);
                                                virtualNetworkGatewayIpConfigurationInstance2.Id = idInstance8;
                                            }
                                        }
                                    }
                                    
                                    JToken gatewayTypeValue2 = virtualNetworkGateway2Value["gatewayType"];
                                    if (gatewayTypeValue2 != null && gatewayTypeValue2.Type != JTokenType.Null)
                                    {
                                        string gatewayTypeInstance2 = ((string)gatewayTypeValue2);
                                        virtualNetworkGateway2Instance.GatewayType = gatewayTypeInstance2;
                                    }
                                    
                                    JToken vpnTypeValue2 = virtualNetworkGateway2Value["vpnType"];
                                    if (vpnTypeValue2 != null && vpnTypeValue2.Type != JTokenType.Null)
                                    {
                                        string vpnTypeInstance2 = ((string)vpnTypeValue2);
                                        virtualNetworkGateway2Instance.VpnType = vpnTypeInstance2;
                                    }
                                    
                                    JToken enableBgpValue2 = virtualNetworkGateway2Value["enableBgp"];
                                    if (enableBgpValue2 != null && enableBgpValue2.Type != JTokenType.Null)
                                    {
                                        bool enableBgpInstance2 = ((bool)enableBgpValue2);
                                        virtualNetworkGateway2Instance.EnableBgp = enableBgpInstance2;
                                    }
                                    
                                    JToken gatewaydefaultsiteValue2 = virtualNetworkGateway2Value["gatewaydefaultsite"];
                                    if (gatewaydefaultsiteValue2 != null && gatewaydefaultsiteValue2.Type != JTokenType.Null)
                                    {
                                        LocalNetworkGateway gatewaydefaultsiteInstance2 = new LocalNetworkGateway();
                                        virtualNetworkGateway2Instance.GatewayDefaultSite = gatewaydefaultsiteInstance2;
                                        
                                        JToken localNetworkAddressSpaceValue2 = gatewaydefaultsiteValue2["localNetworkAddressSpace"];
                                        if (localNetworkAddressSpaceValue2 != null && localNetworkAddressSpaceValue2.Type != JTokenType.Null)
                                        {
                                            AddressSpace localNetworkAddressSpaceInstance2 = new AddressSpace();
                                            gatewaydefaultsiteInstance2.LocalNetworkAddressSpace = localNetworkAddressSpaceInstance2;
                                            
                                            JToken addressPrefixesArray2 = localNetworkAddressSpaceValue2["addressPrefixes"];
                                            if (addressPrefixesArray2 != null && addressPrefixesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken addressPrefixesValue2 in ((JArray)addressPrefixesArray2))
                                                {
                                                    localNetworkAddressSpaceInstance2.AddressPrefixes.Add(((string)addressPrefixesValue2));
                                                }
                                            }
                                        }
                                        
                                        JToken gatewayIpAddressValue2 = gatewaydefaultsiteValue2["gatewayIpAddress"];
                                        if (gatewayIpAddressValue2 != null && gatewayIpAddressValue2.Type != JTokenType.Null)
                                        {
                                            string gatewayIpAddressInstance2 = ((string)gatewayIpAddressValue2);
                                            gatewaydefaultsiteInstance2.GatewayIpAddress = gatewayIpAddressInstance2;
                                        }
                                        
                                        JToken provisioningStateValue5 = gatewaydefaultsiteValue2["provisioningState"];
                                        if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                            gatewaydefaultsiteInstance2.ProvisioningState = provisioningStateInstance5;
                                        }
                                        
                                        JToken resourceGuidValue3 = gatewaydefaultsiteValue2["resourceGuid"];
                                        if (resourceGuidValue3 != null && resourceGuidValue3.Type != JTokenType.Null)
                                        {
                                            string resourceGuidInstance3 = ((string)resourceGuidValue3);
                                            gatewaydefaultsiteInstance2.ResourceGuid = resourceGuidInstance3;
                                        }
                                        
                                        JToken etagValue5 = gatewaydefaultsiteValue2["etag"];
                                        if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                        {
                                            string etagInstance5 = ((string)etagValue5);
                                            gatewaydefaultsiteInstance2.Etag = etagInstance5;
                                        }
                                        
                                        JToken idValue9 = gatewaydefaultsiteValue2["id"];
                                        if (idValue9 != null && idValue9.Type != JTokenType.Null)
                                        {
                                            string idInstance9 = ((string)idValue9);
                                            gatewaydefaultsiteInstance2.Id = idInstance9;
                                        }
                                        
                                        JToken nameValue5 = gatewaydefaultsiteValue2["name"];
                                        if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                        {
                                            string nameInstance5 = ((string)nameValue5);
                                            gatewaydefaultsiteInstance2.Name = nameInstance5;
                                        }
                                        
                                        JToken typeValue3 = gatewaydefaultsiteValue2["type"];
                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                        {
                                            string typeInstance3 = ((string)typeValue3);
                                            gatewaydefaultsiteInstance2.Type = typeInstance3;
                                        }
                                        
                                        JToken locationValue3 = gatewaydefaultsiteValue2["location"];
                                        if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                        {
                                            string locationInstance3 = ((string)locationValue3);
                                            gatewaydefaultsiteInstance2.Location = locationInstance3;
                                        }
                                        
                                        JToken tagsSequenceElement3 = ((JToken)gatewaydefaultsiteValue2["tags"]);
                                        if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property3 in tagsSequenceElement3)
                                            {
                                                string tagsKey3 = ((string)property3.Name);
                                                string tagsValue3 = ((string)property3.Value);
                                                gatewaydefaultsiteInstance2.Tags.Add(tagsKey3, tagsValue3);
                                            }
                                        }
                                    }
                                    
                                    JToken provisioningStateValue6 = virtualNetworkGateway2Value["provisioningState"];
                                    if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                        virtualNetworkGateway2Instance.ProvisioningState = provisioningStateInstance6;
                                    }
                                    
                                    JToken resourceGuidValue4 = virtualNetworkGateway2Value["resourceGuid"];
                                    if (resourceGuidValue4 != null && resourceGuidValue4.Type != JTokenType.Null)
                                    {
                                        string resourceGuidInstance4 = ((string)resourceGuidValue4);
                                        virtualNetworkGateway2Instance.ResourceGuid = resourceGuidInstance4;
                                    }
                                    
                                    JToken etagValue6 = virtualNetworkGateway2Value["etag"];
                                    if (etagValue6 != null && etagValue6.Type != JTokenType.Null)
                                    {
                                        string etagInstance6 = ((string)etagValue6);
                                        virtualNetworkGateway2Instance.Etag = etagInstance6;
                                    }
                                    
                                    JToken idValue10 = virtualNetworkGateway2Value["id"];
                                    if (idValue10 != null && idValue10.Type != JTokenType.Null)
                                    {
                                        string idInstance10 = ((string)idValue10);
                                        virtualNetworkGateway2Instance.Id = idInstance10;
                                    }
                                    
                                    JToken nameValue6 = virtualNetworkGateway2Value["name"];
                                    if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                    {
                                        string nameInstance6 = ((string)nameValue6);
                                        virtualNetworkGateway2Instance.Name = nameInstance6;
                                    }
                                    
                                    JToken typeValue4 = virtualNetworkGateway2Value["type"];
                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                    {
                                        string typeInstance4 = ((string)typeValue4);
                                        virtualNetworkGateway2Instance.Type = typeInstance4;
                                    }
                                    
                                    JToken locationValue4 = virtualNetworkGateway2Value["location"];
                                    if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                                    {
                                        string locationInstance4 = ((string)locationValue4);
                                        virtualNetworkGateway2Instance.Location = locationInstance4;
                                    }
                                    
                                    JToken tagsSequenceElement4 = ((JToken)virtualNetworkGateway2Value["tags"]);
                                    if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property4 in tagsSequenceElement4)
                                        {
                                            string tagsKey4 = ((string)property4.Name);
                                            string tagsValue4 = ((string)property4.Value);
                                            virtualNetworkGateway2Instance.Tags.Add(tagsKey4, tagsValue4);
                                        }
                                    }
                                }
                                
                                JToken localNetworkGateway2Value = propertiesValue["localNetworkGateway2"];
                                if (localNetworkGateway2Value != null && localNetworkGateway2Value.Type != JTokenType.Null)
                                {
                                    LocalNetworkGateway localNetworkGateway2Instance = new LocalNetworkGateway();
                                    virtualNetworkGatewayConnectionInstance.LocalNetworkGateway2 = localNetworkGateway2Instance;
                                    
                                    JToken localNetworkAddressSpaceValue3 = localNetworkGateway2Value["localNetworkAddressSpace"];
                                    if (localNetworkAddressSpaceValue3 != null && localNetworkAddressSpaceValue3.Type != JTokenType.Null)
                                    {
                                        AddressSpace localNetworkAddressSpaceInstance3 = new AddressSpace();
                                        localNetworkGateway2Instance.LocalNetworkAddressSpace = localNetworkAddressSpaceInstance3;
                                        
                                        JToken addressPrefixesArray3 = localNetworkAddressSpaceValue3["addressPrefixes"];
                                        if (addressPrefixesArray3 != null && addressPrefixesArray3.Type != JTokenType.Null)
                                        {
                                            foreach (JToken addressPrefixesValue3 in ((JArray)addressPrefixesArray3))
                                            {
                                                localNetworkAddressSpaceInstance3.AddressPrefixes.Add(((string)addressPrefixesValue3));
                                            }
                                        }
                                    }
                                    
                                    JToken gatewayIpAddressValue3 = localNetworkGateway2Value["gatewayIpAddress"];
                                    if (gatewayIpAddressValue3 != null && gatewayIpAddressValue3.Type != JTokenType.Null)
                                    {
                                        string gatewayIpAddressInstance3 = ((string)gatewayIpAddressValue3);
                                        localNetworkGateway2Instance.GatewayIpAddress = gatewayIpAddressInstance3;
                                    }
                                    
                                    JToken provisioningStateValue7 = localNetworkGateway2Value["provisioningState"];
                                    if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                    {
                                        string provisioningStateInstance7 = ((string)provisioningStateValue7);
                                        localNetworkGateway2Instance.ProvisioningState = provisioningStateInstance7;
                                    }
                                    
                                    JToken resourceGuidValue5 = localNetworkGateway2Value["resourceGuid"];
                                    if (resourceGuidValue5 != null && resourceGuidValue5.Type != JTokenType.Null)
                                    {
                                        string resourceGuidInstance5 = ((string)resourceGuidValue5);
                                        localNetworkGateway2Instance.ResourceGuid = resourceGuidInstance5;
                                    }
                                    
                                    JToken etagValue7 = localNetworkGateway2Value["etag"];
                                    if (etagValue7 != null && etagValue7.Type != JTokenType.Null)
                                    {
                                        string etagInstance7 = ((string)etagValue7);
                                        localNetworkGateway2Instance.Etag = etagInstance7;
                                    }
                                    
                                    JToken idValue11 = localNetworkGateway2Value["id"];
                                    if (idValue11 != null && idValue11.Type != JTokenType.Null)
                                    {
                                        string idInstance11 = ((string)idValue11);
                                        localNetworkGateway2Instance.Id = idInstance11;
                                    }
                                    
                                    JToken nameValue7 = localNetworkGateway2Value["name"];
                                    if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                    {
                                        string nameInstance7 = ((string)nameValue7);
                                        localNetworkGateway2Instance.Name = nameInstance7;
                                    }
                                    
                                    JToken typeValue5 = localNetworkGateway2Value["type"];
                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                    {
                                        string typeInstance5 = ((string)typeValue5);
                                        localNetworkGateway2Instance.Type = typeInstance5;
                                    }
                                    
                                    JToken locationValue5 = localNetworkGateway2Value["location"];
                                    if (locationValue5 != null && locationValue5.Type != JTokenType.Null)
                                    {
                                        string locationInstance5 = ((string)locationValue5);
                                        localNetworkGateway2Instance.Location = locationInstance5;
                                    }
                                    
                                    JToken tagsSequenceElement5 = ((JToken)localNetworkGateway2Value["tags"]);
                                    if (tagsSequenceElement5 != null && tagsSequenceElement5.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property5 in tagsSequenceElement5)
                                        {
                                            string tagsKey5 = ((string)property5.Name);
                                            string tagsValue5 = ((string)property5.Value);
                                            localNetworkGateway2Instance.Tags.Add(tagsKey5, tagsValue5);
                                        }
                                    }
                                }
                                
                                JToken connectionTypeValue = propertiesValue["connectionType"];
                                if (connectionTypeValue != null && connectionTypeValue.Type != JTokenType.Null)
                                {
                                    string connectionTypeInstance = ((string)connectionTypeValue);
                                    virtualNetworkGatewayConnectionInstance.ConnectionType = connectionTypeInstance;
                                }
                                
                                JToken routingWeightValue = propertiesValue["routingWeight"];
                                if (routingWeightValue != null && routingWeightValue.Type != JTokenType.Null)
                                {
                                    int routingWeightInstance = ((int)routingWeightValue);
                                    virtualNetworkGatewayConnectionInstance.RoutingWeight = routingWeightInstance;
                                }
                                
                                JToken sharedKeyValue = propertiesValue["sharedKey"];
                                if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                {
                                    string sharedKeyInstance = ((string)sharedKeyValue);
                                    virtualNetworkGatewayConnectionInstance.SharedKey = sharedKeyInstance;
                                }
                                
                                JToken connectionStatusValue = propertiesValue["connectionStatus"];
                                if (connectionStatusValue != null && connectionStatusValue.Type != JTokenType.Null)
                                {
                                    string connectionStatusInstance = ((string)connectionStatusValue);
                                    virtualNetworkGatewayConnectionInstance.ConnectionStatus = connectionStatusInstance;
                                }
                                
                                JToken egressBytesTransferredValue = propertiesValue["egressBytesTransferred"];
                                if (egressBytesTransferredValue != null && egressBytesTransferredValue.Type != JTokenType.Null)
                                {
                                    ulong egressBytesTransferredInstance = ((ulong)egressBytesTransferredValue);
                                    virtualNetworkGatewayConnectionInstance.EgressBytesTransferred = egressBytesTransferredInstance;
                                }
                                
                                JToken ingressBytesTransferredValue = propertiesValue["ingressBytesTransferred"];
                                if (ingressBytesTransferredValue != null && ingressBytesTransferredValue.Type != JTokenType.Null)
                                {
                                    ulong ingressBytesTransferredInstance = ((ulong)ingressBytesTransferredValue);
                                    virtualNetworkGatewayConnectionInstance.IngressBytesTransferred = ingressBytesTransferredInstance;
                                }
                                
                                JToken peerValue = propertiesValue["peer"];
                                if (peerValue != null && peerValue.Type != JTokenType.Null)
                                {
                                    ResourceId peerInstance = new ResourceId();
                                    virtualNetworkGatewayConnectionInstance.Peer = peerInstance;
                                    
                                    JToken idValue12 = peerValue["id"];
                                    if (idValue12 != null && idValue12.Type != JTokenType.Null)
                                    {
                                        string idInstance12 = ((string)idValue12);
                                        peerInstance.Id = idInstance12;
                                    }
                                }
                                
                                JToken resourceGuidValue6 = propertiesValue["resourceGuid"];
                                if (resourceGuidValue6 != null && resourceGuidValue6.Type != JTokenType.Null)
                                {
                                    string resourceGuidInstance6 = ((string)resourceGuidValue6);
                                    virtualNetworkGatewayConnectionInstance.ResourceGuid = resourceGuidInstance6;
                                }
                                
                                JToken provisioningStateValue8 = propertiesValue["provisioningState"];
                                if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance8 = ((string)provisioningStateValue8);
                                    virtualNetworkGatewayConnectionInstance.ProvisioningState = provisioningStateInstance8;
                                }
                            }
                            
                            JToken etagValue8 = responseDoc["etag"];
                            if (etagValue8 != null && etagValue8.Type != JTokenType.Null)
                            {
                                string etagInstance8 = ((string)etagValue8);
                                virtualNetworkGatewayConnectionInstance.Etag = etagInstance8;
                            }
                            
                            JToken idValue13 = responseDoc["id"];
                            if (idValue13 != null && idValue13.Type != JTokenType.Null)
                            {
                                string idInstance13 = ((string)idValue13);
                                virtualNetworkGatewayConnectionInstance.Id = idInstance13;
                            }
                            
                            JToken nameValue8 = responseDoc["name"];
                            if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                            {
                                string nameInstance8 = ((string)nameValue8);
                                virtualNetworkGatewayConnectionInstance.Name = nameInstance8;
                            }
                            
                            JToken typeValue6 = responseDoc["type"];
                            if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                            {
                                string typeInstance6 = ((string)typeValue6);
                                virtualNetworkGatewayConnectionInstance.Type = typeInstance6;
                            }
                            
                            JToken locationValue6 = responseDoc["location"];
                            if (locationValue6 != null && locationValue6.Type != JTokenType.Null)
                            {
                                string locationInstance6 = ((string)locationValue6);
                                virtualNetworkGatewayConnectionInstance.Location = locationInstance6;
                            }
                            
                            JToken tagsSequenceElement6 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement6 != null && tagsSequenceElement6.Type != JTokenType.Null)
                            {
                                foreach (JProperty property6 in tagsSequenceElement6)
                                {
                                    string tagsKey6 = ((string)property6.Name);
                                    string tagsValue6 = ((string)property6.Value);
                                    virtualNetworkGatewayConnectionInstance.Tags.Add(tagsKey6, tagsValue6);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Get VirtualNetworkGatewayConnectionSharedKey operation
        /// retrieves information about the specified virtual network gateway
        /// connection shared key through Network resource provider.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='connectionSharedKeyName'>
        /// Required. The virtual network gateway connection shared key name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for CheckConnectionSharedKey Api servive call
        /// </returns>
        public async Task<ConnectionSharedKeyResponse> GetSharedKeyAsync(string resourceGroupName, string connectionSharedKeyName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (connectionSharedKeyName == null)
            {
                throw new ArgumentNullException("connectionSharedKeyName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("connectionSharedKeyName", connectionSharedKeyName);
                TracingAdapter.Enter(invocationId, this, "GetSharedKeyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/connections/";
            url = url + Uri.EscapeDataString(connectionSharedKeyName);
            url = url + "/sharedkey";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ConnectionSharedKeyResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ConnectionSharedKeyResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueValue = responseDoc["value"];
                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                            {
                                string valueInstance = ((string)valueValue);
                                result.Value = valueInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List VirtualNetworkGatewayConnections operation retrieves all
        /// the virtual network gateways connections created.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListVirtualNetworkGatewayConnections Api service call
        /// </returns>
        public async Task<VirtualNetworkGatewayConnectionListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/connections";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    VirtualNetworkGatewayConnectionListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new VirtualNetworkGatewayConnectionListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    VirtualNetworkGatewayConnection virtualNetworkGatewayConnectionJsonFormatInstance = new VirtualNetworkGatewayConnection();
                                    result.VirtualNetworkGatewayConnections.Add(virtualNetworkGatewayConnectionJsonFormatInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken virtualNetworkGateway1Value = propertiesValue["virtualNetworkGateway1"];
                                        if (virtualNetworkGateway1Value != null && virtualNetworkGateway1Value.Type != JTokenType.Null)
                                        {
                                            VirtualNetworkGateway virtualNetworkGateway1Instance = new VirtualNetworkGateway();
                                            virtualNetworkGatewayConnectionJsonFormatInstance.VirtualNetworkGateway1 = virtualNetworkGateway1Instance;
                                            
                                            JToken ipConfigurationsArray = virtualNetworkGateway1Value["ipConfigurations"];
                                            if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                                {
                                                    VirtualNetworkGatewayIpConfiguration virtualNetworkGatewayIpConfigurationInstance = new VirtualNetworkGatewayIpConfiguration();
                                                    virtualNetworkGateway1Instance.IpConfigurations.Add(virtualNetworkGatewayIpConfigurationInstance);
                                                    
                                                    JToken privateIPAddressValue = ipConfigurationsValue["privateIPAddress"];
                                                    if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                        virtualNetworkGatewayIpConfigurationInstance.PrivateIpAddress = privateIPAddressInstance;
                                                    }
                                                    
                                                    JToken privateIPAllocationMethodValue = ipConfigurationsValue["privateIPAllocationMethod"];
                                                    if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                        virtualNetworkGatewayIpConfigurationInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                                    }
                                                    
                                                    JToken subnetValue = ipConfigurationsValue["subnet"];
                                                    if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId subnetInstance = new ResourceId();
                                                        virtualNetworkGatewayIpConfigurationInstance.Subnet = subnetInstance;
                                                        
                                                        JToken idValue = subnetValue["id"];
                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                        {
                                                            string idInstance = ((string)idValue);
                                                            subnetInstance.Id = idInstance;
                                                        }
                                                    }
                                                    
                                                    JToken publicIPAddressValue = ipConfigurationsValue["publicIPAddress"];
                                                    if (publicIPAddressValue != null && publicIPAddressValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId publicIPAddressInstance = new ResourceId();
                                                        virtualNetworkGatewayIpConfigurationInstance.PublicIpAddress = publicIPAddressInstance;
                                                        
                                                        JToken idValue2 = publicIPAddressValue["id"];
                                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                        {
                                                            string idInstance2 = ((string)idValue2);
                                                            publicIPAddressInstance.Id = idInstance2;
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue = ipConfigurationsValue["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        virtualNetworkGatewayIpConfigurationInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                    
                                                    JToken nameValue = ipConfigurationsValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        virtualNetworkGatewayIpConfigurationInstance.Name = nameInstance;
                                                    }
                                                    
                                                    JToken etagValue = ipConfigurationsValue["etag"];
                                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                                    {
                                                        string etagInstance = ((string)etagValue);
                                                        virtualNetworkGatewayIpConfigurationInstance.Etag = etagInstance;
                                                    }
                                                    
                                                    JToken idValue3 = ipConfigurationsValue["id"];
                                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                    {
                                                        string idInstance3 = ((string)idValue3);
                                                        virtualNetworkGatewayIpConfigurationInstance.Id = idInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken gatewayTypeValue = virtualNetworkGateway1Value["gatewayType"];
                                            if (gatewayTypeValue != null && gatewayTypeValue.Type != JTokenType.Null)
                                            {
                                                string gatewayTypeInstance = ((string)gatewayTypeValue);
                                                virtualNetworkGateway1Instance.GatewayType = gatewayTypeInstance;
                                            }
                                            
                                            JToken vpnTypeValue = virtualNetworkGateway1Value["vpnType"];
                                            if (vpnTypeValue != null && vpnTypeValue.Type != JTokenType.Null)
                                            {
                                                string vpnTypeInstance = ((string)vpnTypeValue);
                                                virtualNetworkGateway1Instance.VpnType = vpnTypeInstance;
                                            }
                                            
                                            JToken enableBgpValue = virtualNetworkGateway1Value["enableBgp"];
                                            if (enableBgpValue != null && enableBgpValue.Type != JTokenType.Null)
                                            {
                                                bool enableBgpInstance = ((bool)enableBgpValue);
                                                virtualNetworkGateway1Instance.EnableBgp = enableBgpInstance;
                                            }
                                            
                                            JToken gatewaydefaultsiteValue = virtualNetworkGateway1Value["gatewaydefaultsite"];
                                            if (gatewaydefaultsiteValue != null && gatewaydefaultsiteValue.Type != JTokenType.Null)
                                            {
                                                LocalNetworkGateway gatewaydefaultsiteInstance = new LocalNetworkGateway();
                                                virtualNetworkGateway1Instance.GatewayDefaultSite = gatewaydefaultsiteInstance;
                                                
                                                JToken localNetworkAddressSpaceValue = gatewaydefaultsiteValue["localNetworkAddressSpace"];
                                                if (localNetworkAddressSpaceValue != null && localNetworkAddressSpaceValue.Type != JTokenType.Null)
                                                {
                                                    AddressSpace localNetworkAddressSpaceInstance = new AddressSpace();
                                                    gatewaydefaultsiteInstance.LocalNetworkAddressSpace = localNetworkAddressSpaceInstance;
                                                    
                                                    JToken addressPrefixesArray = localNetworkAddressSpaceValue["addressPrefixes"];
                                                    if (addressPrefixesArray != null && addressPrefixesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken addressPrefixesValue in ((JArray)addressPrefixesArray))
                                                        {
                                                            localNetworkAddressSpaceInstance.AddressPrefixes.Add(((string)addressPrefixesValue));
                                                        }
                                                    }
                                                }
                                                
                                                JToken gatewayIpAddressValue = gatewaydefaultsiteValue["gatewayIpAddress"];
                                                if (gatewayIpAddressValue != null && gatewayIpAddressValue.Type != JTokenType.Null)
                                                {
                                                    string gatewayIpAddressInstance = ((string)gatewayIpAddressValue);
                                                    gatewaydefaultsiteInstance.GatewayIpAddress = gatewayIpAddressInstance;
                                                }
                                                
                                                JToken provisioningStateValue2 = gatewaydefaultsiteValue["provisioningState"];
                                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                                {
                                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                                    gatewaydefaultsiteInstance.ProvisioningState = provisioningStateInstance2;
                                                }
                                                
                                                JToken resourceGuidValue = gatewaydefaultsiteValue["resourceGuid"];
                                                if (resourceGuidValue != null && resourceGuidValue.Type != JTokenType.Null)
                                                {
                                                    string resourceGuidInstance = ((string)resourceGuidValue);
                                                    gatewaydefaultsiteInstance.ResourceGuid = resourceGuidInstance;
                                                }
                                                
                                                JToken etagValue2 = gatewaydefaultsiteValue["etag"];
                                                if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                                {
                                                    string etagInstance2 = ((string)etagValue2);
                                                    gatewaydefaultsiteInstance.Etag = etagInstance2;
                                                }
                                                
                                                JToken idValue4 = gatewaydefaultsiteValue["id"];
                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                {
                                                    string idInstance4 = ((string)idValue4);
                                                    gatewaydefaultsiteInstance.Id = idInstance4;
                                                }
                                                
                                                JToken nameValue2 = gatewaydefaultsiteValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    gatewaydefaultsiteInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken typeValue = gatewaydefaultsiteValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    gatewaydefaultsiteInstance.Type = typeInstance;
                                                }
                                                
                                                JToken locationValue = gatewaydefaultsiteValue["location"];
                                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                {
                                                    string locationInstance = ((string)locationValue);
                                                    gatewaydefaultsiteInstance.Location = locationInstance;
                                                }
                                                
                                                JToken tagsSequenceElement = ((JToken)gatewaydefaultsiteValue["tags"]);
                                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property in tagsSequenceElement)
                                                    {
                                                        string tagsKey = ((string)property.Name);
                                                        string tagsValue = ((string)property.Value);
                                                        gatewaydefaultsiteInstance.Tags.Add(tagsKey, tagsValue);
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue3 = virtualNetworkGateway1Value["provisioningState"];
                                            if (provisioningStateValue3 != null && provisioningStateValue3.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance3 = ((string)provisioningStateValue3);
                                                virtualNetworkGateway1Instance.ProvisioningState = provisioningStateInstance3;
                                            }
                                            
                                            JToken resourceGuidValue2 = virtualNetworkGateway1Value["resourceGuid"];
                                            if (resourceGuidValue2 != null && resourceGuidValue2.Type != JTokenType.Null)
                                            {
                                                string resourceGuidInstance2 = ((string)resourceGuidValue2);
                                                virtualNetworkGateway1Instance.ResourceGuid = resourceGuidInstance2;
                                            }
                                            
                                            JToken etagValue3 = virtualNetworkGateway1Value["etag"];
                                            if (etagValue3 != null && etagValue3.Type != JTokenType.Null)
                                            {
                                                string etagInstance3 = ((string)etagValue3);
                                                virtualNetworkGateway1Instance.Etag = etagInstance3;
                                            }
                                            
                                            JToken idValue5 = virtualNetworkGateway1Value["id"];
                                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                            {
                                                string idInstance5 = ((string)idValue5);
                                                virtualNetworkGateway1Instance.Id = idInstance5;
                                            }
                                            
                                            JToken nameValue3 = virtualNetworkGateway1Value["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                virtualNetworkGateway1Instance.Name = nameInstance3;
                                            }
                                            
                                            JToken typeValue2 = virtualNetworkGateway1Value["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                virtualNetworkGateway1Instance.Type = typeInstance2;
                                            }
                                            
                                            JToken locationValue2 = virtualNetworkGateway1Value["location"];
                                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                            {
                                                string locationInstance2 = ((string)locationValue2);
                                                virtualNetworkGateway1Instance.Location = locationInstance2;
                                            }
                                            
                                            JToken tagsSequenceElement2 = ((JToken)virtualNetworkGateway1Value["tags"]);
                                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property2 in tagsSequenceElement2)
                                                {
                                                    string tagsKey2 = ((string)property2.Name);
                                                    string tagsValue2 = ((string)property2.Value);
                                                    virtualNetworkGateway1Instance.Tags.Add(tagsKey2, tagsValue2);
                                                }
                                            }
                                        }
                                        
                                        JToken virtualNetworkGateway2Value = propertiesValue["virtualNetworkGateway2"];
                                        if (virtualNetworkGateway2Value != null && virtualNetworkGateway2Value.Type != JTokenType.Null)
                                        {
                                            VirtualNetworkGateway virtualNetworkGateway2Instance = new VirtualNetworkGateway();
                                            virtualNetworkGatewayConnectionJsonFormatInstance.VirtualNetworkGateway2 = virtualNetworkGateway2Instance;
                                            
                                            JToken ipConfigurationsArray2 = virtualNetworkGateway2Value["ipConfigurations"];
                                            if (ipConfigurationsArray2 != null && ipConfigurationsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken ipConfigurationsValue2 in ((JArray)ipConfigurationsArray2))
                                                {
                                                    VirtualNetworkGatewayIpConfiguration virtualNetworkGatewayIpConfigurationInstance2 = new VirtualNetworkGatewayIpConfiguration();
                                                    virtualNetworkGateway2Instance.IpConfigurations.Add(virtualNetworkGatewayIpConfigurationInstance2);
                                                    
                                                    JToken privateIPAddressValue2 = ipConfigurationsValue2["privateIPAddress"];
                                                    if (privateIPAddressValue2 != null && privateIPAddressValue2.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAddressInstance2 = ((string)privateIPAddressValue2);
                                                        virtualNetworkGatewayIpConfigurationInstance2.PrivateIpAddress = privateIPAddressInstance2;
                                                    }
                                                    
                                                    JToken privateIPAllocationMethodValue2 = ipConfigurationsValue2["privateIPAllocationMethod"];
                                                    if (privateIPAllocationMethodValue2 != null && privateIPAllocationMethodValue2.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAllocationMethodInstance2 = ((string)privateIPAllocationMethodValue2);
                                                        virtualNetworkGatewayIpConfigurationInstance2.PrivateIpAllocationMethod = privateIPAllocationMethodInstance2;
                                                    }
                                                    
                                                    JToken subnetValue2 = ipConfigurationsValue2["subnet"];
                                                    if (subnetValue2 != null && subnetValue2.Type != JTokenType.Null)
                                                    {
                                                        ResourceId subnetInstance2 = new ResourceId();
                                                        virtualNetworkGatewayIpConfigurationInstance2.Subnet = subnetInstance2;
                                                        
                                                        JToken idValue6 = subnetValue2["id"];
                                                        if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                        {
                                                            string idInstance6 = ((string)idValue6);
                                                            subnetInstance2.Id = idInstance6;
                                                        }
                                                    }
                                                    
                                                    JToken publicIPAddressValue2 = ipConfigurationsValue2["publicIPAddress"];
                                                    if (publicIPAddressValue2 != null && publicIPAddressValue2.Type != JTokenType.Null)
                                                    {
                                                        ResourceId publicIPAddressInstance2 = new ResourceId();
                                                        virtualNetworkGatewayIpConfigurationInstance2.PublicIpAddress = publicIPAddressInstance2;
                                                        
                                                        JToken idValue7 = publicIPAddressValue2["id"];
                                                        if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                                        {
                                                            string idInstance7 = ((string)idValue7);
                                                            publicIPAddressInstance2.Id = idInstance7;
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue4 = ipConfigurationsValue2["provisioningState"];
                                                    if (provisioningStateValue4 != null && provisioningStateValue4.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance4 = ((string)provisioningStateValue4);
                                                        virtualNetworkGatewayIpConfigurationInstance2.ProvisioningState = provisioningStateInstance4;
                                                    }
                                                    
                                                    JToken nameValue4 = ipConfigurationsValue2["name"];
                                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance4 = ((string)nameValue4);
                                                        virtualNetworkGatewayIpConfigurationInstance2.Name = nameInstance4;
                                                    }
                                                    
                                                    JToken etagValue4 = ipConfigurationsValue2["etag"];
                                                    if (etagValue4 != null && etagValue4.Type != JTokenType.Null)
                                                    {
                                                        string etagInstance4 = ((string)etagValue4);
                                                        virtualNetworkGatewayIpConfigurationInstance2.Etag = etagInstance4;
                                                    }
                                                    
                                                    JToken idValue8 = ipConfigurationsValue2["id"];
                                                    if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                                    {
                                                        string idInstance8 = ((string)idValue8);
                                                        virtualNetworkGatewayIpConfigurationInstance2.Id = idInstance8;
                                                    }
                                                }
                                            }
                                            
                                            JToken gatewayTypeValue2 = virtualNetworkGateway2Value["gatewayType"];
                                            if (gatewayTypeValue2 != null && gatewayTypeValue2.Type != JTokenType.Null)
                                            {
                                                string gatewayTypeInstance2 = ((string)gatewayTypeValue2);
                                                virtualNetworkGateway2Instance.GatewayType = gatewayTypeInstance2;
                                            }
                                            
                                            JToken vpnTypeValue2 = virtualNetworkGateway2Value["vpnType"];
                                            if (vpnTypeValue2 != null && vpnTypeValue2.Type != JTokenType.Null)
                                            {
                                                string vpnTypeInstance2 = ((string)vpnTypeValue2);
                                                virtualNetworkGateway2Instance.VpnType = vpnTypeInstance2;
                                            }
                                            
                                            JToken enableBgpValue2 = virtualNetworkGateway2Value["enableBgp"];
                                            if (enableBgpValue2 != null && enableBgpValue2.Type != JTokenType.Null)
                                            {
                                                bool enableBgpInstance2 = ((bool)enableBgpValue2);
                                                virtualNetworkGateway2Instance.EnableBgp = enableBgpInstance2;
                                            }
                                            
                                            JToken gatewaydefaultsiteValue2 = virtualNetworkGateway2Value["gatewaydefaultsite"];
                                            if (gatewaydefaultsiteValue2 != null && gatewaydefaultsiteValue2.Type != JTokenType.Null)
                                            {
                                                LocalNetworkGateway gatewaydefaultsiteInstance2 = new LocalNetworkGateway();
                                                virtualNetworkGateway2Instance.GatewayDefaultSite = gatewaydefaultsiteInstance2;
                                                
                                                JToken localNetworkAddressSpaceValue2 = gatewaydefaultsiteValue2["localNetworkAddressSpace"];
                                                if (localNetworkAddressSpaceValue2 != null && localNetworkAddressSpaceValue2.Type != JTokenType.Null)
                                                {
                                                    AddressSpace localNetworkAddressSpaceInstance2 = new AddressSpace();
                                                    gatewaydefaultsiteInstance2.LocalNetworkAddressSpace = localNetworkAddressSpaceInstance2;
                                                    
                                                    JToken addressPrefixesArray2 = localNetworkAddressSpaceValue2["addressPrefixes"];
                                                    if (addressPrefixesArray2 != null && addressPrefixesArray2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken addressPrefixesValue2 in ((JArray)addressPrefixesArray2))
                                                        {
                                                            localNetworkAddressSpaceInstance2.AddressPrefixes.Add(((string)addressPrefixesValue2));
                                                        }
                                                    }
                                                }
                                                
                                                JToken gatewayIpAddressValue2 = gatewaydefaultsiteValue2["gatewayIpAddress"];
                                                if (gatewayIpAddressValue2 != null && gatewayIpAddressValue2.Type != JTokenType.Null)
                                                {
                                                    string gatewayIpAddressInstance2 = ((string)gatewayIpAddressValue2);
                                                    gatewaydefaultsiteInstance2.GatewayIpAddress = gatewayIpAddressInstance2;
                                                }
                                                
                                                JToken provisioningStateValue5 = gatewaydefaultsiteValue2["provisioningState"];
                                                if (provisioningStateValue5 != null && provisioningStateValue5.Type != JTokenType.Null)
                                                {
                                                    string provisioningStateInstance5 = ((string)provisioningStateValue5);
                                                    gatewaydefaultsiteInstance2.ProvisioningState = provisioningStateInstance5;
                                                }
                                                
                                                JToken resourceGuidValue3 = gatewaydefaultsiteValue2["resourceGuid"];
                                                if (resourceGuidValue3 != null && resourceGuidValue3.Type != JTokenType.Null)
                                                {
                                                    string resourceGuidInstance3 = ((string)resourceGuidValue3);
                                                    gatewaydefaultsiteInstance2.ResourceGuid = resourceGuidInstance3;
                                                }
                                                
                                                JToken etagValue5 = gatewaydefaultsiteValue2["etag"];
                                                if (etagValue5 != null && etagValue5.Type != JTokenType.Null)
                                                {
                                                    string etagInstance5 = ((string)etagValue5);
                                                    gatewaydefaultsiteInstance2.Etag = etagInstance5;
                                                }
                                                
                                                JToken idValue9 = gatewaydefaultsiteValue2["id"];
                                                if (idValue9 != null && idValue9.Type != JTokenType.Null)
                                                {
                                                    string idInstance9 = ((string)idValue9);
                                                    gatewaydefaultsiteInstance2.Id = idInstance9;
                                                }
                                                
                                                JToken nameValue5 = gatewaydefaultsiteValue2["name"];
                                                if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                                {
                                                    string nameInstance5 = ((string)nameValue5);
                                                    gatewaydefaultsiteInstance2.Name = nameInstance5;
                                                }
                                                
                                                JToken typeValue3 = gatewaydefaultsiteValue2["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    gatewaydefaultsiteInstance2.Type = typeInstance3;
                                                }
                                                
                                                JToken locationValue3 = gatewaydefaultsiteValue2["location"];
                                                if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                                {
                                                    string locationInstance3 = ((string)locationValue3);
                                                    gatewaydefaultsiteInstance2.Location = locationInstance3;
                                                }
                                                
                                                JToken tagsSequenceElement3 = ((JToken)gatewaydefaultsiteValue2["tags"]);
                                                if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property3 in tagsSequenceElement3)
                                                    {
                                                        string tagsKey3 = ((string)property3.Name);
                                                        string tagsValue3 = ((string)property3.Value);
                                                        gatewaydefaultsiteInstance2.Tags.Add(tagsKey3, tagsValue3);
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue6 = virtualNetworkGateway2Value["provisioningState"];
                                            if (provisioningStateValue6 != null && provisioningStateValue6.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance6 = ((string)provisioningStateValue6);
                                                virtualNetworkGateway2Instance.ProvisioningState = provisioningStateInstance6;
                                            }
                                            
                                            JToken resourceGuidValue4 = virtualNetworkGateway2Value["resourceGuid"];
                                            if (resourceGuidValue4 != null && resourceGuidValue4.Type != JTokenType.Null)
                                            {
                                                string resourceGuidInstance4 = ((string)resourceGuidValue4);
                                                virtualNetworkGateway2Instance.ResourceGuid = resourceGuidInstance4;
                                            }
                                            
                                            JToken etagValue6 = virtualNetworkGateway2Value["etag"];
                                            if (etagValue6 != null && etagValue6.Type != JTokenType.Null)
                                            {
                                                string etagInstance6 = ((string)etagValue6);
                                                virtualNetworkGateway2Instance.Etag = etagInstance6;
                                            }
                                            
                                            JToken idValue10 = virtualNetworkGateway2Value["id"];
                                            if (idValue10 != null && idValue10.Type != JTokenType.Null)
                                            {
                                                string idInstance10 = ((string)idValue10);
                                                virtualNetworkGateway2Instance.Id = idInstance10;
                                            }
                                            
                                            JToken nameValue6 = virtualNetworkGateway2Value["name"];
                                            if (nameValue6 != null && nameValue6.Type != JTokenType.Null)
                                            {
                                                string nameInstance6 = ((string)nameValue6);
                                                virtualNetworkGateway2Instance.Name = nameInstance6;
                                            }
                                            
                                            JToken typeValue4 = virtualNetworkGateway2Value["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                virtualNetworkGateway2Instance.Type = typeInstance4;
                                            }
                                            
                                            JToken locationValue4 = virtualNetworkGateway2Value["location"];
                                            if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                                            {
                                                string locationInstance4 = ((string)locationValue4);
                                                virtualNetworkGateway2Instance.Location = locationInstance4;
                                            }
                                            
                                            JToken tagsSequenceElement4 = ((JToken)virtualNetworkGateway2Value["tags"]);
                                            if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property4 in tagsSequenceElement4)
                                                {
                                                    string tagsKey4 = ((string)property4.Name);
                                                    string tagsValue4 = ((string)property4.Value);
                                                    virtualNetworkGateway2Instance.Tags.Add(tagsKey4, tagsValue4);
                                                }
                                            }
                                        }
                                        
                                        JToken localNetworkGateway2Value = propertiesValue["localNetworkGateway2"];
                                        if (localNetworkGateway2Value != null && localNetworkGateway2Value.Type != JTokenType.Null)
                                        {
                                            LocalNetworkGateway localNetworkGateway2Instance = new LocalNetworkGateway();
                                            virtualNetworkGatewayConnectionJsonFormatInstance.LocalNetworkGateway2 = localNetworkGateway2Instance;
                                            
                                            JToken localNetworkAddressSpaceValue3 = localNetworkGateway2Value["localNetworkAddressSpace"];
                                            if (localNetworkAddressSpaceValue3 != null && localNetworkAddressSpaceValue3.Type != JTokenType.Null)
                                            {
                                                AddressSpace localNetworkAddressSpaceInstance3 = new AddressSpace();
                                                localNetworkGateway2Instance.LocalNetworkAddressSpace = localNetworkAddressSpaceInstance3;
                                                
                                                JToken addressPrefixesArray3 = localNetworkAddressSpaceValue3["addressPrefixes"];
                                                if (addressPrefixesArray3 != null && addressPrefixesArray3.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken addressPrefixesValue3 in ((JArray)addressPrefixesArray3))
                                                    {
                                                        localNetworkAddressSpaceInstance3.AddressPrefixes.Add(((string)addressPrefixesValue3));
                                                    }
                                                }
                                            }
                                            
                                            JToken gatewayIpAddressValue3 = localNetworkGateway2Value["gatewayIpAddress"];
                                            if (gatewayIpAddressValue3 != null && gatewayIpAddressValue3.Type != JTokenType.Null)
                                            {
                                                string gatewayIpAddressInstance3 = ((string)gatewayIpAddressValue3);
                                                localNetworkGateway2Instance.GatewayIpAddress = gatewayIpAddressInstance3;
                                            }
                                            
                                            JToken provisioningStateValue7 = localNetworkGateway2Value["provisioningState"];
                                            if (provisioningStateValue7 != null && provisioningStateValue7.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance7 = ((string)provisioningStateValue7);
                                                localNetworkGateway2Instance.ProvisioningState = provisioningStateInstance7;
                                            }
                                            
                                            JToken resourceGuidValue5 = localNetworkGateway2Value["resourceGuid"];
                                            if (resourceGuidValue5 != null && resourceGuidValue5.Type != JTokenType.Null)
                                            {
                                                string resourceGuidInstance5 = ((string)resourceGuidValue5);
                                                localNetworkGateway2Instance.ResourceGuid = resourceGuidInstance5;
                                            }
                                            
                                            JToken etagValue7 = localNetworkGateway2Value["etag"];
                                            if (etagValue7 != null && etagValue7.Type != JTokenType.Null)
                                            {
                                                string etagInstance7 = ((string)etagValue7);
                                                localNetworkGateway2Instance.Etag = etagInstance7;
                                            }
                                            
                                            JToken idValue11 = localNetworkGateway2Value["id"];
                                            if (idValue11 != null && idValue11.Type != JTokenType.Null)
                                            {
                                                string idInstance11 = ((string)idValue11);
                                                localNetworkGateway2Instance.Id = idInstance11;
                                            }
                                            
                                            JToken nameValue7 = localNetworkGateway2Value["name"];
                                            if (nameValue7 != null && nameValue7.Type != JTokenType.Null)
                                            {
                                                string nameInstance7 = ((string)nameValue7);
                                                localNetworkGateway2Instance.Name = nameInstance7;
                                            }
                                            
                                            JToken typeValue5 = localNetworkGateway2Value["type"];
                                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                            {
                                                string typeInstance5 = ((string)typeValue5);
                                                localNetworkGateway2Instance.Type = typeInstance5;
                                            }
                                            
                                            JToken locationValue5 = localNetworkGateway2Value["location"];
                                            if (locationValue5 != null && locationValue5.Type != JTokenType.Null)
                                            {
                                                string locationInstance5 = ((string)locationValue5);
                                                localNetworkGateway2Instance.Location = locationInstance5;
                                            }
                                            
                                            JToken tagsSequenceElement5 = ((JToken)localNetworkGateway2Value["tags"]);
                                            if (tagsSequenceElement5 != null && tagsSequenceElement5.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property5 in tagsSequenceElement5)
                                                {
                                                    string tagsKey5 = ((string)property5.Name);
                                                    string tagsValue5 = ((string)property5.Value);
                                                    localNetworkGateway2Instance.Tags.Add(tagsKey5, tagsValue5);
                                                }
                                            }
                                        }
                                        
                                        JToken connectionTypeValue = propertiesValue["connectionType"];
                                        if (connectionTypeValue != null && connectionTypeValue.Type != JTokenType.Null)
                                        {
                                            string connectionTypeInstance = ((string)connectionTypeValue);
                                            virtualNetworkGatewayConnectionJsonFormatInstance.ConnectionType = connectionTypeInstance;
                                        }
                                        
                                        JToken routingWeightValue = propertiesValue["routingWeight"];
                                        if (routingWeightValue != null && routingWeightValue.Type != JTokenType.Null)
                                        {
                                            int routingWeightInstance = ((int)routingWeightValue);
                                            virtualNetworkGatewayConnectionJsonFormatInstance.RoutingWeight = routingWeightInstance;
                                        }
                                        
                                        JToken sharedKeyValue = propertiesValue["sharedKey"];
                                        if (sharedKeyValue != null && sharedKeyValue.Type != JTokenType.Null)
                                        {
                                            string sharedKeyInstance = ((string)sharedKeyValue);
                                            virtualNetworkGatewayConnectionJsonFormatInstance.SharedKey = sharedKeyInstance;
                                        }
                                        
                                        JToken connectionStatusValue = propertiesValue["connectionStatus"];
                                        if (connectionStatusValue != null && connectionStatusValue.Type != JTokenType.Null)
                                        {
                                            string connectionStatusInstance = ((string)connectionStatusValue);
                                            virtualNetworkGatewayConnectionJsonFormatInstance.ConnectionStatus = connectionStatusInstance;
                                        }
                                        
                                        JToken egressBytesTransferredValue = propertiesValue["egressBytesTransferred"];
                                        if (egressBytesTransferredValue != null && egressBytesTransferredValue.Type != JTokenType.Null)
                                        {
                                            ulong egressBytesTransferredInstance = ((ulong)egressBytesTransferredValue);
                                            virtualNetworkGatewayConnectionJsonFormatInstance.EgressBytesTransferred = egressBytesTransferredInstance;
                                        }
                                        
                                        JToken ingressBytesTransferredValue = propertiesValue["ingressBytesTransferred"];
                                        if (ingressBytesTransferredValue != null && ingressBytesTransferredValue.Type != JTokenType.Null)
                                        {
                                            ulong ingressBytesTransferredInstance = ((ulong)ingressBytesTransferredValue);
                                            virtualNetworkGatewayConnectionJsonFormatInstance.IngressBytesTransferred = ingressBytesTransferredInstance;
                                        }
                                        
                                        JToken peerValue = propertiesValue["peer"];
                                        if (peerValue != null && peerValue.Type != JTokenType.Null)
                                        {
                                            ResourceId peerInstance = new ResourceId();
                                            virtualNetworkGatewayConnectionJsonFormatInstance.Peer = peerInstance;
                                            
                                            JToken idValue12 = peerValue["id"];
                                            if (idValue12 != null && idValue12.Type != JTokenType.Null)
                                            {
                                                string idInstance12 = ((string)idValue12);
                                                peerInstance.Id = idInstance12;
                                            }
                                        }
                                        
                                        JToken resourceGuidValue6 = propertiesValue["resourceGuid"];
                                        if (resourceGuidValue6 != null && resourceGuidValue6.Type != JTokenType.Null)
                                        {
                                            string resourceGuidInstance6 = ((string)resourceGuidValue6);
                                            virtualNetworkGatewayConnectionJsonFormatInstance.ResourceGuid = resourceGuidInstance6;
                                        }
                                        
                                        JToken provisioningStateValue8 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue8 != null && provisioningStateValue8.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance8 = ((string)provisioningStateValue8);
                                            virtualNetworkGatewayConnectionJsonFormatInstance.ProvisioningState = provisioningStateInstance8;
                                        }
                                    }
                                    
                                    JToken etagValue8 = valueValue["etag"];
                                    if (etagValue8 != null && etagValue8.Type != JTokenType.Null)
                                    {
                                        string etagInstance8 = ((string)etagValue8);
                                        virtualNetworkGatewayConnectionJsonFormatInstance.Etag = etagInstance8;
                                    }
                                    
                                    JToken idValue13 = valueValue["id"];
                                    if (idValue13 != null && idValue13.Type != JTokenType.Null)
                                    {
                                        string idInstance13 = ((string)idValue13);
                                        virtualNetworkGatewayConnectionJsonFormatInstance.Id = idInstance13;
                                    }
                                    
                                    JToken nameValue8 = valueValue["name"];
                                    if (nameValue8 != null && nameValue8.Type != JTokenType.Null)
                                    {
                                        string nameInstance8 = ((string)nameValue8);
                                        virtualNetworkGatewayConnectionJsonFormatInstance.Name = nameInstance8;
                                    }
                                    
                                    JToken typeValue6 = valueValue["type"];
                                    if (typeValue6 != null && typeValue6.Type != JTokenType.Null)
                                    {
                                        string typeInstance6 = ((string)typeValue6);
                                        virtualNetworkGatewayConnectionJsonFormatInstance.Type = typeInstance6;
                                    }
                                    
                                    JToken locationValue6 = valueValue["location"];
                                    if (locationValue6 != null && locationValue6.Type != JTokenType.Null)
                                    {
                                        string locationInstance6 = ((string)locationValue6);
                                        virtualNetworkGatewayConnectionJsonFormatInstance.Location = locationInstance6;
                                    }
                                    
                                    JToken tagsSequenceElement6 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement6 != null && tagsSequenceElement6.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property6 in tagsSequenceElement6)
                                        {
                                            string tagsKey6 = ((string)property6.Name);
                                            string tagsValue6 = ((string)property6.Value);
                                            virtualNetworkGatewayConnectionJsonFormatInstance.Tags.Add(tagsKey6, tagsValue6);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Reset VirtualNetworkGatewayConnectionSharedKey operation resets
        /// the virtual network gateway connection shared key for passed
        /// virtual network gateway connection in the specified resource group
        /// through Network resource provider.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkGatewayConnectionName'>
        /// Required. The virtual network gateway connection name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Reset Virtual Network
        /// Gateway connection shared key operation through Network resource
        /// provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> ResetSharedKeyAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, ConnectionResetSharedKey parameters, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkGatewayConnectionName", virtualNetworkGatewayConnectionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ResetSharedKeyAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ConnectionResetSharedKeyPutResponse response = await client.VirtualNetworkGatewayConnections.BeginResetSharedKeyAsync(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == NetworkOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 30;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The Put VirtualNetworkGatewayConnectionSharedKey operation sets the
        /// virtual network gateway connection shared key for passed virtual
        /// network gateway connection in the specified resource group through
        /// Network resource provider.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkGatewayConnectionName'>
        /// Required. The virtual network gateway connection name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Begin Create or update Virtual
        /// Network Gateway connection shared key operation through Network
        /// resource provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> SetSharedKeyAsync(string resourceGroupName, string virtualNetworkGatewayConnectionName, ConnectionSharedKey parameters, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("virtualNetworkGatewayConnectionName", virtualNetworkGatewayConnectionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "SetSharedKeyAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            ConnectionSharedKeyPutResponse response = await client.VirtualNetworkGatewayConnections.BeginSetSharedKeyAsync(resourceGroupName, virtualNetworkGatewayConnectionName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == NetworkOperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 30;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
