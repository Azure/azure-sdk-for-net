// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Network
{
    /// <summary>
    /// The Network Resource Provider API includes operations for managing the
    /// SecurityRules for your subscription.
    /// </summary>
    internal partial class SecurityRuleOperations : IServiceOperations<NetworkResourceProviderClient>, ISecurityRuleOperations
    {
        /// <summary>
        /// Initializes a new instance of the SecurityRuleOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal SecurityRuleOperations(NetworkResourceProviderClient client)
        {
            this._client = client;
        }
        
        private NetworkResourceProviderClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Network.NetworkResourceProviderClient.
        /// </summary>
        public NetworkResourceProviderClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Put network security rule operation creates/updates a security
        /// rule in the specified network security group
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the network security group.
        /// </param>
        /// <param name='securityRuleName'>
        /// Required. The name of the security rule.
        /// </param>
        /// <param name='securityRuleParameters'>
        /// Required. Parameters supplied to the create/update network security
        /// rule operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for PUT SecurityRule Api service call
        /// </returns>
        public async Task<SecurityRulePutResponse> BeginCreateOrUpdatingAsync(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, SecurityRule securityRuleParameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (networkSecurityGroupName == null)
            {
                throw new ArgumentNullException("networkSecurityGroupName");
            }
            if (securityRuleName == null)
            {
                throw new ArgumentNullException("securityRuleName");
            }
            if (securityRuleParameters == null)
            {
                throw new ArgumentNullException("securityRuleParameters");
            }
            if (securityRuleParameters.Access == null)
            {
                throw new ArgumentNullException("securityRuleParameters.Access");
            }
            if (securityRuleParameters.DestinationAddressPrefix == null)
            {
                throw new ArgumentNullException("securityRuleParameters.DestinationAddressPrefix");
            }
            if (securityRuleParameters.Direction == null)
            {
                throw new ArgumentNullException("securityRuleParameters.Direction");
            }
            if (securityRuleParameters.Protocol == null)
            {
                throw new ArgumentNullException("securityRuleParameters.Protocol");
            }
            if (securityRuleParameters.SourceAddressPrefix == null)
            {
                throw new ArgumentNullException("securityRuleParameters.SourceAddressPrefix");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkSecurityGroupName", networkSecurityGroupName);
                tracingParameters.Add("securityRuleName", securityRuleName);
                tracingParameters.Add("securityRuleParameters", securityRuleParameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/networkSecurityGroups/";
            url = url + Uri.EscapeDataString(networkSecurityGroupName);
            url = url + "/securityRules/";
            url = url + Uri.EscapeDataString(securityRuleName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject securityRuleJsonFormatValue = new JObject();
                requestDoc = securityRuleJsonFormatValue;
                
                JObject propertiesValue = new JObject();
                securityRuleJsonFormatValue["properties"] = propertiesValue;
                
                if (securityRuleParameters.Description != null)
                {
                    propertiesValue["description"] = securityRuleParameters.Description;
                }
                
                propertiesValue["protocol"] = securityRuleParameters.Protocol;
                
                if (securityRuleParameters.SourcePortRange != null)
                {
                    propertiesValue["sourcePortRange"] = securityRuleParameters.SourcePortRange;
                }
                
                if (securityRuleParameters.DestinationPortRange != null)
                {
                    propertiesValue["destinationPortRange"] = securityRuleParameters.DestinationPortRange;
                }
                
                propertiesValue["sourceAddressPrefix"] = securityRuleParameters.SourceAddressPrefix;
                
                propertiesValue["destinationAddressPrefix"] = securityRuleParameters.DestinationAddressPrefix;
                
                propertiesValue["access"] = securityRuleParameters.Access;
                
                propertiesValue["priority"] = securityRuleParameters.Priority;
                
                propertiesValue["direction"] = securityRuleParameters.Direction;
                
                if (securityRuleParameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = securityRuleParameters.ProvisioningState;
                }
                
                if (securityRuleParameters.Name != null)
                {
                    securityRuleJsonFormatValue["name"] = securityRuleParameters.Name;
                }
                
                if (securityRuleParameters.Etag != null)
                {
                    securityRuleJsonFormatValue["etag"] = securityRuleParameters.Etag;
                }
                
                if (securityRuleParameters.Id != null)
                {
                    securityRuleJsonFormatValue["id"] = securityRuleParameters.Id;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SecurityRulePutResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SecurityRulePutResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            SecurityRule securityRuleInstance = new SecurityRule();
                            result.SecurityRule = securityRuleInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                JToken descriptionValue = propertiesValue2["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    securityRuleInstance.Description = descriptionInstance;
                                }
                                
                                JToken protocolValue = propertiesValue2["protocol"];
                                if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                {
                                    string protocolInstance = ((string)protocolValue);
                                    securityRuleInstance.Protocol = protocolInstance;
                                }
                                
                                JToken sourcePortRangeValue = propertiesValue2["sourcePortRange"];
                                if (sourcePortRangeValue != null && sourcePortRangeValue.Type != JTokenType.Null)
                                {
                                    string sourcePortRangeInstance = ((string)sourcePortRangeValue);
                                    securityRuleInstance.SourcePortRange = sourcePortRangeInstance;
                                }
                                
                                JToken destinationPortRangeValue = propertiesValue2["destinationPortRange"];
                                if (destinationPortRangeValue != null && destinationPortRangeValue.Type != JTokenType.Null)
                                {
                                    string destinationPortRangeInstance = ((string)destinationPortRangeValue);
                                    securityRuleInstance.DestinationPortRange = destinationPortRangeInstance;
                                }
                                
                                JToken sourceAddressPrefixValue = propertiesValue2["sourceAddressPrefix"];
                                if (sourceAddressPrefixValue != null && sourceAddressPrefixValue.Type != JTokenType.Null)
                                {
                                    string sourceAddressPrefixInstance = ((string)sourceAddressPrefixValue);
                                    securityRuleInstance.SourceAddressPrefix = sourceAddressPrefixInstance;
                                }
                                
                                JToken destinationAddressPrefixValue = propertiesValue2["destinationAddressPrefix"];
                                if (destinationAddressPrefixValue != null && destinationAddressPrefixValue.Type != JTokenType.Null)
                                {
                                    string destinationAddressPrefixInstance = ((string)destinationAddressPrefixValue);
                                    securityRuleInstance.DestinationAddressPrefix = destinationAddressPrefixInstance;
                                }
                                
                                JToken accessValue = propertiesValue2["access"];
                                if (accessValue != null && accessValue.Type != JTokenType.Null)
                                {
                                    string accessInstance = ((string)accessValue);
                                    securityRuleInstance.Access = accessInstance;
                                }
                                
                                JToken priorityValue = propertiesValue2["priority"];
                                if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                {
                                    int priorityInstance = ((int)priorityValue);
                                    securityRuleInstance.Priority = priorityInstance;
                                }
                                
                                JToken directionValue = propertiesValue2["direction"];
                                if (directionValue != null && directionValue.Type != JTokenType.Null)
                                {
                                    string directionInstance = ((string)directionValue);
                                    securityRuleInstance.Direction = directionInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    securityRuleInstance.ProvisioningState = provisioningStateInstance;
                                }
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                securityRuleInstance.Name = nameInstance;
                            }
                            
                            JToken etagValue = responseDoc["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                securityRuleInstance.Etag = etagInstance;
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                securityRuleInstance.Id = idInstance;
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                Error errorInstance = new Error();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken targetValue = errorValue["target"];
                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                {
                                    string targetInstance = ((string)targetValue);
                                    errorInstance.Target = targetInstance;
                                }
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        errorInstance.Details.Add(errorDetailsInstance);
                                        
                                        JToken codeValue2 = detailsValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            errorDetailsInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken targetValue2 = detailsValue["target"];
                                        if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                        {
                                            string targetInstance2 = ((string)targetValue2);
                                            errorDetailsInstance.Target = targetInstance2;
                                        }
                                        
                                        JToken messageValue2 = detailsValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            errorDetailsInstance.Message = messageInstance2;
                                        }
                                    }
                                }
                                
                                JToken innerErrorValue = errorValue["innerError"];
                                if (innerErrorValue != null && innerErrorValue.Type != JTokenType.Null)
                                {
                                    string innerErrorInstance = ((string)innerErrorValue);
                                    errorInstance.InnerError = innerErrorInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The delete network security rule operation deletes the specified
        /// network security rule.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the network security group.
        /// </param>
        /// <param name='securityRuleName'>
        /// Required. The name of the security rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// If the resource provide needs to return an error to any operation,
        /// it should return the appropriate HTTP error code and a message
        /// body as can be seen below.The message should be localized per the
        /// Accept-Language header specified in the original request such
        /// thatit could be directly be exposed to users
        /// </returns>
        public async Task<UpdateOperationResponse> BeginDeletingAsync(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (networkSecurityGroupName == null)
            {
                throw new ArgumentNullException("networkSecurityGroupName");
            }
            if (securityRuleName == null)
            {
                throw new ArgumentNullException("securityRuleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkSecurityGroupName", networkSecurityGroupName);
                tracingParameters.Add("securityRuleName", securityRuleName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/networkSecurityGroups/";
            url = url + Uri.EscapeDataString(networkSecurityGroupName);
            url = url + "/securityRules/";
            url = url + Uri.EscapeDataString(securityRuleName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdateOperationResponse result = null;
                    // Deserialize Response
                    result = new UpdateOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Put network security rule operation creates/updates a security
        /// rule in the specified network security group
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the network security group.
        /// </param>
        /// <param name='securityRuleName'>
        /// Required. The name of the security rule.
        /// </param>
        /// <param name='securityRuleParameters'>
        /// Required. Parameters supplied to the create/update network security
        /// rule operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, SecurityRule securityRuleParameters, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkSecurityGroupName", networkSecurityGroupName);
                tracingParameters.Add("securityRuleName", securityRuleName);
                tracingParameters.Add("securityRuleParameters", securityRuleParameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            SecurityRulePutResponse response = await client.SecurityRules.BeginCreateOrUpdatingAsync(resourceGroupName, networkSecurityGroupName, securityRuleName, securityRuleParameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Network.Models.OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The delete network security rule operation deletes the specified
        /// network security rule.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the network security group.
        /// </param>
        /// <param name='securityRuleName'>
        /// Required. The name of the security rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkSecurityGroupName", networkSecurityGroupName);
                tracingParameters.Add("securityRuleName", securityRuleName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            UpdateOperationResponse response = await client.SecurityRules.BeginDeletingAsync(resourceGroupName, networkSecurityGroupName, securityRuleName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Network.Models.OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get NetworkSecurityRule operation retreives information about
        /// the specified network security rule.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the network security group.
        /// </param>
        /// <param name='securityRuleName'>
        /// Required. The name of the security rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for GetSecurityRule Api service call
        /// </returns>
        public async Task<SecurityRuleGetResponse> GetAsync(string resourceGroupName, string networkSecurityGroupName, string securityRuleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (networkSecurityGroupName == null)
            {
                throw new ArgumentNullException("networkSecurityGroupName");
            }
            if (securityRuleName == null)
            {
                throw new ArgumentNullException("securityRuleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkSecurityGroupName", networkSecurityGroupName);
                tracingParameters.Add("securityRuleName", securityRuleName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/networkSecurityGroups/";
            url = url + Uri.EscapeDataString(networkSecurityGroupName);
            url = url + "/securityRules/";
            url = url + Uri.EscapeDataString(securityRuleName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SecurityRuleGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SecurityRuleGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            SecurityRule securityRuleInstance = new SecurityRule();
                            result.SecurityRule = securityRuleInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    securityRuleInstance.Description = descriptionInstance;
                                }
                                
                                JToken protocolValue = propertiesValue["protocol"];
                                if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                {
                                    string protocolInstance = ((string)protocolValue);
                                    securityRuleInstance.Protocol = protocolInstance;
                                }
                                
                                JToken sourcePortRangeValue = propertiesValue["sourcePortRange"];
                                if (sourcePortRangeValue != null && sourcePortRangeValue.Type != JTokenType.Null)
                                {
                                    string sourcePortRangeInstance = ((string)sourcePortRangeValue);
                                    securityRuleInstance.SourcePortRange = sourcePortRangeInstance;
                                }
                                
                                JToken destinationPortRangeValue = propertiesValue["destinationPortRange"];
                                if (destinationPortRangeValue != null && destinationPortRangeValue.Type != JTokenType.Null)
                                {
                                    string destinationPortRangeInstance = ((string)destinationPortRangeValue);
                                    securityRuleInstance.DestinationPortRange = destinationPortRangeInstance;
                                }
                                
                                JToken sourceAddressPrefixValue = propertiesValue["sourceAddressPrefix"];
                                if (sourceAddressPrefixValue != null && sourceAddressPrefixValue.Type != JTokenType.Null)
                                {
                                    string sourceAddressPrefixInstance = ((string)sourceAddressPrefixValue);
                                    securityRuleInstance.SourceAddressPrefix = sourceAddressPrefixInstance;
                                }
                                
                                JToken destinationAddressPrefixValue = propertiesValue["destinationAddressPrefix"];
                                if (destinationAddressPrefixValue != null && destinationAddressPrefixValue.Type != JTokenType.Null)
                                {
                                    string destinationAddressPrefixInstance = ((string)destinationAddressPrefixValue);
                                    securityRuleInstance.DestinationAddressPrefix = destinationAddressPrefixInstance;
                                }
                                
                                JToken accessValue = propertiesValue["access"];
                                if (accessValue != null && accessValue.Type != JTokenType.Null)
                                {
                                    string accessInstance = ((string)accessValue);
                                    securityRuleInstance.Access = accessInstance;
                                }
                                
                                JToken priorityValue = propertiesValue["priority"];
                                if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                {
                                    int priorityInstance = ((int)priorityValue);
                                    securityRuleInstance.Priority = priorityInstance;
                                }
                                
                                JToken directionValue = propertiesValue["direction"];
                                if (directionValue != null && directionValue.Type != JTokenType.Null)
                                {
                                    string directionInstance = ((string)directionValue);
                                    securityRuleInstance.Direction = directionInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance = ((string)provisioningStateValue);
                                    securityRuleInstance.ProvisioningState = provisioningStateInstance;
                                }
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                securityRuleInstance.Name = nameInstance;
                            }
                            
                            JToken etagValue = responseDoc["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                securityRuleInstance.Etag = etagInstance;
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                securityRuleInstance.Id = idInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List network security rule opertion retrieves all the security
        /// rules in a network security group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkSecurityGroupName'>
        /// Required. The name of the network security group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListSecurityRule Api service callRetrieves all
        /// security rules that belongs to a network security group
        /// </returns>
        public async Task<SecurityRuleListResponse> ListAsync(string resourceGroupName, string networkSecurityGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (networkSecurityGroupName == null)
            {
                throw new ArgumentNullException("networkSecurityGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkSecurityGroupName", networkSecurityGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/networkSecurityGroups/";
            url = url + Uri.EscapeDataString(networkSecurityGroupName);
            url = url + "/securityRules";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SecurityRuleListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SecurityRuleListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SecurityRule securityRuleJsonFormatInstance = new SecurityRule();
                                    result.SecurityRules.Add(securityRuleJsonFormatInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            securityRuleJsonFormatInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken protocolValue = propertiesValue["protocol"];
                                        if (protocolValue != null && protocolValue.Type != JTokenType.Null)
                                        {
                                            string protocolInstance = ((string)protocolValue);
                                            securityRuleJsonFormatInstance.Protocol = protocolInstance;
                                        }
                                        
                                        JToken sourcePortRangeValue = propertiesValue["sourcePortRange"];
                                        if (sourcePortRangeValue != null && sourcePortRangeValue.Type != JTokenType.Null)
                                        {
                                            string sourcePortRangeInstance = ((string)sourcePortRangeValue);
                                            securityRuleJsonFormatInstance.SourcePortRange = sourcePortRangeInstance;
                                        }
                                        
                                        JToken destinationPortRangeValue = propertiesValue["destinationPortRange"];
                                        if (destinationPortRangeValue != null && destinationPortRangeValue.Type != JTokenType.Null)
                                        {
                                            string destinationPortRangeInstance = ((string)destinationPortRangeValue);
                                            securityRuleJsonFormatInstance.DestinationPortRange = destinationPortRangeInstance;
                                        }
                                        
                                        JToken sourceAddressPrefixValue = propertiesValue["sourceAddressPrefix"];
                                        if (sourceAddressPrefixValue != null && sourceAddressPrefixValue.Type != JTokenType.Null)
                                        {
                                            string sourceAddressPrefixInstance = ((string)sourceAddressPrefixValue);
                                            securityRuleJsonFormatInstance.SourceAddressPrefix = sourceAddressPrefixInstance;
                                        }
                                        
                                        JToken destinationAddressPrefixValue = propertiesValue["destinationAddressPrefix"];
                                        if (destinationAddressPrefixValue != null && destinationAddressPrefixValue.Type != JTokenType.Null)
                                        {
                                            string destinationAddressPrefixInstance = ((string)destinationAddressPrefixValue);
                                            securityRuleJsonFormatInstance.DestinationAddressPrefix = destinationAddressPrefixInstance;
                                        }
                                        
                                        JToken accessValue = propertiesValue["access"];
                                        if (accessValue != null && accessValue.Type != JTokenType.Null)
                                        {
                                            string accessInstance = ((string)accessValue);
                                            securityRuleJsonFormatInstance.Access = accessInstance;
                                        }
                                        
                                        JToken priorityValue = propertiesValue["priority"];
                                        if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                        {
                                            int priorityInstance = ((int)priorityValue);
                                            securityRuleJsonFormatInstance.Priority = priorityInstance;
                                        }
                                        
                                        JToken directionValue = propertiesValue["direction"];
                                        if (directionValue != null && directionValue.Type != JTokenType.Null)
                                        {
                                            string directionInstance = ((string)directionValue);
                                            securityRuleJsonFormatInstance.Direction = directionInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance = ((string)provisioningStateValue);
                                            securityRuleJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        securityRuleJsonFormatInstance.Name = nameInstance;
                                    }
                                    
                                    JToken etagValue = valueValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        securityRuleJsonFormatInstance.Etag = etagInstance;
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        securityRuleJsonFormatInstance.Id = idInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
