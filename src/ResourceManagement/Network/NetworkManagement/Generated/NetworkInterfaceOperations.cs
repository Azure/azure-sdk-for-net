// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Network
{
    /// <summary>
    /// The Network Resource Provider API includes operations for managing the
    /// subnets for your subscription.
    /// </summary>
    internal partial class NetworkInterfaceOperations : IServiceOperations<NetworkResourceProviderClient>, INetworkInterfaceOperations
    {
        /// <summary>
        /// Initializes a new instance of the NetworkInterfaceOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal NetworkInterfaceOperations(NetworkResourceProviderClient client)
        {
            this._client = client;
        }
        
        private NetworkResourceProviderClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Network.NetworkResourceProviderClient.
        /// </summary>
        public NetworkResourceProviderClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// The Put NetworkInterface operation creates/updates a
        /// networkInterface
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required. The name of the network interface.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create/update NetworkInterface
        /// operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for PutNetworkInterface Api servive call
        /// </returns>
        public async Task<NetworkInterfacePutResponse> BeginCreateOrUpdatingAsync(string resourceGroupName, string networkInterfaceName, NetworkInterface parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (networkInterfaceName == null)
            {
                throw new ArgumentNullException("networkInterfaceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Location == null)
            {
                throw new ArgumentNullException("parameters.Location");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkInterfaceName", networkInterfaceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdatingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/networkInterfaces/";
            url = url + Uri.EscapeDataString(networkInterfaceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject networkInterfaceJsonFormatValue = new JObject();
                requestDoc = networkInterfaceJsonFormatValue;
                
                JObject propertiesValue = new JObject();
                networkInterfaceJsonFormatValue["properties"] = propertiesValue;
                
                if (parameters.VirtualMachine != null)
                {
                    JObject virtualMachineValue = new JObject();
                    propertiesValue["virtualMachine"] = virtualMachineValue;
                    
                    if (parameters.VirtualMachine.Id != null)
                    {
                        virtualMachineValue["id"] = parameters.VirtualMachine.Id;
                    }
                }
                
                if (parameters.NetworkSecurityGroup != null)
                {
                    JObject networkSecurityGroupValue = new JObject();
                    propertiesValue["networkSecurityGroup"] = networkSecurityGroupValue;
                    
                    if (parameters.NetworkSecurityGroup.Id != null)
                    {
                        networkSecurityGroupValue["id"] = parameters.NetworkSecurityGroup.Id;
                    }
                }
                
                if (parameters.IpConfigurations != null)
                {
                    if (parameters.IpConfigurations is ILazyCollection == false || ((ILazyCollection)parameters.IpConfigurations).IsInitialized)
                    {
                        JArray ipConfigurationsArray = new JArray();
                        foreach (NetworkInterfaceIpConfiguration ipConfigurationsItem in parameters.IpConfigurations)
                        {
                            JObject networkInterfaceIpConfigurationJsonFormatValue = new JObject();
                            ipConfigurationsArray.Add(networkInterfaceIpConfigurationJsonFormatValue);
                            
                            JObject propertiesValue2 = new JObject();
                            networkInterfaceIpConfigurationJsonFormatValue["properties"] = propertiesValue2;
                            
                            if (ipConfigurationsItem.PrivateIpAddress != null)
                            {
                                propertiesValue2["privateIPAddress"] = ipConfigurationsItem.PrivateIpAddress;
                            }
                            
                            if (ipConfigurationsItem.PrivateIpAllocationMethod != null)
                            {
                                propertiesValue2["privateIPAllocationMethod"] = ipConfigurationsItem.PrivateIpAllocationMethod;
                            }
                            
                            if (ipConfigurationsItem.Subnet != null)
                            {
                                JObject subnetValue = new JObject();
                                propertiesValue2["subnet"] = subnetValue;
                                
                                if (ipConfigurationsItem.Subnet.Id != null)
                                {
                                    subnetValue["id"] = ipConfigurationsItem.Subnet.Id;
                                }
                            }
                            
                            if (ipConfigurationsItem.PublicIpAddress != null)
                            {
                                JObject publicIPAddressValue = new JObject();
                                propertiesValue2["publicIPAddress"] = publicIPAddressValue;
                                
                                if (ipConfigurationsItem.PublicIpAddress.Id != null)
                                {
                                    publicIPAddressValue["id"] = ipConfigurationsItem.PublicIpAddress.Id;
                                }
                            }
                            
                            if (ipConfigurationsItem.LoadBalancerBackendAddressPools != null)
                            {
                                if (ipConfigurationsItem.LoadBalancerBackendAddressPools is ILazyCollection == false || ((ILazyCollection)ipConfigurationsItem.LoadBalancerBackendAddressPools).IsInitialized)
                                {
                                    JArray loadBalancerBackendAddressPoolsArray = new JArray();
                                    foreach (ResourceId loadBalancerBackendAddressPoolsItem in ipConfigurationsItem.LoadBalancerBackendAddressPools)
                                    {
                                        JObject resourceIdValue = new JObject();
                                        loadBalancerBackendAddressPoolsArray.Add(resourceIdValue);
                                        
                                        if (loadBalancerBackendAddressPoolsItem.Id != null)
                                        {
                                            resourceIdValue["id"] = loadBalancerBackendAddressPoolsItem.Id;
                                        }
                                    }
                                    propertiesValue2["loadBalancerBackendAddressPools"] = loadBalancerBackendAddressPoolsArray;
                                }
                            }
                            
                            if (ipConfigurationsItem.LoadBalancerInboundNatRules != null)
                            {
                                if (ipConfigurationsItem.LoadBalancerInboundNatRules is ILazyCollection == false || ((ILazyCollection)ipConfigurationsItem.LoadBalancerInboundNatRules).IsInitialized)
                                {
                                    JArray loadBalancerInboundNatRulesArray = new JArray();
                                    foreach (ResourceId loadBalancerInboundNatRulesItem in ipConfigurationsItem.LoadBalancerInboundNatRules)
                                    {
                                        JObject resourceIdValue2 = new JObject();
                                        loadBalancerInboundNatRulesArray.Add(resourceIdValue2);
                                        
                                        if (loadBalancerInboundNatRulesItem.Id != null)
                                        {
                                            resourceIdValue2["id"] = loadBalancerInboundNatRulesItem.Id;
                                        }
                                    }
                                    propertiesValue2["loadBalancerInboundNatRules"] = loadBalancerInboundNatRulesArray;
                                }
                            }
                            
                            if (ipConfigurationsItem.ProvisioningState != null)
                            {
                                propertiesValue2["provisioningState"] = ipConfigurationsItem.ProvisioningState;
                            }
                            
                            if (ipConfigurationsItem.Name != null)
                            {
                                networkInterfaceIpConfigurationJsonFormatValue["name"] = ipConfigurationsItem.Name;
                            }
                            
                            if (ipConfigurationsItem.Etag != null)
                            {
                                networkInterfaceIpConfigurationJsonFormatValue["etag"] = ipConfigurationsItem.Etag;
                            }
                            
                            if (ipConfigurationsItem.Id != null)
                            {
                                networkInterfaceIpConfigurationJsonFormatValue["id"] = ipConfigurationsItem.Id;
                            }
                        }
                        propertiesValue["ipConfigurations"] = ipConfigurationsArray;
                    }
                }
                
                if (parameters.DnsSettings != null)
                {
                    JObject dnsSettingsValue = new JObject();
                    propertiesValue["dnsSettings"] = dnsSettingsValue;
                    
                    if (parameters.DnsSettings.DnsServers != null)
                    {
                        if (parameters.DnsSettings.DnsServers is ILazyCollection == false || ((ILazyCollection)parameters.DnsSettings.DnsServers).IsInitialized)
                        {
                            JArray dnsServersArray = new JArray();
                            foreach (string dnsServersItem in parameters.DnsSettings.DnsServers)
                            {
                                dnsServersArray.Add(dnsServersItem);
                            }
                            dnsSettingsValue["dnsServers"] = dnsServersArray;
                        }
                    }
                    
                    if (parameters.DnsSettings.AppliedDnsServers != null)
                    {
                        if (parameters.DnsSettings.AppliedDnsServers is ILazyCollection == false || ((ILazyCollection)parameters.DnsSettings.AppliedDnsServers).IsInitialized)
                        {
                            JArray appliedDnsServersArray = new JArray();
                            foreach (string appliedDnsServersItem in parameters.DnsSettings.AppliedDnsServers)
                            {
                                appliedDnsServersArray.Add(appliedDnsServersItem);
                            }
                            dnsSettingsValue["appliedDnsServers"] = appliedDnsServersArray;
                        }
                    }
                    
                    if (parameters.DnsSettings.InternalDnsNameLabel != null)
                    {
                        dnsSettingsValue["internalDnsNameLabel"] = parameters.DnsSettings.InternalDnsNameLabel;
                    }
                    
                    if (parameters.DnsSettings.InternalFqdn != null)
                    {
                        dnsSettingsValue["internalFqdn"] = parameters.DnsSettings.InternalFqdn;
                    }
                }
                
                if (parameters.MacAddress != null)
                {
                    propertiesValue["macAddress"] = parameters.MacAddress;
                }
                
                if (parameters.Primary != null)
                {
                    propertiesValue["primary"] = parameters.Primary.Value;
                }
                
                if (parameters.ProvisioningState != null)
                {
                    propertiesValue["provisioningState"] = parameters.ProvisioningState;
                }
                
                if (parameters.Etag != null)
                {
                    networkInterfaceJsonFormatValue["etag"] = parameters.Etag;
                }
                
                if (parameters.Id != null)
                {
                    networkInterfaceJsonFormatValue["id"] = parameters.Id;
                }
                
                if (parameters.Name != null)
                {
                    networkInterfaceJsonFormatValue["name"] = parameters.Name;
                }
                
                if (parameters.Type != null)
                {
                    networkInterfaceJsonFormatValue["type"] = parameters.Type;
                }
                
                networkInterfaceJsonFormatValue["location"] = parameters.Location;
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    networkInterfaceJsonFormatValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    NetworkInterfacePutResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new NetworkInterfacePutResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            NetworkInterface networkInterfaceInstance = new NetworkInterface();
                            result.NetworkInterface = networkInterfaceInstance;
                            
                            JToken propertiesValue3 = responseDoc["properties"];
                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                            {
                                JToken virtualMachineValue2 = propertiesValue3["virtualMachine"];
                                if (virtualMachineValue2 != null && virtualMachineValue2.Type != JTokenType.Null)
                                {
                                    ResourceId virtualMachineInstance = new ResourceId();
                                    networkInterfaceInstance.VirtualMachine = virtualMachineInstance;
                                    
                                    JToken idValue = virtualMachineValue2["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        virtualMachineInstance.Id = idInstance;
                                    }
                                }
                                
                                JToken networkSecurityGroupValue2 = propertiesValue3["networkSecurityGroup"];
                                if (networkSecurityGroupValue2 != null && networkSecurityGroupValue2.Type != JTokenType.Null)
                                {
                                    ResourceId networkSecurityGroupInstance = new ResourceId();
                                    networkInterfaceInstance.NetworkSecurityGroup = networkSecurityGroupInstance;
                                    
                                    JToken idValue2 = networkSecurityGroupValue2["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        networkSecurityGroupInstance.Id = idInstance2;
                                    }
                                }
                                
                                JToken ipConfigurationsArray2 = propertiesValue3["ipConfigurations"];
                                if (ipConfigurationsArray2 != null && ipConfigurationsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray2))
                                    {
                                        NetworkInterfaceIpConfiguration networkInterfaceIpConfigurationJsonFormatInstance = new NetworkInterfaceIpConfiguration();
                                        networkInterfaceInstance.IpConfigurations.Add(networkInterfaceIpConfigurationJsonFormatInstance);
                                        
                                        JToken propertiesValue4 = ipConfigurationsValue["properties"];
                                        if (propertiesValue4 != null && propertiesValue4.Type != JTokenType.Null)
                                        {
                                            JToken privateIPAddressValue = propertiesValue4["privateIPAddress"];
                                            if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                networkInterfaceIpConfigurationJsonFormatInstance.PrivateIpAddress = privateIPAddressInstance;
                                            }
                                            
                                            JToken privateIPAllocationMethodValue = propertiesValue4["privateIPAllocationMethod"];
                                            if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                networkInterfaceIpConfigurationJsonFormatInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                            }
                                            
                                            JToken subnetValue2 = propertiesValue4["subnet"];
                                            if (subnetValue2 != null && subnetValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance = new ResourceId();
                                                networkInterfaceIpConfigurationJsonFormatInstance.Subnet = subnetInstance;
                                                
                                                JToken idValue3 = subnetValue2["id"];
                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                {
                                                    string idInstance3 = ((string)idValue3);
                                                    subnetInstance.Id = idInstance3;
                                                }
                                            }
                                            
                                            JToken publicIPAddressValue2 = propertiesValue4["publicIPAddress"];
                                            if (publicIPAddressValue2 != null && publicIPAddressValue2.Type != JTokenType.Null)
                                            {
                                                ResourceId publicIPAddressInstance = new ResourceId();
                                                networkInterfaceIpConfigurationJsonFormatInstance.PublicIpAddress = publicIPAddressInstance;
                                                
                                                JToken idValue4 = publicIPAddressValue2["id"];
                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                {
                                                    string idInstance4 = ((string)idValue4);
                                                    publicIPAddressInstance.Id = idInstance4;
                                                }
                                            }
                                            
                                            JToken loadBalancerBackendAddressPoolsArray2 = propertiesValue4["loadBalancerBackendAddressPools"];
                                            if (loadBalancerBackendAddressPoolsArray2 != null && loadBalancerBackendAddressPoolsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken loadBalancerBackendAddressPoolsValue in ((JArray)loadBalancerBackendAddressPoolsArray2))
                                                {
                                                    ResourceId resourceIdInstance = new ResourceId();
                                                    networkInterfaceIpConfigurationJsonFormatInstance.LoadBalancerBackendAddressPools.Add(resourceIdInstance);
                                                    
                                                    JToken idValue5 = loadBalancerBackendAddressPoolsValue["id"];
                                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                    {
                                                        string idInstance5 = ((string)idValue5);
                                                        resourceIdInstance.Id = idInstance5;
                                                    }
                                                }
                                            }
                                            
                                            JToken loadBalancerInboundNatRulesArray2 = propertiesValue4["loadBalancerInboundNatRules"];
                                            if (loadBalancerInboundNatRulesArray2 != null && loadBalancerInboundNatRulesArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken loadBalancerInboundNatRulesValue in ((JArray)loadBalancerInboundNatRulesArray2))
                                                {
                                                    ResourceId resourceIdInstance2 = new ResourceId();
                                                    networkInterfaceIpConfigurationJsonFormatInstance.LoadBalancerInboundNatRules.Add(resourceIdInstance2);
                                                    
                                                    JToken idValue6 = loadBalancerInboundNatRulesValue["id"];
                                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                    {
                                                        string idInstance6 = ((string)idValue6);
                                                        resourceIdInstance2.Id = idInstance6;
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue4["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                networkInterfaceIpConfigurationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                        }
                                        
                                        JToken nameValue = ipConfigurationsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            networkInterfaceIpConfigurationJsonFormatInstance.Name = nameInstance;
                                        }
                                        
                                        JToken etagValue = ipConfigurationsValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            networkInterfaceIpConfigurationJsonFormatInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken idValue7 = ipConfigurationsValue["id"];
                                        if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                        {
                                            string idInstance7 = ((string)idValue7);
                                            networkInterfaceIpConfigurationJsonFormatInstance.Id = idInstance7;
                                        }
                                    }
                                }
                                
                                JToken dnsSettingsValue2 = propertiesValue3["dnsSettings"];
                                if (dnsSettingsValue2 != null && dnsSettingsValue2.Type != JTokenType.Null)
                                {
                                    NetworkInterfaceDnsSettings dnsSettingsInstance = new NetworkInterfaceDnsSettings();
                                    networkInterfaceInstance.DnsSettings = dnsSettingsInstance;
                                    
                                    JToken dnsServersArray2 = dnsSettingsValue2["dnsServers"];
                                    if (dnsServersArray2 != null && dnsServersArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dnsServersValue in ((JArray)dnsServersArray2))
                                        {
                                            dnsSettingsInstance.DnsServers.Add(((string)dnsServersValue));
                                        }
                                    }
                                    
                                    JToken appliedDnsServersArray2 = dnsSettingsValue2["appliedDnsServers"];
                                    if (appliedDnsServersArray2 != null && appliedDnsServersArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken appliedDnsServersValue in ((JArray)appliedDnsServersArray2))
                                        {
                                            dnsSettingsInstance.AppliedDnsServers.Add(((string)appliedDnsServersValue));
                                        }
                                    }
                                    
                                    JToken internalDnsNameLabelValue = dnsSettingsValue2["internalDnsNameLabel"];
                                    if (internalDnsNameLabelValue != null && internalDnsNameLabelValue.Type != JTokenType.Null)
                                    {
                                        string internalDnsNameLabelInstance = ((string)internalDnsNameLabelValue);
                                        dnsSettingsInstance.InternalDnsNameLabel = internalDnsNameLabelInstance;
                                    }
                                    
                                    JToken internalFqdnValue = dnsSettingsValue2["internalFqdn"];
                                    if (internalFqdnValue != null && internalFqdnValue.Type != JTokenType.Null)
                                    {
                                        string internalFqdnInstance = ((string)internalFqdnValue);
                                        dnsSettingsInstance.InternalFqdn = internalFqdnInstance;
                                    }
                                }
                                
                                JToken macAddressValue = propertiesValue3["macAddress"];
                                if (macAddressValue != null && macAddressValue.Type != JTokenType.Null)
                                {
                                    string macAddressInstance = ((string)macAddressValue);
                                    networkInterfaceInstance.MacAddress = macAddressInstance;
                                }
                                
                                JToken primaryValue = propertiesValue3["primary"];
                                if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                {
                                    bool primaryInstance = ((bool)primaryValue);
                                    networkInterfaceInstance.Primary = primaryInstance;
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue3["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    networkInterfaceInstance.ProvisioningState = provisioningStateInstance2;
                                }
                            }
                            
                            JToken etagValue2 = responseDoc["etag"];
                            if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                            {
                                string etagInstance2 = ((string)etagValue2);
                                networkInterfaceInstance.Etag = etagInstance2;
                            }
                            
                            JToken idValue8 = responseDoc["id"];
                            if (idValue8 != null && idValue8.Type != JTokenType.Null)
                            {
                                string idInstance8 = ((string)idValue8);
                                networkInterfaceInstance.Id = idInstance8;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                networkInterfaceInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                networkInterfaceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                networkInterfaceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    networkInterfaceInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken errorValue = responseDoc["error"];
                            if (errorValue != null && errorValue.Type != JTokenType.Null)
                            {
                                Error errorInstance = new Error();
                                result.Error = errorInstance;
                                
                                JToken codeValue = errorValue["code"];
                                if (codeValue != null && codeValue.Type != JTokenType.Null)
                                {
                                    string codeInstance = ((string)codeValue);
                                    errorInstance.Code = codeInstance;
                                }
                                
                                JToken messageValue = errorValue["message"];
                                if (messageValue != null && messageValue.Type != JTokenType.Null)
                                {
                                    string messageInstance = ((string)messageValue);
                                    errorInstance.Message = messageInstance;
                                }
                                
                                JToken targetValue = errorValue["target"];
                                if (targetValue != null && targetValue.Type != JTokenType.Null)
                                {
                                    string targetInstance = ((string)targetValue);
                                    errorInstance.Target = targetInstance;
                                }
                                
                                JToken detailsArray = errorValue["details"];
                                if (detailsArray != null && detailsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken detailsValue in ((JArray)detailsArray))
                                    {
                                        ErrorDetails errorDetailsInstance = new ErrorDetails();
                                        errorInstance.Details.Add(errorDetailsInstance);
                                        
                                        JToken codeValue2 = detailsValue["code"];
                                        if (codeValue2 != null && codeValue2.Type != JTokenType.Null)
                                        {
                                            string codeInstance2 = ((string)codeValue2);
                                            errorDetailsInstance.Code = codeInstance2;
                                        }
                                        
                                        JToken targetValue2 = detailsValue["target"];
                                        if (targetValue2 != null && targetValue2.Type != JTokenType.Null)
                                        {
                                            string targetInstance2 = ((string)targetValue2);
                                            errorDetailsInstance.Target = targetInstance2;
                                        }
                                        
                                        JToken messageValue2 = detailsValue["message"];
                                        if (messageValue2 != null && messageValue2.Type != JTokenType.Null)
                                        {
                                            string messageInstance2 = ((string)messageValue2);
                                            errorDetailsInstance.Message = messageInstance2;
                                        }
                                    }
                                }
                                
                                JToken innerErrorValue = errorValue["innerError"];
                                if (innerErrorValue != null && innerErrorValue.Type != JTokenType.Null)
                                {
                                    string innerErrorInstance = ((string)innerErrorValue);
                                    errorInstance.InnerError = innerErrorInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The delete netwokInterface operation deletes the specified
        /// netwokInterface.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required. The name of the network interface.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// If the resource provide needs to return an error to any operation,
        /// it should return the appropriate HTTP error code and a message
        /// body as can be seen below.The message should be localized per the
        /// Accept-Language header specified in the original request such
        /// thatit could be directly be exposed to users
        /// </returns>
        public async Task<UpdateOperationResponse> BeginDeletingAsync(string resourceGroupName, string networkInterfaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (networkInterfaceName == null)
            {
                throw new ArgumentNullException("networkInterfaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkInterfaceName", networkInterfaceName);
                TracingAdapter.Enter(invocationId, this, "BeginDeletingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/networkInterfaces/";
            url = url + Uri.EscapeDataString(networkInterfaceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UpdateOperationResponse result = null;
                    // Deserialize Response
                    result = new UpdateOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Azure-AsyncOperation"))
                    {
                        result.AzureAsyncOperation = httpResponse.Headers.GetValues("Azure-AsyncOperation").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The Put NetworkInterface operation creates/updates a
        /// networkInterface
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required. The name of the network interface.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create/update NetworkInterface
        /// operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response body contains the status of the specified asynchronous
        /// operation, indicating whether it has succeeded, is inprogress, or
        /// has failed. Note that this status is distinct from the HTTP status
        /// code returned for the Get Operation Status operation itself. If
        /// the asynchronous operation succeeded, the response body includes
        /// the HTTP status code for the successful request. If the
        /// asynchronous operation failed, the response body includes the HTTP
        /// status code for the failed request and error information regarding
        /// the failure.
        /// </returns>
        public async Task<AzureAsyncOperationResponse> CreateOrUpdateAsync(string resourceGroupName, string networkInterfaceName, NetworkInterface parameters, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkInterfaceName", networkInterfaceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            NetworkInterfacePutResponse response = await client.NetworkInterfaces.BeginCreateOrUpdatingAsync(resourceGroupName, networkInterfaceName, parameters, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Network.Models.OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required. The name of the network interface.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string networkInterfaceName, CancellationToken cancellationToken)
        {
            NetworkResourceProviderClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkInterfaceName", networkInterfaceName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            UpdateOperationResponse response = await client.NetworkInterfaces.BeginDeletingAsync(resourceGroupName, networkInterfaceName, cancellationToken).ConfigureAwait(false);
            cancellationToken.ThrowIfCancellationRequested();
            AzureAsyncOperationResponse result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while ((result.Status != Microsoft.Azure.Management.Network.Models.OperationStatus.InProgress) == false)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.GetLongRunningOperationStatusAsync(response.AzureAsyncOperation, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// The Get ntework interface operation retreives information about the
        /// specified network interface.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='networkInterfaceName'>
        /// Required. The name of the network interface.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for GetNetworkInterface Api service call
        /// </returns>
        public async Task<NetworkInterfaceGetResponse> GetAsync(string resourceGroupName, string networkInterfaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (networkInterfaceName == null)
            {
                throw new ArgumentNullException("networkInterfaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("networkInterfaceName", networkInterfaceName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/networkInterfaces/";
            url = url + Uri.EscapeDataString(networkInterfaceName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    NetworkInterfaceGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new NetworkInterfaceGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            NetworkInterface networkInterfaceInstance = new NetworkInterface();
                            result.NetworkInterface = networkInterfaceInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken virtualMachineValue = propertiesValue["virtualMachine"];
                                if (virtualMachineValue != null && virtualMachineValue.Type != JTokenType.Null)
                                {
                                    ResourceId virtualMachineInstance = new ResourceId();
                                    networkInterfaceInstance.VirtualMachine = virtualMachineInstance;
                                    
                                    JToken idValue = virtualMachineValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        virtualMachineInstance.Id = idInstance;
                                    }
                                }
                                
                                JToken networkSecurityGroupValue = propertiesValue["networkSecurityGroup"];
                                if (networkSecurityGroupValue != null && networkSecurityGroupValue.Type != JTokenType.Null)
                                {
                                    ResourceId networkSecurityGroupInstance = new ResourceId();
                                    networkInterfaceInstance.NetworkSecurityGroup = networkSecurityGroupInstance;
                                    
                                    JToken idValue2 = networkSecurityGroupValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        networkSecurityGroupInstance.Id = idInstance2;
                                    }
                                }
                                
                                JToken ipConfigurationsArray = propertiesValue["ipConfigurations"];
                                if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                    {
                                        NetworkInterfaceIpConfiguration networkInterfaceIpConfigurationJsonFormatInstance = new NetworkInterfaceIpConfiguration();
                                        networkInterfaceInstance.IpConfigurations.Add(networkInterfaceIpConfigurationJsonFormatInstance);
                                        
                                        JToken propertiesValue2 = ipConfigurationsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            JToken privateIPAddressValue = propertiesValue2["privateIPAddress"];
                                            if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                networkInterfaceIpConfigurationJsonFormatInstance.PrivateIpAddress = privateIPAddressInstance;
                                            }
                                            
                                            JToken privateIPAllocationMethodValue = propertiesValue2["privateIPAllocationMethod"];
                                            if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                            {
                                                string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                networkInterfaceIpConfigurationJsonFormatInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                            }
                                            
                                            JToken subnetValue = propertiesValue2["subnet"];
                                            if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                            {
                                                ResourceId subnetInstance = new ResourceId();
                                                networkInterfaceIpConfigurationJsonFormatInstance.Subnet = subnetInstance;
                                                
                                                JToken idValue3 = subnetValue["id"];
                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                {
                                                    string idInstance3 = ((string)idValue3);
                                                    subnetInstance.Id = idInstance3;
                                                }
                                            }
                                            
                                            JToken publicIPAddressValue = propertiesValue2["publicIPAddress"];
                                            if (publicIPAddressValue != null && publicIPAddressValue.Type != JTokenType.Null)
                                            {
                                                ResourceId publicIPAddressInstance = new ResourceId();
                                                networkInterfaceIpConfigurationJsonFormatInstance.PublicIpAddress = publicIPAddressInstance;
                                                
                                                JToken idValue4 = publicIPAddressValue["id"];
                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                {
                                                    string idInstance4 = ((string)idValue4);
                                                    publicIPAddressInstance.Id = idInstance4;
                                                }
                                            }
                                            
                                            JToken loadBalancerBackendAddressPoolsArray = propertiesValue2["loadBalancerBackendAddressPools"];
                                            if (loadBalancerBackendAddressPoolsArray != null && loadBalancerBackendAddressPoolsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken loadBalancerBackendAddressPoolsValue in ((JArray)loadBalancerBackendAddressPoolsArray))
                                                {
                                                    ResourceId resourceIdInstance = new ResourceId();
                                                    networkInterfaceIpConfigurationJsonFormatInstance.LoadBalancerBackendAddressPools.Add(resourceIdInstance);
                                                    
                                                    JToken idValue5 = loadBalancerBackendAddressPoolsValue["id"];
                                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                    {
                                                        string idInstance5 = ((string)idValue5);
                                                        resourceIdInstance.Id = idInstance5;
                                                    }
                                                }
                                            }
                                            
                                            JToken loadBalancerInboundNatRulesArray = propertiesValue2["loadBalancerInboundNatRules"];
                                            if (loadBalancerInboundNatRulesArray != null && loadBalancerInboundNatRulesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken loadBalancerInboundNatRulesValue in ((JArray)loadBalancerInboundNatRulesArray))
                                                {
                                                    ResourceId resourceIdInstance2 = new ResourceId();
                                                    networkInterfaceIpConfigurationJsonFormatInstance.LoadBalancerInboundNatRules.Add(resourceIdInstance2);
                                                    
                                                    JToken idValue6 = loadBalancerInboundNatRulesValue["id"];
                                                    if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                    {
                                                        string idInstance6 = ((string)idValue6);
                                                        resourceIdInstance2.Id = idInstance6;
                                                    }
                                                }
                                            }
                                            
                                            JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                            if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                            {
                                                string provisioningStateInstance = ((string)provisioningStateValue);
                                                networkInterfaceIpConfigurationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                            }
                                        }
                                        
                                        JToken nameValue = ipConfigurationsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            networkInterfaceIpConfigurationJsonFormatInstance.Name = nameInstance;
                                        }
                                        
                                        JToken etagValue = ipConfigurationsValue["etag"];
                                        if (etagValue != null && etagValue.Type != JTokenType.Null)
                                        {
                                            string etagInstance = ((string)etagValue);
                                            networkInterfaceIpConfigurationJsonFormatInstance.Etag = etagInstance;
                                        }
                                        
                                        JToken idValue7 = ipConfigurationsValue["id"];
                                        if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                        {
                                            string idInstance7 = ((string)idValue7);
                                            networkInterfaceIpConfigurationJsonFormatInstance.Id = idInstance7;
                                        }
                                    }
                                }
                                
                                JToken dnsSettingsValue = propertiesValue["dnsSettings"];
                                if (dnsSettingsValue != null && dnsSettingsValue.Type != JTokenType.Null)
                                {
                                    NetworkInterfaceDnsSettings dnsSettingsInstance = new NetworkInterfaceDnsSettings();
                                    networkInterfaceInstance.DnsSettings = dnsSettingsInstance;
                                    
                                    JToken dnsServersArray = dnsSettingsValue["dnsServers"];
                                    if (dnsServersArray != null && dnsServersArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken dnsServersValue in ((JArray)dnsServersArray))
                                        {
                                            dnsSettingsInstance.DnsServers.Add(((string)dnsServersValue));
                                        }
                                    }
                                    
                                    JToken appliedDnsServersArray = dnsSettingsValue["appliedDnsServers"];
                                    if (appliedDnsServersArray != null && appliedDnsServersArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken appliedDnsServersValue in ((JArray)appliedDnsServersArray))
                                        {
                                            dnsSettingsInstance.AppliedDnsServers.Add(((string)appliedDnsServersValue));
                                        }
                                    }
                                    
                                    JToken internalDnsNameLabelValue = dnsSettingsValue["internalDnsNameLabel"];
                                    if (internalDnsNameLabelValue != null && internalDnsNameLabelValue.Type != JTokenType.Null)
                                    {
                                        string internalDnsNameLabelInstance = ((string)internalDnsNameLabelValue);
                                        dnsSettingsInstance.InternalDnsNameLabel = internalDnsNameLabelInstance;
                                    }
                                    
                                    JToken internalFqdnValue = dnsSettingsValue["internalFqdn"];
                                    if (internalFqdnValue != null && internalFqdnValue.Type != JTokenType.Null)
                                    {
                                        string internalFqdnInstance = ((string)internalFqdnValue);
                                        dnsSettingsInstance.InternalFqdn = internalFqdnInstance;
                                    }
                                }
                                
                                JToken macAddressValue = propertiesValue["macAddress"];
                                if (macAddressValue != null && macAddressValue.Type != JTokenType.Null)
                                {
                                    string macAddressInstance = ((string)macAddressValue);
                                    networkInterfaceInstance.MacAddress = macAddressInstance;
                                }
                                
                                JToken primaryValue = propertiesValue["primary"];
                                if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                {
                                    bool primaryInstance = ((bool)primaryValue);
                                    networkInterfaceInstance.Primary = primaryInstance;
                                }
                                
                                JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                {
                                    string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                    networkInterfaceInstance.ProvisioningState = provisioningStateInstance2;
                                }
                            }
                            
                            JToken etagValue2 = responseDoc["etag"];
                            if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                            {
                                string etagInstance2 = ((string)etagValue2);
                                networkInterfaceInstance.Etag = etagInstance2;
                            }
                            
                            JToken idValue8 = responseDoc["id"];
                            if (idValue8 != null && idValue8.Type != JTokenType.Null)
                            {
                                string idInstance8 = ((string)idValue8);
                                networkInterfaceInstance.Id = idInstance8;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                networkInterfaceInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                networkInterfaceInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                networkInterfaceInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    networkInterfaceInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List networkInterfaces opertion retrieves all the
        /// networkInterfaces in a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListNetworkInterface Api service call
        /// </returns>
        public async Task<NetworkInterfaceListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/networkInterfaces";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    NetworkInterfaceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new NetworkInterfaceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    NetworkInterface networkInterfaceJsonFormatInstance = new NetworkInterface();
                                    result.NetworkInterfaces.Add(networkInterfaceJsonFormatInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken virtualMachineValue = propertiesValue["virtualMachine"];
                                        if (virtualMachineValue != null && virtualMachineValue.Type != JTokenType.Null)
                                        {
                                            ResourceId virtualMachineInstance = new ResourceId();
                                            networkInterfaceJsonFormatInstance.VirtualMachine = virtualMachineInstance;
                                            
                                            JToken idValue = virtualMachineValue["id"];
                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                            {
                                                string idInstance = ((string)idValue);
                                                virtualMachineInstance.Id = idInstance;
                                            }
                                        }
                                        
                                        JToken networkSecurityGroupValue = propertiesValue["networkSecurityGroup"];
                                        if (networkSecurityGroupValue != null && networkSecurityGroupValue.Type != JTokenType.Null)
                                        {
                                            ResourceId networkSecurityGroupInstance = new ResourceId();
                                            networkInterfaceJsonFormatInstance.NetworkSecurityGroup = networkSecurityGroupInstance;
                                            
                                            JToken idValue2 = networkSecurityGroupValue["id"];
                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                            {
                                                string idInstance2 = ((string)idValue2);
                                                networkSecurityGroupInstance.Id = idInstance2;
                                            }
                                        }
                                        
                                        JToken ipConfigurationsArray = propertiesValue["ipConfigurations"];
                                        if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                            {
                                                NetworkInterfaceIpConfiguration networkInterfaceIpConfigurationJsonFormatInstance = new NetworkInterfaceIpConfiguration();
                                                networkInterfaceJsonFormatInstance.IpConfigurations.Add(networkInterfaceIpConfigurationJsonFormatInstance);
                                                
                                                JToken propertiesValue2 = ipConfigurationsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    JToken privateIPAddressValue = propertiesValue2["privateIPAddress"];
                                                    if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                        networkInterfaceIpConfigurationJsonFormatInstance.PrivateIpAddress = privateIPAddressInstance;
                                                    }
                                                    
                                                    JToken privateIPAllocationMethodValue = propertiesValue2["privateIPAllocationMethod"];
                                                    if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                        networkInterfaceIpConfigurationJsonFormatInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                                    }
                                                    
                                                    JToken subnetValue = propertiesValue2["subnet"];
                                                    if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId subnetInstance = new ResourceId();
                                                        networkInterfaceIpConfigurationJsonFormatInstance.Subnet = subnetInstance;
                                                        
                                                        JToken idValue3 = subnetValue["id"];
                                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                        {
                                                            string idInstance3 = ((string)idValue3);
                                                            subnetInstance.Id = idInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken publicIPAddressValue = propertiesValue2["publicIPAddress"];
                                                    if (publicIPAddressValue != null && publicIPAddressValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId publicIPAddressInstance = new ResourceId();
                                                        networkInterfaceIpConfigurationJsonFormatInstance.PublicIpAddress = publicIPAddressInstance;
                                                        
                                                        JToken idValue4 = publicIPAddressValue["id"];
                                                        if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                        {
                                                            string idInstance4 = ((string)idValue4);
                                                            publicIPAddressInstance.Id = idInstance4;
                                                        }
                                                    }
                                                    
                                                    JToken loadBalancerBackendAddressPoolsArray = propertiesValue2["loadBalancerBackendAddressPools"];
                                                    if (loadBalancerBackendAddressPoolsArray != null && loadBalancerBackendAddressPoolsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken loadBalancerBackendAddressPoolsValue in ((JArray)loadBalancerBackendAddressPoolsArray))
                                                        {
                                                            ResourceId resourceIdInstance = new ResourceId();
                                                            networkInterfaceIpConfigurationJsonFormatInstance.LoadBalancerBackendAddressPools.Add(resourceIdInstance);
                                                            
                                                            JToken idValue5 = loadBalancerBackendAddressPoolsValue["id"];
                                                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                            {
                                                                string idInstance5 = ((string)idValue5);
                                                                resourceIdInstance.Id = idInstance5;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken loadBalancerInboundNatRulesArray = propertiesValue2["loadBalancerInboundNatRules"];
                                                    if (loadBalancerInboundNatRulesArray != null && loadBalancerInboundNatRulesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken loadBalancerInboundNatRulesValue in ((JArray)loadBalancerInboundNatRulesArray))
                                                        {
                                                            ResourceId resourceIdInstance2 = new ResourceId();
                                                            networkInterfaceIpConfigurationJsonFormatInstance.LoadBalancerInboundNatRules.Add(resourceIdInstance2);
                                                            
                                                            JToken idValue6 = loadBalancerInboundNatRulesValue["id"];
                                                            if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                            {
                                                                string idInstance6 = ((string)idValue6);
                                                                resourceIdInstance2.Id = idInstance6;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        networkInterfaceIpConfigurationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                }
                                                
                                                JToken nameValue = ipConfigurationsValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    networkInterfaceIpConfigurationJsonFormatInstance.Name = nameInstance;
                                                }
                                                
                                                JToken etagValue = ipConfigurationsValue["etag"];
                                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                                {
                                                    string etagInstance = ((string)etagValue);
                                                    networkInterfaceIpConfigurationJsonFormatInstance.Etag = etagInstance;
                                                }
                                                
                                                JToken idValue7 = ipConfigurationsValue["id"];
                                                if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                                {
                                                    string idInstance7 = ((string)idValue7);
                                                    networkInterfaceIpConfigurationJsonFormatInstance.Id = idInstance7;
                                                }
                                            }
                                        }
                                        
                                        JToken dnsSettingsValue = propertiesValue["dnsSettings"];
                                        if (dnsSettingsValue != null && dnsSettingsValue.Type != JTokenType.Null)
                                        {
                                            NetworkInterfaceDnsSettings dnsSettingsInstance = new NetworkInterfaceDnsSettings();
                                            networkInterfaceJsonFormatInstance.DnsSettings = dnsSettingsInstance;
                                            
                                            JToken dnsServersArray = dnsSettingsValue["dnsServers"];
                                            if (dnsServersArray != null && dnsServersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dnsServersValue in ((JArray)dnsServersArray))
                                                {
                                                    dnsSettingsInstance.DnsServers.Add(((string)dnsServersValue));
                                                }
                                            }
                                            
                                            JToken appliedDnsServersArray = dnsSettingsValue["appliedDnsServers"];
                                            if (appliedDnsServersArray != null && appliedDnsServersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken appliedDnsServersValue in ((JArray)appliedDnsServersArray))
                                                {
                                                    dnsSettingsInstance.AppliedDnsServers.Add(((string)appliedDnsServersValue));
                                                }
                                            }
                                            
                                            JToken internalDnsNameLabelValue = dnsSettingsValue["internalDnsNameLabel"];
                                            if (internalDnsNameLabelValue != null && internalDnsNameLabelValue.Type != JTokenType.Null)
                                            {
                                                string internalDnsNameLabelInstance = ((string)internalDnsNameLabelValue);
                                                dnsSettingsInstance.InternalDnsNameLabel = internalDnsNameLabelInstance;
                                            }
                                            
                                            JToken internalFqdnValue = dnsSettingsValue["internalFqdn"];
                                            if (internalFqdnValue != null && internalFqdnValue.Type != JTokenType.Null)
                                            {
                                                string internalFqdnInstance = ((string)internalFqdnValue);
                                                dnsSettingsInstance.InternalFqdn = internalFqdnInstance;
                                            }
                                        }
                                        
                                        JToken macAddressValue = propertiesValue["macAddress"];
                                        if (macAddressValue != null && macAddressValue.Type != JTokenType.Null)
                                        {
                                            string macAddressInstance = ((string)macAddressValue);
                                            networkInterfaceJsonFormatInstance.MacAddress = macAddressInstance;
                                        }
                                        
                                        JToken primaryValue = propertiesValue["primary"];
                                        if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                        {
                                            bool primaryInstance = ((bool)primaryValue);
                                            networkInterfaceJsonFormatInstance.Primary = primaryInstance;
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            networkInterfaceJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                    }
                                    
                                    JToken etagValue2 = valueValue["etag"];
                                    if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                    {
                                        string etagInstance2 = ((string)etagValue2);
                                        networkInterfaceJsonFormatInstance.Etag = etagInstance2;
                                    }
                                    
                                    JToken idValue8 = valueValue["id"];
                                    if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                    {
                                        string idInstance8 = ((string)idValue8);
                                        networkInterfaceJsonFormatInstance.Id = idInstance8;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        networkInterfaceJsonFormatInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        networkInterfaceJsonFormatInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        networkInterfaceJsonFormatInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            networkInterfaceJsonFormatInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// The List networkInterfaces opertion retrieves all the
        /// networkInterfaces in a subscription.
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for ListNetworkInterface Api service call
        /// </returns>
        public async Task<NetworkInterfaceListResponse> ListAllAsync(CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                TracingAdapter.Enter(invocationId, this, "ListAllAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/providers/";
            url = url + "Microsoft.Network";
            url = url + "/networkInterfaces";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    NetworkInterfaceListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new NetworkInterfaceListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    NetworkInterface networkInterfaceJsonFormatInstance = new NetworkInterface();
                                    result.NetworkInterfaces.Add(networkInterfaceJsonFormatInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        JToken virtualMachineValue = propertiesValue["virtualMachine"];
                                        if (virtualMachineValue != null && virtualMachineValue.Type != JTokenType.Null)
                                        {
                                            ResourceId virtualMachineInstance = new ResourceId();
                                            networkInterfaceJsonFormatInstance.VirtualMachine = virtualMachineInstance;
                                            
                                            JToken idValue = virtualMachineValue["id"];
                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                            {
                                                string idInstance = ((string)idValue);
                                                virtualMachineInstance.Id = idInstance;
                                            }
                                        }
                                        
                                        JToken networkSecurityGroupValue = propertiesValue["networkSecurityGroup"];
                                        if (networkSecurityGroupValue != null && networkSecurityGroupValue.Type != JTokenType.Null)
                                        {
                                            ResourceId networkSecurityGroupInstance = new ResourceId();
                                            networkInterfaceJsonFormatInstance.NetworkSecurityGroup = networkSecurityGroupInstance;
                                            
                                            JToken idValue2 = networkSecurityGroupValue["id"];
                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                            {
                                                string idInstance2 = ((string)idValue2);
                                                networkSecurityGroupInstance.Id = idInstance2;
                                            }
                                        }
                                        
                                        JToken ipConfigurationsArray = propertiesValue["ipConfigurations"];
                                        if (ipConfigurationsArray != null && ipConfigurationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken ipConfigurationsValue in ((JArray)ipConfigurationsArray))
                                            {
                                                NetworkInterfaceIpConfiguration networkInterfaceIpConfigurationJsonFormatInstance = new NetworkInterfaceIpConfiguration();
                                                networkInterfaceJsonFormatInstance.IpConfigurations.Add(networkInterfaceIpConfigurationJsonFormatInstance);
                                                
                                                JToken propertiesValue2 = ipConfigurationsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    JToken privateIPAddressValue = propertiesValue2["privateIPAddress"];
                                                    if (privateIPAddressValue != null && privateIPAddressValue.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAddressInstance = ((string)privateIPAddressValue);
                                                        networkInterfaceIpConfigurationJsonFormatInstance.PrivateIpAddress = privateIPAddressInstance;
                                                    }
                                                    
                                                    JToken privateIPAllocationMethodValue = propertiesValue2["privateIPAllocationMethod"];
                                                    if (privateIPAllocationMethodValue != null && privateIPAllocationMethodValue.Type != JTokenType.Null)
                                                    {
                                                        string privateIPAllocationMethodInstance = ((string)privateIPAllocationMethodValue);
                                                        networkInterfaceIpConfigurationJsonFormatInstance.PrivateIpAllocationMethod = privateIPAllocationMethodInstance;
                                                    }
                                                    
                                                    JToken subnetValue = propertiesValue2["subnet"];
                                                    if (subnetValue != null && subnetValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId subnetInstance = new ResourceId();
                                                        networkInterfaceIpConfigurationJsonFormatInstance.Subnet = subnetInstance;
                                                        
                                                        JToken idValue3 = subnetValue["id"];
                                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                        {
                                                            string idInstance3 = ((string)idValue3);
                                                            subnetInstance.Id = idInstance3;
                                                        }
                                                    }
                                                    
                                                    JToken publicIPAddressValue = propertiesValue2["publicIPAddress"];
                                                    if (publicIPAddressValue != null && publicIPAddressValue.Type != JTokenType.Null)
                                                    {
                                                        ResourceId publicIPAddressInstance = new ResourceId();
                                                        networkInterfaceIpConfigurationJsonFormatInstance.PublicIpAddress = publicIPAddressInstance;
                                                        
                                                        JToken idValue4 = publicIPAddressValue["id"];
                                                        if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                        {
                                                            string idInstance4 = ((string)idValue4);
                                                            publicIPAddressInstance.Id = idInstance4;
                                                        }
                                                    }
                                                    
                                                    JToken loadBalancerBackendAddressPoolsArray = propertiesValue2["loadBalancerBackendAddressPools"];
                                                    if (loadBalancerBackendAddressPoolsArray != null && loadBalancerBackendAddressPoolsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken loadBalancerBackendAddressPoolsValue in ((JArray)loadBalancerBackendAddressPoolsArray))
                                                        {
                                                            ResourceId resourceIdInstance = new ResourceId();
                                                            networkInterfaceIpConfigurationJsonFormatInstance.LoadBalancerBackendAddressPools.Add(resourceIdInstance);
                                                            
                                                            JToken idValue5 = loadBalancerBackendAddressPoolsValue["id"];
                                                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                                            {
                                                                string idInstance5 = ((string)idValue5);
                                                                resourceIdInstance.Id = idInstance5;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken loadBalancerInboundNatRulesArray = propertiesValue2["loadBalancerInboundNatRules"];
                                                    if (loadBalancerInboundNatRulesArray != null && loadBalancerInboundNatRulesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken loadBalancerInboundNatRulesValue in ((JArray)loadBalancerInboundNatRulesArray))
                                                        {
                                                            ResourceId resourceIdInstance2 = new ResourceId();
                                                            networkInterfaceIpConfigurationJsonFormatInstance.LoadBalancerInboundNatRules.Add(resourceIdInstance2);
                                                            
                                                            JToken idValue6 = loadBalancerInboundNatRulesValue["id"];
                                                            if (idValue6 != null && idValue6.Type != JTokenType.Null)
                                                            {
                                                                string idInstance6 = ((string)idValue6);
                                                                resourceIdInstance2.Id = idInstance6;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                                    if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                                    {
                                                        string provisioningStateInstance = ((string)provisioningStateValue);
                                                        networkInterfaceIpConfigurationJsonFormatInstance.ProvisioningState = provisioningStateInstance;
                                                    }
                                                }
                                                
                                                JToken nameValue = ipConfigurationsValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    networkInterfaceIpConfigurationJsonFormatInstance.Name = nameInstance;
                                                }
                                                
                                                JToken etagValue = ipConfigurationsValue["etag"];
                                                if (etagValue != null && etagValue.Type != JTokenType.Null)
                                                {
                                                    string etagInstance = ((string)etagValue);
                                                    networkInterfaceIpConfigurationJsonFormatInstance.Etag = etagInstance;
                                                }
                                                
                                                JToken idValue7 = ipConfigurationsValue["id"];
                                                if (idValue7 != null && idValue7.Type != JTokenType.Null)
                                                {
                                                    string idInstance7 = ((string)idValue7);
                                                    networkInterfaceIpConfigurationJsonFormatInstance.Id = idInstance7;
                                                }
                                            }
                                        }
                                        
                                        JToken dnsSettingsValue = propertiesValue["dnsSettings"];
                                        if (dnsSettingsValue != null && dnsSettingsValue.Type != JTokenType.Null)
                                        {
                                            NetworkInterfaceDnsSettings dnsSettingsInstance = new NetworkInterfaceDnsSettings();
                                            networkInterfaceJsonFormatInstance.DnsSettings = dnsSettingsInstance;
                                            
                                            JToken dnsServersArray = dnsSettingsValue["dnsServers"];
                                            if (dnsServersArray != null && dnsServersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken dnsServersValue in ((JArray)dnsServersArray))
                                                {
                                                    dnsSettingsInstance.DnsServers.Add(((string)dnsServersValue));
                                                }
                                            }
                                            
                                            JToken appliedDnsServersArray = dnsSettingsValue["appliedDnsServers"];
                                            if (appliedDnsServersArray != null && appliedDnsServersArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken appliedDnsServersValue in ((JArray)appliedDnsServersArray))
                                                {
                                                    dnsSettingsInstance.AppliedDnsServers.Add(((string)appliedDnsServersValue));
                                                }
                                            }
                                            
                                            JToken internalDnsNameLabelValue = dnsSettingsValue["internalDnsNameLabel"];
                                            if (internalDnsNameLabelValue != null && internalDnsNameLabelValue.Type != JTokenType.Null)
                                            {
                                                string internalDnsNameLabelInstance = ((string)internalDnsNameLabelValue);
                                                dnsSettingsInstance.InternalDnsNameLabel = internalDnsNameLabelInstance;
                                            }
                                            
                                            JToken internalFqdnValue = dnsSettingsValue["internalFqdn"];
                                            if (internalFqdnValue != null && internalFqdnValue.Type != JTokenType.Null)
                                            {
                                                string internalFqdnInstance = ((string)internalFqdnValue);
                                                dnsSettingsInstance.InternalFqdn = internalFqdnInstance;
                                            }
                                        }
                                        
                                        JToken macAddressValue = propertiesValue["macAddress"];
                                        if (macAddressValue != null && macAddressValue.Type != JTokenType.Null)
                                        {
                                            string macAddressInstance = ((string)macAddressValue);
                                            networkInterfaceJsonFormatInstance.MacAddress = macAddressInstance;
                                        }
                                        
                                        JToken primaryValue = propertiesValue["primary"];
                                        if (primaryValue != null && primaryValue.Type != JTokenType.Null)
                                        {
                                            bool primaryInstance = ((bool)primaryValue);
                                            networkInterfaceJsonFormatInstance.Primary = primaryInstance;
                                        }
                                        
                                        JToken provisioningStateValue2 = propertiesValue["provisioningState"];
                                        if (provisioningStateValue2 != null && provisioningStateValue2.Type != JTokenType.Null)
                                        {
                                            string provisioningStateInstance2 = ((string)provisioningStateValue2);
                                            networkInterfaceJsonFormatInstance.ProvisioningState = provisioningStateInstance2;
                                        }
                                    }
                                    
                                    JToken etagValue2 = valueValue["etag"];
                                    if (etagValue2 != null && etagValue2.Type != JTokenType.Null)
                                    {
                                        string etagInstance2 = ((string)etagValue2);
                                        networkInterfaceJsonFormatInstance.Etag = etagInstance2;
                                    }
                                    
                                    JToken idValue8 = valueValue["id"];
                                    if (idValue8 != null && idValue8.Type != JTokenType.Null)
                                    {
                                        string idInstance8 = ((string)idValue8);
                                        networkInterfaceJsonFormatInstance.Id = idInstance8;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        networkInterfaceJsonFormatInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        networkInterfaceJsonFormatInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        networkInterfaceJsonFormatInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            networkInterfaceJsonFormatInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
