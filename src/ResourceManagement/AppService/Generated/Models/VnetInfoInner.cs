// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.AppService;
    using Microsoft.Azure.Management.AppService.Fluent;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Virtual Network information contract.
    /// </summary>
    public partial class VnetInfoInner
    {
        /// <summary>
        /// Initializes a new instance of the VnetInfoInner class.
        /// </summary>
        public VnetInfoInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VnetInfoInner class.
        /// </summary>
        /// <param name="vnetResourceId">The Virtual Network's resource
        /// ID.</param>
        /// <param name="certThumbprint">The client certificate
        /// thumbprint.</param>
        /// <param name="certBlob">A certificate file (.cer) blob containing
        /// the public key of the private key used to authenticate a
        /// Point-To-Site VPN connection.</param>
        /// <param name="routes">The routes that this Virtual Network
        /// connection uses.</param>
        /// <param name="resyncRequired">&lt;code&gt;true&lt;/code&gt; if a
        /// resync is required; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.</param>
        /// <param name="dnsServers">DNS servers to be used by this Virtual
        /// Network. This should be a comma-separated list of IP
        /// addresses.</param>
        public VnetInfoInner(string vnetResourceId = default(string), string certThumbprint = default(string), string certBlob = default(string), IList<VnetRouteInner> routes = default(IList<VnetRouteInner>), bool? resyncRequired = default(bool?), string dnsServers = default(string))
        {
            VnetResourceId = vnetResourceId;
            CertThumbprint = certThumbprint;
            CertBlob = certBlob;
            Routes = routes;
            ResyncRequired = resyncRequired;
            DnsServers = dnsServers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the Virtual Network's resource ID.
        /// </summary>
        [JsonProperty(PropertyName = "vnetResourceId")]
        public string VnetResourceId { get; set; }

        /// <summary>
        /// Gets the client certificate thumbprint.
        /// </summary>
        [JsonProperty(PropertyName = "certThumbprint")]
        public string CertThumbprint { get; private set; }

        /// <summary>
        /// Gets or sets a certificate file (.cer) blob containing the public
        /// key of the private key used to authenticate a
        /// Point-To-Site VPN connection.
        /// </summary>
        [JsonProperty(PropertyName = "certBlob")]
        public string CertBlob { get; set; }

        /// <summary>
        /// Gets the routes that this Virtual Network connection uses.
        /// </summary>
        [JsonProperty(PropertyName = "routes")]
        public IList<VnetRouteInner> Routes { get; private set; }

        /// <summary>
        /// Gets &amp;lt;code&amp;gt;true&amp;lt;/code&amp;gt; if a resync is
        /// required; otherwise,
        /// &amp;lt;code&amp;gt;false&amp;lt;/code&amp;gt;.
        /// </summary>
        [JsonProperty(PropertyName = "resyncRequired")]
        public bool? ResyncRequired { get; private set; }

        /// <summary>
        /// Gets or sets DNS servers to be used by this Virtual Network. This
        /// should be a comma-separated list of IP addresses.
        /// </summary>
        [JsonProperty(PropertyName = "dnsServers")]
        public string DnsServers { get; set; }

    }
}
