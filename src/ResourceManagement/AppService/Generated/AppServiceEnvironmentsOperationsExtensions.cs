// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.AppService;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AppServiceEnvironmentsOperations.
    /// </summary>
    public static partial class AppServiceEnvironmentsOperationsExtensions
    {
            
            /// <summary>
            /// Get all App Service Environments for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all App Service Environments for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceEnvironment>> ListAsync(this IAppServiceEnvironmentsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all App Service Environments in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all App Service Environments in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceEnvironment>> ListByResourceGroupAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get the properties of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get the properties of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceEnvironmentResourceInner> GetAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Create or update an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Create or update an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Configuration details of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceEnvironmentResourceInner> CreateOrUpdateAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentResourceInner hostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Delete an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Delete an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='forceDelete'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App
            /// Service Environment contains resources. The default is
            /// &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            
            /// <summary>
            /// Get the used, available, and total worker capacity an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Get the used, available, and total worker capacity an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StampCapacity>> ListCapacitiesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCapacitiesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get IP addresses assigned to an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get IP addresses assigned to an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResponseInner> ListVipsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVipsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get diagnostic information for an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get diagnostic information for an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HostingEnvironmentDiagnosticsInner>> ListDiagnosticsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDiagnosticsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get a diagnostics item for an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get a diagnostics item for an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='diagnosticsName'>
            /// Name of the diagnostics item.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironmentDiagnosticsInner> GetDiagnosticsItemAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string diagnosticsName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticsItemWithHttpMessagesAsync(resourceGroupName, name, diagnosticsName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get global metric definitions of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get global metric definitions of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricDefinitionInner> ListMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get global metrics of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get global metrics of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='details'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to include instance details. The
            /// default is &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all multi-role pools.
            /// </summary>
            /// <remarks>
            /// Get all multi-role pools.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPoolResourceInner>> ListMultiRolePoolsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get properties of a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Get properties of a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResourceInner> GetMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Create or update a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Create or update a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of the multi-role pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResourceInner> CreateOrUpdateMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResourceInner multiRolePoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metric definitions for a specific instance of a multi-role pool of an
            /// App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get metric definitions for a specific instance of a multi-role pool of an
            /// App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='instance'>
            /// Name of the instance in the multi-role pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinitionInner>> ListMultiRolePoolInstanceMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string instance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolInstanceMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, instance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metrics for a specific instance of a multi-role pool of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Get metrics for a specific instance of a multi-role pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='instance'>
            /// Name of the instance in the multi-role pool.
            /// </param>
            /// <param name='details'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to include instance details. The
            /// default is &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMultiRolePoolInstanceMetricsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string instance, bool? details = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolInstanceMetricsWithHttpMessagesAsync(resourceGroupName, name, instance, details, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metric definitions for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get metric definitions for a multi-role pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinitionInner>> ListMultiRoleMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRoleMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metrics for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get metrics for a multi-role pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='startTime'>
            /// Beginning time of the metrics query.
            /// </param>
            /// <param name='endTime'>
            /// End time of the metrics query.
            /// </param>
            /// <param name='timeGrain'>
            /// Time granularity of the metrics query.
            /// </param>
            /// <param name='details'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to include instance details. The
            /// default is &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMultiRoleMetricsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string startTime = default(string), string endTime = default(string), string timeGrain = default(string), bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRoleMetricsWithHttpMessagesAsync(resourceGroupName, name, startTime, endTime, timeGrain, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get available SKUs for scaling a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Get available SKUs for scaling a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> ListMultiRolePoolSkusAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolSkusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get usage metrics for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get usage metrics for a multi-role pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<UsageInner>> ListMultiRoleUsagesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRoleUsagesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// List all currently running operations on the App Service Environment.
            /// </summary>
            /// <remarks>
            /// List all currently running operations on the App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<OperationInner>> ListOperationsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListOperationsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Reboot all machines in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Reboot all machines in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RebootAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RebootWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            
            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> ResumeAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all App Service plans in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get all App Service plans in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServicePlanInner>> ListAppServicePlansAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppServicePlansWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all apps in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get all apps in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Comma separated list of app properties to include.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> ListWebAppsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebAppsWithHttpMessagesAsync(resourceGroupName, name, propertiesToInclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> SuspendAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuspendWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get global usage metrics of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get global usage metrics of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all worker pools of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get all worker pools of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPoolResourceInner>> ListWorkerPoolsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get properties of a worker pool.
            /// </summary>
            /// <remarks>
            /// Get properties of a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResourceInner> GetWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <remarks>
            /// Create or update a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResourceInner> CreateOrUpdateWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResourceInner workerPoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metric definitions for a specific instance of a worker pool of an App
            /// Service Environment.
            /// </summary>
            /// <remarks>
            /// Get metric definitions for a specific instance of a worker pool of an App
            /// Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='instance'>
            /// Name of the instance in the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinitionInner>> ListWorkerPoolInstanceMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolInstanceMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, instance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metrics for a specific instance of a worker pool of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Get metrics for a specific instance of a worker pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='instance'>
            /// Name of the instance in the worker pool.
            /// </param>
            /// <param name='details'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to include instance details. The
            /// default is &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListWorkerPoolInstanceMetricsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolInstanceMetricsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, instance, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metric definitions for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get metric definitions for a worker pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinitionInner>> ListWebWorkerMetricDefinitionsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebWorkerMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metrics for a worker pool of a AppServiceEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <remarks>
            /// Get metrics for a worker pool of a AppServiceEnvironment (App Service
            /// Environment).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='details'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to include instance details. The
            /// default is &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListWebWorkerMetricsAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebWorkerMetricsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get available SKUs for scaling a worker pool.
            /// </summary>
            /// <remarks>
            /// Get available SKUs for scaling a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> ListWorkerPoolSkusAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolSkusWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get usage metrics for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get usage metrics for a worker pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<UsageInner>> ListWebWorkerUsagesAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebWorkerUsagesWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Create or update an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Create or update an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Configuration details of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceEnvironmentResourceInner> BeginCreateOrUpdateAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, AppServiceEnvironmentResourceInner hostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Delete an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Delete an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='forceDelete'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to force the deletion even if the App
            /// Service Environment contains resources. The default is
            /// &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            
            /// <summary>
            /// Create or update a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Create or update a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of the multi-role pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResourceInner> BeginCreateOrUpdateMultiRolePoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPoolResourceInner multiRolePoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> BeginResumeAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> BeginSuspendAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSuspendWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <remarks>
            /// Create or update a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Environment.
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of the worker pool.
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of the worker pool.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolResourceInner> BeginCreateOrUpdateWorkerPoolAsync(this IAppServiceEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPoolResourceInner workerPoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all App Service Environments for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all App Service Environments for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceEnvironment>> ListNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all App Service Environments in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all App Service Environments in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceEnvironment>> ListByResourceGroupNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get the used, available, and total worker capacity an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Get the used, available, and total worker capacity an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StampCapacity>> ListCapacitiesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCapacitiesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get global metrics of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get global metrics of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all multi-role pools.
            /// </summary>
            /// <remarks>
            /// Get all multi-role pools.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPoolResourceInner>> ListMultiRolePoolsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metric definitions for a specific instance of a multi-role pool of an
            /// App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get metric definitions for a specific instance of a multi-role pool of an
            /// App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinitionInner>> ListMultiRolePoolInstanceMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolInstanceMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metrics for a specific instance of a multi-role pool of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Get metrics for a specific instance of a multi-role pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMultiRolePoolInstanceMetricsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolInstanceMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metric definitions for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get metric definitions for a multi-role pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinitionInner>> ListMultiRoleMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRoleMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metrics for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get metrics for a multi-role pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMultiRoleMetricsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRoleMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get available SKUs for scaling a multi-role pool.
            /// </summary>
            /// <remarks>
            /// Get available SKUs for scaling a multi-role pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> ListMultiRolePoolSkusNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRolePoolSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get usage metrics for a multi-role pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get usage metrics for a multi-role pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<UsageInner>> ListMultiRoleUsagesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMultiRoleUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> ResumeNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all App Service plans in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get all App Service plans in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServicePlanInner>> ListAppServicePlansNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAppServicePlansNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all apps in an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get all apps in an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> ListWebAppsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebAppsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> SuspendNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuspendNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get global usage metrics of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get global usage metrics of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get all worker pools of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get all worker pools of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WorkerPoolResourceInner>> ListWorkerPoolsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metric definitions for a specific instance of a worker pool of an App
            /// Service Environment.
            /// </summary>
            /// <remarks>
            /// Get metric definitions for a specific instance of a worker pool of an App
            /// Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinitionInner>> ListWorkerPoolInstanceMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolInstanceMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metrics for a specific instance of a worker pool of an App Service
            /// Environment.
            /// </summary>
            /// <remarks>
            /// Get metrics for a specific instance of a worker pool of an App Service
            /// Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListWorkerPoolInstanceMetricsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolInstanceMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metric definitions for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get metric definitions for a worker pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetricDefinitionInner>> ListWebWorkerMetricDefinitionsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebWorkerMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get metrics for a worker pool of a AppServiceEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <remarks>
            /// Get metrics for a worker pool of a AppServiceEnvironment (App Service
            /// Environment).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListWebWorkerMetricsNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebWorkerMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get available SKUs for scaling a worker pool.
            /// </summary>
            /// <remarks>
            /// Get available SKUs for scaling a worker pool.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SkuInfo>> ListWorkerPoolSkusNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWorkerPoolSkusNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Get usage metrics for a worker pool of an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Get usage metrics for a worker pool of an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<UsageInner>> ListWebWorkerUsagesNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebWorkerUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Resume an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Resume an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> BeginResumeNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            
            /// <summary>
            /// Suspend an App Service Environment.
            /// </summary>
            /// <remarks>
            /// Suspend an App Service Environment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInner>> BeginSuspendNextAsync(this IAppServiceEnvironmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSuspendNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
