// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for WebAppsOperations.
    /// </summary>
    public static partial class WebAppsOperationsExtensions
    {
            /// <summary>
            /// Get all apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInner> List(this IWebAppsOperations operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInner>> ListAsync(this IWebAppsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='includeSlots'>
            /// Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in
            /// results. The default is false, which only gives you the production slot
            /// of all apps.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInner> ListByResourceGroup(this IWebAppsOperations operations, string resourceGroupName, bool? includeSlots = default(bool?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListByResourceGroupAsync(resourceGroupName, includeSlots), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='includeSlots'>
            /// Specify &lt;strong&gt;true&lt;/strong&gt; to include deployment slots in
            /// results. The default is false, which only gives you the production slot
            /// of all apps.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInner>> ListByResourceGroupAsync(this IWebAppsOperations operations, string resourceGroupName, bool? includeSlots = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, includeSlots, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a web, mobile, or API app.
            /// </summary>
            /// <remarks>
            /// Gets the details of a web, mobile, or API app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteInner Get(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a web, mobile, or API app.
            /// </summary>
            /// <remarks>
            /// Gets the details of a web, mobile, or API app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteInner> GetAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static SiteInner CreateOrUpdate(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteInner> CreateOrUpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static SiteInner BeginCreateOrUpdate(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteInner> BeginCreateOrUpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </summary>
            /// <remarks>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app to delete.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// Specify true if the App Service plan will be empty after app deletion and
            /// you want to delete the empty App Service plan. By default, the empty App
            /// Service plan is not deleted.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            public static void Delete(this IWebAppsOperations operations, string resourceGroupName, string name, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </summary>
            /// <remarks>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app to delete.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// Specify true if the App Service plan will be empty after app deletion and
            /// you want to delete the empty App Service plan. By default, the empty App
            /// Service plan is not deleted.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Analyze a custom hostname.
            /// </summary>
            /// <remarks>
            /// Analyze a custom hostname.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            public static CustomHostnameAnalysisResultInner AnalyzeCustomHostname(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).AnalyzeCustomHostnameAsync(resourceGroupName, name, hostName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Analyze a custom hostname.
            /// </summary>
            /// <remarks>
            /// Analyze a custom hostname.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CustomHostnameAnalysisResultInner> AnalyzeCustomHostnameAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AnalyzeCustomHostnameWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </summary>
            /// <remarks>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            public static void ApplySlotConfigToProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ApplySlotConfigToProductionAsync(resourceGroupName, name, slotSwapEntity), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </summary>
            /// <remarks>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApplySlotConfigToProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApplySlotConfigToProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a backup of an app.
            /// </summary>
            /// <remarks>
            /// Creates a backup of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Backup configuration. You can use the JSON response from the POST action
            /// as input here.
            /// </param>
            public static BackupItemInner Backup(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BackupAsync(resourceGroupName, name, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a backup of an app.
            /// </summary>
            /// <remarks>
            /// Creates a backup of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Backup configuration. You can use the JSON response from the POST action
            /// as input here.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BackupItemInner> BackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BackupWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<BackupItemInner> ListBackups(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<BackupItemInner>> ListBackupsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListBackupsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </summary>
            /// <remarks>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// A RestoreRequest object that includes Azure storage URL and blog name for
            /// discovery of backup.
            /// </param>
            public static RestoreRequestInner DiscoverRestore(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequestInner request)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DiscoverRestoreAsync(resourceGroupName, name, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </summary>
            /// <remarks>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// A RestoreRequest object that includes Azure storage URL and blog name for
            /// discovery of backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RestoreRequestInner> DiscoverRestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequestInner request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DiscoverRestoreWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Gets a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            public static BackupItemInner GetBackupStatus(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetBackupStatusAsync(resourceGroupName, name, backupId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Gets a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BackupItemInner> GetBackupStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBackupStatusWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Deletes a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            public static void DeleteBackup(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteBackupAsync(resourceGroupName, name, backupId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Deletes a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteBackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteBackupWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </summary>
            /// <remarks>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            public static BackupItemInner ListBackupStatusSecrets(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequestInner request)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupStatusSecretsAsync(resourceGroupName, name, backupId, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </summary>
            /// <remarks>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BackupItemInner> ListBackupStatusSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequestInner request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListBackupStatusSecretsWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            public static RestoreResponseInner Restore(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).RestoreAsync(resourceGroupName, name, backupId, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RestoreResponseInner> RestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RestoreWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            public static RestoreResponseInner BeginRestore(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginRestoreAsync(resourceGroupName, name, backupId, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RestoreResponseInner> BeginRestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginRestoreWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of the app.
            /// </param>
            public static StringDictionaryInner UpdateApplicationSettings(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner appSettings)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateApplicationSettingsAsync(resourceGroupName, name, appSettings), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StringDictionaryInner> UpdateApplicationSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner appSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationSettingsWithHttpMessagesAsync(resourceGroupName, name, appSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static StringDictionaryInner ListApplicationSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListApplicationSettingsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StringDictionaryInner> ListApplicationSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListApplicationSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </summary>
            /// <remarks>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            public static SiteAuthSettingsInner UpdateAuthSettings(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettingsInner siteAuthSettings)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateAuthSettingsAsync(resourceGroupName, name, siteAuthSettings), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </summary>
            /// <remarks>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteAuthSettingsInner> UpdateAuthSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettingsInner siteAuthSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateAuthSettingsWithHttpMessagesAsync(resourceGroupName, name, siteAuthSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Authentication/Authorization settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Authentication/Authorization settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteAuthSettingsInner GetAuthSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetAuthSettingsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Authentication/Authorization settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Authentication/Authorization settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteAuthSettingsInner> GetAuthSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAuthSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Edited backup configuration.
            /// </param>
            public static BackupRequestInner UpdateBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateBackupConfigurationAsync(resourceGroupName, name, request), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Edited backup configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BackupRequestInner> UpdateBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void DeleteBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteBackupConfigurationAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static BackupRequestInner GetBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetBackupConfigurationAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BackupRequestInner> GetBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings of the app or deployment slot. See example.
            /// </param>
            public static ConnectionStringDictionaryInner UpdateConnectionStrings(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionaryInner connectionStrings)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateConnectionStringsAsync(resourceGroupName, name, connectionStrings), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings of the app or deployment slot. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ConnectionStringDictionaryInner> UpdateConnectionStringsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionaryInner connectionStrings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static ConnectionStringDictionaryInner ListConnectionStrings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListConnectionStringsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ConnectionStringDictionaryInner> ListConnectionStringsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteLogsConfigInner GetDiagnosticLogsConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetDiagnosticLogsConfigurationAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteLogsConfigInner> GetDiagnosticLogsConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticLogsConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteLogsConfig'>
            /// A SiteLogsConfig JSON object that contains the logging configuration to
            /// change in the "properties" property.
            /// </param>
            public static SiteLogsConfigInner UpdateDiagnosticLogsConfig(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfigInner siteLogsConfig)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateDiagnosticLogsConfigAsync(resourceGroupName, name, siteLogsConfig), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteLogsConfig'>
            /// A SiteLogsConfig JSON object that contains the logging configuration to
            /// change in the "properties" property.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteLogsConfigInner> UpdateDiagnosticLogsConfigAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfigInner siteLogsConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDiagnosticLogsConfigWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='metadata'>
            /// Edited metadata of the app or deployment slot. See example.
            /// </param>
            public static StringDictionaryInner UpdateMetadata(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner metadata)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateMetadataAsync(resourceGroupName, name, metadata), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='metadata'>
            /// Edited metadata of the app or deployment slot. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StringDictionaryInner> UpdateMetadataAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner metadata, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateMetadataWithHttpMessagesAsync(resourceGroupName, name, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Gets the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static StringDictionaryInner ListMetadata(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetadataAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Gets the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StringDictionaryInner> ListMetadataAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetadataWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static UserInner ListPublishingCredentials(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPublishingCredentialsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<UserInner> ListPublishingCredentialsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static UserInner BeginListPublishingCredentials(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginListPublishingCredentialsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<UserInner> BeginListPublishingCredentialsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginListPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Updates the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            public static PushSettingsInner UpdateSitePushSettings(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettingsInner pushSettings)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateSitePushSettingsAsync(resourceGroupName, name, pushSettings), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Updates the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PushSettingsInner> UpdateSitePushSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettingsInner pushSettings, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateSitePushSettingsWithHttpMessagesAsync(resourceGroupName, name, pushSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Gets the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static PushSettingsInner ListSitePushSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSitePushSettingsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Gets the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PushSettingsInner> ListSitePushSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSitePushSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the names of app settings and connection strings that stick to the
            /// slot (not swapped).
            /// </summary>
            /// <remarks>
            /// Gets the names of app settings and connection strings that stick to the
            /// slot (not swapped).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SlotConfigNamesResourceInner ListSlotConfigurationNames(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSlotConfigurationNamesAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the names of app settings and connection strings that stick to the
            /// slot (not swapped).
            /// </summary>
            /// <remarks>
            /// Gets the names of app settings and connection strings that stick to the
            /// slot (not swapped).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SlotConfigNamesResourceInner> ListSlotConfigurationNamesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSlotConfigurationNamesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the names of application settings and connection string that
            /// remain with the slot during swap operation.
            /// </summary>
            /// <remarks>
            /// Updates the names of application settings and connection string that
            /// remain with the slot during swap operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotConfigNames'>
            /// Names of application settings and connection strings. See example.
            /// </param>
            public static SlotConfigNamesResourceInner UpdateSlotConfigurationNames(this IWebAppsOperations operations, string resourceGroupName, string name, SlotConfigNamesResourceInner slotConfigNames)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateSlotConfigurationNamesAsync(resourceGroupName, name, slotConfigNames), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the names of application settings and connection string that
            /// remain with the slot during swap operation.
            /// </summary>
            /// <remarks>
            /// Updates the names of application settings and connection string that
            /// remain with the slot during swap operation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotConfigNames'>
            /// Names of application settings and connection strings. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SlotConfigNamesResourceInner> UpdateSlotConfigurationNamesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SlotConfigNamesResourceInner slotConfigNames, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateSlotConfigurationNamesWithHttpMessagesAsync(resourceGroupName, name, slotConfigNames, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </summary>
            /// <remarks>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteConfigInner GetConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetConfigurationAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </summary>
            /// <remarks>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteConfigInner> GetConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            public static SiteConfigInner CreateOrUpdateConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigInner siteConfig)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateConfigurationAsync(resourceGroupName, name, siteConfig), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteConfigInner> CreateOrUpdateConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigInner siteConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateConfigurationWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            public static SiteConfigInner UpdateConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigInner siteConfig)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateConfigurationAsync(resourceGroupName, name, siteConfig), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteConfigInner> UpdateConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigInner siteConfig, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateConfigurationWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DeploymentInner> ListDeployments(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDeploymentsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DeploymentInner>> ListDeploymentsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            public static DeploymentInner GetDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetDeploymentAsync(resourceGroupName, name, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DeploymentInner> GetDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            public static DeploymentInner CreateDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, DeploymentInner deployment)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateDeploymentAsync(resourceGroupName, name, id, deployment), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DeploymentInner> CreateDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, DeploymentInner deployment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            public static void DeleteDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteDeploymentAsync(resourceGroupName, name, id), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<IdentifierInner> ListDomainOwnershipIdentifiers(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDomainOwnershipIdentifiersAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<IdentifierInner>> ListDomainOwnershipIdentifiersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get domain ownership identifier for web app.
            /// </summary>
            /// <remarks>
            /// Get domain ownership identifier for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            public static IdentifierInner GetDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get domain ownership identifier for web app.
            /// </summary>
            /// <remarks>
            /// Get domain ownership identifier for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IdentifierInner> GetDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            public static IdentifierInner CreateOrUpdateDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IdentifierInner> CreateOrUpdateDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a domain ownership identifier for a web app.
            /// </summary>
            /// <remarks>
            /// Deletes a domain ownership identifier for a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            public static void DeleteDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a domain ownership identifier for a web app.
            /// </summary>
            /// <remarks>
            /// Deletes a domain ownership identifier for a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            public static IdentifierInner UpdateDomainOwnershipIdentifier(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateDomainOwnershipIdentifierAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IdentifierInner> UpdateDomainOwnershipIdentifierAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDomainOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<HostNameBindingInner> ListHostNameBindings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHostNameBindingsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<HostNameBindingInner>> ListHostNameBindingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            public static HostNameBindingInner GetHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetHostNameBindingAsync(resourceGroupName, name, hostName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HostNameBindingInner> GetHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='hostNameBinding'>
            /// Binding details. This is the JSON representation of a HostNameBinding
            /// object.
            /// </param>
            public static HostNameBindingInner CreateOrUpdateHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBindingInner hostNameBinding)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateHostNameBindingAsync(resourceGroupName, name, hostName, hostNameBinding), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='hostNameBinding'>
            /// Binding details. This is the JSON representation of a HostNameBinding
            /// object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HostNameBindingInner> CreateOrUpdateHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBindingInner hostNameBinding, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            public static void DeleteHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteHostNameBindingAsync(resourceGroupName, name, hostName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            public static HybridConnectionInner GetHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionInner> GetHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            public static HybridConnectionInner CreateOrUpdateHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionInner> CreateOrUpdateHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// <remarks>
            /// Removes a Hybrid Connection from this site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            public static void DeleteHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// <remarks>
            /// Removes a Hybrid Connection from this site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            public static HybridConnectionInner UpdateHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionInner> UpdateHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </summary>
            /// <remarks>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            public static HybridConnectionKeyInner ListHybridConnectionKeys(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHybridConnectionKeysAsync(resourceGroupName, name, namespaceName, relayName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </summary>
            /// <remarks>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionKeyInner> ListHybridConnectionKeysAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionKeysWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            public static HybridConnectionInner ListHybridConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHybridConnectionsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionInner> ListHybridConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static RelayServiceConnectionEntityInner ListRelayServiceConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListRelayServiceConnectionsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RelayServiceConnectionEntityInner> ListRelayServiceConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListRelayServiceConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a hybrid connection configuration by its name.
            /// </summary>
            /// <remarks>
            /// Gets a hybrid connection configuration by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection.
            /// </param>
            public static RelayServiceConnectionEntityInner GetRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetRelayServiceConnectionAsync(resourceGroupName, name, entityName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a hybrid connection configuration by its name.
            /// </summary>
            /// <remarks>
            /// Gets a hybrid connection configuration by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RelayServiceConnectionEntityInner> GetRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            public static RelayServiceConnectionEntityInner CreateOrUpdateRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RelayServiceConnectionEntityInner> CreateOrUpdateRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a relay service connection by its name.
            /// </summary>
            /// <remarks>
            /// Deletes a relay service connection by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            public static void DeleteRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteRelayServiceConnectionAsync(resourceGroupName, name, entityName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a relay service connection by its name.
            /// </summary>
            /// <remarks>
            /// Deletes a relay service connection by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            public static RelayServiceConnectionEntityInner UpdateRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RelayServiceConnectionEntityInner> UpdateRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInstanceInner> ListInstanceIdentifiers(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceIdentifiersAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInstanceInner>> ListInstanceIdentifiersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='instanceId'>
            /// The ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DeploymentInner> ListInstanceDeployments(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceDeploymentsAsync(resourceGroupName, name, instanceId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='instanceId'>
            /// The ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DeploymentInner>> ListInstanceDeploymentsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static DeploymentInner GetInstanceDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetInstanceDeploymentAsync(resourceGroupName, name, id, instanceId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DeploymentInner> GetInstanceDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetInstanceDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            public static DeploymentInner CreateInstanceDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, DeploymentInner deployment)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateInstanceDeploymentAsync(resourceGroupName, name, id, instanceId, deployment), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DeploymentInner> CreateInstanceDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, DeploymentInner deployment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateInstanceDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, instanceId, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static void DeleteInstanceDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteInstanceDeploymentAsync(resourceGroupName, name, id, instanceId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteInstanceDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteInstanceDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, instanceId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteCloneabilityInner IsCloneable(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).IsCloneableAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteCloneabilityInner> IsCloneableAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.IsCloneableWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner> ListMetricDefinitions(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricDefinitionsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner>> ListMetricDefinitionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='details'>
            /// Specify "true" to include metric details in the response. It is "false" by
            /// default.
            /// </param>
            /// <param name='filter'>
            /// Return only metrics specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetric> ListMetrics(this IWebAppsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricsAsync(resourceGroupName, name, details, filter), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='details'>
            /// Specify "true" to include metric details in the response. It is "false" by
            /// default.
            /// </param>
            /// <param name='filter'>
            /// Return only metrics specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetric>> ListMetricsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app.
            /// </summary>
            /// <remarks>
            /// Restores a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Migration options
            /// </param>
            public static StorageMigrationResponseInner MigrateStorage(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptionsInner options)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).MigrateStorageAsync(subscriptionName, resourceGroupName, name, options), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a web app.
            /// </summary>
            /// <remarks>
            /// Restores a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Migration options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StorageMigrationResponseInner> MigrateStorageAsync(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptionsInner options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.MigrateStorageWithHttpMessagesAsync(subscriptionName, resourceGroupName, name, options, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app.
            /// </summary>
            /// <remarks>
            /// Restores a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Migration options
            /// </param>
            public static StorageMigrationResponseInner BeginMigrateStorage(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptionsInner options)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginMigrateStorageAsync(subscriptionName, resourceGroupName, name, options), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a web app.
            /// </summary>
            /// <remarks>
            /// Restores a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Migration options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StorageMigrationResponseInner> BeginMigrateStorageAsync(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptionsInner options, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginMigrateStorageWithHttpMessagesAsync(subscriptionName, resourceGroupName, name, options, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </summary>
            /// <remarks>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            public static OperationInner MigrateMySql(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequestInner migrationRequestEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).MigrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </summary>
            /// <remarks>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<OperationInner> MigrateMySqlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequestInner migrationRequestEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.MigrateMySqlWithHttpMessagesAsync(resourceGroupName, name, migrationRequestEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </summary>
            /// <remarks>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            public static OperationInner BeginMigrateMySql(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequestInner migrationRequestEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginMigrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </summary>
            /// <remarks>
            /// Migrates a local (in-app) MySql database to a remote MySql database.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<OperationInner> BeginMigrateMySqlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequestInner migrationRequestEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginMigrateMySqlWithHttpMessagesAsync(resourceGroupName, name, migrationRequestEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            public static NetworkFeaturesInner ListNetworkFeatures(this IWebAppsOperations operations, string resourceGroupName, string name, string view)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListNetworkFeaturesAsync(resourceGroupName, name, view), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<NetworkFeaturesInner> ListNetworkFeaturesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string view, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNetworkFeaturesWithHttpMessagesAsync(resourceGroupName, name, view, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            public static string StartWebSiteNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).StartWebSiteNetworkTraceAsync(resourceGroupName, name, durationInSeconds), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> StartWebSiteNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StartWebSiteNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            public static string StopWebSiteNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).StopWebSiteNetworkTraceAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> StopWebSiteNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StopWebSiteNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void GenerateNewSitePublishingPassword(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GenerateNewSitePublishingPasswordAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task GenerateNewSitePublishingPasswordAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.GenerateNewSitePublishingPasswordWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<PerfMonResponse> ListPerfMonCounters(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPerfMonCountersAsync(resourceGroupName, name, filter), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<PerfMonResponse>> ListPerfMonCountersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets web app's event logs.
            /// </summary>
            /// <remarks>
            /// Gets web app's event logs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SitePhpErrorLogFlagInner GetSitePhpErrorLogFlag(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSitePhpErrorLogFlagAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets web app's event logs.
            /// </summary>
            /// <remarks>
            /// Gets web app's event logs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SitePhpErrorLogFlagInner> GetSitePhpErrorLogFlagAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSitePhpErrorLogFlagWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the premier add-ons of an app.
            /// </summary>
            /// <remarks>
            /// Gets the premier add-ons of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static PremierAddOnInner ListPremierAddOns(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPremierAddOnsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the premier add-ons of an app.
            /// </summary>
            /// <remarks>
            /// Gets the premier add-ons of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PremierAddOnInner> ListPremierAddOnsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListPremierAddOnsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Gets a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            public static PremierAddOnInner GetPremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetPremierAddOnAsync(resourceGroupName, name, premierAddOnName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Gets a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PremierAddOnInner> GetPremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            public static PremierAddOnInner AddPremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnInner premierAddOn)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).AddPremierAddOnAsync(resourceGroupName, name, premierAddOnName, premierAddOn), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PremierAddOnInner> AddPremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnInner premierAddOn, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a premier add-on from an app.
            /// </summary>
            /// <remarks>
            /// Delete a premier add-on from an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            public static void DeletePremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeletePremierAddOnAsync(resourceGroupName, name, premierAddOnName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a premier add-on from an app.
            /// </summary>
            /// <remarks>
            /// Delete a premier add-on from an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeletePremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeletePremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='format'>
            /// Name of the format. Valid values are:
            /// FileZilla3
            /// WebDeploy -- default
            /// Ftp. Possible values include: 'FileZilla3', 'WebDeploy', 'Ftp'
            /// </param>
            public static System.IO.Stream ListPublishingProfileXmlWithSecrets(this IWebAppsOperations operations, string resourceGroupName, string name, string format = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPublishingProfileXmlWithSecretsAsync(resourceGroupName, name, format), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='format'>
            /// Name of the format. Valid values are:
            /// FileZilla3
            /// WebDeploy -- default
            /// Ftp. Possible values include: 'FileZilla3', 'WebDeploy', 'Ftp'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.IO.Stream> ListPublishingProfileXmlWithSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                var _result = await operations.ListPublishingProfileXmlWithSecretsWithHttpMessagesAsync(resourceGroupName, name, format, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            public static RecoverResponseInner Recover(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntityInner recoveryEntity)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).RecoverAsync(resourceGroupName, name, recoveryEntity), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RecoverResponseInner> RecoverAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntityInner recoveryEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RecoverWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            public static RecoverResponseInner BeginRecover(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntityInner recoveryEntity)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginRecoverAsync(resourceGroupName, name, recoveryEntity), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RecoverResponseInner> BeginRecoverAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntityInner recoveryEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginRecoverWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </summary>
            /// <remarks>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void ResetProductionSlotConfig(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ResetProductionSlotConfigAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </summary>
            /// <remarks>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ResetProductionSlotConfigAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ResetProductionSlotConfigWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Restarts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Restarts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='softRestart'>
            /// Specify true to apply the configuration settings and restarts the app only
            /// if necessary. By default, the API always restarts and reprovisions the
            /// app.
            /// </param>
            /// <param name='synchronous'>
            /// Specify true to block until the app is restarted. By default, it is set to
            /// false, and the API responds immediately (asynchronous).
            /// </param>
            public static void Restart(this IWebAppsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).RestartAsync(resourceGroupName, name, softRestart, synchronous), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Restarts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='softRestart'>
            /// Specify true to apply the configuration settings and restarts the app only
            /// if necessary. By default, the API always restarts and reprovisions the
            /// app.
            /// </param>
            /// <param name='synchronous'>
            /// Specify true to block until the app is restarted. By default, it is set to
            /// false, and the API responds immediately (asynchronous).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task RestartAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.RestartWithHttpMessagesAsync(resourceGroupName, name, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets an app's deployment slots.
            /// </summary>
            /// <remarks>
            /// Gets an app's deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInner> ListSlots(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSlotsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an app's deployment slots.
            /// </summary>
            /// <remarks>
            /// Gets an app's deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInner>> ListSlotsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSlotsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the details of a web, mobile, or API app.
            /// </summary>
            /// <remarks>
            /// Gets the details of a web, mobile, or API app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. By default, this API returns the production
            /// slot.
            /// </param>
            public static SiteInner GetSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the details of a web, mobile, or API app.
            /// </summary>
            /// <remarks>
            /// Gets the details of a web, mobile, or API app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. By default, this API returns the production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteInner> GetSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static SiteInner CreateOrUpdateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateSlotAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteInner> CreateOrUpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static SiteInner BeginCreateOrUpdateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginCreateOrUpdateSlotAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </summary>
            /// <remarks>
            /// Creates a new web, mobile, or API app in an existing resource group, or
            /// updates an existing app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Unique name of the app to create or update. To create or update a
            /// deployment slot, use the {slot} parameter.
            /// </param>
            /// <param name='siteEnvelope'>
            /// A JSON representation of the app properties. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to create or update. By default, this API
            /// attempts to create or modify the production slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteInner> BeginCreateOrUpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteInner siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </summary>
            /// <remarks>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app to delete.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to delete. By default, the API deletes the
            /// production slot.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// Specify true if the App Service plan will be empty after app deletion and
            /// you want to delete the empty App Service plan. By default, the empty App
            /// Service plan is not deleted.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            public static void DeleteSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteSlotAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </summary>
            /// <remarks>
            /// Deletes a web, mobile, or API app, or one of the deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app to delete.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot to delete. By default, the API deletes the
            /// production slot.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// Specify true if the App Service plan will be empty after app deletion and
            /// you want to delete the empty App Service plan. By default, the empty App
            /// Service plan is not deleted.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Analyze a custom hostname.
            /// </summary>
            /// <remarks>
            /// Analyze a custom hostname.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            public static CustomHostnameAnalysisResultInner AnalyzeCustomHostnameSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).AnalyzeCustomHostnameSlotAsync(resourceGroupName, name, slot, hostName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Analyze a custom hostname.
            /// </summary>
            /// <remarks>
            /// Analyze a custom hostname.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<CustomHostnameAnalysisResultInner> AnalyzeCustomHostnameSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AnalyzeCustomHostnameSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </summary>
            /// <remarks>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot
            /// is used as the source slot.
            /// </param>
            public static void ApplySlotConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ApplySlotConfigurationSlotAsync(resourceGroupName, name, slotSwapEntity, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </summary>
            /// <remarks>
            /// Applies the configuration settings from the target slot onto the current
            /// slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot
            /// is used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ApplySlotConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ApplySlotConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a backup of an app.
            /// </summary>
            /// <remarks>
            /// Creates a backup of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Backup configuration. You can use the JSON response from the POST action
            /// as input here.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a backup for the production slot.
            /// </param>
            public static BackupItemInner BackupSlot(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BackupSlotAsync(resourceGroupName, name, request, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a backup of an app.
            /// </summary>
            /// <remarks>
            /// Creates a backup of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Backup configuration. You can use the JSON response from the POST action
            /// as input here.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a backup for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BackupItemInner> BackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BackupSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// backups of the production slot.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<BackupItemInner> ListBackupsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// backups of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<BackupItemInner>> ListBackupsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListBackupsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </summary>
            /// <remarks>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// A RestoreRequest object that includes Azure storage URL and blog name for
            /// discovery of backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// perform discovery for the production slot.
            /// </param>
            public static RestoreRequestInner DiscoverRestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequestInner request, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DiscoverRestoreSlotAsync(resourceGroupName, name, request, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </summary>
            /// <remarks>
            /// Discovers an existing app backup that can be restored from a blob in Azure
            /// storage.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// A RestoreRequest object that includes Azure storage URL and blog name for
            /// discovery of backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// perform discovery for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RestoreRequestInner> DiscoverRestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequestInner request, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DiscoverRestoreSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Gets a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// a backup of the production slot.
            /// </param>
            public static BackupItemInner GetBackupStatusSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetBackupStatusSlotAsync(resourceGroupName, name, backupId, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Gets a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BackupItemInner> GetBackupStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBackupStatusSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Deletes a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete a backup of the production slot.
            /// </param>
            public static void DeleteBackupSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteBackupSlotAsync(resourceGroupName, name, backupId, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a backup of an app by its ID.
            /// </summary>
            /// <remarks>
            /// Deletes a backup of an app by its ID.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteBackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteBackupSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </summary>
            /// <remarks>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupItemInner ListBackupStatusSecretsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequestInner request, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupStatusSecretsSlotAsync(resourceGroupName, name, backupId, request, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </summary>
            /// <remarks>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BackupItemInner> ListBackupStatusSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequestInner request, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListBackupStatusSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            public static RestoreResponseInner RestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).RestoreSlotAsync(resourceGroupName, name, backupId, request, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RestoreResponseInner> RestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RestoreSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            public static RestoreResponseInner BeginRestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginRestoreSlotAsync(resourceGroupName, name, backupId, request, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Restores a specific backup to another app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='backupId'>
            /// ID of the backup.
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restore a backup of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RestoreResponseInner> BeginRestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequestInner request, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginRestoreSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the application settings for the production slot.
            /// </param>
            public static StringDictionaryInner UpdateApplicationSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner appSettings, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateApplicationSettingsSlotAsync(resourceGroupName, name, appSettings, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the application settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StringDictionaryInner> UpdateApplicationSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner appSettings, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, appSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the application settings for the production slot.
            /// </param>
            public static StringDictionaryInner ListApplicationSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListApplicationSettingsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the application settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the application settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the application settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StringDictionaryInner> ListApplicationSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListApplicationSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </summary>
            /// <remarks>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteAuthSettingsInner UpdateAuthSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettingsInner siteAuthSettings, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateAuthSettingsSlotAsync(resourceGroupName, name, siteAuthSettings, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </summary>
            /// <remarks>
            /// Updates the Authentication / Authorization settings associated with web
            /// app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteAuthSettingsInner> UpdateAuthSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettingsInner siteAuthSettings, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateAuthSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, siteAuthSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Authentication/Authorization settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Authentication/Authorization settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the settings for the production slot.
            /// </param>
            public static SiteAuthSettingsInner GetAuthSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetAuthSettingsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Authentication/Authorization settings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Authentication/Authorization settings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteAuthSettingsInner> GetAuthSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetAuthSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Edited backup configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the backup configuration for the production slot.
            /// </param>
            public static BackupRequestInner UpdateBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateBackupConfigurationSlotAsync(resourceGroupName, name, request, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='request'>
            /// Edited backup configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the backup configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BackupRequestInner> UpdateBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequestInner request, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the backup configuration for the production slot.
            /// </param>
            public static void DeleteBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteBackupConfigurationSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the backup configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the backup configuration for the production slot.
            /// </param>
            public static BackupRequestInner GetBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetBackupConfigurationSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the backup configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the backup configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the backup configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BackupRequestInner> GetBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings of the app or deployment slot. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the connection settings for the production slot.
            /// </param>
            public static ConnectionStringDictionaryInner UpdateConnectionStringsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionaryInner connectionStrings, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateConnectionStringsSlotAsync(resourceGroupName, name, connectionStrings, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings of the app or deployment slot. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the connection settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ConnectionStringDictionaryInner> UpdateConnectionStringsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionaryInner connectionStrings, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateConnectionStringsSlotWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the connection settings for the production slot.
            /// </param>
            public static ConnectionStringDictionaryInner ListConnectionStringsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListConnectionStringsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the connection strings of an app.
            /// </summary>
            /// <remarks>
            /// Gets the connection strings of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the connection settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ConnectionStringDictionaryInner> ListConnectionStringsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListConnectionStringsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the logging configuration for the production slot.
            /// </param>
            public static SiteLogsConfigInner GetDiagnosticLogsConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetDiagnosticLogsConfigurationSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the logging configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteLogsConfigInner> GetDiagnosticLogsConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticLogsConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteLogsConfig'>
            /// A SiteLogsConfig JSON object that contains the logging configuration to
            /// change in the "properties" property.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the logging configuration for the production slot.
            /// </param>
            public static SiteLogsConfigInner UpdateDiagnosticLogsConfigSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfigInner siteLogsConfig, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateDiagnosticLogsConfigSlotAsync(resourceGroupName, name, siteLogsConfig, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the logging configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the logging configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteLogsConfig'>
            /// A SiteLogsConfig JSON object that contains the logging configuration to
            /// change in the "properties" property.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the logging configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteLogsConfigInner> UpdateDiagnosticLogsConfigSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfigInner siteLogsConfig, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDiagnosticLogsConfigSlotWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Replaces the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='metadata'>
            /// Edited metadata of the app or deployment slot. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the metadata for the production slot.
            /// </param>
            public static StringDictionaryInner UpdateMetadataSlot(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner metadata, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateMetadataSlotAsync(resourceGroupName, name, metadata, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Replaces the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Replaces the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='metadata'>
            /// Edited metadata of the app or deployment slot. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the metadata for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StringDictionaryInner> UpdateMetadataSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionaryInner metadata, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateMetadataSlotWithHttpMessagesAsync(resourceGroupName, name, metadata, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Gets the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the metadata for the production slot.
            /// </param>
            public static StringDictionaryInner ListMetadataSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetadataSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the metadata of an app.
            /// </summary>
            /// <remarks>
            /// Gets the metadata of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the metadata for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StringDictionaryInner> ListMetadataSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetadataSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing credentials for the production slot.
            /// </param>
            public static UserInner ListPublishingCredentialsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPublishingCredentialsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing credentials for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<UserInner> ListPublishingCredentialsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListPublishingCredentialsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing credentials for the production slot.
            /// </param>
            public static UserInner BeginListPublishingCredentialsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginListPublishingCredentialsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </summary>
            /// <remarks>
            /// Gets the Git/FTP publishing credentials of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing credentials for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<UserInner> BeginListPublishingCredentialsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginListPublishingCredentialsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Updates the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static PushSettingsInner UpdateSitePushSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettingsInner pushSettings, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateSitePushSettingsSlotAsync(resourceGroupName, name, pushSettings, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Updates the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PushSettingsInner> UpdateSitePushSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettingsInner pushSettings, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateSitePushSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, pushSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Gets the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static PushSettingsInner ListSitePushSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSitePushSettingsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Push settings associated with web app.
            /// </summary>
            /// <remarks>
            /// Gets the Push settings associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PushSettingsInner> ListSitePushSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSitePushSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </summary>
            /// <remarks>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            public static SiteConfigInner GetConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetConfigurationSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </summary>
            /// <remarks>
            /// Gets the configuration of an app, such as platform version and bitness,
            /// default documents, virtual applications, Always On, etc.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// return configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteConfigInner> GetConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update configuration for the production slot.
            /// </param>
            public static SiteConfigInner CreateOrUpdateConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigInner siteConfig, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateConfigurationSlotAsync(resourceGroupName, name, siteConfig, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteConfigInner> CreateOrUpdateConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigInner siteConfig, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, siteConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update configuration for the production slot.
            /// </param>
            public static SiteConfigInner UpdateConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigInner siteConfig, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateConfigurationSlotAsync(resourceGroupName, name, siteConfig, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteConfig'>
            /// JSON representation of a SiteConfig object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteConfigInner> UpdateConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfigInner siteConfig, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, siteConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DeploymentInner> ListDeploymentsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDeploymentsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DeploymentInner>> ListDeploymentsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets a
            /// deployment for the production slot.
            /// </param>
            public static DeploymentInner GetDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetDeploymentSlotAsync(resourceGroupName, name, id, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DeploymentInner> GetDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API creates a
            /// deployment for the production slot.
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            public static DeploymentInner CreateDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, DeploymentInner deployment)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateDeploymentSlotAsync(resourceGroupName, name, id, slot, deployment), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API creates a
            /// deployment for the production slot.
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DeploymentInner> CreateDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, DeploymentInner deployment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            public static void DeleteDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteDeploymentSlotAsync(resourceGroupName, name, id, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<IdentifierInner> ListDomainOwnershipIdentifiersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDomainOwnershipIdentifiersSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<IdentifierInner>> ListDomainOwnershipIdentifiersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get domain ownership identifier for web app.
            /// </summary>
            /// <remarks>
            /// Get domain ownership identifier for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            public static IdentifierInner GetDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get domain ownership identifier for web app.
            /// </summary>
            /// <remarks>
            /// Get domain ownership identifier for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IdentifierInner> GetDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            public static IdentifierInner CreateOrUpdateDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IdentifierInner> CreateOrUpdateDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a domain ownership identifier for a web app.
            /// </summary>
            /// <remarks>
            /// Deletes a domain ownership identifier for a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            public static void DeleteDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a domain ownership identifier for a web app.
            /// </summary>
            /// <remarks>
            /// Deletes a domain ownership identifier for a web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            public static IdentifierInner UpdateDomainOwnershipIdentifierSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateDomainOwnershipIdentifierSlotAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </summary>
            /// <remarks>
            /// Creates a domain ownership identifier for web app, or updates an existing
            /// ownership identifier.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='domainOwnershipIdentifierName'>
            /// Name of domain ownership identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<IdentifierInner> UpdateDomainOwnershipIdentifierSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string domainOwnershipIdentifierName, IdentifierInner domainOwnershipIdentifier, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateDomainOwnershipIdentifierSlotWithHttpMessagesAsync(resourceGroupName, name, domainOwnershipIdentifierName, domainOwnershipIdentifier, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets
            /// hostname bindings for the production slot.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<HostNameBindingInner> ListHostNameBindingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHostNameBindingsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets
            /// hostname bindings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<HostNameBindingInner>> ListHostNameBindingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API the named
            /// binding for the production slot.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            public static HostNameBindingInner GetHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Get the named hostname binding for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API the named
            /// binding for the production slot.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HostNameBindingInner> GetHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='hostNameBinding'>
            /// Binding details. This is the JSON representation of a HostNameBinding
            /// object.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a binding for the production slot.
            /// </param>
            public static HostNameBindingInner CreateOrUpdateHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBindingInner hostNameBinding, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateHostNameBindingSlotAsync(resourceGroupName, name, hostName, hostNameBinding, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Creates a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='hostNameBinding'>
            /// Binding details. This is the JSON representation of a HostNameBinding
            /// object.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create a binding for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HostNameBindingInner> CreateOrUpdateHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBindingInner hostNameBinding, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            public static void DeleteHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a hostname binding for an app.
            /// </summary>
            /// <remarks>
            /// Deletes a hostname binding for an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the binding for the production slot.
            /// </param>
            /// <param name='hostName'>
            /// Hostname in the hostname binding.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnectionInner GetHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionInner> GetHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnectionInner CreateOrUpdateHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionInner> CreateOrUpdateHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// <remarks>
            /// Removes a Hybrid Connection from this site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static void DeleteHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// <remarks>
            /// Removes a Hybrid Connection from this site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnectionInner UpdateHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </summary>
            /// <remarks>
            /// Creates a new Hybrid Connection using a Service Bus relay.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionInner> UpdateHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connectionEnvelope, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </summary>
            /// <remarks>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnectionKeyInner ListHybridConnectionKeysSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHybridConnectionKeysSlotAsync(resourceGroupName, name, namespaceName, relayName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </summary>
            /// <remarks>
            /// Gets the send key name and value for a Hybrid Connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionKeyInner> ListHybridConnectionKeysSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionKeysSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnectionInner ListHybridConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHybridConnectionsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// <remarks>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionInner> ListHybridConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// hybrid connections for the production slot.
            /// </param>
            public static RelayServiceConnectionEntityInner ListRelayServiceConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListRelayServiceConnectionsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets hybrid connections configured for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// hybrid connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RelayServiceConnectionEntityInner> ListRelayServiceConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListRelayServiceConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a hybrid connection configuration by its name.
            /// </summary>
            /// <remarks>
            /// Gets a hybrid connection configuration by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// a hybrid connection for the production slot.
            /// </param>
            public static RelayServiceConnectionEntityInner GetRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a hybrid connection configuration by its name.
            /// </summary>
            /// <remarks>
            /// Gets a hybrid connection configuration by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// a hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RelayServiceConnectionEntityInner> GetRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create or update a hybrid connection for the production slot.
            /// </param>
            public static RelayServiceConnectionEntityInner CreateOrUpdateRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, connectionEnvelope, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create or update a hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RelayServiceConnectionEntityInner> CreateOrUpdateRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a relay service connection by its name.
            /// </summary>
            /// <remarks>
            /// Deletes a relay service connection by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete a hybrid connection for the production slot.
            /// </param>
            public static void DeleteRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a relay service connection by its name.
            /// </summary>
            /// <remarks>
            /// Deletes a relay service connection by its name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete a hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create or update a hybrid connection for the production slot.
            /// </param>
            public static RelayServiceConnectionEntityInner UpdateRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, connectionEnvelope, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </summary>
            /// <remarks>
            /// Creates a new hybrid connection configuration (PUT), or updates an
            /// existing one (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='entityName'>
            /// Name of the hybrid connection configuration.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Details of the hybrid connection configuration.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// create or update a hybrid connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RelayServiceConnectionEntityInner> UpdateRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntityInner connectionEnvelope, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets the
            /// production slot instances.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInstanceInner> ListInstanceIdentifiersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceIdentifiersSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets the
            /// production slot instances.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInstanceInner>> ListInstanceIdentifiersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// The ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DeploymentInner> ListInstanceDeploymentsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceDeploymentsSlotAsync(resourceGroupName, name, slot, instanceId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API returns
            /// deployments for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// The ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DeploymentInner>> ListInstanceDeploymentsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static DeploymentInner GetInstanceDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Get a deployment by its ID for an app, a specific deployment slot, and/or
            /// a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API gets a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DeploymentInner> GetInstanceDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetInstanceDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API creates a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            public static DeploymentInner CreateInstanceDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, DeploymentInner deployment)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId, deployment), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Create a deployment for an app, a specific deployment slot, and/or a
            /// specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// ID of an existing deployment.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API creates a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='deployment'>
            /// Deployment details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DeploymentInner> CreateInstanceDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, DeploymentInner deployment, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateInstanceDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, instanceId, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            public static void DeleteInstanceDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </summary>
            /// <remarks>
            /// Delete a deployment by its ID for an app, a specific deployment slot,
            /// and/or a specific scaled-out instance.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='id'>
            /// Deployment ID.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API deletes a
            /// deployment for the production slot.
            /// </param>
            /// <param name='instanceId'>
            /// ID of a specific scaled-out instance. This is the value of the name
            /// property in the JSON response from "GET api/sites/{siteName}/instances"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteInstanceDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteInstanceDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, instanceId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. By default, this API returns information on
            /// the production slot.
            /// </param>
            public static SiteCloneabilityInner IsCloneableSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).IsCloneableSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </summary>
            /// <remarks>
            /// Shows whether an app can be cloned to another resource group or
            /// subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. By default, this API returns information on
            /// the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteCloneabilityInner> IsCloneableSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.IsCloneableSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// metric definitions of the production slot.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner> ListMetricDefinitionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricDefinitionsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// metric definitions of the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner>> ListMetricDefinitionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// metrics of the production slot.
            /// </param>
            /// <param name='details'>
            /// Specify "true" to include metric details in the response. It is "false" by
            /// default.
            /// </param>
            /// <param name='filter'>
            /// Return only metrics specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetric> ListMetricsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? details = default(bool?), string filter = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricsSlotAsync(resourceGroupName, name, slot, details, filter), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// metrics of the production slot.
            /// </param>
            /// <param name='details'>
            /// Specify "true" to include metric details in the response. It is "false" by
            /// default.
            /// </param>
            /// <param name='filter'>
            /// Return only metrics specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetric>> ListMetricsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? details = default(bool?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// network features for the production slot.
            /// </param>
            public static NetworkFeaturesInner ListNetworkFeaturesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string view, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListNetworkFeaturesSlotAsync(resourceGroupName, name, view, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets all network features used by the app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// network features for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<NetworkFeaturesInner> ListNetworkFeaturesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string view, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNetworkFeaturesSlotWithHttpMessagesAsync(resourceGroupName, name, view, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            public static string StartWebSiteNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).StartWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Start capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> StartWebSiteNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StartWebSiteNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static string StopWebSiteNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).StopWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site.
            /// </summary>
            /// <remarks>
            /// Stop ongoing capturing network packets for the site.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<string> StopWebSiteNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.StopWebSiteNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API generate
            /// a new publishing password for the production slot.
            /// </param>
            public static void GenerateNewSitePublishingPasswordSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GenerateNewSitePublishingPasswordSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Generates a new publishing password for an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API generate
            /// a new publishing password for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task GenerateNewSitePublishingPasswordSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.GenerateNewSitePublishingPasswordSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot. **** CURRENTLY UNUSED *****
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<PerfMonResponse> ListPerfMonCountersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPerfMonCountersSlotAsync(resourceGroupName, name, slot, filter), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot. **** CURRENTLY UNUSED *****
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<PerfMonResponse>> ListPerfMonCountersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets web app's event logs.
            /// </summary>
            /// <remarks>
            /// Gets web app's event logs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SitePhpErrorLogFlagInner GetSitePhpErrorLogFlagSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSitePhpErrorLogFlagSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets web app's event logs.
            /// </summary>
            /// <remarks>
            /// Gets web app's event logs.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SitePhpErrorLogFlagInner> GetSitePhpErrorLogFlagSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSitePhpErrorLogFlagSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the premier add-ons of an app.
            /// </summary>
            /// <remarks>
            /// Gets the premier add-ons of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the premier add-ons for the production slot.
            /// </param>
            public static PremierAddOnInner ListPremierAddOnsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPremierAddOnsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the premier add-ons of an app.
            /// </summary>
            /// <remarks>
            /// Gets the premier add-ons of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the premier add-ons for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PremierAddOnInner> ListPremierAddOnsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListPremierAddOnsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Gets a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the named add-on for the production slot.
            /// </param>
            public static PremierAddOnInner GetPremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Gets a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the named add-on for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PremierAddOnInner> GetPremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetPremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the named add-on for the production slot.
            /// </param>
            public static PremierAddOnInner AddPremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnInner premierAddOn, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).AddPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, premierAddOn, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a named add-on of an app.
            /// </summary>
            /// <remarks>
            /// Updates a named add-on of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='premierAddOn'>
            /// A JSON representation of the edited premier add-on.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the named add-on for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<PremierAddOnInner> AddPremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnInner premierAddOn, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.AddPremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a premier add-on from an app.
            /// </summary>
            /// <remarks>
            /// Delete a premier add-on from an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the named add-on for the production slot.
            /// </param>
            public static void DeletePremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeletePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a premier add-on from an app.
            /// </summary>
            /// <remarks>
            /// Delete a premier add-on from an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='premierAddOnName'>
            /// Add-on name.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the named add-on for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeletePremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeletePremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing profile for the production slot.
            /// </param>
            /// <param name='format'>
            /// Name of the format. Valid values are:
            /// FileZilla3
            /// WebDeploy -- default
            /// Ftp. Possible values include: 'FileZilla3', 'WebDeploy', 'Ftp'
            /// </param>
            public static System.IO.Stream ListPublishingProfileXmlWithSecretsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string format = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPublishingProfileXmlWithSecretsSlotAsync(resourceGroupName, name, slot, format), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets the publishing profile for an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the publishing profile for the production slot.
            /// </param>
            /// <param name='format'>
            /// Name of the format. Valid values are:
            /// FileZilla3
            /// WebDeploy -- default
            /// Ftp. Possible values include: 'FileZilla3', 'WebDeploy', 'Ftp'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.IO.Stream> ListPublishingProfileXmlWithSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                var _result = await operations.ListPublishingProfileXmlWithSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, format, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static RecoverResponseInner RecoverSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntityInner recoveryEntity, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).RecoverSlotAsync(resourceGroupName, name, recoveryEntity, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RecoverResponseInner> RecoverSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntityInner recoveryEntity, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.RecoverSlotWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static RecoverResponseInner BeginRecoverSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntityInner recoveryEntity, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginRecoverSlotAsync(resourceGroupName, name, recoveryEntity, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app.
            /// </summary>
            /// <remarks>
            /// Recovers a deleted web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RecoverResponseInner> BeginRecoverSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntityInner recoveryEntity, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginRecoverSlotWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </summary>
            /// <remarks>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API resets
            /// configuration settings for the production slot.
            /// </param>
            public static void ResetSlotConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ResetSlotConfigurationSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </summary>
            /// <remarks>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling the API with POST.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API resets
            /// configuration settings for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task ResetSlotConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.ResetSlotConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Restarts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Restarts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restart the production slot.
            /// </param>
            /// <param name='softRestart'>
            /// Specify true to apply the configuration settings and restarts the app only
            /// if necessary. By default, the API always restarts and reprovisions the
            /// app.
            /// </param>
            /// <param name='synchronous'>
            /// Specify true to block until the app is restarted. By default, it is set to
            /// false, and the API responds immediately (asynchronous).
            /// </param>
            public static void RestartSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).RestartSlotAsync(resourceGroupName, name, slot, softRestart, synchronous), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Restarts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// restart the production slot.
            /// </param>
            /// <param name='softRestart'>
            /// Specify true to apply the configuration settings and restarts the app only
            /// if necessary. By default, the API always restarts and reprovisions the
            /// app.
            /// </param>
            /// <param name='synchronous'>
            /// Specify true to block until the app is restarted. By default, it is set to
            /// false, and the API responds immediately (asynchronous).
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task RestartSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.RestartSlotWithHttpMessagesAsync(resourceGroupName, name, slot, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot
            /// is used as the source slot.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SlotDifferenceInner> GetSlotsDifferencesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSlotsDifferencesSlotAsync(resourceGroupName, name, slotSwapEntity, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot
            /// is used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SlotDifferenceInner>> GetSlotsDifferencesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot
            /// is used as the source slot.
            /// </param>
            public static void SwapSlotSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).SwapSlotSlotAsync(resourceGroupName, name, slotSwapEntity, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot
            /// is used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task SwapSlotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.SwapSlotSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot
            /// is used as the source slot.
            /// </param>
            public static void BeginSwapSlotSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginSwapSlotSlotAsync(resourceGroupName, name, slotSwapEntity, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. If a slot is not specified, the production slot
            /// is used as the source slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginSwapSlotSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginSwapSlotSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            /// <param name='slot'>
            /// Website Slot
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SnapshotInner> ListSnapshotsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSnapshotsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            /// <param name='slot'>
            /// Website Slot
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SnapshotInner>> ListSnapshotsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the source control configuration for the production slot.
            /// </param>
            public static SiteSourceControlInner GetSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSourceControlSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteSourceControlInner> GetSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            public static SiteSourceControlInner CreateOrUpdateSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateSourceControlSlotAsync(resourceGroupName, name, siteSourceControl, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteSourceControlInner> CreateOrUpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            public static SiteSourceControlInner BeginCreateOrUpdateSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginCreateOrUpdateSourceControlSlotAsync(resourceGroupName, name, siteSourceControl, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// update the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteSourceControlInner> BeginCreateOrUpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the source control configuration for the production slot.
            /// </param>
            public static object DeleteSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteSourceControlSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the source control configuration for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DeleteSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Starts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// start the production slot.
            /// </param>
            public static void StartSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).StartSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Starts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// start the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task StartSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.StartSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Stops an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Stops an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will stop
            /// the production slot.
            /// </param>
            public static void StopSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).StopSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Stops an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will stop
            /// the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task StopSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.StopSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sync web app repository.
            /// </summary>
            /// <remarks>
            /// Sync web app repository.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static void SyncRepositorySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).SyncRepositorySlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sync web app repository.
            /// </summary>
            /// <remarks>
            /// Sync web app repository.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task SyncRepositorySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.SyncRepositorySlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// quota information of the production slot.
            /// </param>
            /// <param name='filter'>
            /// Return only information specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsagesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListUsagesSlotAsync(resourceGroupName, name, slot, filter), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// quota information of the production slot.
            /// </param>
            /// <param name='filter'>
            /// Return only information specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListUsagesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </summary>
            /// <remarks>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// virtual network connections for the production slot.
            /// </param>
            public static System.Collections.Generic.IList<VnetInfoInner> ListVnetConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListVnetConnectionsSlotAsync(resourceGroupName, name, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </summary>
            /// <remarks>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// virtual network connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VnetInfoInner>> ListVnetConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListVnetConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </summary>
            /// <remarks>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the named virtual network for the production slot.
            /// </param>
            public static VnetInfoInner GetVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </summary>
            /// <remarks>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// the named virtual network for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetInfoInner> GetVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            public static VnetInfoInner CreateOrUpdateVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateVnetConnectionSlotAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetInfoInner> CreateOrUpdateVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </summary>
            /// <remarks>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the connection for the production slot.
            /// </param>
            public static void DeleteVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </summary>
            /// <remarks>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will
            /// delete the connection for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            public static VnetInfoInner UpdateVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateVnetConnectionSlotAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update connections for the production slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetInfoInner> UpdateVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an app's Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Gets an app's Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// a gateway for the production slot's Virtual Network.
            /// </param>
            public static VnetGatewayInner GetVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an app's Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Gets an app's Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will get
            /// a gateway for the production slot's Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetGatewayInner> GetVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update a gateway for the production slot's Virtual Network.
            /// </param>
            public static VnetGatewayInner CreateOrUpdateVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update a gateway for the production slot's Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetGatewayInner> CreateOrUpdateVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update a gateway for the production slot's Virtual Network.
            /// </param>
            public static VnetGatewayInner UpdateVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, string slot)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// Name of the deployment slot. If a slot is not specified, the API will add
            /// or update a gateway for the production slot's Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetGatewayInner> UpdateVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, string slot, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SlotDifferenceInner> GetSlotsDifferencesFromProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSlotsDifferencesFromProductionAsync(resourceGroupName, name, slotSwapEntity), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SlotDifferenceInner>> GetSlotsDifferencesFromProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesFromProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            public static void SwapSlotWithProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).SwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task SwapSlotWithProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.SwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            public static void BeginSwapSlotWithProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginSwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps two deployment slots of an app.
            /// </summary>
            /// <remarks>
            /// Swaps two deployment slots of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='slotSwapEntity'>
            /// JSON object that contains the target slot name. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginSwapSlotWithProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntityInner slotSwapEntity, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginSwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SnapshotInner> ListSnapshots(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSnapshotsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SnapshotInner>> ListSnapshotsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static SiteSourceControlInner GetSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSourceControlAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Gets the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteSourceControlInner> GetSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            public static SiteSourceControlInner CreateOrUpdateSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateSourceControlAsync(resourceGroupName, name, siteSourceControl), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteSourceControlInner> CreateOrUpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            public static SiteSourceControlInner BeginCreateOrUpdateSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginCreateOrUpdateSourceControlAsync(resourceGroupName, name, siteSourceControl), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Updates the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='siteSourceControl'>
            /// JSON representation of a SiteSourceControl object. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<SiteSourceControlInner> BeginCreateOrUpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControlInner siteSourceControl, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static object DeleteSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteSourceControlAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the source control configuration of an app.
            /// </summary>
            /// <remarks>
            /// Deletes the source control configuration of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<object> DeleteSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.DeleteSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Starts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void Start(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).StartAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Starts an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task StartAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.StartWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Stops an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Stops an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static void Stop(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).StopAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Stops an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task StopAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.StopWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Sync web app repository.
            /// </summary>
            /// <remarks>
            /// Sync web app repository.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static void SyncRepository(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).SyncRepositoryAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sync web app repository.
            /// </summary>
            /// <remarks>
            /// Sync web app repository.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task SyncRepositoryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.SyncRepositoryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='filter'>
            /// Return only information specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsages(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListUsagesAsync(resourceGroupName, name, filter), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='filter'>
            /// Return only information specified in the filter (using OData syntax). For
            /// example: $filter=(name.value eq 'Metric1' or name.value eq 'Metric2') and
            /// startTime eq '2014-01-01T00:00:00Z' and endTime eq '2014-12-31T23:59:59Z'
            /// and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </summary>
            /// <remarks>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            public static System.Collections.Generic.IList<VnetInfoInner> ListVnetConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListVnetConnectionsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </summary>
            /// <remarks>
            /// Gets the virtual networks the app (or deployment slot) is connected to.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VnetInfoInner>> ListVnetConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListVnetConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </summary>
            /// <remarks>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            public static VnetInfoInner GetVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetVnetConnectionAsync(resourceGroupName, name, vnetName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </summary>
            /// <remarks>
            /// Gets a virtual network the app (or deployment slot) is connected to by
            /// name.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetInfoInner> GetVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            public static VnetInfoInner CreateOrUpdateVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetInfoInner> CreateOrUpdateVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </summary>
            /// <remarks>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            public static void DeleteVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteVnetConnectionAsync(resourceGroupName, name, vnetName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </summary>
            /// <remarks>
            /// Deletes a connection from an app (or deployment slot to a named virtual
            /// network.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            public static VnetInfoInner UpdateVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a Virtual Network connection to an app or slot (PUT) or updates the
            /// connection properties (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of an existing Virtual Network.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Properties of the Virtual Network connection. See example.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetInfoInner> UpdateVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfoInner connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an app's Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Gets an app's Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            public static VnetGatewayInner GetVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an app's Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Gets an app's Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetGatewayInner> GetVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            public static VnetGatewayInner CreateOrUpdateVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetGatewayInner> CreateOrUpdateVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            public static VnetGatewayInner UpdateVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </summary>
            /// <remarks>
            /// Adds a gateway to a connected Virtual Network (PUT) or updates it (PATCH).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the app.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Currently, the only supported string is "primary".
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetGatewayInner> UpdateVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInner> ListNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all apps for a subscription.
            /// </summary>
            /// <remarks>
            /// Get all apps for a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInner>> ListNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInner> ListByResourceGroupNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </summary>
            /// <remarks>
            /// Gets all web, mobile, and API apps in the specified resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInner>> ListByResourceGroupNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<BackupItemInner> ListBackupsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<BackupItemInner>> ListBackupsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListBackupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DeploymentInner> ListDeploymentsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDeploymentsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DeploymentInner>> ListDeploymentsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<IdentifierInner> ListDomainOwnershipIdentifiersNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDomainOwnershipIdentifiersNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<IdentifierInner>> ListDomainOwnershipIdentifiersNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<HostNameBindingInner> ListHostNameBindingsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHostNameBindingsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<HostNameBindingInner>> ListHostNameBindingsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInstanceInner> ListInstanceIdentifiersNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceIdentifiersNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInstanceInner>> ListInstanceIdentifiersNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DeploymentInner> ListInstanceDeploymentsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceDeploymentsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DeploymentInner>> ListInstanceDeploymentsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner> ListMetricDefinitionsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricDefinitionsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner>> ListMetricDefinitionsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetric> ListMetricsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetric>> ListMetricsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<PerfMonResponse> ListPerfMonCountersNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPerfMonCountersNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<PerfMonResponse>> ListPerfMonCountersNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an app's deployment slots.
            /// </summary>
            /// <remarks>
            /// Gets an app's deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInner> ListSlotsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSlotsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an app's deployment slots.
            /// </summary>
            /// <remarks>
            /// Gets an app's deployment slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInner>> ListSlotsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSlotsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<BackupItemInner> ListBackupsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupsSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets existing backups of an app.
            /// </summary>
            /// <remarks>
            /// Gets existing backups of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<BackupItemInner>> ListBackupsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListBackupsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DeploymentInner> ListDeploymentsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDeploymentsSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DeploymentInner>> ListDeploymentsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<IdentifierInner> ListDomainOwnershipIdentifiersSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDomainOwnershipIdentifiersSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists ownership identifiers for domain associated with web app.
            /// </summary>
            /// <remarks>
            /// Lists ownership identifiers for domain associated with web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<IdentifierInner>> ListDomainOwnershipIdentifiersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListDomainOwnershipIdentifiersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<HostNameBindingInner> ListHostNameBindingsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHostNameBindingsSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get hostname bindings for an app or a deployment slot.
            /// </summary>
            /// <remarks>
            /// Get hostname bindings for an app or a deployment slot.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<HostNameBindingInner>> ListHostNameBindingsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInstanceInner> ListInstanceIdentifiersSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceIdentifiersSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all scale-out instances of an app.
            /// </summary>
            /// <remarks>
            /// Gets all scale-out instances of an app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInstanceInner>> ListInstanceIdentifiersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DeploymentInner> ListInstanceDeploymentsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceDeploymentsSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </summary>
            /// <remarks>
            /// List deployments for an app, or a deployment slot, or for an instance of a
            /// scaled-out app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DeploymentInner>> ListInstanceDeploymentsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner> ListMetricDefinitionsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricDefinitionsSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets all metric definitions of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner>> ListMetricDefinitionsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetric> ListMetricsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricsSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </summary>
            /// <remarks>
            /// Gets performance metrics of an app (or deployment slot, if specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetric>> ListMetricsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<PerfMonResponse> ListPerfMonCountersSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPerfMonCountersSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app.
            /// </summary>
            /// <remarks>
            /// Gets perfmon counters for web app.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<PerfMonResponse>> ListPerfMonCountersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SlotDifferenceInner> GetSlotsDifferencesSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSlotsDifferencesSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SlotDifferenceInner>> GetSlotsDifferencesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SnapshotInner> ListSnapshotsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSnapshotsSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SnapshotInner>> ListSnapshotsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsagesSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListUsagesSlotNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListUsagesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SlotDifferenceInner> GetSlotsDifferencesFromProductionNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSlotsDifferencesFromProductionNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots.
            /// </summary>
            /// <remarks>
            /// Get the difference in configuration settings between two web app slots.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SlotDifferenceInner>> GetSlotsDifferencesFromProductionNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesFromProductionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SnapshotInner> ListSnapshotsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSnapshotsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// <remarks>
            /// Returns all Snapshots to the user.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SnapshotInner>> ListSnapshotsNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<CsmUsageQuota> ListUsagesNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListUsagesNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </summary>
            /// <remarks>
            /// Gets the quota usage information of an app (or deployment slot, if
            /// specified).
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<CsmUsageQuota>> ListUsagesNextAsync(this IWebAppsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
