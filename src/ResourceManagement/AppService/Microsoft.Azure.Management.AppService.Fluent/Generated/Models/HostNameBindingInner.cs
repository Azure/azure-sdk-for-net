// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent.Models
{
    using System.Linq;

    /// <summary>
    /// A hostname binding object.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class HostNameBindingInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the HostNameBindingInner class.
        /// </summary>
        public HostNameBindingInner() { }

        /// <summary>
        /// Initializes a new instance of the HostNameBindingInner class.
        /// </summary>
        /// <param name="hostNameBindingName">Hostname.</param>
        /// <param name="siteName">App Service app name.</param>
        /// <param name="domainId">Fully qualified ARM domain resource
        /// URI.</param>
        /// <param name="azureResourceName">Azure resource name.</param>
        /// <param name="azureResourceType">Azure resource type. Possible
        /// values include: 'Website', 'TrafficManager'</param>
        /// <param name="customHostNameDnsRecordType">Custom DNS record type.
        /// Possible values include: 'CName', 'A'</param>
        /// <param name="hostNameType">Hostname type. Possible values include:
        /// 'Verified', 'Managed'</param>
        public HostNameBindingInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string hostNameBindingName = default(string), string siteName = default(string), string domainId = default(string), string azureResourceName = default(string), AzureResourceType? azureResourceType = default(AzureResourceType?), CustomHostNameDnsRecordType? customHostNameDnsRecordType = default(CustomHostNameDnsRecordType?), HostNameType? hostNameType = default(HostNameType?))
            : base(location, id, name, type, tags)
        {
            HostNameBindingName = hostNameBindingName;
            SiteName = siteName;
            DomainId = domainId;
            AzureResourceName = azureResourceName;
            AzureResourceType = azureResourceType;
            CustomHostNameDnsRecordType = customHostNameDnsRecordType;
            HostNameType = hostNameType;
        }

        /// <summary>
        /// Gets or sets hostname.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.name")]
        public string HostNameBindingName { get; set; }

        /// <summary>
        /// Gets or sets app Service app name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.siteName")]
        public string SiteName { get; set; }

        /// <summary>
        /// Gets or sets fully qualified ARM domain resource URI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.domainId")]
        public string DomainId { get; set; }

        /// <summary>
        /// Gets or sets azure resource name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.azureResourceName")]
        public string AzureResourceName { get; set; }

        /// <summary>
        /// Gets or sets azure resource type. Possible values include:
        /// 'Website', 'TrafficManager'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.azureResourceType")]
        public AzureResourceType? AzureResourceType { get; set; }

        /// <summary>
        /// Gets or sets custom DNS record type. Possible values include:
        /// 'CName', 'A'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customHostNameDnsRecordType")]
        public CustomHostNameDnsRecordType? CustomHostNameDnsRecordType { get; set; }

        /// <summary>
        /// Gets or sets hostname type. Possible values include: 'Verified',
        /// 'Managed'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostNameType")]
        public HostNameType? HostNameType { get; set; }

    }
}
