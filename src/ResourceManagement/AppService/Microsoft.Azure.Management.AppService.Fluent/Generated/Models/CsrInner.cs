// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.AppService;
    using Microsoft.Azure.Management.AppService.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Certificate signing request.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class CsrInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the CsrInner class.
        /// </summary>
        public CsrInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CsrInner class.
        /// </summary>
        /// <param name="csrName">Name used to locate CSR object.</param>
        /// <param name="distinguishedName">Distinguished name of certificate
        /// to be created.</param>
        /// <param name="csrString">Actual CSR string created.</param>
        /// <param name="pfxBlob">PFX certifcate of created
        /// certificate.</param>
        /// <param name="password">PFX password.</param>
        /// <param name="publicKeyHash">Hash of the certificate's public
        /// key.</param>
        /// <param name="hostingEnvironment">App Service Environment.</param>
        public CsrInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string csrName = default(string), string distinguishedName = default(string), string csrString = default(string), string pfxBlob = default(string), string password = default(string), string publicKeyHash = default(string), string hostingEnvironment = default(string))
            : base(location, id, name, type, tags)
        {
            CsrName = csrName;
            DistinguishedName = distinguishedName;
            CsrString = csrString;
            PfxBlob = pfxBlob;
            Password = password;
            PublicKeyHash = publicKeyHash;
            HostingEnvironment = hostingEnvironment;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name used to locate CSR object.
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string CsrName { get; set; }

        /// <summary>
        /// Gets or sets distinguished name of certificate to be created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.distinguishedName")]
        public string DistinguishedName { get; set; }

        /// <summary>
        /// Gets or sets actual CSR string created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.csrString")]
        public string CsrString { get; set; }

        /// <summary>
        /// Gets or sets PFX certifcate of created certificate.
        /// </summary>
        [JsonProperty(PropertyName = "properties.pfxBlob")]
        public string PfxBlob { get; set; }

        /// <summary>
        /// Gets or sets PFX password.
        /// </summary>
        [JsonProperty(PropertyName = "properties.password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets hash of the certificate's public key.
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicKeyHash")]
        public string PublicKeyHash { get; set; }

        /// <summary>
        /// Gets or sets app Service Environment.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostingEnvironment")]
        public string HostingEnvironment { get; set; }

    }
}
