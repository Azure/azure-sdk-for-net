// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent.Models
{
    using System.Linq;

    /// <summary>
    /// Information about a domain.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DomainInner : Microsoft.Azure.Management.Resource.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the DomainInner class.
        /// </summary>
        public DomainInner() { }

        /// <summary>
        /// Initializes a new instance of the DomainInner class.
        /// </summary>
        /// <param name="contactAdmin">Administrative contact.</param>
        /// <param name="contactBilling">Billing contact.</param>
        /// <param name="contactRegistrant">Registrant contact.</param>
        /// <param name="contactTech">Technical contact.</param>
        /// <param name="registrationStatus">Domain registration status.
        /// Possible values include: 'Active', 'Awaiting', 'Cancelled',
        /// 'Confiscated', 'Disabled', 'Excluded', 'Expired', 'Failed',
        /// 'Held', 'Locked', 'Parked', 'Pending', 'Reserved', 'Reverted',
        /// 'Suspended', 'Transferred', 'Unknown', 'Unlocked', 'Unparked',
        /// 'Updated', 'JsonConverterFailed'</param>
        /// <param name="provisioningState">Domain provisioning state.
        /// Possible values include: 'Succeeded', 'Failed', 'Canceled',
        /// 'InProgress', 'Deleting'</param>
        /// <param name="nameServers">Name servers.</param>
        /// <param name="privacy"><code>true</code> if domain privacy is
        /// enabled for this domain; otherwise, <code>false</code>.</param>
        /// <param name="createdTime">Domain creation timestamp.</param>
        /// <param name="expirationTime">Domain expiration timestamp.</param>
        /// <param name="lastRenewedTime">Timestamp when the domain was
        /// renewed last time.</param>
        /// <param name="autoRenew"><code>true</code> if the domain should be
        /// automatically renewed; otherwise, <code>false</code>.</param>
        /// <param name="readyForDnsRecordManagement"><code>true</code> if
        /// Azure can assign this domain to App Service apps; otherwise,
        /// <code>false</code>. This value will be <code>true</code> if
        /// domain registration status is active and
        /// it is hosted on name servers Azure has programmatic access
        /// to.</param>
        /// <param name="managedHostNames">All hostnames derived from the
        /// domain and assigned to Azure resources.</param>
        /// <param name="consent">Legal agreement consent.</param>
        /// <param name="domainNotRenewableReasons">Reasons why domain is not
        /// renewable.</param>
        public DomainInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Contact contactAdmin = default(Contact), Contact contactBilling = default(Contact), Contact contactRegistrant = default(Contact), Contact contactTech = default(Contact), DomainStatus? registrationStatus = default(DomainStatus?), ProvisioningState? provisioningState = default(ProvisioningState?), System.Collections.Generic.IList<string> nameServers = default(System.Collections.Generic.IList<string>), bool? privacy = default(bool?), System.DateTime? createdTime = default(System.DateTime?), System.DateTime? expirationTime = default(System.DateTime?), System.DateTime? lastRenewedTime = default(System.DateTime?), bool? autoRenew = default(bool?), bool? readyForDnsRecordManagement = default(bool?), System.Collections.Generic.IList<HostName> managedHostNames = default(System.Collections.Generic.IList<HostName>), DomainPurchaseConsent consent = default(DomainPurchaseConsent), System.Collections.Generic.IList<string> domainNotRenewableReasons = default(System.Collections.Generic.IList<string>))
            : base(location, id, name, type, tags)
        {
            ContactAdmin = contactAdmin;
            ContactBilling = contactBilling;
            ContactRegistrant = contactRegistrant;
            ContactTech = contactTech;
            RegistrationStatus = registrationStatus;
            ProvisioningState = provisioningState;
            NameServers = nameServers;
            Privacy = privacy;
            CreatedTime = createdTime;
            ExpirationTime = expirationTime;
            LastRenewedTime = lastRenewedTime;
            AutoRenew = autoRenew;
            ReadyForDnsRecordManagement = readyForDnsRecordManagement;
            ManagedHostNames = managedHostNames;
            Consent = consent;
            DomainNotRenewableReasons = domainNotRenewableReasons;
        }

        /// <summary>
        /// Gets or sets administrative contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contactAdmin")]
        public Contact ContactAdmin { get; set; }

        /// <summary>
        /// Gets or sets billing contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contactBilling")]
        public Contact ContactBilling { get; set; }

        /// <summary>
        /// Gets or sets registrant contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contactRegistrant")]
        public Contact ContactRegistrant { get; set; }

        /// <summary>
        /// Gets or sets technical contact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contactTech")]
        public Contact ContactTech { get; set; }

        /// <summary>
        /// Gets domain registration status. Possible values include:
        /// 'Active', 'Awaiting', 'Cancelled', 'Confiscated', 'Disabled',
        /// 'Excluded', 'Expired', 'Failed', 'Held', 'Locked', 'Parked',
        /// 'Pending', 'Reserved', 'Reverted', 'Suspended', 'Transferred',
        /// 'Unknown', 'Unlocked', 'Unparked', 'Updated',
        /// 'JsonConverterFailed'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.registrationStatus")]
        public DomainStatus? RegistrationStatus { get; private set; }

        /// <summary>
        /// Gets domain provisioning state. Possible values include:
        /// 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets name servers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nameServers")]
        public System.Collections.Generic.IList<string> NameServers { get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if domain privacy is
        /// enabled for this domain; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privacy")]
        public bool? Privacy { get; set; }

        /// <summary>
        /// Gets domain creation timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdTime")]
        public System.DateTime? CreatedTime { get; private set; }

        /// <summary>
        /// Gets domain expiration timestamp.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.expirationTime")]
        public System.DateTime? ExpirationTime { get; private set; }

        /// <summary>
        /// Gets timestamp when the domain was renewed last time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastRenewedTime")]
        public System.DateTime? LastRenewedTime { get; private set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if the domain should be
        /// automatically renewed; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoRenew")]
        public bool? AutoRenew { get; set; }

        /// <summary>
        /// Gets &lt;code&gt;true&lt;/code&gt; if Azure can assign this domain
        /// to App Service apps; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// This value will be &lt;code&gt;true&lt;/code&gt; if domain
        /// registration status is active and
        /// it is hosted on name servers Azure has programmatic access to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.readyForDnsRecordManagement")]
        public bool? ReadyForDnsRecordManagement { get; private set; }

        /// <summary>
        /// Gets or sets all hostnames derived from the domain and assigned to
        /// Azure resources.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managedHostNames")]
        public System.Collections.Generic.IList<HostName> ManagedHostNames { get; set; }

        /// <summary>
        /// Gets or sets legal agreement consent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.consent")]
        public DomainPurchaseConsent Consent { get; set; }

        /// <summary>
        /// Gets or sets reasons why domain is not renewable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.domainNotRenewableReasons")]
        public System.Collections.Generic.IList<string> DomainNotRenewableReasons { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ContactAdmin != null)
            {
                this.ContactAdmin.Validate();
            }
            if (this.ContactBilling != null)
            {
                this.ContactBilling.Validate();
            }
            if (this.ContactRegistrant != null)
            {
                this.ContactRegistrant.Validate();
            }
            if (this.ContactTech != null)
            {
                this.ContactTech.Validate();
            }
        }
    }
}
