// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent.Models
{
    using System.Linq;

    /// <summary>
    /// SSL certificate details.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class CertificateDetailsInner : Microsoft.Azure.Management.Resource.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the CertificateDetailsInner class.
        /// </summary>
        public CertificateDetailsInner() { }

        /// <summary>
        /// Initializes a new instance of the CertificateDetailsInner class.
        /// </summary>
        /// <param name="version">Version.</param>
        /// <param name="serialNumber">Serial Number.</param>
        /// <param name="thumbprint">Thumbprint.</param>
        /// <param name="subject">Subject.</param>
        /// <param name="notBefore">Valid from.</param>
        /// <param name="notAfter">Valid to.</param>
        /// <param name="signatureAlgorithm">Signature algorithm.</param>
        /// <param name="issuer">Issuer.</param>
        /// <param name="rawData">Raw certificate data.</param>
        public CertificateDetailsInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), int? version = default(int?), string serialNumber = default(string), string thumbprint = default(string), string subject = default(string), System.DateTime? notBefore = default(System.DateTime?), System.DateTime? notAfter = default(System.DateTime?), string signatureAlgorithm = default(string), string issuer = default(string), string rawData = default(string))
            : base(location, id, name, type, tags)
        {
            Version = version;
            SerialNumber = serialNumber;
            Thumbprint = thumbprint;
            Subject = subject;
            NotBefore = notBefore;
            NotAfter = notAfter;
            SignatureAlgorithm = signatureAlgorithm;
            Issuer = issuer;
            RawData = rawData;
        }

        /// <summary>
        /// Gets version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public int? Version { get; private set; }

        /// <summary>
        /// Gets serial Number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serialNumber")]
        public string SerialNumber { get; private set; }

        /// <summary>
        /// Gets thumbprint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint { get; private set; }

        /// <summary>
        /// Gets subject.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subject")]
        public string Subject { get; private set; }

        /// <summary>
        /// Gets valid from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notBefore")]
        public System.DateTime? NotBefore { get; private set; }

        /// <summary>
        /// Gets valid to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "notAfter")]
        public System.DateTime? NotAfter { get; private set; }

        /// <summary>
        /// Gets signature algorithm.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signatureAlgorithm")]
        public string SignatureAlgorithm { get; private set; }

        /// <summary>
        /// Gets issuer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "issuer")]
        public string Issuer { get; private set; }

        /// <summary>
        /// Gets raw certificate data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rawData")]
        public string RawData { get; private set; }

    }
}
