// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.AppService;
    using Microsoft.Azure.Management.AppService.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Used for getting ResourceHealthCheck settings.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ResourceHealthMetadataInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the ResourceHealthMetadataInner
        /// class.
        /// </summary>
        public ResourceHealthMetadataInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceHealthMetadataInner
        /// class.
        /// </summary>
        /// <param name="resourceHealthMetadataId">ARM Resource Id</param>
        /// <param name="category">The category that the resource matches in
        /// the RHC Policy File</param>
        /// <param name="signalAvailability">Is there a health signal for the
        /// resource</param>
        public ResourceHealthMetadataInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string resourceHealthMetadataId = default(string), string category = default(string), bool? signalAvailability = default(bool?))
            : base(location, id, name, type, tags)
        {
            ResourceHealthMetadataId = resourceHealthMetadataId;
            Category = category;
            SignalAvailability = signalAvailability;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets ARM Resource Id
        /// </summary>
        [JsonProperty(PropertyName = "properties.id")]
        public string ResourceHealthMetadataId { get; set; }

        /// <summary>
        /// Gets or sets the category that the resource matches in the RHC
        /// Policy File
        /// </summary>
        [JsonProperty(PropertyName = "properties.category")]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets is there a health signal for the resource
        /// </summary>
        [JsonProperty(PropertyName = "properties.signalAvailability")]
        public bool? SignalAvailability { get; set; }

    }
}
