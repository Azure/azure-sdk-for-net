// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent.Models
{
    using System.Linq;

    /// <summary>
    /// SSL certificate purchase order.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class AppServiceCertificateOrderInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the AppServiceCertificateOrderInner
        /// class.
        /// </summary>
        public AppServiceCertificateOrderInner() { }

        /// <summary>
        /// Initializes a new instance of the AppServiceCertificateOrderInner
        /// class.
        /// </summary>
        /// <param name="certificates">State of the Key Vault secret.</param>
        /// <param name="distinguishedName">Certificate distinguished
        /// name.</param>
        /// <param name="domainVerificationToken">Domain verification
        /// token.</param>
        /// <param name="validityInYears">Duration in years (must be between 1
        /// and 3).</param>
        /// <param name="keySize">Certificate key size.</param>
        /// <param name="productType">Certificate product type. Possible
        /// values include: 'StandardDomainValidatedSsl',
        /// 'StandardDomainValidatedWildCardSsl'</param>
        /// <param name="autoRenew"><code>true</code> if the certificate
        /// should be automatically renewed when it expires; otherwise,
        /// <code>false</code>.</param>
        /// <param name="provisioningState">Status of certificate order.
        /// Possible values include: 'Succeeded', 'Failed', 'Canceled',
        /// 'InProgress', 'Deleting'</param>
        /// <param name="status">Current order status. Possible values
        /// include: 'Pendingissuance', 'Issued', 'Revoked', 'Canceled',
        /// 'Denied', 'Pendingrevocation', 'PendingRekey', 'Unused',
        /// 'Expired', 'NotSubmitted'</param>
        /// <param name="signedCertificate">Signed certificate.</param>
        /// <param name="csr">Last CSR that was created for this order.</param>
        /// <param name="intermediate">Intermediate certificate.</param>
        /// <param name="root">Root certificate.</param>
        /// <param name="serialNumber">Current serial number of the
        /// certificate.</param>
        /// <param name="lastCertificateIssuanceTime">Certificate last
        /// issuance time.</param>
        /// <param name="expirationTime">Certificate expiration time.</param>
        /// <param name="isPrivateKeyExternal"><code>true</code> if private
        /// key is external; otherwise, <code>false</code>.</param>
        public AppServiceCertificateOrderInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, AppServiceCertificateInner> certificates = default(System.Collections.Generic.IDictionary<string, AppServiceCertificateInner>), string distinguishedName = default(string), string domainVerificationToken = default(string), int? validityInYears = default(int?), int? keySize = default(int?), CertificateProductType? productType = default(CertificateProductType?), bool? autoRenew = default(bool?), ProvisioningState? provisioningState = default(ProvisioningState?), CertificateOrderStatus? status = default(CertificateOrderStatus?), CertificateDetailsInner signedCertificate = default(CertificateDetailsInner), string csr = default(string), CertificateDetailsInner intermediate = default(CertificateDetailsInner), CertificateDetailsInner root = default(CertificateDetailsInner), string serialNumber = default(string), System.DateTime? lastCertificateIssuanceTime = default(System.DateTime?), System.DateTime? expirationTime = default(System.DateTime?), bool? isPrivateKeyExternal = default(bool?))
            : base(location, id, name, type, tags)
        {
            Certificates = certificates;
            DistinguishedName = distinguishedName;
            DomainVerificationToken = domainVerificationToken;
            ValidityInYears = validityInYears;
            KeySize = keySize;
            ProductType = productType;
            AutoRenew = autoRenew;
            ProvisioningState = provisioningState;
            Status = status;
            SignedCertificate = signedCertificate;
            Csr = csr;
            Intermediate = intermediate;
            Root = root;
            SerialNumber = serialNumber;
            LastCertificateIssuanceTime = lastCertificateIssuanceTime;
            ExpirationTime = expirationTime;
            IsPrivateKeyExternal = isPrivateKeyExternal;
        }

        /// <summary>
        /// Gets or sets state of the Key Vault secret.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.certificates")]
        public System.Collections.Generic.IDictionary<string, AppServiceCertificateInner> Certificates { get; set; }

        /// <summary>
        /// Gets or sets certificate distinguished name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.distinguishedName")]
        public string DistinguishedName { get; set; }

        /// <summary>
        /// Gets domain verification token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.domainVerificationToken")]
        public string DomainVerificationToken { get; private set; }

        /// <summary>
        /// Gets or sets duration in years (must be between 1 and 3).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.validityInYears")]
        public int? ValidityInYears { get; set; }

        /// <summary>
        /// Gets or sets certificate key size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.keySize")]
        public int? KeySize { get; set; }

        /// <summary>
        /// Gets or sets certificate product type. Possible values include:
        /// 'StandardDomainValidatedSsl', 'StandardDomainValidatedWildCardSsl'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.productType")]
        public CertificateProductType? ProductType { get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if the certificate
        /// should be automatically renewed when it expires; otherwise,
        /// &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoRenew")]
        public bool? AutoRenew { get; set; }

        /// <summary>
        /// Gets status of certificate order. Possible values include:
        /// 'Succeeded', 'Failed', 'Canceled', 'InProgress', 'Deleting'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; private set; }

        /// <summary>
        /// Gets current order status. Possible values include:
        /// 'Pendingissuance', 'Issued', 'Revoked', 'Canceled', 'Denied',
        /// 'Pendingrevocation', 'PendingRekey', 'Unused', 'Expired',
        /// 'NotSubmitted'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public CertificateOrderStatus? Status { get; private set; }

        /// <summary>
        /// Gets signed certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.signedCertificate")]
        public CertificateDetailsInner SignedCertificate { get; private set; }

        /// <summary>
        /// Gets or sets last CSR that was created for this order.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.csr")]
        public string Csr { get; set; }

        /// <summary>
        /// Gets intermediate certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.intermediate")]
        public CertificateDetailsInner Intermediate { get; private set; }

        /// <summary>
        /// Gets root certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.root")]
        public CertificateDetailsInner Root { get; private set; }

        /// <summary>
        /// Gets current serial number of the certificate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serialNumber")]
        public string SerialNumber { get; private set; }

        /// <summary>
        /// Gets certificate last issuance time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastCertificateIssuanceTime")]
        public System.DateTime? LastCertificateIssuanceTime { get; private set; }

        /// <summary>
        /// Gets certificate expiration time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.expirationTime")]
        public System.DateTime? ExpirationTime { get; private set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; if private key is
        /// external; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isPrivateKeyExternal")]
        public bool? IsPrivateKeyExternal { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ValidityInYears > 3)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ValidityInYears", 3);
            }
            if (this.ValidityInYears < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ValidityInYears", 1);
            }
        }
    }
}
