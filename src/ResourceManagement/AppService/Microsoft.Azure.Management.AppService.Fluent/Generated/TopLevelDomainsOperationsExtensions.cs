// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for TopLevelDomainsOperations.
    /// </summary>
    public static partial class TopLevelDomainsOperationsExtensions
    {
            /// <summary>
            /// Get all top-level domains supported for registration.
            /// </summary>
            /// <remarks>
            /// Get all top-level domains supported for registration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<TopLevelDomainInner> List(this ITopLevelDomainsOperations operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITopLevelDomainsOperations)s).ListAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all top-level domains supported for registration.
            /// </summary>
            /// <remarks>
            /// Get all top-level domains supported for registration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<TopLevelDomainInner>> ListAsync(this ITopLevelDomainsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get details of a top-level domain.
            /// </summary>
            /// <remarks>
            /// Get details of a top-level domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the top-level domain.
            /// </param>
            public static TopLevelDomainInner Get(this ITopLevelDomainsOperations operations, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITopLevelDomainsOperations)s).GetAsync(name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of a top-level domain.
            /// </summary>
            /// <remarks>
            /// Get details of a top-level domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the top-level domain.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<TopLevelDomainInner> GetAsync(this ITopLevelDomainsOperations operations, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all legal agreements that user needs to accept before purchasing a
            /// domain.
            /// </summary>
            /// <remarks>
            /// Gets all legal agreements that user needs to accept before purchasing a
            /// domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the top-level domain.
            /// </param>
            /// <param name='includePrivacy'>
            /// If &lt;code&gt;true&lt;/code&gt;, then the list of agreements will include
            /// agreements for domain privacy as well; otherwise,
            /// &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<TldLegalAgreement> ListAgreements(this ITopLevelDomainsOperations operations, string name, bool? includePrivacy = default(bool?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITopLevelDomainsOperations)s).ListAgreementsAsync(name, includePrivacy), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all legal agreements that user needs to accept before purchasing a
            /// domain.
            /// </summary>
            /// <remarks>
            /// Gets all legal agreements that user needs to accept before purchasing a
            /// domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the top-level domain.
            /// </param>
            /// <param name='includePrivacy'>
            /// If &lt;code&gt;true&lt;/code&gt;, then the list of agreements will include
            /// agreements for domain privacy as well; otherwise,
            /// &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<TldLegalAgreement>> ListAgreementsAsync(this ITopLevelDomainsOperations operations, string name, bool? includePrivacy = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListAgreementsWithHttpMessagesAsync(name, includePrivacy, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all top-level domains supported for registration.
            /// </summary>
            /// <remarks>
            /// Get all top-level domains supported for registration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<TopLevelDomainInner> ListNext(this ITopLevelDomainsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITopLevelDomainsOperations)s).ListNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all top-level domains supported for registration.
            /// </summary>
            /// <remarks>
            /// Get all top-level domains supported for registration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<TopLevelDomainInner>> ListNextAsync(this ITopLevelDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all legal agreements that user needs to accept before purchasing a
            /// domain.
            /// </summary>
            /// <remarks>
            /// Gets all legal agreements that user needs to accept before purchasing a
            /// domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<TldLegalAgreement> ListAgreementsNext(this ITopLevelDomainsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((ITopLevelDomainsOperations)s).ListAgreementsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all legal agreements that user needs to accept before purchasing a
            /// domain.
            /// </summary>
            /// <remarks>
            /// Gets all legal agreements that user needs to accept before purchasing a
            /// domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<TldLegalAgreement>> ListAgreementsNextAsync(this ITopLevelDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListAgreementsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
