// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for DomainsOperations.
    /// </summary>
    public static partial class DomainsOperationsExtensions
    {
            /// <summary>
            /// Check if a domain is available for registration.
            /// </summary>
            /// <remarks>
            /// Check if a domain is available for registration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the object.
            /// </param>
            public static DomainAvailablilityCheckResultInner CheckAvailability(this IDomainsOperations operations, string name = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).CheckAvailabilityAsync(name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if a domain is available for registration.
            /// </summary>
            /// <remarks>
            /// Check if a domain is available for registration.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Name of the object.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DomainAvailablilityCheckResultInner> CheckAvailabilityAsync(this IDomainsOperations operations, string name = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CheckAvailabilityWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all domains in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all domains in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DomainInner> List(this IDomainsOperations operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).ListAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all domains in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all domains in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DomainInner>> ListAsync(this IDomainsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generate a single sign-on request for the domain management portal.
            /// </summary>
            /// <remarks>
            /// Generate a single sign-on request for the domain management portal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DomainControlCenterSsoRequestInner GetControlCenterSsoRequest(this IDomainsOperations operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).GetControlCenterSsoRequestAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generate a single sign-on request for the domain management portal.
            /// </summary>
            /// <remarks>
            /// Generate a single sign-on request for the domain management portal.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DomainControlCenterSsoRequestInner> GetControlCenterSsoRequestAsync(this IDomainsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetControlCenterSsoRequestWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get domain name recommendations based on keywords.
            /// </summary>
            /// <remarks>
            /// Get domain name recommendations based on keywords.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Search parameters for domain name recommendations.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<NameIdentifier> ListRecommendations(this IDomainsOperations operations, DomainRecommendationSearchParametersInner parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).ListRecommendationsAsync(parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get domain name recommendations based on keywords.
            /// </summary>
            /// <remarks>
            /// Get domain name recommendations based on keywords.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Search parameters for domain name recommendations.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<NameIdentifier>> ListRecommendationsAsync(this IDomainsOperations operations, DomainRecommendationSearchParametersInner parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListRecommendationsWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all domains in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all domains in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DomainInner> ListByResourceGroup(this IDomainsOperations operations, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).ListByResourceGroupAsync(resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all domains in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all domains in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DomainInner>> ListByResourceGroupAsync(this IDomainsOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a domain.
            /// </summary>
            /// <remarks>
            /// Get a domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain.
            /// </param>
            public static DomainInner Get(this IDomainsOperations operations, string resourceGroupName, string domainName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).GetAsync(resourceGroupName, domainName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a domain.
            /// </summary>
            /// <remarks>
            /// Get a domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DomainInner> GetAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, domainName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a domain.
            /// </summary>
            /// <remarks>
            /// Creates or updates a domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain.
            /// </param>
            /// <param name='domain'>
            /// Domain registration information.
            /// </param>
            public static DomainInner CreateOrUpdate(this IDomainsOperations operations, string resourceGroupName, string domainName, DomainInner domain)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).CreateOrUpdateAsync(resourceGroupName, domainName, domain), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a domain.
            /// </summary>
            /// <remarks>
            /// Creates or updates a domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain.
            /// </param>
            /// <param name='domain'>
            /// Domain registration information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DomainInner> CreateOrUpdateAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, DomainInner domain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, domainName, domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a domain.
            /// </summary>
            /// <remarks>
            /// Creates or updates a domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain.
            /// </param>
            /// <param name='domain'>
            /// Domain registration information.
            /// </param>
            public static DomainInner BeginCreateOrUpdate(this IDomainsOperations operations, string resourceGroupName, string domainName, DomainInner domain)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, domainName, domain), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a domain.
            /// </summary>
            /// <remarks>
            /// Creates or updates a domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain.
            /// </param>
            /// <param name='domain'>
            /// Domain registration information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DomainInner> BeginCreateOrUpdateAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, DomainInner domain, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, domainName, domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a domain.
            /// </summary>
            /// <remarks>
            /// Delete a domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain.
            /// </param>
            /// <param name='forceHardDeleteDomain'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to delete the domain immediately.
            /// The default is &lt;code&gt;false&lt;/code&gt; which deletes the domain
            /// after 24 hours.
            /// </param>
            public static void Delete(this IDomainsOperations operations, string resourceGroupName, string domainName, bool? forceHardDeleteDomain = default(bool?))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).DeleteAsync(resourceGroupName, domainName, forceHardDeleteDomain), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a domain.
            /// </summary>
            /// <remarks>
            /// Delete a domain.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain.
            /// </param>
            /// <param name='forceHardDeleteDomain'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to delete the domain immediately.
            /// The default is &lt;code&gt;false&lt;/code&gt; which deletes the domain
            /// after 24 hours.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, bool? forceHardDeleteDomain = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, domainName, forceHardDeleteDomain, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Lists domain ownership identifiers.
            /// </summary>
            /// <remarks>
            /// Lists domain ownership identifiers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of domain.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DomainOwnershipIdentifierInner> ListOwnershipIdentifiers(this IDomainsOperations operations, string resourceGroupName, string domainName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).ListOwnershipIdentifiersAsync(resourceGroupName, domainName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists domain ownership identifiers.
            /// </summary>
            /// <remarks>
            /// Lists domain ownership identifiers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of domain.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DomainOwnershipIdentifierInner>> ListOwnershipIdentifiersAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListOwnershipIdentifiersWithHttpMessagesAsync(resourceGroupName, domainName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get ownership identifier for domain
            /// </summary>
            /// <remarks>
            /// Get ownership identifier for domain
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of domain.
            /// </param>
            /// <param name='name'>
            /// Name of identifier.
            /// </param>
            public static DomainOwnershipIdentifierInner GetOwnershipIdentifier(this IDomainsOperations operations, string resourceGroupName, string domainName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).GetOwnershipIdentifierAsync(resourceGroupName, domainName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get ownership identifier for domain
            /// </summary>
            /// <remarks>
            /// Get ownership identifier for domain
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of domain.
            /// </param>
            /// <param name='name'>
            /// Name of identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DomainOwnershipIdentifierInner> GetOwnershipIdentifierAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, domainName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an ownership identifier for a domain or updates identifier details
            /// for an existing identifer
            /// </summary>
            /// <remarks>
            /// Creates an ownership identifier for a domain or updates identifier details
            /// for an existing identifer
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of domain.
            /// </param>
            /// <param name='name'>
            /// Name of identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            public static DomainOwnershipIdentifierInner CreateOrUpdateOwnershipIdentifier(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, DomainOwnershipIdentifierInner domainOwnershipIdentifier)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).CreateOrUpdateOwnershipIdentifierAsync(resourceGroupName, domainName, name, domainOwnershipIdentifier), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an ownership identifier for a domain or updates identifier details
            /// for an existing identifer
            /// </summary>
            /// <remarks>
            /// Creates an ownership identifier for a domain or updates identifier details
            /// for an existing identifer
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of domain.
            /// </param>
            /// <param name='name'>
            /// Name of identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DomainOwnershipIdentifierInner> CreateOrUpdateOwnershipIdentifierAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, DomainOwnershipIdentifierInner domainOwnershipIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, domainName, name, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete ownership identifier for domain
            /// </summary>
            /// <remarks>
            /// Delete ownership identifier for domain
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of domain.
            /// </param>
            /// <param name='name'>
            /// Name of identifier.
            /// </param>
            public static void DeleteOwnershipIdentifier(this IDomainsOperations operations, string resourceGroupName, string domainName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).DeleteOwnershipIdentifierAsync(resourceGroupName, domainName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete ownership identifier for domain
            /// </summary>
            /// <remarks>
            /// Delete ownership identifier for domain
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of domain.
            /// </param>
            /// <param name='name'>
            /// Name of identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteOwnershipIdentifierAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, domainName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates an ownership identifier for a domain or updates identifier details
            /// for an existing identifer
            /// </summary>
            /// <remarks>
            /// Creates an ownership identifier for a domain or updates identifier details
            /// for an existing identifer
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of domain.
            /// </param>
            /// <param name='name'>
            /// Name of identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            public static DomainOwnershipIdentifierInner UpdateOwnershipIdentifier(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, DomainOwnershipIdentifierInner domainOwnershipIdentifier)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).UpdateOwnershipIdentifierAsync(resourceGroupName, domainName, name, domainOwnershipIdentifier), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an ownership identifier for a domain or updates identifier details
            /// for an existing identifer
            /// </summary>
            /// <remarks>
            /// Creates an ownership identifier for a domain or updates identifier details
            /// for an existing identifer
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='domainName'>
            /// Name of domain.
            /// </param>
            /// <param name='name'>
            /// Name of identifier.
            /// </param>
            /// <param name='domainOwnershipIdentifier'>
            /// A JSON representation of the domain ownership properties.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DomainOwnershipIdentifierInner> UpdateOwnershipIdentifierAsync(this IDomainsOperations operations, string resourceGroupName, string domainName, string name, DomainOwnershipIdentifierInner domainOwnershipIdentifier, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateOwnershipIdentifierWithHttpMessagesAsync(resourceGroupName, domainName, name, domainOwnershipIdentifier, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all domains in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all domains in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DomainInner> ListNext(this IDomainsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).ListNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all domains in a subscription.
            /// </summary>
            /// <remarks>
            /// Get all domains in a subscription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DomainInner>> ListNextAsync(this IDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get domain name recommendations based on keywords.
            /// </summary>
            /// <remarks>
            /// Get domain name recommendations based on keywords.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<NameIdentifier> ListRecommendationsNext(this IDomainsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).ListRecommendationsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get domain name recommendations based on keywords.
            /// </summary>
            /// <remarks>
            /// Get domain name recommendations based on keywords.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<NameIdentifier>> ListRecommendationsNextAsync(this IDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListRecommendationsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all domains in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all domains in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DomainInner> ListByResourceGroupNext(this IDomainsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all domains in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all domains in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DomainInner>> ListByResourceGroupNextAsync(this IDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists domain ownership identifiers.
            /// </summary>
            /// <remarks>
            /// Lists domain ownership identifiers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DomainOwnershipIdentifierInner> ListOwnershipIdentifiersNext(this IDomainsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDomainsOperations)s).ListOwnershipIdentifiersNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists domain ownership identifiers.
            /// </summary>
            /// <remarks>
            /// Lists domain ownership identifiers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DomainOwnershipIdentifierInner>> ListOwnershipIdentifiersNextAsync(this IDomainsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListOwnershipIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
