// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.AppService.Fluent
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for AppServicePlansOperations.
    /// </summary>
    public static partial class AppServicePlansOperationsExtensions
    {
            /// <summary>
            /// Get all App Service plans for a subcription.
            /// </summary>
            /// <remarks>
            /// Get all App Service plans for a subcription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='detailed'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan
            /// properties. The default is &lt;code&gt;false&lt;/code&gt;, which returns
            /// a subset of the properties.
            /// Retrieval of all properties may increase the API latency.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<AppServicePlanInner> List(this IAppServicePlansOperations operations, bool? detailed = default(bool?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListAsync(detailed), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all App Service plans for a subcription.
            /// </summary>
            /// <remarks>
            /// Get all App Service plans for a subcription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='detailed'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to return all App Service plan
            /// properties. The default is &lt;code&gt;false&lt;/code&gt;, which returns
            /// a subset of the properties.
            /// Retrieval of all properties may increase the API latency.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<AppServicePlanInner>> ListAsync(this IAppServicePlansOperations operations, bool? detailed = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(detailed, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all App Service plans in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all App Service plans in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<AppServicePlanInner> ListByResourceGroup(this IAppServicePlansOperations operations, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListByResourceGroupAsync(resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all App Service plans in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all App Service plans in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<AppServicePlanInner>> ListByResourceGroupAsync(this IAppServicePlansOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            public static AppServicePlanInner Get(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AppServicePlanInner> GetAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an App Service Plan.
            /// </summary>
            /// <remarks>
            /// Creates or updates an App Service Plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='appServicePlan'>
            /// Details of the App Service plan.
            /// </param>
            public static AppServicePlanInner CreateOrUpdate(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlanInner appServicePlan)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).CreateOrUpdateAsync(resourceGroupName, name, appServicePlan), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an App Service Plan.
            /// </summary>
            /// <remarks>
            /// Creates or updates an App Service Plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='appServicePlan'>
            /// Details of the App Service plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AppServicePlanInner> CreateOrUpdateAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlanInner appServicePlan, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, appServicePlan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an App Service Plan.
            /// </summary>
            /// <remarks>
            /// Creates or updates an App Service Plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='appServicePlan'>
            /// Details of the App Service plan.
            /// </param>
            public static AppServicePlanInner BeginCreateOrUpdate(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlanInner appServicePlan)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, name, appServicePlan), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an App Service Plan.
            /// </summary>
            /// <remarks>
            /// Creates or updates an App Service Plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='appServicePlan'>
            /// Details of the App Service plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<AppServicePlanInner> BeginCreateOrUpdateAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlanInner appServicePlan, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, appServicePlan, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an App Service plan.
            /// </summary>
            /// <remarks>
            /// Delete an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            public static void Delete(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).DeleteAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an App Service plan.
            /// </summary>
            /// <remarks>
            /// Delete an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// List all capabilities of an App Service plan.
            /// </summary>
            /// <remarks>
            /// List all capabilities of an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            public static System.Collections.Generic.IList<CapabilityInner> ListCapabilities(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListCapabilitiesAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all capabilities of an App Service plan.
            /// </summary>
            /// <remarks>
            /// List all capabilities of an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<CapabilityInner>> ListCapabilitiesAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListCapabilitiesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve a Hybrid Connection in use in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Retrieve a Hybrid Connection in use in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Service Bus namespace.
            /// </param>
            /// <param name='relayName'>
            /// Name of the Service Bus relay.
            /// </param>
            public static HybridConnectionInner GetHybridConnection(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve a Hybrid Connection in use in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Retrieve a Hybrid Connection in use in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Service Bus namespace.
            /// </param>
            /// <param name='relayName'>
            /// Name of the Service Bus relay.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionInner> GetHybridConnectionAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Hybrid Connection in use in an App Service plan. This operation
            /// will fail if the Hybrid Connection does not already exist.
            /// </summary>
            /// <remarks>
            /// Update a Hybrid Connection in use in an App Service plan. This operation
            /// will fail if the Hybrid Connection does not already exist.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Service Bus namespace.
            /// </param>
            /// <param name='relayName'>
            /// Name of the Service Bus relay.
            /// </param>
            /// <param name='connection'>
            /// The Hybrid Connection entity.
            /// </param>
            public static HybridConnectionInner UpdateHybridConnection(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connection)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).UpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connection), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Hybrid Connection in use in an App Service plan. This operation
            /// will fail if the Hybrid Connection does not already exist.
            /// </summary>
            /// <remarks>
            /// Update a Hybrid Connection in use in an App Service plan. This operation
            /// will fail if the Hybrid Connection does not already exist.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Service Bus namespace.
            /// </param>
            /// <param name='relayName'>
            /// Name of the Service Bus relay.
            /// </param>
            /// <param name='connection'>
            /// The Hybrid Connection entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionInner> UpdateHybridConnectionAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnectionInner connection, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connection, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Hybrid Connection in use in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Delete a Hybrid Connection in use in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Service Bus namespace.
            /// </param>
            /// <param name='relayName'>
            /// Name of the Service Bus relay.
            /// </param>
            public static void DeleteHybridConnection(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).DeleteHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Hybrid Connection in use in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Delete a Hybrid Connection in use in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Service Bus namespace.
            /// </param>
            /// <param name='relayName'>
            /// Name of the Service Bus relay.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteHybridConnectionAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get the send key name and value of a Hybrid Connection.
            /// </summary>
            /// <remarks>
            /// Get the send key name and value of a Hybrid Connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='namespaceName'>
            /// The name of the Service Bus namespace.
            /// </param>
            /// <param name='relayName'>
            /// The name of the Service Bus relay.
            /// </param>
            public static HybridConnectionKeyInner ListHybridConnectionKeys(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListHybridConnectionKeysAsync(resourceGroupName, name, namespaceName, relayName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the send key name and value of a Hybrid Connection.
            /// </summary>
            /// <remarks>
            /// Get the send key name and value of a Hybrid Connection.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='namespaceName'>
            /// The name of the Service Bus namespace.
            /// </param>
            /// <param name='relayName'>
            /// The name of the Service Bus relay.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionKeyInner> ListHybridConnectionKeysAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionKeysWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all apps that use a Hybrid Connection in an App Service Plan.
            /// </summary>
            /// <remarks>
            /// Get all apps that use a Hybrid Connection in an App Service Plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Hybrid Connection namespace.
            /// </param>
            /// <param name='relayName'>
            /// Name of the Hybrid Connection relay.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<string> ListWebAppsByHybridConnection(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListWebAppsByHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all apps that use a Hybrid Connection in an App Service Plan.
            /// </summary>
            /// <remarks>
            /// Get all apps that use a Hybrid Connection in an App Service Plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='namespaceName'>
            /// Name of the Hybrid Connection namespace.
            /// </param>
            /// <param name='relayName'>
            /// Name of the Hybrid Connection relay.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<string>> ListWebAppsByHybridConnectionAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWebAppsByHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the maximum number of Hybrid Connections allowed in an App Service
            /// plan.
            /// </summary>
            /// <remarks>
            /// Get the maximum number of Hybrid Connections allowed in an App Service
            /// plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            public static HybridConnectionLimitsInner GetHybridConnectionPlanLimit(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetHybridConnectionPlanLimitAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the maximum number of Hybrid Connections allowed in an App Service
            /// plan.
            /// </summary>
            /// <remarks>
            /// Get the maximum number of Hybrid Connections allowed in an App Service
            /// plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<HybridConnectionLimitsInner> GetHybridConnectionPlanLimitAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionPlanLimitWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all Hybrid Connections in use in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Retrieve all Hybrid Connections in use in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<HybridConnectionInner> ListHybridConnections(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListHybridConnectionsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all Hybrid Connections in use in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Retrieve all Hybrid Connections in use in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<HybridConnectionInner>> ListHybridConnectionsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics that can be queried for an App Service plan, and their
            /// definitions.
            /// </summary>
            /// <remarks>
            /// Get metrics that can be queried for an App Service plan, and their
            /// definitions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner> ListMetricDefintions(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListMetricDefintionsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics that can be queried for an App Service plan, and their
            /// definitions.
            /// </summary>
            /// <remarks>
            /// Get metrics that can be queried for an App Service plan, and their
            /// definitions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner>> ListMetricDefintionsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricDefintionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for an App Serice plan.
            /// </summary>
            /// <remarks>
            /// Get metrics for an App Serice plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='details'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to include instance details. The
            /// default is &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetric> ListMetrics(this IAppServicePlansOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListMetricsAsync(resourceGroupName, name, details, filter), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for an App Serice plan.
            /// </summary>
            /// <remarks>
            /// Get metrics for an App Serice plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='details'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to include instance details. The
            /// default is &lt;code&gt;false&lt;/code&gt;.
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetric>> ListMetricsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restart all apps in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Restart all apps in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='softRestart'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to performa a soft restart, applies
            /// the configuration settings and restarts the apps if necessary. The
            /// default is &lt;code&gt;false&lt;/code&gt;, which always restarts and
            /// reprovisions the apps
            /// </param>
            public static void RestartWebApps(this IAppServicePlansOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).RestartWebAppsAsync(resourceGroupName, name, softRestart), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restart all apps in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Restart all apps in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='softRestart'>
            /// Specify &lt;code&gt;true&lt;/code&gt; to performa a soft restart, applies
            /// the configuration settings and restarts the apps if necessary. The
            /// default is &lt;code&gt;false&lt;/code&gt;, which always restarts and
            /// reprovisions the apps
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task RestartWebAppsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.RestartWebAppsWithHttpMessagesAsync(resourceGroupName, name, softRestart, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get all apps associated with an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get all apps associated with an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='skipToken'>
            /// Skip to a web app in the list of webapps associated with app service plan.
            /// If specified, the resulting list will contain web apps starting from
            /// (including) the skipToken. Otherwise, the resulting list contains web
            /// apps from the start of the list
            /// </param>
            /// <param name='filter'>
            /// Supported filter: $filter=state eq running. Returns only web apps that are
            /// currently running
            /// </param>
            /// <param name='top'>
            /// List page size. If specified, results are paged.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInner> ListWebApps(this IAppServicePlansOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListWebAppsAsync(resourceGroupName, name, skipToken, filter, top), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all apps associated with an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get all apps associated with an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='skipToken'>
            /// Skip to a web app in the list of webapps associated with app service plan.
            /// If specified, the resulting list will contain web apps starting from
            /// (including) the skipToken. Otherwise, the resulting list contains web
            /// apps from the start of the list
            /// </param>
            /// <param name='filter'>
            /// Supported filter: $filter=state eq running. Returns only web apps that are
            /// currently running
            /// </param>
            /// <param name='top'>
            /// List page size. If specified, results are paged.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInner>> ListWebAppsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWebAppsWithHttpMessagesAsync(resourceGroupName, name, skipToken, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all Virtual Networks associated with an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get all Virtual Networks associated with an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            public static System.Collections.Generic.IList<VnetInfoInner> ListVnets(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListVnetsAsync(resourceGroupName, name), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all Virtual Networks associated with an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get all Virtual Networks associated with an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VnetInfoInner>> ListVnetsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListVnetsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Virtual Network associated with an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get a Virtual Network associated with an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            public static VnetInfoInner GetVnetFromServerFarm(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetVnetFromServerFarmAsync(resourceGroupName, name, vnetName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Virtual Network associated with an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get a Virtual Network associated with an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetInfoInner> GetVnetFromServerFarmAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetVnetFromServerFarmWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Get a Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Only the 'primary' gateway is supported.
            /// </param>
            public static VnetGatewayInner GetVnetGateway(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Get a Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Only the 'primary' gateway is supported.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetGatewayInner> GetVnetGatewayAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetVnetGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update a Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Update a Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Only the 'primary' gateway is supported.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Definition of the gateway.
            /// </param>
            public static VnetGatewayInner UpdateVnetGateway(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).UpdateVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update a Virtual Network gateway.
            /// </summary>
            /// <remarks>
            /// Update a Virtual Network gateway.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Only the 'primary' gateway is supported.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// Definition of the gateway.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetGatewayInner> UpdateVnetGatewayAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGatewayInner connectionEnvelope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateVnetGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all routes that are associated with a Virtual Network in an App
            /// Service plan.
            /// </summary>
            /// <remarks>
            /// Get all routes that are associated with a Virtual Network in an App
            /// Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            public static System.Collections.Generic.IList<VnetRouteInner> ListRoutesForVnet(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListRoutesForVnetAsync(resourceGroupName, name, vnetName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all routes that are associated with a Virtual Network in an App
            /// Service plan.
            /// </summary>
            /// <remarks>
            /// Get all routes that are associated with a Virtual Network in an App
            /// Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VnetRouteInner>> ListRoutesForVnetAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListRoutesForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a Virtual Network route in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get a Virtual Network route in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='routeName'>
            /// Name of the Virtual Network route.
            /// </param>
            public static System.Collections.Generic.IList<VnetRouteInner> GetRouteForVnet(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetRouteForVnetAsync(resourceGroupName, name, vnetName, routeName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a Virtual Network route in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get a Virtual Network route in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='routeName'>
            /// Name of the Virtual Network route.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IList<VnetRouteInner>> GetRouteForVnetAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetRouteForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a Virtual Network route in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Create or update a Virtual Network route in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='routeName'>
            /// Name of the Virtual Network route.
            /// </param>
            /// <param name='route'>
            /// Definition of the Virtual Network route.
            /// </param>
            public static VnetRouteInner CreateOrUpdateVnetRoute(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRouteInner route)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).CreateOrUpdateVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Virtual Network route in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Create or update a Virtual Network route in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='routeName'>
            /// Name of the Virtual Network route.
            /// </param>
            /// <param name='route'>
            /// Definition of the Virtual Network route.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetRouteInner> CreateOrUpdateVnetRouteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRouteInner route, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a Virtual Network route in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Delete a Virtual Network route in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='routeName'>
            /// Name of the Virtual Network route.
            /// </param>
            public static void DeleteVnetRoute(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).DeleteVnetRouteAsync(resourceGroupName, name, vnetName, routeName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a Virtual Network route in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Delete a Virtual Network route in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='routeName'>
            /// Name of the Virtual Network route.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteVnetRouteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Create or update a Virtual Network route in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Create or update a Virtual Network route in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='routeName'>
            /// Name of the Virtual Network route.
            /// </param>
            /// <param name='route'>
            /// Definition of the Virtual Network route.
            /// </param>
            public static VnetRouteInner UpdateVnetRoute(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRouteInner route)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).UpdateVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a Virtual Network route in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Create or update a Virtual Network route in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='vnetName'>
            /// Name of the Virtual Network.
            /// </param>
            /// <param name='routeName'>
            /// Name of the Virtual Network route.
            /// </param>
            /// <param name='route'>
            /// Definition of the Virtual Network route.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<VnetRouteInner> UpdateVnetRouteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRouteInner route, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reboot a worker machine in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Reboot a worker machine in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='workerName'>
            /// Name of worker machine, which typically starts with RD.
            /// </param>
            public static void RebootWorker(this IAppServicePlansOperations operations, string resourceGroupName, string name, string workerName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).RebootWorkerAsync(resourceGroupName, name, workerName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reboot a worker machine in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Reboot a worker machine in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='name'>
            /// Name of the App Service plan.
            /// </param>
            /// <param name='workerName'>
            /// Name of worker machine, which typically starts with RD.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task RebootWorkerAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string workerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.RebootWorkerWithHttpMessagesAsync(resourceGroupName, name, workerName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get all App Service plans for a subcription.
            /// </summary>
            /// <remarks>
            /// Get all App Service plans for a subcription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<AppServicePlanInner> ListNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all App Service plans for a subcription.
            /// </summary>
            /// <remarks>
            /// Get all App Service plans for a subcription.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<AppServicePlanInner>> ListNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all App Service plans in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all App Service plans in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<AppServicePlanInner> ListByResourceGroupNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all App Service plans in a resource group.
            /// </summary>
            /// <remarks>
            /// Get all App Service plans in a resource group.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<AppServicePlanInner>> ListByResourceGroupNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all apps that use a Hybrid Connection in an App Service Plan.
            /// </summary>
            /// <remarks>
            /// Get all apps that use a Hybrid Connection in an App Service Plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<string> ListWebAppsByHybridConnectionNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListWebAppsByHybridConnectionNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all apps that use a Hybrid Connection in an App Service Plan.
            /// </summary>
            /// <remarks>
            /// Get all apps that use a Hybrid Connection in an App Service Plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<string>> ListWebAppsByHybridConnectionNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWebAppsByHybridConnectionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve all Hybrid Connections in use in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Retrieve all Hybrid Connections in use in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<HybridConnectionInner> ListHybridConnectionsNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListHybridConnectionsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve all Hybrid Connections in use in an App Service plan.
            /// </summary>
            /// <remarks>
            /// Retrieve all Hybrid Connections in use in an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<HybridConnectionInner>> ListHybridConnectionsNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics that can be queried for an App Service plan, and their
            /// definitions.
            /// </summary>
            /// <remarks>
            /// Get metrics that can be queried for an App Service plan, and their
            /// definitions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner> ListMetricDefintionsNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListMetricDefintionsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics that can be queried for an App Service plan, and their
            /// definitions.
            /// </summary>
            /// <remarks>
            /// Get metrics that can be queried for an App Service plan, and their
            /// definitions.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetricDefinitionInner>> ListMetricDefintionsNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricDefintionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for an App Serice plan.
            /// </summary>
            /// <remarks>
            /// Get metrics for an App Serice plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<ResourceMetric> ListMetricsNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListMetricsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for an App Serice plan.
            /// </summary>
            /// <remarks>
            /// Get metrics for an App Serice plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<ResourceMetric>> ListMetricsNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all apps associated with an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get all apps associated with an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SiteInner> ListWebAppsNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListWebAppsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all apps associated with an App Service plan.
            /// </summary>
            /// <remarks>
            /// Get all apps associated with an App Service plan.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SiteInner>> ListWebAppsNextAsync(this IAppServicePlansOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWebAppsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
