// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Analytics.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// A Data Lake Analytics catalog U-SQL table type item.
    /// </summary>
    public partial class USqlTableType : USqlType
    {
        /// <summary>
        /// Initializes a new instance of the USqlTableType class.
        /// </summary>
        public USqlTableType() { }

        /// <summary>
        /// Initializes a new instance of the USqlTableType class.
        /// </summary>
        /// <param name="computeAccountName">the name of the Data Lake Analytics account.</param>
        /// <param name="version">the version of the catalog item.</param>
        /// <param name="databaseName">the name of the database.</param>
        /// <param name="schemaName">the name of the schema associated with this table and database.</param>
        /// <param name="name">the name of type for this type.</param>
        /// <param name="typeFamily">the type family for this type.</param>
        /// <param name="cSharpName">the C# name for this type.</param>
        /// <param name="fullCSharpName">the fully qualified C# name for this type.</param>
        /// <param name="systemTypeId">the system type ID for this type.</param>
        /// <param name="userTypeId">the user type ID for this type.</param>
        /// <param name="schemaId">the schema ID for this type.</param>
        /// <param name="principalId">the principal ID for this type.</param>
        /// <param name="isNullable">the the switch indicating if this type is nullable.</param>
        /// <param name="isUserDefined">the the switch indicating if this type is user defined.</param>
        /// <param name="isAssemblyType">the the switch indicating if this type is an assembly type.</param>
        /// <param name="isTableType">the the switch indicating if this type is a table type.</param>
        /// <param name="isComplexType">the the switch indicating if this type is a complex type.</param>
        /// <param name="columns">the type field information associated with this table type.</param>
        public USqlTableType(string computeAccountName = default(string), Guid? version = default(Guid?), string databaseName = default(string), string schemaName = default(string), string name = default(string), string typeFamily = default(string), string cSharpName = default(string), string fullCSharpName = default(string), int? systemTypeId = default(int?), int? userTypeId = default(int?), int? schemaId = default(int?), int? principalId = default(int?), bool? isNullable = default(bool?), bool? isUserDefined = default(bool?), bool? isAssemblyType = default(bool?), bool? isTableType = default(bool?), bool? isComplexType = default(bool?), IList<TypeFieldInfo> columns = default(IList<TypeFieldInfo>))
            : base(computeAccountName, version, databaseName, schemaName, name, typeFamily, cSharpName, fullCSharpName, systemTypeId, userTypeId, schemaId, principalId, isNullable, isUserDefined, isAssemblyType, isTableType, isComplexType)
        {
            Columns = columns;
        }

        /// <summary>
        /// Gets the type field information associated with this table type.
        /// </summary>
        [JsonProperty(PropertyName = "columns")]
        public IList<TypeFieldInfo> Columns { get; private set; }

    }
}
