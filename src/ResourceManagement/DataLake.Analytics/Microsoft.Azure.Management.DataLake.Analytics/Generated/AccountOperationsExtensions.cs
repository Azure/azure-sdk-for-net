// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DataLake.Analytics
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for AccountOperations.
    /// </summary>
    public static partial class AccountOperationsExtensions
    {
            /// <summary>
            /// Gets the specified Azure Storage account linked to the given Data Lake
            /// Analytics account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to retrieve Azure
            /// storage account details.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure Storage account for which to retrieve the details.
            /// </param>
            public static StorageAccountInfo GetStorageAccount(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).GetStorageAccountAsync(resourceGroupName, accountName, storageAccountName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified Azure Storage account linked to the given Data Lake
            /// Analytics account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to retrieve Azure
            /// storage account details.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure Storage account for which to retrieve the details.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<StorageAccountInfo> GetStorageAccountAsync(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetStorageAccountWithHttpMessagesAsync(resourceGroupName, accountName, storageAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the specified Data Lake Analytics account to remove an Azure
            /// Storage account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to remove the Azure
            /// Storage account.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure Storage account to remove
            /// </param>
            public static void DeleteStorageAccount(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).DeleteStorageAccountAsync(resourceGroupName, accountName, storageAccountName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified Data Lake Analytics account to remove an Azure
            /// Storage account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to remove the Azure
            /// Storage account.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure Storage account to remove
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteStorageAccountAsync(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteStorageAccountWithHttpMessagesAsync(resourceGroupName, accountName, storageAccountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the Data Lake Analytics account to replace Azure Storage blob
            /// account details, such as the access key and/or suffix.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to modify storage accounts in
            /// </param>
            /// <param name='storageAccountName'>
            /// The Azure Storage account to modify
            /// </param>
            /// <param name='parameters'>
            /// The parameters containing the access key and suffix to update the storage
            /// account with.
            /// </param>
            public static void UpdateStorageAccount(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, AddStorageAccountParameters parameters)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).UpdateStorageAccountAsync(resourceGroupName, accountName, storageAccountName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Data Lake Analytics account to replace Azure Storage blob
            /// account details, such as the access key and/or suffix.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to modify storage accounts in
            /// </param>
            /// <param name='storageAccountName'>
            /// The Azure Storage account to modify
            /// </param>
            /// <param name='parameters'>
            /// The parameters containing the access key and suffix to update the storage
            /// account with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task UpdateStorageAccountAsync(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, AddStorageAccountParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.UpdateStorageAccountWithHttpMessagesAsync(resourceGroupName, accountName, storageAccountName, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the specified Data Lake Analytics account to add an Azure Storage
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to which to add the Azure
            /// Storage account.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure Storage account to add
            /// </param>
            /// <param name='parameters'>
            /// The parameters containing the access key and optional suffix for the Azure
            /// Storage Account.
            /// </param>
            public static void AddStorageAccount(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, AddStorageAccountParameters parameters)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).AddStorageAccountAsync(resourceGroupName, accountName, storageAccountName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified Data Lake Analytics account to add an Azure Storage
            /// account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to which to add the Azure
            /// Storage account.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure Storage account to add
            /// </param>
            /// <param name='parameters'>
            /// The parameters containing the access key and optional suffix for the Azure
            /// Storage Account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task AddStorageAccountAsync(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, AddStorageAccountParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.AddStorageAccountWithHttpMessagesAsync(resourceGroupName, accountName, storageAccountName, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the specified Azure Storage container associated with the given Data
            /// Lake Analytics and Azure Storage accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account for which to retrieve blob
            /// container.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure storage account from which to retrieve the blob
            /// container.
            /// </param>
            /// <param name='containerName'>
            /// The name of the Azure storage container to retrieve
            /// </param>
            public static BlobContainer GetStorageContainer(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, string containerName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).GetStorageContainerAsync(resourceGroupName, accountName, storageAccountName, containerName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified Azure Storage container associated with the given Data
            /// Lake Analytics and Azure Storage accounts.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account for which to retrieve blob
            /// container.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure storage account from which to retrieve the blob
            /// container.
            /// </param>
            /// <param name='containerName'>
            /// The name of the Azure storage container to retrieve
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<BlobContainer> GetStorageContainerAsync(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, string containerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetStorageContainerWithHttpMessagesAsync(resourceGroupName, accountName, storageAccountName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the Azure Storage containers, if any, associated with the specified
            /// Data Lake Analytics and Azure Storage account combination. The response
            /// includes a link to the next page of results, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account for which to list Azure
            /// Storage blob containers.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure storage account from which to list blob containers.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<BlobContainer> ListStorageContainers(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListStorageContainersAsync(resourceGroupName, accountName, storageAccountName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the Azure Storage containers, if any, associated with the specified
            /// Data Lake Analytics and Azure Storage account combination. The response
            /// includes a link to the next page of results, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account for which to list Azure
            /// Storage blob containers.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure storage account from which to list blob containers.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<BlobContainer>> ListStorageContainersAsync(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListStorageContainersWithHttpMessagesAsync(resourceGroupName, accountName, storageAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the SAS token associated with the specified Data Lake Analytics and
            /// Azure Storage account and container combination.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which an Azure Storage
            /// account's SAS token is being requested.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure storage account for which the SAS token is being
            /// requested.
            /// </param>
            /// <param name='containerName'>
            /// The name of the Azure storage container for which the SAS token is being
            /// requested.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SasTokenInfo> ListSasTokens(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, string containerName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListSasTokensAsync(resourceGroupName, accountName, storageAccountName, containerName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the SAS token associated with the specified Data Lake Analytics and
            /// Azure Storage account and container combination.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which an Azure Storage
            /// account's SAS token is being requested.
            /// </param>
            /// <param name='storageAccountName'>
            /// The name of the Azure storage account for which the SAS token is being
            /// requested.
            /// </param>
            /// <param name='containerName'>
            /// The name of the Azure storage container for which the SAS token is being
            /// requested.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SasTokenInfo>> ListSasTokensAsync(this IAccountOperations operations, string resourceGroupName, string accountName, string storageAccountName, string containerName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSasTokensWithHttpMessagesAsync(resourceGroupName, accountName, storageAccountName, containerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the specified Data Lake Store account details in the specified Data
            /// Lake Analytics account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to retrieve the
            /// Data Lake Store account details.
            /// </param>
            /// <param name='dataLakeStoreAccountName'>
            /// The name of the Data Lake Store account to retrieve
            /// </param>
            public static DataLakeStoreAccountInfo GetDataLakeStoreAccount(this IAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).GetDataLakeStoreAccountAsync(resourceGroupName, accountName, dataLakeStoreAccountName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified Data Lake Store account details in the specified Data
            /// Lake Analytics account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to retrieve the
            /// Data Lake Store account details.
            /// </param>
            /// <param name='dataLakeStoreAccountName'>
            /// The name of the Data Lake Store account to retrieve
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DataLakeStoreAccountInfo> GetDataLakeStoreAccountAsync(this IAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDataLakeStoreAccountWithHttpMessagesAsync(resourceGroupName, accountName, dataLakeStoreAccountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Data Lake Analytics account specified to remove the specified
            /// Data Lake Store account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to remove the Data
            /// Lake Store account.
            /// </param>
            /// <param name='dataLakeStoreAccountName'>
            /// The name of the Data Lake Store account to remove
            /// </param>
            public static void DeleteDataLakeStoreAccount(this IAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).DeleteDataLakeStoreAccountAsync(resourceGroupName, accountName, dataLakeStoreAccountName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Data Lake Analytics account specified to remove the specified
            /// Data Lake Store account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account from which to remove the Data
            /// Lake Store account.
            /// </param>
            /// <param name='dataLakeStoreAccountName'>
            /// The name of the Data Lake Store account to remove
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteDataLakeStoreAccountAsync(this IAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteDataLakeStoreAccountWithHttpMessagesAsync(resourceGroupName, accountName, dataLakeStoreAccountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Updates the specified Data Lake Analytics account to include the
            /// additional Data Lake Store account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to which to add the Data Lake
            /// Store account.
            /// </param>
            /// <param name='dataLakeStoreAccountName'>
            /// The name of the Data Lake Store account to add.
            /// </param>
            /// <param name='parameters'>
            /// The details of the Data Lake Store account.
            /// </param>
            public static void AddDataLakeStoreAccount(this IAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName, AddDataLakeStoreParameters parameters)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).AddDataLakeStoreAccountAsync(resourceGroupName, accountName, dataLakeStoreAccountName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the specified Data Lake Analytics account to include the
            /// additional Data Lake Store account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to which to add the Data Lake
            /// Store account.
            /// </param>
            /// <param name='dataLakeStoreAccountName'>
            /// The name of the Data Lake Store account to add.
            /// </param>
            /// <param name='parameters'>
            /// The details of the Data Lake Store account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task AddDataLakeStoreAccountAsync(this IAccountOperations operations, string resourceGroupName, string accountName, string dataLakeStoreAccountName, AddDataLakeStoreParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.AddDataLakeStoreAccountWithHttpMessagesAsync(resourceGroupName, accountName, dataLakeStoreAccountName, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the first page of Azure Storage accounts, if any, linked to the
            /// specified Data Lake Analytics account. The response includes a link to
            /// the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account for which to list Azure
            /// Storage accounts.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='search'>
            /// A free form search. A free-text search expression to match for whether a
            /// particular entry should be included in the feed, e.g.
            /// Categories?$search=blue OR green. Optional.
            /// </param>
            /// <param name='format'>
            /// The desired return format. Return the response in particular formatxii
            /// without access to request headers for standard content-type negotiation
            /// (e.g Orders?$format=json). Optional.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<StorageAccountInfo> ListStorageAccounts(this IAccountOperations operations, string resourceGroupName, string accountName, Microsoft.Rest.Azure.OData.ODataQuery<StorageAccountInfo> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<StorageAccountInfo>), string select = default(string), bool? count = default(bool?), string search = default(string), string format = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListStorageAccountsAsync(resourceGroupName, accountName, odataQuery, select, count, search, format), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of Azure Storage accounts, if any, linked to the
            /// specified Data Lake Analytics account. The response includes a link to
            /// the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account for which to list Azure
            /// Storage accounts.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='search'>
            /// A free form search. A free-text search expression to match for whether a
            /// particular entry should be included in the feed, e.g.
            /// Categories?$search=blue OR green. Optional.
            /// </param>
            /// <param name='format'>
            /// The desired return format. Return the response in particular formatxii
            /// without access to request headers for standard content-type negotiation
            /// (e.g Orders?$format=json). Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<StorageAccountInfo>> ListStorageAccountsAsync(this IAccountOperations operations, string resourceGroupName, string accountName, Microsoft.Rest.Azure.OData.ODataQuery<StorageAccountInfo> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<StorageAccountInfo>), string select = default(string), bool? count = default(bool?), string search = default(string), string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListStorageAccountsWithHttpMessagesAsync(resourceGroupName, accountName, odataQuery, select, count, search, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of Data Lake Store accounts linked to the specified
            /// Data Lake Analytics account. The response includes a link to the next
            /// page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account for which to list Data Lake
            /// Store accounts.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='search'>
            /// A free form search. A free-text search expression to match for whether a
            /// particular entry should be included in the feed, e.g.
            /// Categories?$search=blue OR green. Optional.
            /// </param>
            /// <param name='format'>
            /// The desired return format. Return the response in particular formatxii
            /// without access to request headers for standard content-type negotiation
            /// (e.g Orders?$format=json). Optional.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DataLakeStoreAccountInfo> ListDataLakeStoreAccounts(this IAccountOperations operations, string resourceGroupName, string accountName, Microsoft.Rest.Azure.OData.ODataQuery<DataLakeStoreAccountInfo> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DataLakeStoreAccountInfo>), string select = default(string), bool? count = default(bool?), string search = default(string), string format = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListDataLakeStoreAccountsAsync(resourceGroupName, accountName, odataQuery, select, count, search, format), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of Data Lake Store accounts linked to the specified
            /// Data Lake Analytics account. The response includes a link to the next
            /// page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account for which to list Data Lake
            /// Store accounts.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='search'>
            /// A free form search. A free-text search expression to match for whether a
            /// particular entry should be included in the feed, e.g.
            /// Categories?$search=blue OR green. Optional.
            /// </param>
            /// <param name='format'>
            /// The desired return format. Return the response in particular formatxii
            /// without access to request headers for standard content-type negotiation
            /// (e.g Orders?$format=json). Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DataLakeStoreAccountInfo>> ListDataLakeStoreAccountsAsync(this IAccountOperations operations, string resourceGroupName, string accountName, Microsoft.Rest.Azure.OData.ODataQuery<DataLakeStoreAccountInfo> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DataLakeStoreAccountInfo>), string select = default(string), bool? count = default(bool?), string search = default(string), string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListDataLakeStoreAccountsWithHttpMessagesAsync(resourceGroupName, accountName, odataQuery, select, count, search, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of Data Lake Analytics accounts, if any, within a
            /// specific resource group. This includes a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='search'>
            /// A free form search. A free-text search expression to match for whether a
            /// particular entry should be included in the feed, e.g.
            /// Categories?$search=blue OR green. Optional.
            /// </param>
            /// <param name='format'>
            /// The return format. Return the response in particular formatxii without
            /// access to request headers for standard content-type negotiation (e.g
            /// Orders?$format=json). Optional.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DataLakeAnalyticsAccount> ListByResourceGroup(this IAccountOperations operations, string resourceGroupName, Microsoft.Rest.Azure.OData.ODataQuery<DataLakeAnalyticsAccount> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DataLakeAnalyticsAccount>), string select = default(string), bool? count = default(bool?), string search = default(string), string format = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListByResourceGroupAsync(resourceGroupName, odataQuery, select, count, search, format), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of Data Lake Analytics accounts, if any, within a
            /// specific resource group. This includes a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='search'>
            /// A free form search. A free-text search expression to match for whether a
            /// particular entry should be included in the feed, e.g.
            /// Categories?$search=blue OR green. Optional.
            /// </param>
            /// <param name='format'>
            /// The return format. Return the response in particular formatxii without
            /// access to request headers for standard content-type negotiation (e.g
            /// Orders?$format=json). Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DataLakeAnalyticsAccount>> ListByResourceGroupAsync(this IAccountOperations operations, string resourceGroupName, Microsoft.Rest.Azure.OData.ODataQuery<DataLakeAnalyticsAccount> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DataLakeAnalyticsAccount>), string select = default(string), bool? count = default(bool?), string search = default(string), string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, odataQuery, select, count, search, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of Data Lake Analytics accounts, if any, within the
            /// current subscription. This includes a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='search'>
            /// A free form search. A free-text search expression to match for whether a
            /// particular entry should be included in the feed, e.g.
            /// Categories?$search=blue OR green. Optional.
            /// </param>
            /// <param name='format'>
            /// The desired return format. Return the response in particular formatxii
            /// without access to request headers for standard content-type negotiation
            /// (e.g Orders?$format=json). Optional.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DataLakeAnalyticsAccount> List(this IAccountOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<DataLakeAnalyticsAccount> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DataLakeAnalyticsAccount>), string select = default(string), bool? count = default(bool?), string search = default(string), string format = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListAsync(odataQuery, select, count, search, format), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of Data Lake Analytics accounts, if any, within the
            /// current subscription. This includes a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='select'>
            /// OData Select statement. Limits the properties on each entry to just those
            /// requested, e.g. Categories?$select=CategoryName,Description. Optional.
            /// </param>
            /// <param name='count'>
            /// The Boolean value of true or false to request a count of the matching
            /// resources included with the resources in the response, e.g.
            /// Categories?$count=true. Optional.
            /// </param>
            /// <param name='search'>
            /// A free form search. A free-text search expression to match for whether a
            /// particular entry should be included in the feed, e.g.
            /// Categories?$search=blue OR green. Optional.
            /// </param>
            /// <param name='format'>
            /// The desired return format. Return the response in particular formatxii
            /// without access to request headers for standard content-type negotiation
            /// (e.g Orders?$format=json). Optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DataLakeAnalyticsAccount>> ListAsync(this IAccountOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<DataLakeAnalyticsAccount> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DataLakeAnalyticsAccount>), string select = default(string), bool? count = default(bool?), string search = default(string), string format = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(odataQuery, select, count, search, format, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets details of the specified Data Lake Analytics account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to retrieve.
            /// </param>
            public static DataLakeAnalyticsAccount Get(this IAccountOperations operations, string resourceGroupName, string accountName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).GetAsync(resourceGroupName, accountName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details of the specified Data Lake Analytics account.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to retrieve.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DataLakeAnalyticsAccount> GetAsync(this IAccountOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Begins the delete delete process for the Data Lake Analytics account
            /// object specified by the account name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to delete
            /// </param>
            public static void Delete(this IAccountOperations operations, string resourceGroupName, string accountName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).DeleteAsync(resourceGroupName, accountName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Begins the delete delete process for the Data Lake Analytics account
            /// object specified by the account name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IAccountOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Begins the delete delete process for the Data Lake Analytics account
            /// object specified by the account name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to delete
            /// </param>
            public static void BeginDelete(this IAccountOperations operations, string resourceGroupName, string accountName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).BeginDeleteAsync(resourceGroupName, accountName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Begins the delete delete process for the Data Lake Analytics account
            /// object specified by the account name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='accountName'>
            /// The name of the Data Lake Analytics account to delete
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeleteAsync(this IAccountOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates the specified Data Lake Analytics account. This supplies the user
            /// with computation services for Data Lake Analytics workloads
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.the account will be associated with.
            /// </param>
            /// <param name='name'>
            /// The name of the Data Lake Analytics account to create.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create Data Lake Analytics account operation.
            /// </param>
            public static DataLakeAnalyticsAccount Create(this IAccountOperations operations, string resourceGroupName, string name, DataLakeAnalyticsAccount parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).CreateAsync(resourceGroupName, name, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the specified Data Lake Analytics account. This supplies the user
            /// with computation services for Data Lake Analytics workloads
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.the account will be associated with.
            /// </param>
            /// <param name='name'>
            /// The name of the Data Lake Analytics account to create.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create Data Lake Analytics account operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DataLakeAnalyticsAccount> CreateAsync(this IAccountOperations operations, string resourceGroupName, string name, DataLakeAnalyticsAccount parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, name, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates the specified Data Lake Analytics account. This supplies the user
            /// with computation services for Data Lake Analytics workloads
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.the account will be associated with.
            /// </param>
            /// <param name='name'>
            /// The name of the Data Lake Analytics account to create.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create Data Lake Analytics account operation.
            /// </param>
            public static DataLakeAnalyticsAccount BeginCreate(this IAccountOperations operations, string resourceGroupName, string name, DataLakeAnalyticsAccount parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).BeginCreateAsync(resourceGroupName, name, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates the specified Data Lake Analytics account. This supplies the user
            /// with computation services for Data Lake Analytics workloads
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.the account will be associated with.
            /// </param>
            /// <param name='name'>
            /// The name of the Data Lake Analytics account to create.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the create Data Lake Analytics account operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DataLakeAnalyticsAccount> BeginCreateAsync(this IAccountOperations operations, string resourceGroupName, string name, DataLakeAnalyticsAccount parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, name, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Data Lake Analytics account object specified by the
            /// accountName with the contents of the account object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='name'>
            /// The name of the Data Lake Analytics account to update.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the update Data Lake Analytics account operation.
            /// </param>
            public static DataLakeAnalyticsAccount Update(this IAccountOperations operations, string resourceGroupName, string name, DataLakeAnalyticsAccount parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).UpdateAsync(resourceGroupName, name, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Data Lake Analytics account object specified by the
            /// accountName with the contents of the account object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='name'>
            /// The name of the Data Lake Analytics account to update.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the update Data Lake Analytics account operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DataLakeAnalyticsAccount> UpdateAsync(this IAccountOperations operations, string resourceGroupName, string name, DataLakeAnalyticsAccount parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, name, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Data Lake Analytics account object specified by the
            /// accountName with the contents of the account object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='name'>
            /// The name of the Data Lake Analytics account to update.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the update Data Lake Analytics account operation.
            /// </param>
            public static DataLakeAnalyticsAccount BeginUpdate(this IAccountOperations operations, string resourceGroupName, string name, DataLakeAnalyticsAccount parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).BeginUpdateAsync(resourceGroupName, name, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Data Lake Analytics account object specified by the
            /// accountName with the contents of the account object.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the Azure resource group that contains the Data Lake Analytics
            /// account.
            /// </param>
            /// <param name='name'>
            /// The name of the Data Lake Analytics account to update.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the update Data Lake Analytics account operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<DataLakeAnalyticsAccount> BeginUpdateAsync(this IAccountOperations operations, string resourceGroupName, string name, DataLakeAnalyticsAccount parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, name, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the Azure Storage containers, if any, associated with the specified
            /// Data Lake Analytics and Azure Storage account combination. The response
            /// includes a link to the next page of results, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<BlobContainer> ListStorageContainersNext(this IAccountOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListStorageContainersNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the Azure Storage containers, if any, associated with the specified
            /// Data Lake Analytics and Azure Storage account combination. The response
            /// includes a link to the next page of results, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<BlobContainer>> ListStorageContainersNextAsync(this IAccountOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListStorageContainersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the SAS token associated with the specified Data Lake Analytics and
            /// Azure Storage account and container combination.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<SasTokenInfo> ListSasTokensNext(this IAccountOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListSasTokensNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the SAS token associated with the specified Data Lake Analytics and
            /// Azure Storage account and container combination.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<SasTokenInfo>> ListSasTokensNextAsync(this IAccountOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListSasTokensNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of Azure Storage accounts, if any, linked to the
            /// specified Data Lake Analytics account. The response includes a link to
            /// the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<StorageAccountInfo> ListStorageAccountsNext(this IAccountOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListStorageAccountsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of Azure Storage accounts, if any, linked to the
            /// specified Data Lake Analytics account. The response includes a link to
            /// the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<StorageAccountInfo>> ListStorageAccountsNextAsync(this IAccountOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListStorageAccountsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of Data Lake Store accounts linked to the specified
            /// Data Lake Analytics account. The response includes a link to the next
            /// page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DataLakeStoreAccountInfo> ListDataLakeStoreAccountsNext(this IAccountOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListDataLakeStoreAccountsNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of Data Lake Store accounts linked to the specified
            /// Data Lake Analytics account. The response includes a link to the next
            /// page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DataLakeStoreAccountInfo>> ListDataLakeStoreAccountsNextAsync(this IAccountOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListDataLakeStoreAccountsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of Data Lake Analytics accounts, if any, within a
            /// specific resource group. This includes a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DataLakeAnalyticsAccount> ListByResourceGroupNext(this IAccountOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of Data Lake Analytics accounts, if any, within a
            /// specific resource group. This includes a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DataLakeAnalyticsAccount>> ListByResourceGroupNextAsync(this IAccountOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of Data Lake Analytics accounts, if any, within the
            /// current subscription. This includes a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<DataLakeAnalyticsAccount> ListNext(this IAccountOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IAccountOperations)s).ListNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of Data Lake Analytics accounts, if any, within the
            /// current subscription. This includes a link to the next page, if any.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<DataLakeAnalyticsAccount>> ListNextAsync(this IAccountOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
