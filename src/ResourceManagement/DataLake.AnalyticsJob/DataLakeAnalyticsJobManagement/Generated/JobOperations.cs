// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataLake.AnalyticsJob;
using Microsoft.Azure.Management.DataLake.AnalyticsJob.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataLake.AnalyticsJob
{
    /// <summary>
    /// Operations for submitting and cancelling Data Lake Analytics jobs and
    /// retrieving their status and history
    /// </summary>
    internal partial class JobOperations : IServiceOperations<DataLakeAnalyticsJobManagementClient>, IJobOperations
    {
        /// <summary>
        /// Initializes a new instance of the JobOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal JobOperations(DataLakeAnalyticsJobManagementClient client)
        {
            this._client = client;
        }
        
        private DataLakeAnalyticsJobManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataLake.AnalyticsJob.DataLakeAnalyticsJobManagementClient.
        /// </summary>
        public DataLakeAnalyticsJobManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Builds (compiles) the specified job in the specified Data Lake
        /// Analytics account for job correctness and validation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to build the
        /// job for
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to build a job, which simulates submission.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Analytics job information response from a build or create
        /// request.
        /// </returns>
        public async Task<JobInfoBuildOrCreateResponse> BuildAsync(string resourceGroupName, string accountName, JobInfoBuildOrCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Job != null)
            {
                if (parameters.Job.Name == null)
                {
                    throw new ArgumentNullException("parameters.Job.Name");
                }
                if (parameters.Job.Properties == null)
                {
                    throw new ArgumentNullException("parameters.Job.Properties");
                }
                if (parameters.Job.Properties.Script == null)
                {
                    throw new ArgumentNullException("parameters.Job.Properties.Script");
                }
                if (parameters.Job.Type == null)
                {
                    throw new ArgumentNullException("parameters.Job.Type");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BuildAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.JobServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.JobServiceUri);
            }
            url = url + "/BuildJob";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject jobInfoBuildOrCreateParametersValue = new JObject();
                requestDoc = jobInfoBuildOrCreateParametersValue;
                
                if (parameters.Job != null)
                {
                    jobInfoBuildOrCreateParametersValue["jobId"] = parameters.Job.JobId.ToString();
                    
                    jobInfoBuildOrCreateParametersValue["name"] = parameters.Job.Name;
                    
                    jobInfoBuildOrCreateParametersValue["type"] = parameters.Job.Type;
                    
                    if (parameters.Job.Submitter != null)
                    {
                        jobInfoBuildOrCreateParametersValue["submitter"] = parameters.Job.Submitter;
                    }
                    
                    if (parameters.Job.ErrorMessage != null)
                    {
                        jobInfoBuildOrCreateParametersValue["errorMessage"] = parameters.Job.ErrorMessage;
                    }
                    
                    if (parameters.Job.DegreeOfParallelism != null)
                    {
                        jobInfoBuildOrCreateParametersValue["degreeOfParallelism"] = parameters.Job.DegreeOfParallelism.Value;
                    }
                    
                    if (parameters.Job.Priority != null)
                    {
                        jobInfoBuildOrCreateParametersValue["priority"] = parameters.Job.Priority.Value;
                    }
                    
                    if (parameters.Job.SubmitTime != null)
                    {
                        jobInfoBuildOrCreateParametersValue["submitTime"] = parameters.Job.SubmitTime.Value;
                    }
                    
                    if (parameters.Job.StartTime != null)
                    {
                        jobInfoBuildOrCreateParametersValue["startTime"] = parameters.Job.StartTime.Value;
                    }
                    
                    if (parameters.Job.EndTime != null)
                    {
                        jobInfoBuildOrCreateParametersValue["endTime"] = parameters.Job.EndTime.Value;
                    }
                    
                    if (parameters.Job.State != null)
                    {
                        jobInfoBuildOrCreateParametersValue["state"] = DataLakeAnalyticsJobManagementClient.JobStateToString(parameters.Job.State.Value);
                    }
                    
                    if (parameters.Job.Result != null)
                    {
                        jobInfoBuildOrCreateParametersValue["result"] = DataLakeAnalyticsJobManagementClient.JobResultToString(parameters.Job.Result.Value);
                    }
                    
                    if (parameters.Job.StateAuditRecords != null)
                    {
                        if (parameters.Job.StateAuditRecords is ILazyCollection == false || ((ILazyCollection)parameters.Job.StateAuditRecords).IsInitialized)
                        {
                            JArray stateAuditRecordsArray = new JArray();
                            foreach (JobStateAuditRecord stateAuditRecordsItem in parameters.Job.StateAuditRecords)
                            {
                                JObject jobStateAuditRecordValue = new JObject();
                                stateAuditRecordsArray.Add(jobStateAuditRecordValue);
                                
                                if (stateAuditRecordsItem.NewState != null)
                                {
                                    jobStateAuditRecordValue["newState"] = stateAuditRecordsItem.NewState;
                                }
                                
                                jobStateAuditRecordValue["timeStamp"] = stateAuditRecordsItem.TimeStamp;
                                
                                if (stateAuditRecordsItem.RequestedByUser != null)
                                {
                                    jobStateAuditRecordValue["requestedByUser"] = stateAuditRecordsItem.RequestedByUser;
                                }
                                
                                if (stateAuditRecordsItem.Details != null)
                                {
                                    jobStateAuditRecordValue["details"] = stateAuditRecordsItem.Details;
                                }
                            }
                            jobInfoBuildOrCreateParametersValue["stateAuditRecords"] = stateAuditRecordsArray;
                        }
                    }
                    
                    JObject propertiesValue = new JObject();
                    jobInfoBuildOrCreateParametersValue["properties"] = propertiesValue;
                    if (parameters.Job.Properties is HiveProperties)
                    {
                        propertiesValue["type"] = "Hive";
                        HiveProperties derived = ((HiveProperties)parameters.Job.Properties);
                        
                        if (derived.StatementCount != null)
                        {
                            propertiesValue["statementCount"] = derived.StatementCount.Value;
                        }
                        
                        if (derived.ExecutedStatementCount != null)
                        {
                            propertiesValue["executedStatementCount"] = derived.ExecutedStatementCount.Value;
                        }
                        
                        if (derived.LogsLocation != null)
                        {
                            propertiesValue["logsLocation"] = derived.LogsLocation;
                        }
                        
                        if (derived.StatementInfo != null)
                        {
                            if (derived.StatementInfo is ILazyCollection == false || ((ILazyCollection)derived.StatementInfo).IsInitialized)
                            {
                                JArray statementInfoArray = new JArray();
                                foreach (HiveJobStatementInfo statementInfoItem in derived.StatementInfo)
                                {
                                    JObject hiveJobStatementInfoValue = new JObject();
                                    statementInfoArray.Add(hiveJobStatementInfoValue);
                                    
                                    if (statementInfoItem.LogLocation != null)
                                    {
                                        hiveJobStatementInfoValue["logLocation"] = statementInfoItem.LogLocation;
                                    }
                                    
                                    if (statementInfoItem.ResultPreviewLocation != null)
                                    {
                                        hiveJobStatementInfoValue["resultPreviewLocation"] = statementInfoItem.ResultPreviewLocation;
                                    }
                                    
                                    if (statementInfoItem.ResultLocation != null)
                                    {
                                        hiveJobStatementInfoValue["resultLocation"] = statementInfoItem.ResultLocation;
                                    }
                                    
                                    if (statementInfoItem.ErrorMessage != null)
                                    {
                                        hiveJobStatementInfoValue["errorMessage"] = statementInfoItem.ErrorMessage;
                                    }
                                }
                                propertiesValue["statementInfo"] = statementInfoArray;
                            }
                        }
                        
                        if (derived.WarehouseLocation != null)
                        {
                            propertiesValue["warehouseLocation"] = derived.WarehouseLocation;
                        }
                        
                        if (derived.RuntimeVersion != null)
                        {
                            propertiesValue["runtimeVersion"] = derived.RuntimeVersion;
                        }
                        
                        propertiesValue["script"] = derived.Script;
                        
                        if (derived.Type != null)
                        {
                            propertiesValue["type"] = derived.Type;
                        }
                    }
                    if (parameters.Job.Properties is USqlProperties)
                    {
                        propertiesValue["type"] = "USql";
                        USqlProperties derived2 = ((USqlProperties)parameters.Job.Properties);
                        
                        if (derived2.Resources != null)
                        {
                            if (derived2.Resources is ILazyCollection == false || ((ILazyCollection)derived2.Resources).IsInitialized)
                            {
                                JArray resourcesArray = new JArray();
                                foreach (JobResource resourcesItem in derived2.Resources)
                                {
                                    JObject jobResourceValue = new JObject();
                                    resourcesArray.Add(jobResourceValue);
                                    
                                    if (resourcesItem.Name != null)
                                    {
                                        jobResourceValue["name"] = resourcesItem.Name;
                                    }
                                    
                                    if (resourcesItem.ResourcePath != null)
                                    {
                                        jobResourceValue["resourcePath"] = resourcesItem.ResourcePath;
                                    }
                                    
                                    if (resourcesItem.Type != null)
                                    {
                                        jobResourceValue["type"] = resourcesItem.Type;
                                    }
                                }
                                propertiesValue["resources"] = resourcesArray;
                            }
                        }
                        
                        if (derived2.AlgebraFilePath != null)
                        {
                            propertiesValue["algebraFilePath"] = derived2.AlgebraFilePath;
                        }
                        
                        if (derived2.TotalCompilationTime != null)
                        {
                            propertiesValue["totalCompilationTime"] = derived2.TotalCompilationTime.Value.ToString();
                        }
                        
                        if (derived2.TotalPausedTime != null)
                        {
                            propertiesValue["totalPauseTime"] = derived2.TotalPausedTime.Value.ToString();
                        }
                        
                        if (derived2.TotalQueuedTime != null)
                        {
                            propertiesValue["totalQueuedTime"] = derived2.TotalQueuedTime.Value.ToString();
                        }
                        
                        if (derived2.TotalRunningTime != null)
                        {
                            propertiesValue["totalRunningTime"] = derived2.TotalRunningTime.Value.ToString();
                        }
                        
                        if (derived2.RootProcessNodeId != null)
                        {
                            propertiesValue["rootProcessNodeId"] = derived2.RootProcessNodeId.Value.ToString();
                        }
                        
                        if (derived2.YarnApplicationId != null)
                        {
                            propertiesValue["yarnApplicationId"] = derived2.YarnApplicationId.Value;
                        }
                        
                        if (derived2.YarnApplicationTimeStamp != null)
                        {
                            propertiesValue["yarnApplicationTimeStamp"] = derived2.YarnApplicationTimeStamp.Value;
                        }
                        
                        if (derived2.CompileMode != null)
                        {
                            propertiesValue["compileMode"] = derived2.CompileMode;
                        }
                        
                        if (derived2.Diagnostics != null)
                        {
                            if (derived2.Diagnostics is ILazyCollection == false || ((ILazyCollection)derived2.Diagnostics).IsInitialized)
                            {
                                JArray diagnosticsArray = new JArray();
                                foreach (Diagnostics diagnosticsItem in derived2.Diagnostics)
                                {
                                    JObject diagnosticsValue = new JObject();
                                    diagnosticsArray.Add(diagnosticsValue);
                                    
                                    diagnosticsValue["columnNumber"] = diagnosticsItem.ColumnNumber;
                                    
                                    diagnosticsValue["end"] = diagnosticsItem.End;
                                    
                                    diagnosticsValue["lineNumber"] = diagnosticsItem.LineNumber;
                                    
                                    if (diagnosticsItem.Message != null)
                                    {
                                        diagnosticsValue["message"] = diagnosticsItem.Message;
                                    }
                                    
                                    if (diagnosticsItem.Severity != null)
                                    {
                                        diagnosticsValue["severity"] = diagnosticsItem.Severity;
                                    }
                                    
                                    diagnosticsValue["start"] = diagnosticsItem.Start;
                                }
                                propertiesValue["diagnostics"] = diagnosticsArray;
                            }
                        }
                        
                        if (derived2.RuntimeVersion != null)
                        {
                            propertiesValue["runtimeVersion"] = derived2.RuntimeVersion;
                        }
                        
                        propertiesValue["script"] = derived2.Script;
                        
                        if (derived2.Type != null)
                        {
                            propertiesValue["type"] = derived2.Type;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobInfoBuildOrCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobInfoBuildOrCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobInformation jobInstance = new JobInformation();
                            result.Job = jobInstance;
                            
                            JToken jobIdValue = responseDoc["jobId"];
                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                            {
                                Guid jobIdInstance = Guid.Parse(((string)jobIdValue));
                                jobInstance.JobId = jobIdInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                jobInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                jobInstance.Type = typeInstance;
                            }
                            
                            JToken submitterValue = responseDoc["submitter"];
                            if (submitterValue != null && submitterValue.Type != JTokenType.Null)
                            {
                                string submitterInstance = ((string)submitterValue);
                                jobInstance.Submitter = submitterInstance;
                            }
                            
                            JToken errorMessageValue = responseDoc["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                jobInstance.ErrorMessage = errorMessageInstance;
                            }
                            
                            JToken degreeOfParallelismValue = responseDoc["degreeOfParallelism"];
                            if (degreeOfParallelismValue != null && degreeOfParallelismValue.Type != JTokenType.Null)
                            {
                                int degreeOfParallelismInstance = ((int)degreeOfParallelismValue);
                                jobInstance.DegreeOfParallelism = degreeOfParallelismInstance;
                            }
                            
                            JToken priorityValue = responseDoc["priority"];
                            if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                            {
                                int priorityInstance = ((int)priorityValue);
                                jobInstance.Priority = priorityInstance;
                            }
                            
                            JToken submitTimeValue = responseDoc["submitTime"];
                            if (submitTimeValue != null && submitTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset submitTimeInstance = ((DateTimeOffset)submitTimeValue);
                                jobInstance.SubmitTime = submitTimeInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["startTime"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                jobInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken endTimeValue = responseDoc["endTime"];
                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                jobInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken stateValue = responseDoc["state"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                JobState stateInstance = DataLakeAnalyticsJobManagementClient.ParseJobState(((string)stateValue));
                                jobInstance.State = stateInstance;
                            }
                            
                            JToken resultValue = responseDoc["result"];
                            if (resultValue != null && resultValue.Type != JTokenType.Null)
                            {
                                JobResult resultInstance = DataLakeAnalyticsJobManagementClient.ParseJobResult(((string)resultValue));
                                jobInstance.Result = resultInstance;
                            }
                            
                            JToken stateAuditRecordsArray2 = responseDoc["stateAuditRecords"];
                            if (stateAuditRecordsArray2 != null && stateAuditRecordsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken stateAuditRecordsValue in ((JArray)stateAuditRecordsArray2))
                                {
                                    JobStateAuditRecord jobStateAuditRecordInstance = new JobStateAuditRecord();
                                    jobInstance.StateAuditRecords.Add(jobStateAuditRecordInstance);
                                    
                                    JToken newStateValue = stateAuditRecordsValue["newState"];
                                    if (newStateValue != null && newStateValue.Type != JTokenType.Null)
                                    {
                                        string newStateInstance = ((string)newStateValue);
                                        jobStateAuditRecordInstance.NewState = newStateInstance;
                                    }
                                    
                                    JToken timeStampValue = stateAuditRecordsValue["timeStamp"];
                                    if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset timeStampInstance = ((DateTimeOffset)timeStampValue);
                                        jobStateAuditRecordInstance.TimeStamp = timeStampInstance;
                                    }
                                    
                                    JToken requestedByUserValue = stateAuditRecordsValue["requestedByUser"];
                                    if (requestedByUserValue != null && requestedByUserValue.Type != JTokenType.Null)
                                    {
                                        string requestedByUserInstance = ((string)requestedByUserValue);
                                        jobStateAuditRecordInstance.RequestedByUser = requestedByUserInstance;
                                    }
                                    
                                    JToken detailsValue = stateAuditRecordsValue["details"];
                                    if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                    {
                                        string detailsInstance = ((string)detailsValue);
                                        jobStateAuditRecordInstance.Details = detailsInstance;
                                    }
                                }
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue2["type"]);
                                if (typeName == "Hive")
                                {
                                    HiveProperties hivePropertiesInstance = new HiveProperties();
                                    
                                    JToken statementCountValue = propertiesValue2["statementCount"];
                                    if (statementCountValue != null && statementCountValue.Type != JTokenType.Null)
                                    {
                                        int statementCountInstance = ((int)statementCountValue);
                                        hivePropertiesInstance.StatementCount = statementCountInstance;
                                    }
                                    
                                    JToken executedStatementCountValue = propertiesValue2["executedStatementCount"];
                                    if (executedStatementCountValue != null && executedStatementCountValue.Type != JTokenType.Null)
                                    {
                                        int executedStatementCountInstance = ((int)executedStatementCountValue);
                                        hivePropertiesInstance.ExecutedStatementCount = executedStatementCountInstance;
                                    }
                                    
                                    JToken logsLocationValue = propertiesValue2["logsLocation"];
                                    if (logsLocationValue != null && logsLocationValue.Type != JTokenType.Null)
                                    {
                                        string logsLocationInstance = ((string)logsLocationValue);
                                        hivePropertiesInstance.LogsLocation = logsLocationInstance;
                                    }
                                    
                                    JToken statementInfoArray2 = propertiesValue2["statementInfo"];
                                    if (statementInfoArray2 != null && statementInfoArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statementInfoValue in ((JArray)statementInfoArray2))
                                        {
                                            HiveJobStatementInfo hiveJobStatementInfoInstance = new HiveJobStatementInfo();
                                            hivePropertiesInstance.StatementInfo.Add(hiveJobStatementInfoInstance);
                                            
                                            JToken logLocationValue = statementInfoValue["logLocation"];
                                            if (logLocationValue != null && logLocationValue.Type != JTokenType.Null)
                                            {
                                                string logLocationInstance = ((string)logLocationValue);
                                                hiveJobStatementInfoInstance.LogLocation = logLocationInstance;
                                            }
                                            
                                            JToken resultPreviewLocationValue = statementInfoValue["resultPreviewLocation"];
                                            if (resultPreviewLocationValue != null && resultPreviewLocationValue.Type != JTokenType.Null)
                                            {
                                                string resultPreviewLocationInstance = ((string)resultPreviewLocationValue);
                                                hiveJobStatementInfoInstance.ResultPreviewLocation = resultPreviewLocationInstance;
                                            }
                                            
                                            JToken resultLocationValue = statementInfoValue["resultLocation"];
                                            if (resultLocationValue != null && resultLocationValue.Type != JTokenType.Null)
                                            {
                                                string resultLocationInstance = ((string)resultLocationValue);
                                                hiveJobStatementInfoInstance.ResultLocation = resultLocationInstance;
                                            }
                                            
                                            JToken errorMessageValue2 = statementInfoValue["errorMessage"];
                                            if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance2 = ((string)errorMessageValue2);
                                                hiveJobStatementInfoInstance.ErrorMessage = errorMessageInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken warehouseLocationValue = propertiesValue2["warehouseLocation"];
                                    if (warehouseLocationValue != null && warehouseLocationValue.Type != JTokenType.Null)
                                    {
                                        string warehouseLocationInstance = ((string)warehouseLocationValue);
                                        hivePropertiesInstance.WarehouseLocation = warehouseLocationInstance;
                                    }
                                    
                                    JToken runtimeVersionValue = propertiesValue2["runtimeVersion"];
                                    if (runtimeVersionValue != null && runtimeVersionValue.Type != JTokenType.Null)
                                    {
                                        string runtimeVersionInstance = ((string)runtimeVersionValue);
                                        hivePropertiesInstance.RuntimeVersion = runtimeVersionInstance;
                                    }
                                    
                                    JToken scriptValue = propertiesValue2["script"];
                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                    {
                                        string scriptInstance = ((string)scriptValue);
                                        hivePropertiesInstance.Script = scriptInstance;
                                    }
                                    
                                    JToken typeValue2 = propertiesValue2["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        hivePropertiesInstance.Type = typeInstance2;
                                    }
                                    jobInstance.Properties = hivePropertiesInstance;
                                }
                                if (typeName == "USql")
                                {
                                    USqlProperties uSqlPropertiesInstance = new USqlProperties();
                                    
                                    JToken resourcesArray2 = propertiesValue2["resources"];
                                    if (resourcesArray2 != null && resourcesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray2))
                                        {
                                            JobResource jobResourceInstance = new JobResource();
                                            uSqlPropertiesInstance.Resources.Add(jobResourceInstance);
                                            
                                            JToken nameValue2 = resourcesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                jobResourceInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken resourcePathValue = resourcesValue["resourcePath"];
                                            if (resourcePathValue != null && resourcePathValue.Type != JTokenType.Null)
                                            {
                                                string resourcePathInstance = ((string)resourcePathValue);
                                                jobResourceInstance.ResourcePath = resourcePathInstance;
                                            }
                                            
                                            JToken typeValue3 = resourcesValue["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                jobResourceInstance.Type = typeInstance3;
                                            }
                                        }
                                    }
                                    
                                    JToken algebraFilePathValue = propertiesValue2["algebraFilePath"];
                                    if (algebraFilePathValue != null && algebraFilePathValue.Type != JTokenType.Null)
                                    {
                                        string algebraFilePathInstance = ((string)algebraFilePathValue);
                                        uSqlPropertiesInstance.AlgebraFilePath = algebraFilePathInstance;
                                    }
                                    
                                    JToken totalCompilationTimeValue = propertiesValue2["totalCompilationTime"];
                                    if (totalCompilationTimeValue != null && totalCompilationTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalCompilationTimeInstance = TimeSpan.Parse(((string)totalCompilationTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalCompilationTime = totalCompilationTimeInstance;
                                    }
                                    
                                    JToken totalPauseTimeValue = propertiesValue2["totalPauseTime"];
                                    if (totalPauseTimeValue != null && totalPauseTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalPauseTimeInstance = TimeSpan.Parse(((string)totalPauseTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalPausedTime = totalPauseTimeInstance;
                                    }
                                    
                                    JToken totalQueuedTimeValue = propertiesValue2["totalQueuedTime"];
                                    if (totalQueuedTimeValue != null && totalQueuedTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalQueuedTimeInstance = TimeSpan.Parse(((string)totalQueuedTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalQueuedTime = totalQueuedTimeInstance;
                                    }
                                    
                                    JToken totalRunningTimeValue = propertiesValue2["totalRunningTime"];
                                    if (totalRunningTimeValue != null && totalRunningTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalRunningTimeInstance = TimeSpan.Parse(((string)totalRunningTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalRunningTime = totalRunningTimeInstance;
                                    }
                                    
                                    JToken rootProcessNodeIdValue = propertiesValue2["rootProcessNodeId"];
                                    if (rootProcessNodeIdValue != null && rootProcessNodeIdValue.Type != JTokenType.Null)
                                    {
                                        Guid rootProcessNodeIdInstance = Guid.Parse(((string)rootProcessNodeIdValue));
                                        uSqlPropertiesInstance.RootProcessNodeId = rootProcessNodeIdInstance;
                                    }
                                    
                                    JToken yarnApplicationIdValue = propertiesValue2["yarnApplicationId"];
                                    if (yarnApplicationIdValue != null && yarnApplicationIdValue.Type != JTokenType.Null)
                                    {
                                        int yarnApplicationIdInstance = ((int)yarnApplicationIdValue);
                                        uSqlPropertiesInstance.YarnApplicationId = yarnApplicationIdInstance;
                                    }
                                    
                                    JToken yarnApplicationTimeStampValue = propertiesValue2["yarnApplicationTimeStamp"];
                                    if (yarnApplicationTimeStampValue != null && yarnApplicationTimeStampValue.Type != JTokenType.Null)
                                    {
                                        long yarnApplicationTimeStampInstance = ((long)yarnApplicationTimeStampValue);
                                        uSqlPropertiesInstance.YarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
                                    }
                                    
                                    JToken compileModeValue = propertiesValue2["compileMode"];
                                    if (compileModeValue != null && compileModeValue.Type != JTokenType.Null)
                                    {
                                        string compileModeInstance = ((string)compileModeValue);
                                        uSqlPropertiesInstance.CompileMode = compileModeInstance;
                                    }
                                    
                                    JToken diagnosticsArray2 = propertiesValue2["diagnostics"];
                                    if (diagnosticsArray2 != null && diagnosticsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken diagnosticsValue2 in ((JArray)diagnosticsArray2))
                                        {
                                            Diagnostics diagnosticsInstance = new Diagnostics();
                                            uSqlPropertiesInstance.Diagnostics.Add(diagnosticsInstance);
                                            
                                            JToken columnNumberValue = diagnosticsValue2["columnNumber"];
                                            if (columnNumberValue != null && columnNumberValue.Type != JTokenType.Null)
                                            {
                                                int columnNumberInstance = ((int)columnNumberValue);
                                                diagnosticsInstance.ColumnNumber = columnNumberInstance;
                                            }
                                            
                                            JToken endValue = diagnosticsValue2["end"];
                                            if (endValue != null && endValue.Type != JTokenType.Null)
                                            {
                                                int endInstance = ((int)endValue);
                                                diagnosticsInstance.End = endInstance;
                                            }
                                            
                                            JToken lineNumberValue = diagnosticsValue2["lineNumber"];
                                            if (lineNumberValue != null && lineNumberValue.Type != JTokenType.Null)
                                            {
                                                int lineNumberInstance = ((int)lineNumberValue);
                                                diagnosticsInstance.LineNumber = lineNumberInstance;
                                            }
                                            
                                            JToken messageValue = diagnosticsValue2["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                diagnosticsInstance.Message = messageInstance;
                                            }
                                            
                                            JToken severityValue = diagnosticsValue2["severity"];
                                            if (severityValue != null && severityValue.Type != JTokenType.Null)
                                            {
                                                string severityInstance = ((string)severityValue);
                                                diagnosticsInstance.Severity = severityInstance;
                                            }
                                            
                                            JToken startValue = diagnosticsValue2["start"];
                                            if (startValue != null && startValue.Type != JTokenType.Null)
                                            {
                                                int startInstance = ((int)startValue);
                                                diagnosticsInstance.Start = startInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken runtimeVersionValue2 = propertiesValue2["runtimeVersion"];
                                    if (runtimeVersionValue2 != null && runtimeVersionValue2.Type != JTokenType.Null)
                                    {
                                        string runtimeVersionInstance2 = ((string)runtimeVersionValue2);
                                        uSqlPropertiesInstance.RuntimeVersion = runtimeVersionInstance2;
                                    }
                                    
                                    JToken scriptValue2 = propertiesValue2["script"];
                                    if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                    {
                                        string scriptInstance2 = ((string)scriptValue2);
                                        uSqlPropertiesInstance.Script = scriptInstance2;
                                    }
                                    
                                    JToken typeValue4 = propertiesValue2["type"];
                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                    {
                                        string typeInstance4 = ((string)typeValue4);
                                        uSqlPropertiesInstance.Type = typeInstance4;
                                    }
                                    jobInstance.Properties = uSqlPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Cancels the running job specified by the job ID.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to cancel the
        /// job for
        /// </param>
        /// <param name='jobIdentity'>
        /// Required. JobInfo ID to cancel.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CancelAsync(string resourceGroupName, string accountName, Guid jobIdentity, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("jobIdentity", jobIdentity);
                TracingAdapter.Enter(invocationId, this, "CancelAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.JobServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.JobServiceUri);
            }
            url = url + "/Jobs/";
            url = url + Uri.EscapeDataString(jobIdentity.ToString());
            url = url + "/CancelJob";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Submits the specified job to the specified Data Lake Analytics
        /// account for computation.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to create the
        /// job for
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to submit a job.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Analytics job information response from a build or create
        /// request.
        /// </returns>
        public async Task<JobInfoBuildOrCreateResponse> CreateAsync(string resourceGroupName, string accountName, JobInfoBuildOrCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Job != null)
            {
                if (parameters.Job.Name == null)
                {
                    throw new ArgumentNullException("parameters.Job.Name");
                }
                if (parameters.Job.Properties == null)
                {
                    throw new ArgumentNullException("parameters.Job.Properties");
                }
                if (parameters.Job.Properties.Script == null)
                {
                    throw new ArgumentNullException("parameters.Job.Properties.Script");
                }
                if (parameters.Job.Type == null)
                {
                    throw new ArgumentNullException("parameters.Job.Type");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.JobServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.JobServiceUri);
            }
            url = url + "/Jobs/";
            if (parameters.Job != null && parameters.Job.JobId != null)
            {
                url = url + Uri.EscapeDataString(parameters.Job.JobId.ToString());
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject jobInfoBuildOrCreateParametersValue = new JObject();
                requestDoc = jobInfoBuildOrCreateParametersValue;
                
                if (parameters.Job != null)
                {
                    jobInfoBuildOrCreateParametersValue["jobId"] = parameters.Job.JobId.ToString();
                    
                    jobInfoBuildOrCreateParametersValue["name"] = parameters.Job.Name;
                    
                    jobInfoBuildOrCreateParametersValue["type"] = parameters.Job.Type;
                    
                    if (parameters.Job.Submitter != null)
                    {
                        jobInfoBuildOrCreateParametersValue["submitter"] = parameters.Job.Submitter;
                    }
                    
                    if (parameters.Job.ErrorMessage != null)
                    {
                        jobInfoBuildOrCreateParametersValue["errorMessage"] = parameters.Job.ErrorMessage;
                    }
                    
                    if (parameters.Job.DegreeOfParallelism != null)
                    {
                        jobInfoBuildOrCreateParametersValue["degreeOfParallelism"] = parameters.Job.DegreeOfParallelism.Value;
                    }
                    
                    if (parameters.Job.Priority != null)
                    {
                        jobInfoBuildOrCreateParametersValue["priority"] = parameters.Job.Priority.Value;
                    }
                    
                    if (parameters.Job.SubmitTime != null)
                    {
                        jobInfoBuildOrCreateParametersValue["submitTime"] = parameters.Job.SubmitTime.Value;
                    }
                    
                    if (parameters.Job.StartTime != null)
                    {
                        jobInfoBuildOrCreateParametersValue["startTime"] = parameters.Job.StartTime.Value;
                    }
                    
                    if (parameters.Job.EndTime != null)
                    {
                        jobInfoBuildOrCreateParametersValue["endTime"] = parameters.Job.EndTime.Value;
                    }
                    
                    if (parameters.Job.State != null)
                    {
                        jobInfoBuildOrCreateParametersValue["state"] = DataLakeAnalyticsJobManagementClient.JobStateToString(parameters.Job.State.Value);
                    }
                    
                    if (parameters.Job.Result != null)
                    {
                        jobInfoBuildOrCreateParametersValue["result"] = DataLakeAnalyticsJobManagementClient.JobResultToString(parameters.Job.Result.Value);
                    }
                    
                    if (parameters.Job.StateAuditRecords != null)
                    {
                        if (parameters.Job.StateAuditRecords is ILazyCollection == false || ((ILazyCollection)parameters.Job.StateAuditRecords).IsInitialized)
                        {
                            JArray stateAuditRecordsArray = new JArray();
                            foreach (JobStateAuditRecord stateAuditRecordsItem in parameters.Job.StateAuditRecords)
                            {
                                JObject jobStateAuditRecordValue = new JObject();
                                stateAuditRecordsArray.Add(jobStateAuditRecordValue);
                                
                                if (stateAuditRecordsItem.NewState != null)
                                {
                                    jobStateAuditRecordValue["newState"] = stateAuditRecordsItem.NewState;
                                }
                                
                                jobStateAuditRecordValue["timeStamp"] = stateAuditRecordsItem.TimeStamp;
                                
                                if (stateAuditRecordsItem.RequestedByUser != null)
                                {
                                    jobStateAuditRecordValue["requestedByUser"] = stateAuditRecordsItem.RequestedByUser;
                                }
                                
                                if (stateAuditRecordsItem.Details != null)
                                {
                                    jobStateAuditRecordValue["details"] = stateAuditRecordsItem.Details;
                                }
                            }
                            jobInfoBuildOrCreateParametersValue["stateAuditRecords"] = stateAuditRecordsArray;
                        }
                    }
                    
                    JObject propertiesValue = new JObject();
                    jobInfoBuildOrCreateParametersValue["properties"] = propertiesValue;
                    if (parameters.Job.Properties is HiveProperties)
                    {
                        propertiesValue["type"] = "Hive";
                        HiveProperties derived = ((HiveProperties)parameters.Job.Properties);
                        
                        if (derived.StatementCount != null)
                        {
                            propertiesValue["statementCount"] = derived.StatementCount.Value;
                        }
                        
                        if (derived.ExecutedStatementCount != null)
                        {
                            propertiesValue["executedStatementCount"] = derived.ExecutedStatementCount.Value;
                        }
                        
                        if (derived.LogsLocation != null)
                        {
                            propertiesValue["logsLocation"] = derived.LogsLocation;
                        }
                        
                        if (derived.StatementInfo != null)
                        {
                            if (derived.StatementInfo is ILazyCollection == false || ((ILazyCollection)derived.StatementInfo).IsInitialized)
                            {
                                JArray statementInfoArray = new JArray();
                                foreach (HiveJobStatementInfo statementInfoItem in derived.StatementInfo)
                                {
                                    JObject hiveJobStatementInfoValue = new JObject();
                                    statementInfoArray.Add(hiveJobStatementInfoValue);
                                    
                                    if (statementInfoItem.LogLocation != null)
                                    {
                                        hiveJobStatementInfoValue["logLocation"] = statementInfoItem.LogLocation;
                                    }
                                    
                                    if (statementInfoItem.ResultPreviewLocation != null)
                                    {
                                        hiveJobStatementInfoValue["resultPreviewLocation"] = statementInfoItem.ResultPreviewLocation;
                                    }
                                    
                                    if (statementInfoItem.ResultLocation != null)
                                    {
                                        hiveJobStatementInfoValue["resultLocation"] = statementInfoItem.ResultLocation;
                                    }
                                    
                                    if (statementInfoItem.ErrorMessage != null)
                                    {
                                        hiveJobStatementInfoValue["errorMessage"] = statementInfoItem.ErrorMessage;
                                    }
                                }
                                propertiesValue["statementInfo"] = statementInfoArray;
                            }
                        }
                        
                        if (derived.WarehouseLocation != null)
                        {
                            propertiesValue["warehouseLocation"] = derived.WarehouseLocation;
                        }
                        
                        if (derived.RuntimeVersion != null)
                        {
                            propertiesValue["runtimeVersion"] = derived.RuntimeVersion;
                        }
                        
                        propertiesValue["script"] = derived.Script;
                        
                        if (derived.Type != null)
                        {
                            propertiesValue["type"] = derived.Type;
                        }
                    }
                    if (parameters.Job.Properties is USqlProperties)
                    {
                        propertiesValue["type"] = "USql";
                        USqlProperties derived2 = ((USqlProperties)parameters.Job.Properties);
                        
                        if (derived2.Resources != null)
                        {
                            if (derived2.Resources is ILazyCollection == false || ((ILazyCollection)derived2.Resources).IsInitialized)
                            {
                                JArray resourcesArray = new JArray();
                                foreach (JobResource resourcesItem in derived2.Resources)
                                {
                                    JObject jobResourceValue = new JObject();
                                    resourcesArray.Add(jobResourceValue);
                                    
                                    if (resourcesItem.Name != null)
                                    {
                                        jobResourceValue["name"] = resourcesItem.Name;
                                    }
                                    
                                    if (resourcesItem.ResourcePath != null)
                                    {
                                        jobResourceValue["resourcePath"] = resourcesItem.ResourcePath;
                                    }
                                    
                                    if (resourcesItem.Type != null)
                                    {
                                        jobResourceValue["type"] = resourcesItem.Type;
                                    }
                                }
                                propertiesValue["resources"] = resourcesArray;
                            }
                        }
                        
                        if (derived2.AlgebraFilePath != null)
                        {
                            propertiesValue["algebraFilePath"] = derived2.AlgebraFilePath;
                        }
                        
                        if (derived2.TotalCompilationTime != null)
                        {
                            propertiesValue["totalCompilationTime"] = derived2.TotalCompilationTime.Value.ToString();
                        }
                        
                        if (derived2.TotalPausedTime != null)
                        {
                            propertiesValue["totalPauseTime"] = derived2.TotalPausedTime.Value.ToString();
                        }
                        
                        if (derived2.TotalQueuedTime != null)
                        {
                            propertiesValue["totalQueuedTime"] = derived2.TotalQueuedTime.Value.ToString();
                        }
                        
                        if (derived2.TotalRunningTime != null)
                        {
                            propertiesValue["totalRunningTime"] = derived2.TotalRunningTime.Value.ToString();
                        }
                        
                        if (derived2.RootProcessNodeId != null)
                        {
                            propertiesValue["rootProcessNodeId"] = derived2.RootProcessNodeId.Value.ToString();
                        }
                        
                        if (derived2.YarnApplicationId != null)
                        {
                            propertiesValue["yarnApplicationId"] = derived2.YarnApplicationId.Value;
                        }
                        
                        if (derived2.YarnApplicationTimeStamp != null)
                        {
                            propertiesValue["yarnApplicationTimeStamp"] = derived2.YarnApplicationTimeStamp.Value;
                        }
                        
                        if (derived2.CompileMode != null)
                        {
                            propertiesValue["compileMode"] = derived2.CompileMode;
                        }
                        
                        if (derived2.Diagnostics != null)
                        {
                            if (derived2.Diagnostics is ILazyCollection == false || ((ILazyCollection)derived2.Diagnostics).IsInitialized)
                            {
                                JArray diagnosticsArray = new JArray();
                                foreach (Diagnostics diagnosticsItem in derived2.Diagnostics)
                                {
                                    JObject diagnosticsValue = new JObject();
                                    diagnosticsArray.Add(diagnosticsValue);
                                    
                                    diagnosticsValue["columnNumber"] = diagnosticsItem.ColumnNumber;
                                    
                                    diagnosticsValue["end"] = diagnosticsItem.End;
                                    
                                    diagnosticsValue["lineNumber"] = diagnosticsItem.LineNumber;
                                    
                                    if (diagnosticsItem.Message != null)
                                    {
                                        diagnosticsValue["message"] = diagnosticsItem.Message;
                                    }
                                    
                                    if (diagnosticsItem.Severity != null)
                                    {
                                        diagnosticsValue["severity"] = diagnosticsItem.Severity;
                                    }
                                    
                                    diagnosticsValue["start"] = diagnosticsItem.Start;
                                }
                                propertiesValue["diagnostics"] = diagnosticsArray;
                            }
                        }
                        
                        if (derived2.RuntimeVersion != null)
                        {
                            propertiesValue["runtimeVersion"] = derived2.RuntimeVersion;
                        }
                        
                        propertiesValue["script"] = derived2.Script;
                        
                        if (derived2.Type != null)
                        {
                            propertiesValue["type"] = derived2.Type;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobInfoBuildOrCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobInfoBuildOrCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobInformation jobInstance = new JobInformation();
                            result.Job = jobInstance;
                            
                            JToken jobIdValue = responseDoc["jobId"];
                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                            {
                                Guid jobIdInstance = Guid.Parse(((string)jobIdValue));
                                jobInstance.JobId = jobIdInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                jobInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                jobInstance.Type = typeInstance;
                            }
                            
                            JToken submitterValue = responseDoc["submitter"];
                            if (submitterValue != null && submitterValue.Type != JTokenType.Null)
                            {
                                string submitterInstance = ((string)submitterValue);
                                jobInstance.Submitter = submitterInstance;
                            }
                            
                            JToken errorMessageValue = responseDoc["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                jobInstance.ErrorMessage = errorMessageInstance;
                            }
                            
                            JToken degreeOfParallelismValue = responseDoc["degreeOfParallelism"];
                            if (degreeOfParallelismValue != null && degreeOfParallelismValue.Type != JTokenType.Null)
                            {
                                int degreeOfParallelismInstance = ((int)degreeOfParallelismValue);
                                jobInstance.DegreeOfParallelism = degreeOfParallelismInstance;
                            }
                            
                            JToken priorityValue = responseDoc["priority"];
                            if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                            {
                                int priorityInstance = ((int)priorityValue);
                                jobInstance.Priority = priorityInstance;
                            }
                            
                            JToken submitTimeValue = responseDoc["submitTime"];
                            if (submitTimeValue != null && submitTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset submitTimeInstance = ((DateTimeOffset)submitTimeValue);
                                jobInstance.SubmitTime = submitTimeInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["startTime"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                jobInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken endTimeValue = responseDoc["endTime"];
                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                jobInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken stateValue = responseDoc["state"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                JobState stateInstance = DataLakeAnalyticsJobManagementClient.ParseJobState(((string)stateValue));
                                jobInstance.State = stateInstance;
                            }
                            
                            JToken resultValue = responseDoc["result"];
                            if (resultValue != null && resultValue.Type != JTokenType.Null)
                            {
                                JobResult resultInstance = DataLakeAnalyticsJobManagementClient.ParseJobResult(((string)resultValue));
                                jobInstance.Result = resultInstance;
                            }
                            
                            JToken stateAuditRecordsArray2 = responseDoc["stateAuditRecords"];
                            if (stateAuditRecordsArray2 != null && stateAuditRecordsArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken stateAuditRecordsValue in ((JArray)stateAuditRecordsArray2))
                                {
                                    JobStateAuditRecord jobStateAuditRecordInstance = new JobStateAuditRecord();
                                    jobInstance.StateAuditRecords.Add(jobStateAuditRecordInstance);
                                    
                                    JToken newStateValue = stateAuditRecordsValue["newState"];
                                    if (newStateValue != null && newStateValue.Type != JTokenType.Null)
                                    {
                                        string newStateInstance = ((string)newStateValue);
                                        jobStateAuditRecordInstance.NewState = newStateInstance;
                                    }
                                    
                                    JToken timeStampValue = stateAuditRecordsValue["timeStamp"];
                                    if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset timeStampInstance = ((DateTimeOffset)timeStampValue);
                                        jobStateAuditRecordInstance.TimeStamp = timeStampInstance;
                                    }
                                    
                                    JToken requestedByUserValue = stateAuditRecordsValue["requestedByUser"];
                                    if (requestedByUserValue != null && requestedByUserValue.Type != JTokenType.Null)
                                    {
                                        string requestedByUserInstance = ((string)requestedByUserValue);
                                        jobStateAuditRecordInstance.RequestedByUser = requestedByUserInstance;
                                    }
                                    
                                    JToken detailsValue = stateAuditRecordsValue["details"];
                                    if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                    {
                                        string detailsInstance = ((string)detailsValue);
                                        jobStateAuditRecordInstance.Details = detailsInstance;
                                    }
                                }
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue2["type"]);
                                if (typeName == "Hive")
                                {
                                    HiveProperties hivePropertiesInstance = new HiveProperties();
                                    
                                    JToken statementCountValue = propertiesValue2["statementCount"];
                                    if (statementCountValue != null && statementCountValue.Type != JTokenType.Null)
                                    {
                                        int statementCountInstance = ((int)statementCountValue);
                                        hivePropertiesInstance.StatementCount = statementCountInstance;
                                    }
                                    
                                    JToken executedStatementCountValue = propertiesValue2["executedStatementCount"];
                                    if (executedStatementCountValue != null && executedStatementCountValue.Type != JTokenType.Null)
                                    {
                                        int executedStatementCountInstance = ((int)executedStatementCountValue);
                                        hivePropertiesInstance.ExecutedStatementCount = executedStatementCountInstance;
                                    }
                                    
                                    JToken logsLocationValue = propertiesValue2["logsLocation"];
                                    if (logsLocationValue != null && logsLocationValue.Type != JTokenType.Null)
                                    {
                                        string logsLocationInstance = ((string)logsLocationValue);
                                        hivePropertiesInstance.LogsLocation = logsLocationInstance;
                                    }
                                    
                                    JToken statementInfoArray2 = propertiesValue2["statementInfo"];
                                    if (statementInfoArray2 != null && statementInfoArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statementInfoValue in ((JArray)statementInfoArray2))
                                        {
                                            HiveJobStatementInfo hiveJobStatementInfoInstance = new HiveJobStatementInfo();
                                            hivePropertiesInstance.StatementInfo.Add(hiveJobStatementInfoInstance);
                                            
                                            JToken logLocationValue = statementInfoValue["logLocation"];
                                            if (logLocationValue != null && logLocationValue.Type != JTokenType.Null)
                                            {
                                                string logLocationInstance = ((string)logLocationValue);
                                                hiveJobStatementInfoInstance.LogLocation = logLocationInstance;
                                            }
                                            
                                            JToken resultPreviewLocationValue = statementInfoValue["resultPreviewLocation"];
                                            if (resultPreviewLocationValue != null && resultPreviewLocationValue.Type != JTokenType.Null)
                                            {
                                                string resultPreviewLocationInstance = ((string)resultPreviewLocationValue);
                                                hiveJobStatementInfoInstance.ResultPreviewLocation = resultPreviewLocationInstance;
                                            }
                                            
                                            JToken resultLocationValue = statementInfoValue["resultLocation"];
                                            if (resultLocationValue != null && resultLocationValue.Type != JTokenType.Null)
                                            {
                                                string resultLocationInstance = ((string)resultLocationValue);
                                                hiveJobStatementInfoInstance.ResultLocation = resultLocationInstance;
                                            }
                                            
                                            JToken errorMessageValue2 = statementInfoValue["errorMessage"];
                                            if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance2 = ((string)errorMessageValue2);
                                                hiveJobStatementInfoInstance.ErrorMessage = errorMessageInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken warehouseLocationValue = propertiesValue2["warehouseLocation"];
                                    if (warehouseLocationValue != null && warehouseLocationValue.Type != JTokenType.Null)
                                    {
                                        string warehouseLocationInstance = ((string)warehouseLocationValue);
                                        hivePropertiesInstance.WarehouseLocation = warehouseLocationInstance;
                                    }
                                    
                                    JToken runtimeVersionValue = propertiesValue2["runtimeVersion"];
                                    if (runtimeVersionValue != null && runtimeVersionValue.Type != JTokenType.Null)
                                    {
                                        string runtimeVersionInstance = ((string)runtimeVersionValue);
                                        hivePropertiesInstance.RuntimeVersion = runtimeVersionInstance;
                                    }
                                    
                                    JToken scriptValue = propertiesValue2["script"];
                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                    {
                                        string scriptInstance = ((string)scriptValue);
                                        hivePropertiesInstance.Script = scriptInstance;
                                    }
                                    
                                    JToken typeValue2 = propertiesValue2["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        hivePropertiesInstance.Type = typeInstance2;
                                    }
                                    jobInstance.Properties = hivePropertiesInstance;
                                }
                                if (typeName == "USql")
                                {
                                    USqlProperties uSqlPropertiesInstance = new USqlProperties();
                                    
                                    JToken resourcesArray2 = propertiesValue2["resources"];
                                    if (resourcesArray2 != null && resourcesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray2))
                                        {
                                            JobResource jobResourceInstance = new JobResource();
                                            uSqlPropertiesInstance.Resources.Add(jobResourceInstance);
                                            
                                            JToken nameValue2 = resourcesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                jobResourceInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken resourcePathValue = resourcesValue["resourcePath"];
                                            if (resourcePathValue != null && resourcePathValue.Type != JTokenType.Null)
                                            {
                                                string resourcePathInstance = ((string)resourcePathValue);
                                                jobResourceInstance.ResourcePath = resourcePathInstance;
                                            }
                                            
                                            JToken typeValue3 = resourcesValue["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                jobResourceInstance.Type = typeInstance3;
                                            }
                                        }
                                    }
                                    
                                    JToken algebraFilePathValue = propertiesValue2["algebraFilePath"];
                                    if (algebraFilePathValue != null && algebraFilePathValue.Type != JTokenType.Null)
                                    {
                                        string algebraFilePathInstance = ((string)algebraFilePathValue);
                                        uSqlPropertiesInstance.AlgebraFilePath = algebraFilePathInstance;
                                    }
                                    
                                    JToken totalCompilationTimeValue = propertiesValue2["totalCompilationTime"];
                                    if (totalCompilationTimeValue != null && totalCompilationTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalCompilationTimeInstance = TimeSpan.Parse(((string)totalCompilationTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalCompilationTime = totalCompilationTimeInstance;
                                    }
                                    
                                    JToken totalPauseTimeValue = propertiesValue2["totalPauseTime"];
                                    if (totalPauseTimeValue != null && totalPauseTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalPauseTimeInstance = TimeSpan.Parse(((string)totalPauseTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalPausedTime = totalPauseTimeInstance;
                                    }
                                    
                                    JToken totalQueuedTimeValue = propertiesValue2["totalQueuedTime"];
                                    if (totalQueuedTimeValue != null && totalQueuedTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalQueuedTimeInstance = TimeSpan.Parse(((string)totalQueuedTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalQueuedTime = totalQueuedTimeInstance;
                                    }
                                    
                                    JToken totalRunningTimeValue = propertiesValue2["totalRunningTime"];
                                    if (totalRunningTimeValue != null && totalRunningTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalRunningTimeInstance = TimeSpan.Parse(((string)totalRunningTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalRunningTime = totalRunningTimeInstance;
                                    }
                                    
                                    JToken rootProcessNodeIdValue = propertiesValue2["rootProcessNodeId"];
                                    if (rootProcessNodeIdValue != null && rootProcessNodeIdValue.Type != JTokenType.Null)
                                    {
                                        Guid rootProcessNodeIdInstance = Guid.Parse(((string)rootProcessNodeIdValue));
                                        uSqlPropertiesInstance.RootProcessNodeId = rootProcessNodeIdInstance;
                                    }
                                    
                                    JToken yarnApplicationIdValue = propertiesValue2["yarnApplicationId"];
                                    if (yarnApplicationIdValue != null && yarnApplicationIdValue.Type != JTokenType.Null)
                                    {
                                        int yarnApplicationIdInstance = ((int)yarnApplicationIdValue);
                                        uSqlPropertiesInstance.YarnApplicationId = yarnApplicationIdInstance;
                                    }
                                    
                                    JToken yarnApplicationTimeStampValue = propertiesValue2["yarnApplicationTimeStamp"];
                                    if (yarnApplicationTimeStampValue != null && yarnApplicationTimeStampValue.Type != JTokenType.Null)
                                    {
                                        long yarnApplicationTimeStampInstance = ((long)yarnApplicationTimeStampValue);
                                        uSqlPropertiesInstance.YarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
                                    }
                                    
                                    JToken compileModeValue = propertiesValue2["compileMode"];
                                    if (compileModeValue != null && compileModeValue.Type != JTokenType.Null)
                                    {
                                        string compileModeInstance = ((string)compileModeValue);
                                        uSqlPropertiesInstance.CompileMode = compileModeInstance;
                                    }
                                    
                                    JToken diagnosticsArray2 = propertiesValue2["diagnostics"];
                                    if (diagnosticsArray2 != null && diagnosticsArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken diagnosticsValue2 in ((JArray)diagnosticsArray2))
                                        {
                                            Diagnostics diagnosticsInstance = new Diagnostics();
                                            uSqlPropertiesInstance.Diagnostics.Add(diagnosticsInstance);
                                            
                                            JToken columnNumberValue = diagnosticsValue2["columnNumber"];
                                            if (columnNumberValue != null && columnNumberValue.Type != JTokenType.Null)
                                            {
                                                int columnNumberInstance = ((int)columnNumberValue);
                                                diagnosticsInstance.ColumnNumber = columnNumberInstance;
                                            }
                                            
                                            JToken endValue = diagnosticsValue2["end"];
                                            if (endValue != null && endValue.Type != JTokenType.Null)
                                            {
                                                int endInstance = ((int)endValue);
                                                diagnosticsInstance.End = endInstance;
                                            }
                                            
                                            JToken lineNumberValue = diagnosticsValue2["lineNumber"];
                                            if (lineNumberValue != null && lineNumberValue.Type != JTokenType.Null)
                                            {
                                                int lineNumberInstance = ((int)lineNumberValue);
                                                diagnosticsInstance.LineNumber = lineNumberInstance;
                                            }
                                            
                                            JToken messageValue = diagnosticsValue2["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                diagnosticsInstance.Message = messageInstance;
                                            }
                                            
                                            JToken severityValue = diagnosticsValue2["severity"];
                                            if (severityValue != null && severityValue.Type != JTokenType.Null)
                                            {
                                                string severityInstance = ((string)severityValue);
                                                diagnosticsInstance.Severity = severityInstance;
                                            }
                                            
                                            JToken startValue = diagnosticsValue2["start"];
                                            if (startValue != null && startValue.Type != JTokenType.Null)
                                            {
                                                int startInstance = ((int)startValue);
                                                diagnosticsInstance.Start = startInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken runtimeVersionValue2 = propertiesValue2["runtimeVersion"];
                                    if (runtimeVersionValue2 != null && runtimeVersionValue2.Type != JTokenType.Null)
                                    {
                                        string runtimeVersionInstance2 = ((string)runtimeVersionValue2);
                                        uSqlPropertiesInstance.RuntimeVersion = runtimeVersionInstance2;
                                    }
                                    
                                    JToken scriptValue2 = propertiesValue2["script"];
                                    if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                    {
                                        string scriptInstance2 = ((string)scriptValue2);
                                        uSqlPropertiesInstance.Script = scriptInstance2;
                                    }
                                    
                                    JToken typeValue4 = propertiesValue2["type"];
                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                    {
                                        string typeInstance4 = ((string)typeValue4);
                                        uSqlPropertiesInstance.Type = typeInstance4;
                                    }
                                    jobInstance.Properties = uSqlPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the JobInfo object specified by the job ID.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to get the
        /// job from
        /// </param>
        /// <param name='jobIdentity'>
        /// Required. JobInfo ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Analytics job information.
        /// </returns>
        public async Task<JobInfoGetResponse> GetAsync(string resourceGroupName, string accountName, Guid jobIdentity, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("jobIdentity", jobIdentity);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.JobServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.JobServiceUri);
            }
            url = url + "/Jobs/";
            url = url + Uri.EscapeDataString(jobIdentity.ToString());
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobInfoGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobInfoGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobInformation jobInstance = new JobInformation();
                            result.Job = jobInstance;
                            
                            JToken jobIdValue = responseDoc["jobId"];
                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                            {
                                Guid jobIdInstance = Guid.Parse(((string)jobIdValue));
                                jobInstance.JobId = jobIdInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                jobInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                jobInstance.Type = typeInstance;
                            }
                            
                            JToken submitterValue = responseDoc["submitter"];
                            if (submitterValue != null && submitterValue.Type != JTokenType.Null)
                            {
                                string submitterInstance = ((string)submitterValue);
                                jobInstance.Submitter = submitterInstance;
                            }
                            
                            JToken errorMessageValue = responseDoc["errorMessage"];
                            if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                            {
                                string errorMessageInstance = ((string)errorMessageValue);
                                jobInstance.ErrorMessage = errorMessageInstance;
                            }
                            
                            JToken degreeOfParallelismValue = responseDoc["degreeOfParallelism"];
                            if (degreeOfParallelismValue != null && degreeOfParallelismValue.Type != JTokenType.Null)
                            {
                                int degreeOfParallelismInstance = ((int)degreeOfParallelismValue);
                                jobInstance.DegreeOfParallelism = degreeOfParallelismInstance;
                            }
                            
                            JToken priorityValue = responseDoc["priority"];
                            if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                            {
                                int priorityInstance = ((int)priorityValue);
                                jobInstance.Priority = priorityInstance;
                            }
                            
                            JToken submitTimeValue = responseDoc["submitTime"];
                            if (submitTimeValue != null && submitTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset submitTimeInstance = ((DateTimeOffset)submitTimeValue);
                                jobInstance.SubmitTime = submitTimeInstance;
                            }
                            
                            JToken startTimeValue = responseDoc["startTime"];
                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                jobInstance.StartTime = startTimeInstance;
                            }
                            
                            JToken endTimeValue = responseDoc["endTime"];
                            if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                jobInstance.EndTime = endTimeInstance;
                            }
                            
                            JToken stateValue = responseDoc["state"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                JobState stateInstance = DataLakeAnalyticsJobManagementClient.ParseJobState(((string)stateValue));
                                jobInstance.State = stateInstance;
                            }
                            
                            JToken resultValue = responseDoc["result"];
                            if (resultValue != null && resultValue.Type != JTokenType.Null)
                            {
                                JobResult resultInstance = DataLakeAnalyticsJobManagementClient.ParseJobResult(((string)resultValue));
                                jobInstance.Result = resultInstance;
                            }
                            
                            JToken stateAuditRecordsArray = responseDoc["stateAuditRecords"];
                            if (stateAuditRecordsArray != null && stateAuditRecordsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken stateAuditRecordsValue in ((JArray)stateAuditRecordsArray))
                                {
                                    JobStateAuditRecord jobStateAuditRecordInstance = new JobStateAuditRecord();
                                    jobInstance.StateAuditRecords.Add(jobStateAuditRecordInstance);
                                    
                                    JToken newStateValue = stateAuditRecordsValue["newState"];
                                    if (newStateValue != null && newStateValue.Type != JTokenType.Null)
                                    {
                                        string newStateInstance = ((string)newStateValue);
                                        jobStateAuditRecordInstance.NewState = newStateInstance;
                                    }
                                    
                                    JToken timeStampValue = stateAuditRecordsValue["timeStamp"];
                                    if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset timeStampInstance = ((DateTimeOffset)timeStampValue);
                                        jobStateAuditRecordInstance.TimeStamp = timeStampInstance;
                                    }
                                    
                                    JToken requestedByUserValue = stateAuditRecordsValue["requestedByUser"];
                                    if (requestedByUserValue != null && requestedByUserValue.Type != JTokenType.Null)
                                    {
                                        string requestedByUserInstance = ((string)requestedByUserValue);
                                        jobStateAuditRecordInstance.RequestedByUser = requestedByUserInstance;
                                    }
                                    
                                    JToken detailsValue = stateAuditRecordsValue["details"];
                                    if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                    {
                                        string detailsInstance = ((string)detailsValue);
                                        jobStateAuditRecordInstance.Details = detailsInstance;
                                    }
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                string typeName = ((string)propertiesValue["type"]);
                                if (typeName == "Hive")
                                {
                                    HiveProperties hivePropertiesInstance = new HiveProperties();
                                    
                                    JToken statementCountValue = propertiesValue["statementCount"];
                                    if (statementCountValue != null && statementCountValue.Type != JTokenType.Null)
                                    {
                                        int statementCountInstance = ((int)statementCountValue);
                                        hivePropertiesInstance.StatementCount = statementCountInstance;
                                    }
                                    
                                    JToken executedStatementCountValue = propertiesValue["executedStatementCount"];
                                    if (executedStatementCountValue != null && executedStatementCountValue.Type != JTokenType.Null)
                                    {
                                        int executedStatementCountInstance = ((int)executedStatementCountValue);
                                        hivePropertiesInstance.ExecutedStatementCount = executedStatementCountInstance;
                                    }
                                    
                                    JToken logsLocationValue = propertiesValue["logsLocation"];
                                    if (logsLocationValue != null && logsLocationValue.Type != JTokenType.Null)
                                    {
                                        string logsLocationInstance = ((string)logsLocationValue);
                                        hivePropertiesInstance.LogsLocation = logsLocationInstance;
                                    }
                                    
                                    JToken statementInfoArray = propertiesValue["statementInfo"];
                                    if (statementInfoArray != null && statementInfoArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken statementInfoValue in ((JArray)statementInfoArray))
                                        {
                                            HiveJobStatementInfo hiveJobStatementInfoInstance = new HiveJobStatementInfo();
                                            hivePropertiesInstance.StatementInfo.Add(hiveJobStatementInfoInstance);
                                            
                                            JToken logLocationValue = statementInfoValue["logLocation"];
                                            if (logLocationValue != null && logLocationValue.Type != JTokenType.Null)
                                            {
                                                string logLocationInstance = ((string)logLocationValue);
                                                hiveJobStatementInfoInstance.LogLocation = logLocationInstance;
                                            }
                                            
                                            JToken resultPreviewLocationValue = statementInfoValue["resultPreviewLocation"];
                                            if (resultPreviewLocationValue != null && resultPreviewLocationValue.Type != JTokenType.Null)
                                            {
                                                string resultPreviewLocationInstance = ((string)resultPreviewLocationValue);
                                                hiveJobStatementInfoInstance.ResultPreviewLocation = resultPreviewLocationInstance;
                                            }
                                            
                                            JToken resultLocationValue = statementInfoValue["resultLocation"];
                                            if (resultLocationValue != null && resultLocationValue.Type != JTokenType.Null)
                                            {
                                                string resultLocationInstance = ((string)resultLocationValue);
                                                hiveJobStatementInfoInstance.ResultLocation = resultLocationInstance;
                                            }
                                            
                                            JToken errorMessageValue2 = statementInfoValue["errorMessage"];
                                            if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                            {
                                                string errorMessageInstance2 = ((string)errorMessageValue2);
                                                hiveJobStatementInfoInstance.ErrorMessage = errorMessageInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken warehouseLocationValue = propertiesValue["warehouseLocation"];
                                    if (warehouseLocationValue != null && warehouseLocationValue.Type != JTokenType.Null)
                                    {
                                        string warehouseLocationInstance = ((string)warehouseLocationValue);
                                        hivePropertiesInstance.WarehouseLocation = warehouseLocationInstance;
                                    }
                                    
                                    JToken runtimeVersionValue = propertiesValue["runtimeVersion"];
                                    if (runtimeVersionValue != null && runtimeVersionValue.Type != JTokenType.Null)
                                    {
                                        string runtimeVersionInstance = ((string)runtimeVersionValue);
                                        hivePropertiesInstance.RuntimeVersion = runtimeVersionInstance;
                                    }
                                    
                                    JToken scriptValue = propertiesValue["script"];
                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                    {
                                        string scriptInstance = ((string)scriptValue);
                                        hivePropertiesInstance.Script = scriptInstance;
                                    }
                                    
                                    JToken typeValue2 = propertiesValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        hivePropertiesInstance.Type = typeInstance2;
                                    }
                                    jobInstance.Properties = hivePropertiesInstance;
                                }
                                if (typeName == "USql")
                                {
                                    USqlProperties uSqlPropertiesInstance = new USqlProperties();
                                    
                                    JToken resourcesArray = propertiesValue["resources"];
                                    if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                        {
                                            JobResource jobResourceInstance = new JobResource();
                                            uSqlPropertiesInstance.Resources.Add(jobResourceInstance);
                                            
                                            JToken nameValue2 = resourcesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                jobResourceInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken resourcePathValue = resourcesValue["resourcePath"];
                                            if (resourcePathValue != null && resourcePathValue.Type != JTokenType.Null)
                                            {
                                                string resourcePathInstance = ((string)resourcePathValue);
                                                jobResourceInstance.ResourcePath = resourcePathInstance;
                                            }
                                            
                                            JToken typeValue3 = resourcesValue["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                jobResourceInstance.Type = typeInstance3;
                                            }
                                        }
                                    }
                                    
                                    JToken algebraFilePathValue = propertiesValue["algebraFilePath"];
                                    if (algebraFilePathValue != null && algebraFilePathValue.Type != JTokenType.Null)
                                    {
                                        string algebraFilePathInstance = ((string)algebraFilePathValue);
                                        uSqlPropertiesInstance.AlgebraFilePath = algebraFilePathInstance;
                                    }
                                    
                                    JToken totalCompilationTimeValue = propertiesValue["totalCompilationTime"];
                                    if (totalCompilationTimeValue != null && totalCompilationTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalCompilationTimeInstance = TimeSpan.Parse(((string)totalCompilationTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalCompilationTime = totalCompilationTimeInstance;
                                    }
                                    
                                    JToken totalPauseTimeValue = propertiesValue["totalPauseTime"];
                                    if (totalPauseTimeValue != null && totalPauseTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalPauseTimeInstance = TimeSpan.Parse(((string)totalPauseTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalPausedTime = totalPauseTimeInstance;
                                    }
                                    
                                    JToken totalQueuedTimeValue = propertiesValue["totalQueuedTime"];
                                    if (totalQueuedTimeValue != null && totalQueuedTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalQueuedTimeInstance = TimeSpan.Parse(((string)totalQueuedTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalQueuedTime = totalQueuedTimeInstance;
                                    }
                                    
                                    JToken totalRunningTimeValue = propertiesValue["totalRunningTime"];
                                    if (totalRunningTimeValue != null && totalRunningTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalRunningTimeInstance = TimeSpan.Parse(((string)totalRunningTimeValue), CultureInfo.InvariantCulture);
                                        uSqlPropertiesInstance.TotalRunningTime = totalRunningTimeInstance;
                                    }
                                    
                                    JToken rootProcessNodeIdValue = propertiesValue["rootProcessNodeId"];
                                    if (rootProcessNodeIdValue != null && rootProcessNodeIdValue.Type != JTokenType.Null)
                                    {
                                        Guid rootProcessNodeIdInstance = Guid.Parse(((string)rootProcessNodeIdValue));
                                        uSqlPropertiesInstance.RootProcessNodeId = rootProcessNodeIdInstance;
                                    }
                                    
                                    JToken yarnApplicationIdValue = propertiesValue["yarnApplicationId"];
                                    if (yarnApplicationIdValue != null && yarnApplicationIdValue.Type != JTokenType.Null)
                                    {
                                        int yarnApplicationIdInstance = ((int)yarnApplicationIdValue);
                                        uSqlPropertiesInstance.YarnApplicationId = yarnApplicationIdInstance;
                                    }
                                    
                                    JToken yarnApplicationTimeStampValue = propertiesValue["yarnApplicationTimeStamp"];
                                    if (yarnApplicationTimeStampValue != null && yarnApplicationTimeStampValue.Type != JTokenType.Null)
                                    {
                                        long yarnApplicationTimeStampInstance = ((long)yarnApplicationTimeStampValue);
                                        uSqlPropertiesInstance.YarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
                                    }
                                    
                                    JToken compileModeValue = propertiesValue["compileMode"];
                                    if (compileModeValue != null && compileModeValue.Type != JTokenType.Null)
                                    {
                                        string compileModeInstance = ((string)compileModeValue);
                                        uSqlPropertiesInstance.CompileMode = compileModeInstance;
                                    }
                                    
                                    JToken diagnosticsArray = propertiesValue["diagnostics"];
                                    if (diagnosticsArray != null && diagnosticsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken diagnosticsValue in ((JArray)diagnosticsArray))
                                        {
                                            Diagnostics diagnosticsInstance = new Diagnostics();
                                            uSqlPropertiesInstance.Diagnostics.Add(diagnosticsInstance);
                                            
                                            JToken columnNumberValue = diagnosticsValue["columnNumber"];
                                            if (columnNumberValue != null && columnNumberValue.Type != JTokenType.Null)
                                            {
                                                int columnNumberInstance = ((int)columnNumberValue);
                                                diagnosticsInstance.ColumnNumber = columnNumberInstance;
                                            }
                                            
                                            JToken endValue = diagnosticsValue["end"];
                                            if (endValue != null && endValue.Type != JTokenType.Null)
                                            {
                                                int endInstance = ((int)endValue);
                                                diagnosticsInstance.End = endInstance;
                                            }
                                            
                                            JToken lineNumberValue = diagnosticsValue["lineNumber"];
                                            if (lineNumberValue != null && lineNumberValue.Type != JTokenType.Null)
                                            {
                                                int lineNumberInstance = ((int)lineNumberValue);
                                                diagnosticsInstance.LineNumber = lineNumberInstance;
                                            }
                                            
                                            JToken messageValue = diagnosticsValue["message"];
                                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                                            {
                                                string messageInstance = ((string)messageValue);
                                                diagnosticsInstance.Message = messageInstance;
                                            }
                                            
                                            JToken severityValue = diagnosticsValue["severity"];
                                            if (severityValue != null && severityValue.Type != JTokenType.Null)
                                            {
                                                string severityInstance = ((string)severityValue);
                                                diagnosticsInstance.Severity = severityInstance;
                                            }
                                            
                                            JToken startValue = diagnosticsValue["start"];
                                            if (startValue != null && startValue.Type != JTokenType.Null)
                                            {
                                                int startInstance = ((int)startValue);
                                                diagnosticsInstance.Start = startInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken runtimeVersionValue2 = propertiesValue["runtimeVersion"];
                                    if (runtimeVersionValue2 != null && runtimeVersionValue2.Type != JTokenType.Null)
                                    {
                                        string runtimeVersionInstance2 = ((string)runtimeVersionValue2);
                                        uSqlPropertiesInstance.RuntimeVersion = runtimeVersionInstance2;
                                    }
                                    
                                    JToken scriptValue2 = propertiesValue["script"];
                                    if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                    {
                                        string scriptInstance2 = ((string)scriptValue2);
                                        uSqlPropertiesInstance.Script = scriptInstance2;
                                    }
                                    
                                    JToken typeValue4 = propertiesValue["type"];
                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                    {
                                        string typeInstance4 = ((string)typeValue4);
                                        uSqlPropertiesInstance.Type = typeInstance4;
                                    }
                                    jobInstance.Properties = uSqlPropertiesInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the U-SQL job debug data information specified by the job ID.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to get the
        /// job from
        /// </param>
        /// <param name='jobIdentity'>
        /// Required. JobInfo ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Analytics job data path information.
        /// </returns>
        public async Task<JobDataPathGetResponse> GetDebugDataPathAsync(string resourceGroupName, string accountName, Guid jobIdentity, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("jobIdentity", jobIdentity);
                TracingAdapter.Enter(invocationId, this, "GetDebugDataPathAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.JobServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.JobServiceUri);
            }
            url = url + "/Jobs/";
            url = url + Uri.EscapeDataString(jobIdentity.ToString());
            url = url + "/GetDebugDataPath";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobDataPathGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobDataPathGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobDataPath jobDataInstance = new JobDataPath();
                            result.JobData = jobDataInstance;
                            
                            JToken jobIdValue = responseDoc["jobId"];
                            if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                            {
                                Guid jobIdInstance = Guid.Parse(((string)jobIdValue));
                                jobDataInstance.JobId = jobIdInstance;
                            }
                            
                            JToken commandValue = responseDoc["command"];
                            if (commandValue != null && commandValue.Type != JTokenType.Null)
                            {
                                string commandInstance = ((string)commandValue);
                                jobDataInstance.Command = commandInstance;
                            }
                            
                            JToken pathsArray = responseDoc["paths"];
                            if (pathsArray != null && pathsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken pathsValue in ((JArray)pathsArray))
                                {
                                    jobDataInstance.Paths.Add(((string)pathsValue));
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the job statistics object specified by the job ID.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to get the
        /// job from
        /// </param>
        /// <param name='jobIdentity'>
        /// Required. JobInfo ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Analytics Account information.
        /// </returns>
        public async Task<JobStatisticsGetResponse> GetStatisticsAsync(string resourceGroupName, string accountName, Guid jobIdentity, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("jobIdentity", jobIdentity);
                TracingAdapter.Enter(invocationId, this, "GetStatisticsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.JobServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.JobServiceUri);
            }
            url = url + "/Jobs/";
            url = url + Uri.EscapeDataString(jobIdentity.ToString());
            url = url + "/GetStatistics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobStatisticsGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobStatisticsGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JobStatistics statisticsInstance = new JobStatistics();
                            result.Statistics = statisticsInstance;
                            
                            JToken lastUpdateTimeUtcValue = responseDoc["lastUpdateTimeUtc"];
                            if (lastUpdateTimeUtcValue != null && lastUpdateTimeUtcValue.Type != JTokenType.Null)
                            {
                                DateTimeOffset lastUpdateTimeUtcInstance = ((DateTimeOffset)lastUpdateTimeUtcValue);
                                statisticsInstance.LastUpdateTimeUtc = lastUpdateTimeUtcInstance;
                            }
                            
                            JToken stagesArray = responseDoc["stages"];
                            if (stagesArray != null && stagesArray.Type != JTokenType.Null)
                            {
                                foreach (JToken stagesValue in ((JArray)stagesArray))
                                {
                                    JobStatisticsVertexStage jobStatisticsVertexStageInstance = new JobStatisticsVertexStage();
                                    statisticsInstance.Stages.Add(jobStatisticsVertexStageInstance);
                                    
                                    JToken dataReadValue = stagesValue["dataRead"];
                                    if (dataReadValue != null && dataReadValue.Type != JTokenType.Null)
                                    {
                                        long dataReadInstance = ((long)dataReadValue);
                                        jobStatisticsVertexStageInstance.DataRead = dataReadInstance;
                                    }
                                    
                                    JToken dataReadCrossPodValue = stagesValue["dataReadCrossPod"];
                                    if (dataReadCrossPodValue != null && dataReadCrossPodValue.Type != JTokenType.Null)
                                    {
                                        long dataReadCrossPodInstance = ((long)dataReadCrossPodValue);
                                        jobStatisticsVertexStageInstance.DataReadCrossPod = dataReadCrossPodInstance;
                                    }
                                    
                                    JToken dataReadIntraPodValue = stagesValue["dataReadIntraPod"];
                                    if (dataReadIntraPodValue != null && dataReadIntraPodValue.Type != JTokenType.Null)
                                    {
                                        long dataReadIntraPodInstance = ((long)dataReadIntraPodValue);
                                        jobStatisticsVertexStageInstance.DataReadIntraPod = dataReadIntraPodInstance;
                                    }
                                    
                                    JToken dataToReadValue = stagesValue["dataToRead"];
                                    if (dataToReadValue != null && dataToReadValue.Type != JTokenType.Null)
                                    {
                                        long dataToReadInstance = ((long)dataToReadValue);
                                        jobStatisticsVertexStageInstance.DataToRead = dataToReadInstance;
                                    }
                                    
                                    JToken dataWrittenValue = stagesValue["dataWritten"];
                                    if (dataWrittenValue != null && dataWrittenValue.Type != JTokenType.Null)
                                    {
                                        long dataWrittenInstance = ((long)dataWrittenValue);
                                        jobStatisticsVertexStageInstance.DataWritten = dataWrittenInstance;
                                    }
                                    
                                    JToken duplicateDiscardCountValue = stagesValue["duplicateDiscardCount"];
                                    if (duplicateDiscardCountValue != null && duplicateDiscardCountValue.Type != JTokenType.Null)
                                    {
                                        int duplicateDiscardCountInstance = ((int)duplicateDiscardCountValue);
                                        jobStatisticsVertexStageInstance.DuplicateDiscardCount = duplicateDiscardCountInstance;
                                    }
                                    
                                    JToken failedCountValue = stagesValue["failedCount"];
                                    if (failedCountValue != null && failedCountValue.Type != JTokenType.Null)
                                    {
                                        int failedCountInstance = ((int)failedCountValue);
                                        jobStatisticsVertexStageInstance.FailedCount = failedCountInstance;
                                    }
                                    
                                    JToken maxVertexDataReadValue = stagesValue["maxVertexDataRead"];
                                    if (maxVertexDataReadValue != null && maxVertexDataReadValue.Type != JTokenType.Null)
                                    {
                                        long maxVertexDataReadInstance = ((long)maxVertexDataReadValue);
                                        jobStatisticsVertexStageInstance.MaxVertexDataRead = maxVertexDataReadInstance;
                                    }
                                    
                                    JToken minVertexDataReadValue = stagesValue["minVertexDataRead"];
                                    if (minVertexDataReadValue != null && minVertexDataReadValue.Type != JTokenType.Null)
                                    {
                                        long minVertexDataReadInstance = ((long)minVertexDataReadValue);
                                        jobStatisticsVertexStageInstance.MinVertexDataRead = minVertexDataReadInstance;
                                    }
                                    
                                    JToken readFailureCountValue = stagesValue["readFailureCount"];
                                    if (readFailureCountValue != null && readFailureCountValue.Type != JTokenType.Null)
                                    {
                                        int readFailureCountInstance = ((int)readFailureCountValue);
                                        jobStatisticsVertexStageInstance.ReadFailureCount = readFailureCountInstance;
                                    }
                                    
                                    JToken revocationCountValue = stagesValue["revocationCount"];
                                    if (revocationCountValue != null && revocationCountValue.Type != JTokenType.Null)
                                    {
                                        int revocationCountInstance = ((int)revocationCountValue);
                                        jobStatisticsVertexStageInstance.RevocationCount = revocationCountInstance;
                                    }
                                    
                                    JToken runningCountValue = stagesValue["runningCount"];
                                    if (runningCountValue != null && runningCountValue.Type != JTokenType.Null)
                                    {
                                        int runningCountInstance = ((int)runningCountValue);
                                        jobStatisticsVertexStageInstance.RunningCount = runningCountInstance;
                                    }
                                    
                                    JToken scheduledCountValue = stagesValue["scheduledCount"];
                                    if (scheduledCountValue != null && scheduledCountValue.Type != JTokenType.Null)
                                    {
                                        int scheduledCountInstance = ((int)scheduledCountValue);
                                        jobStatisticsVertexStageInstance.ScheduledCount = scheduledCountInstance;
                                    }
                                    
                                    JToken stageNameValue = stagesValue["stageName"];
                                    if (stageNameValue != null && stageNameValue.Type != JTokenType.Null)
                                    {
                                        string stageNameInstance = ((string)stageNameValue);
                                        jobStatisticsVertexStageInstance.StageName = stageNameInstance;
                                    }
                                    
                                    JToken succeededCountValue = stagesValue["succeededCount"];
                                    if (succeededCountValue != null && succeededCountValue.Type != JTokenType.Null)
                                    {
                                        int succeededCountInstance = ((int)succeededCountValue);
                                        jobStatisticsVertexStageInstance.SucceededCount = succeededCountInstance;
                                    }
                                    
                                    JToken tempDataWrittenValue = stagesValue["tempDataWritten"];
                                    if (tempDataWrittenValue != null && tempDataWrittenValue.Type != JTokenType.Null)
                                    {
                                        long tempDataWrittenInstance = ((long)tempDataWrittenValue);
                                        jobStatisticsVertexStageInstance.TempDataWritten = tempDataWrittenInstance;
                                    }
                                    
                                    JToken totalCountValue = stagesValue["totalCount"];
                                    if (totalCountValue != null && totalCountValue.Type != JTokenType.Null)
                                    {
                                        int totalCountInstance = ((int)totalCountValue);
                                        jobStatisticsVertexStageInstance.TotalCount = totalCountInstance;
                                    }
                                    
                                    JToken totalFailedTimeValue = stagesValue["totalFailedTime"];
                                    if (totalFailedTimeValue != null && totalFailedTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalFailedTimeInstance = TimeSpan.Parse(((string)totalFailedTimeValue), CultureInfo.InvariantCulture);
                                        jobStatisticsVertexStageInstance.TotalFailedTime = totalFailedTimeInstance;
                                    }
                                    
                                    JToken totalProgressValue = stagesValue["totalProgress"];
                                    if (totalProgressValue != null && totalProgressValue.Type != JTokenType.Null)
                                    {
                                        int totalProgressInstance = ((int)totalProgressValue);
                                        jobStatisticsVertexStageInstance.TotalProgress = totalProgressInstance;
                                    }
                                    
                                    JToken totalSucceededTimeValue = stagesValue["totalSucceededTime"];
                                    if (totalSucceededTimeValue != null && totalSucceededTimeValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan totalSucceededTimeInstance = TimeSpan.Parse(((string)totalSucceededTimeValue), CultureInfo.InvariantCulture);
                                        jobStatisticsVertexStageInstance.TotalSucceededTime = totalSucceededTimeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Analytics JobInformation
        /// objects within the specified resource group with a link to the
        /// next page, if any.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to get the
        /// job from
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all JobInfo
        /// items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of jobInfo items.
        /// </returns>
        public async Task<JobInfoListResponse> ListAsync(string resourceGroupName, string accountName, JobListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.JobServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.JobServiceUri);
            }
            url = url + "/Jobs";
            List<string> queryParameters = new List<string>();
            if (parameters != null && parameters.Filter != null)
            {
                queryParameters.Add("$filter=" + Uri.EscapeDataString(parameters.Filter));
            }
            if (parameters != null && parameters.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(parameters.Top.Value.ToString()));
            }
            if (parameters != null && parameters.Skip != null)
            {
                queryParameters.Add("$skip=" + Uri.EscapeDataString(parameters.Skip.Value.ToString()));
            }
            if (parameters != null && parameters.OrderBy != null)
            {
                queryParameters.Add("$orderby=" + Uri.EscapeDataString(parameters.OrderBy));
            }
            if (parameters != null && parameters.Select != null)
            {
                queryParameters.Add("$select=" + Uri.EscapeDataString(parameters.Select));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobInfoListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobInfoListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    JobInformation jobInformationInstance = new JobInformation();
                                    result.Value.Add(jobInformationInstance);
                                    
                                    JToken jobIdValue = valueValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        Guid jobIdInstance = Guid.Parse(((string)jobIdValue));
                                        jobInformationInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        jobInformationInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        jobInformationInstance.Type = typeInstance;
                                    }
                                    
                                    JToken submitterValue = valueValue["submitter"];
                                    if (submitterValue != null && submitterValue.Type != JTokenType.Null)
                                    {
                                        string submitterInstance = ((string)submitterValue);
                                        jobInformationInstance.Submitter = submitterInstance;
                                    }
                                    
                                    JToken errorMessageValue = valueValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        jobInformationInstance.ErrorMessage = errorMessageInstance;
                                    }
                                    
                                    JToken degreeOfParallelismValue = valueValue["degreeOfParallelism"];
                                    if (degreeOfParallelismValue != null && degreeOfParallelismValue.Type != JTokenType.Null)
                                    {
                                        int degreeOfParallelismInstance = ((int)degreeOfParallelismValue);
                                        jobInformationInstance.DegreeOfParallelism = degreeOfParallelismInstance;
                                    }
                                    
                                    JToken priorityValue = valueValue["priority"];
                                    if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                    {
                                        int priorityInstance = ((int)priorityValue);
                                        jobInformationInstance.Priority = priorityInstance;
                                    }
                                    
                                    JToken submitTimeValue = valueValue["submitTime"];
                                    if (submitTimeValue != null && submitTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset submitTimeInstance = ((DateTimeOffset)submitTimeValue);
                                        jobInformationInstance.SubmitTime = submitTimeInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                        jobInformationInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                        jobInformationInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken stateValue = valueValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        JobState stateInstance = DataLakeAnalyticsJobManagementClient.ParseJobState(((string)stateValue));
                                        jobInformationInstance.State = stateInstance;
                                    }
                                    
                                    JToken resultValue = valueValue["result"];
                                    if (resultValue != null && resultValue.Type != JTokenType.Null)
                                    {
                                        JobResult resultInstance = DataLakeAnalyticsJobManagementClient.ParseJobResult(((string)resultValue));
                                        jobInformationInstance.Result = resultInstance;
                                    }
                                    
                                    JToken stateAuditRecordsArray = valueValue["stateAuditRecords"];
                                    if (stateAuditRecordsArray != null && stateAuditRecordsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken stateAuditRecordsValue in ((JArray)stateAuditRecordsArray))
                                        {
                                            JobStateAuditRecord jobStateAuditRecordInstance = new JobStateAuditRecord();
                                            jobInformationInstance.StateAuditRecords.Add(jobStateAuditRecordInstance);
                                            
                                            JToken newStateValue = stateAuditRecordsValue["newState"];
                                            if (newStateValue != null && newStateValue.Type != JTokenType.Null)
                                            {
                                                string newStateInstance = ((string)newStateValue);
                                                jobStateAuditRecordInstance.NewState = newStateInstance;
                                            }
                                            
                                            JToken timeStampValue = stateAuditRecordsValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeStampInstance = ((DateTimeOffset)timeStampValue);
                                                jobStateAuditRecordInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken requestedByUserValue = stateAuditRecordsValue["requestedByUser"];
                                            if (requestedByUserValue != null && requestedByUserValue.Type != JTokenType.Null)
                                            {
                                                string requestedByUserInstance = ((string)requestedByUserValue);
                                                jobStateAuditRecordInstance.RequestedByUser = requestedByUserInstance;
                                            }
                                            
                                            JToken detailsValue = stateAuditRecordsValue["details"];
                                            if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                            {
                                                string detailsInstance = ((string)detailsValue);
                                                jobStateAuditRecordInstance.Details = detailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["type"]);
                                        if (typeName == "Hive")
                                        {
                                            HiveProperties hivePropertiesInstance = new HiveProperties();
                                            
                                            JToken statementCountValue = propertiesValue["statementCount"];
                                            if (statementCountValue != null && statementCountValue.Type != JTokenType.Null)
                                            {
                                                int statementCountInstance = ((int)statementCountValue);
                                                hivePropertiesInstance.StatementCount = statementCountInstance;
                                            }
                                            
                                            JToken executedStatementCountValue = propertiesValue["executedStatementCount"];
                                            if (executedStatementCountValue != null && executedStatementCountValue.Type != JTokenType.Null)
                                            {
                                                int executedStatementCountInstance = ((int)executedStatementCountValue);
                                                hivePropertiesInstance.ExecutedStatementCount = executedStatementCountInstance;
                                            }
                                            
                                            JToken logsLocationValue = propertiesValue["logsLocation"];
                                            if (logsLocationValue != null && logsLocationValue.Type != JTokenType.Null)
                                            {
                                                string logsLocationInstance = ((string)logsLocationValue);
                                                hivePropertiesInstance.LogsLocation = logsLocationInstance;
                                            }
                                            
                                            JToken statementInfoArray = propertiesValue["statementInfo"];
                                            if (statementInfoArray != null && statementInfoArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statementInfoValue in ((JArray)statementInfoArray))
                                                {
                                                    HiveJobStatementInfo hiveJobStatementInfoInstance = new HiveJobStatementInfo();
                                                    hivePropertiesInstance.StatementInfo.Add(hiveJobStatementInfoInstance);
                                                    
                                                    JToken logLocationValue = statementInfoValue["logLocation"];
                                                    if (logLocationValue != null && logLocationValue.Type != JTokenType.Null)
                                                    {
                                                        string logLocationInstance = ((string)logLocationValue);
                                                        hiveJobStatementInfoInstance.LogLocation = logLocationInstance;
                                                    }
                                                    
                                                    JToken resultPreviewLocationValue = statementInfoValue["resultPreviewLocation"];
                                                    if (resultPreviewLocationValue != null && resultPreviewLocationValue.Type != JTokenType.Null)
                                                    {
                                                        string resultPreviewLocationInstance = ((string)resultPreviewLocationValue);
                                                        hiveJobStatementInfoInstance.ResultPreviewLocation = resultPreviewLocationInstance;
                                                    }
                                                    
                                                    JToken resultLocationValue = statementInfoValue["resultLocation"];
                                                    if (resultLocationValue != null && resultLocationValue.Type != JTokenType.Null)
                                                    {
                                                        string resultLocationInstance = ((string)resultLocationValue);
                                                        hiveJobStatementInfoInstance.ResultLocation = resultLocationInstance;
                                                    }
                                                    
                                                    JToken errorMessageValue2 = statementInfoValue["errorMessage"];
                                                    if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                    {
                                                        string errorMessageInstance2 = ((string)errorMessageValue2);
                                                        hiveJobStatementInfoInstance.ErrorMessage = errorMessageInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken warehouseLocationValue = propertiesValue["warehouseLocation"];
                                            if (warehouseLocationValue != null && warehouseLocationValue.Type != JTokenType.Null)
                                            {
                                                string warehouseLocationInstance = ((string)warehouseLocationValue);
                                                hivePropertiesInstance.WarehouseLocation = warehouseLocationInstance;
                                            }
                                            
                                            JToken runtimeVersionValue = propertiesValue["runtimeVersion"];
                                            if (runtimeVersionValue != null && runtimeVersionValue.Type != JTokenType.Null)
                                            {
                                                string runtimeVersionInstance = ((string)runtimeVersionValue);
                                                hivePropertiesInstance.RuntimeVersion = runtimeVersionInstance;
                                            }
                                            
                                            JToken scriptValue = propertiesValue["script"];
                                            if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                            {
                                                string scriptInstance = ((string)scriptValue);
                                                hivePropertiesInstance.Script = scriptInstance;
                                            }
                                            
                                            JToken typeValue2 = propertiesValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                hivePropertiesInstance.Type = typeInstance2;
                                            }
                                            jobInformationInstance.Properties = hivePropertiesInstance;
                                        }
                                        if (typeName == "USql")
                                        {
                                            USqlProperties uSqlPropertiesInstance = new USqlProperties();
                                            
                                            JToken resourcesArray = propertiesValue["resources"];
                                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                                {
                                                    JobResource jobResourceInstance = new JobResource();
                                                    uSqlPropertiesInstance.Resources.Add(jobResourceInstance);
                                                    
                                                    JToken nameValue2 = resourcesValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        jobResourceInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken resourcePathValue = resourcesValue["resourcePath"];
                                                    if (resourcePathValue != null && resourcePathValue.Type != JTokenType.Null)
                                                    {
                                                        string resourcePathInstance = ((string)resourcePathValue);
                                                        jobResourceInstance.ResourcePath = resourcePathInstance;
                                                    }
                                                    
                                                    JToken typeValue3 = resourcesValue["type"];
                                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance3 = ((string)typeValue3);
                                                        jobResourceInstance.Type = typeInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken algebraFilePathValue = propertiesValue["algebraFilePath"];
                                            if (algebraFilePathValue != null && algebraFilePathValue.Type != JTokenType.Null)
                                            {
                                                string algebraFilePathInstance = ((string)algebraFilePathValue);
                                                uSqlPropertiesInstance.AlgebraFilePath = algebraFilePathInstance;
                                            }
                                            
                                            JToken totalCompilationTimeValue = propertiesValue["totalCompilationTime"];
                                            if (totalCompilationTimeValue != null && totalCompilationTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalCompilationTimeInstance = TimeSpan.Parse(((string)totalCompilationTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalCompilationTime = totalCompilationTimeInstance;
                                            }
                                            
                                            JToken totalPauseTimeValue = propertiesValue["totalPauseTime"];
                                            if (totalPauseTimeValue != null && totalPauseTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalPauseTimeInstance = TimeSpan.Parse(((string)totalPauseTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalPausedTime = totalPauseTimeInstance;
                                            }
                                            
                                            JToken totalQueuedTimeValue = propertiesValue["totalQueuedTime"];
                                            if (totalQueuedTimeValue != null && totalQueuedTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalQueuedTimeInstance = TimeSpan.Parse(((string)totalQueuedTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalQueuedTime = totalQueuedTimeInstance;
                                            }
                                            
                                            JToken totalRunningTimeValue = propertiesValue["totalRunningTime"];
                                            if (totalRunningTimeValue != null && totalRunningTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalRunningTimeInstance = TimeSpan.Parse(((string)totalRunningTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalRunningTime = totalRunningTimeInstance;
                                            }
                                            
                                            JToken rootProcessNodeIdValue = propertiesValue["rootProcessNodeId"];
                                            if (rootProcessNodeIdValue != null && rootProcessNodeIdValue.Type != JTokenType.Null)
                                            {
                                                Guid rootProcessNodeIdInstance = Guid.Parse(((string)rootProcessNodeIdValue));
                                                uSqlPropertiesInstance.RootProcessNodeId = rootProcessNodeIdInstance;
                                            }
                                            
                                            JToken yarnApplicationIdValue = propertiesValue["yarnApplicationId"];
                                            if (yarnApplicationIdValue != null && yarnApplicationIdValue.Type != JTokenType.Null)
                                            {
                                                int yarnApplicationIdInstance = ((int)yarnApplicationIdValue);
                                                uSqlPropertiesInstance.YarnApplicationId = yarnApplicationIdInstance;
                                            }
                                            
                                            JToken yarnApplicationTimeStampValue = propertiesValue["yarnApplicationTimeStamp"];
                                            if (yarnApplicationTimeStampValue != null && yarnApplicationTimeStampValue.Type != JTokenType.Null)
                                            {
                                                long yarnApplicationTimeStampInstance = ((long)yarnApplicationTimeStampValue);
                                                uSqlPropertiesInstance.YarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
                                            }
                                            
                                            JToken compileModeValue = propertiesValue["compileMode"];
                                            if (compileModeValue != null && compileModeValue.Type != JTokenType.Null)
                                            {
                                                string compileModeInstance = ((string)compileModeValue);
                                                uSqlPropertiesInstance.CompileMode = compileModeInstance;
                                            }
                                            
                                            JToken diagnosticsArray = propertiesValue["diagnostics"];
                                            if (diagnosticsArray != null && diagnosticsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken diagnosticsValue in ((JArray)diagnosticsArray))
                                                {
                                                    Diagnostics diagnosticsInstance = new Diagnostics();
                                                    uSqlPropertiesInstance.Diagnostics.Add(diagnosticsInstance);
                                                    
                                                    JToken columnNumberValue = diagnosticsValue["columnNumber"];
                                                    if (columnNumberValue != null && columnNumberValue.Type != JTokenType.Null)
                                                    {
                                                        int columnNumberInstance = ((int)columnNumberValue);
                                                        diagnosticsInstance.ColumnNumber = columnNumberInstance;
                                                    }
                                                    
                                                    JToken endValue = diagnosticsValue["end"];
                                                    if (endValue != null && endValue.Type != JTokenType.Null)
                                                    {
                                                        int endInstance = ((int)endValue);
                                                        diagnosticsInstance.End = endInstance;
                                                    }
                                                    
                                                    JToken lineNumberValue = diagnosticsValue["lineNumber"];
                                                    if (lineNumberValue != null && lineNumberValue.Type != JTokenType.Null)
                                                    {
                                                        int lineNumberInstance = ((int)lineNumberValue);
                                                        diagnosticsInstance.LineNumber = lineNumberInstance;
                                                    }
                                                    
                                                    JToken messageValue = diagnosticsValue["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        diagnosticsInstance.Message = messageInstance;
                                                    }
                                                    
                                                    JToken severityValue = diagnosticsValue["severity"];
                                                    if (severityValue != null && severityValue.Type != JTokenType.Null)
                                                    {
                                                        string severityInstance = ((string)severityValue);
                                                        diagnosticsInstance.Severity = severityInstance;
                                                    }
                                                    
                                                    JToken startValue = diagnosticsValue["start"];
                                                    if (startValue != null && startValue.Type != JTokenType.Null)
                                                    {
                                                        int startInstance = ((int)startValue);
                                                        diagnosticsInstance.Start = startInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken runtimeVersionValue2 = propertiesValue["runtimeVersion"];
                                            if (runtimeVersionValue2 != null && runtimeVersionValue2.Type != JTokenType.Null)
                                            {
                                                string runtimeVersionInstance2 = ((string)runtimeVersionValue2);
                                                uSqlPropertiesInstance.RuntimeVersion = runtimeVersionInstance2;
                                            }
                                            
                                            JToken scriptValue2 = propertiesValue["script"];
                                            if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                            {
                                                string scriptInstance2 = ((string)scriptValue2);
                                                uSqlPropertiesInstance.Script = scriptInstance2;
                                            }
                                            
                                            JToken typeValue4 = propertiesValue["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                uSqlPropertiesInstance.Type = typeInstance4;
                                            }
                                            jobInformationInstance.Properties = uSqlPropertiesInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                result.Count = countInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of the Data Lake Analytics JobInformation
        /// objects within the specified resource group with a link to the
        /// next page, if any.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next job information page.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of jobInfo items.
        /// </returns>
        public async Task<JobInfoListResponse> ListNextAsync(string nextLink, string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobInfoListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobInfoListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    JobInformation jobInformationInstance = new JobInformation();
                                    result.Value.Add(jobInformationInstance);
                                    
                                    JToken jobIdValue = valueValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        Guid jobIdInstance = Guid.Parse(((string)jobIdValue));
                                        jobInformationInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        jobInformationInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        jobInformationInstance.Type = typeInstance;
                                    }
                                    
                                    JToken submitterValue = valueValue["submitter"];
                                    if (submitterValue != null && submitterValue.Type != JTokenType.Null)
                                    {
                                        string submitterInstance = ((string)submitterValue);
                                        jobInformationInstance.Submitter = submitterInstance;
                                    }
                                    
                                    JToken errorMessageValue = valueValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        jobInformationInstance.ErrorMessage = errorMessageInstance;
                                    }
                                    
                                    JToken degreeOfParallelismValue = valueValue["degreeOfParallelism"];
                                    if (degreeOfParallelismValue != null && degreeOfParallelismValue.Type != JTokenType.Null)
                                    {
                                        int degreeOfParallelismInstance = ((int)degreeOfParallelismValue);
                                        jobInformationInstance.DegreeOfParallelism = degreeOfParallelismInstance;
                                    }
                                    
                                    JToken priorityValue = valueValue["priority"];
                                    if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                    {
                                        int priorityInstance = ((int)priorityValue);
                                        jobInformationInstance.Priority = priorityInstance;
                                    }
                                    
                                    JToken submitTimeValue = valueValue["submitTime"];
                                    if (submitTimeValue != null && submitTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset submitTimeInstance = ((DateTimeOffset)submitTimeValue);
                                        jobInformationInstance.SubmitTime = submitTimeInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                        jobInformationInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                        jobInformationInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken stateValue = valueValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        JobState stateInstance = DataLakeAnalyticsJobManagementClient.ParseJobState(((string)stateValue));
                                        jobInformationInstance.State = stateInstance;
                                    }
                                    
                                    JToken resultValue = valueValue["result"];
                                    if (resultValue != null && resultValue.Type != JTokenType.Null)
                                    {
                                        JobResult resultInstance = DataLakeAnalyticsJobManagementClient.ParseJobResult(((string)resultValue));
                                        jobInformationInstance.Result = resultInstance;
                                    }
                                    
                                    JToken stateAuditRecordsArray = valueValue["stateAuditRecords"];
                                    if (stateAuditRecordsArray != null && stateAuditRecordsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken stateAuditRecordsValue in ((JArray)stateAuditRecordsArray))
                                        {
                                            JobStateAuditRecord jobStateAuditRecordInstance = new JobStateAuditRecord();
                                            jobInformationInstance.StateAuditRecords.Add(jobStateAuditRecordInstance);
                                            
                                            JToken newStateValue = stateAuditRecordsValue["newState"];
                                            if (newStateValue != null && newStateValue.Type != JTokenType.Null)
                                            {
                                                string newStateInstance = ((string)newStateValue);
                                                jobStateAuditRecordInstance.NewState = newStateInstance;
                                            }
                                            
                                            JToken timeStampValue = stateAuditRecordsValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeStampInstance = ((DateTimeOffset)timeStampValue);
                                                jobStateAuditRecordInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken requestedByUserValue = stateAuditRecordsValue["requestedByUser"];
                                            if (requestedByUserValue != null && requestedByUserValue.Type != JTokenType.Null)
                                            {
                                                string requestedByUserInstance = ((string)requestedByUserValue);
                                                jobStateAuditRecordInstance.RequestedByUser = requestedByUserInstance;
                                            }
                                            
                                            JToken detailsValue = stateAuditRecordsValue["details"];
                                            if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                            {
                                                string detailsInstance = ((string)detailsValue);
                                                jobStateAuditRecordInstance.Details = detailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["type"]);
                                        if (typeName == "Hive")
                                        {
                                            HiveProperties hivePropertiesInstance = new HiveProperties();
                                            
                                            JToken statementCountValue = propertiesValue["statementCount"];
                                            if (statementCountValue != null && statementCountValue.Type != JTokenType.Null)
                                            {
                                                int statementCountInstance = ((int)statementCountValue);
                                                hivePropertiesInstance.StatementCount = statementCountInstance;
                                            }
                                            
                                            JToken executedStatementCountValue = propertiesValue["executedStatementCount"];
                                            if (executedStatementCountValue != null && executedStatementCountValue.Type != JTokenType.Null)
                                            {
                                                int executedStatementCountInstance = ((int)executedStatementCountValue);
                                                hivePropertiesInstance.ExecutedStatementCount = executedStatementCountInstance;
                                            }
                                            
                                            JToken logsLocationValue = propertiesValue["logsLocation"];
                                            if (logsLocationValue != null && logsLocationValue.Type != JTokenType.Null)
                                            {
                                                string logsLocationInstance = ((string)logsLocationValue);
                                                hivePropertiesInstance.LogsLocation = logsLocationInstance;
                                            }
                                            
                                            JToken statementInfoArray = propertiesValue["statementInfo"];
                                            if (statementInfoArray != null && statementInfoArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statementInfoValue in ((JArray)statementInfoArray))
                                                {
                                                    HiveJobStatementInfo hiveJobStatementInfoInstance = new HiveJobStatementInfo();
                                                    hivePropertiesInstance.StatementInfo.Add(hiveJobStatementInfoInstance);
                                                    
                                                    JToken logLocationValue = statementInfoValue["logLocation"];
                                                    if (logLocationValue != null && logLocationValue.Type != JTokenType.Null)
                                                    {
                                                        string logLocationInstance = ((string)logLocationValue);
                                                        hiveJobStatementInfoInstance.LogLocation = logLocationInstance;
                                                    }
                                                    
                                                    JToken resultPreviewLocationValue = statementInfoValue["resultPreviewLocation"];
                                                    if (resultPreviewLocationValue != null && resultPreviewLocationValue.Type != JTokenType.Null)
                                                    {
                                                        string resultPreviewLocationInstance = ((string)resultPreviewLocationValue);
                                                        hiveJobStatementInfoInstance.ResultPreviewLocation = resultPreviewLocationInstance;
                                                    }
                                                    
                                                    JToken resultLocationValue = statementInfoValue["resultLocation"];
                                                    if (resultLocationValue != null && resultLocationValue.Type != JTokenType.Null)
                                                    {
                                                        string resultLocationInstance = ((string)resultLocationValue);
                                                        hiveJobStatementInfoInstance.ResultLocation = resultLocationInstance;
                                                    }
                                                    
                                                    JToken errorMessageValue2 = statementInfoValue["errorMessage"];
                                                    if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                    {
                                                        string errorMessageInstance2 = ((string)errorMessageValue2);
                                                        hiveJobStatementInfoInstance.ErrorMessage = errorMessageInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken warehouseLocationValue = propertiesValue["warehouseLocation"];
                                            if (warehouseLocationValue != null && warehouseLocationValue.Type != JTokenType.Null)
                                            {
                                                string warehouseLocationInstance = ((string)warehouseLocationValue);
                                                hivePropertiesInstance.WarehouseLocation = warehouseLocationInstance;
                                            }
                                            
                                            JToken runtimeVersionValue = propertiesValue["runtimeVersion"];
                                            if (runtimeVersionValue != null && runtimeVersionValue.Type != JTokenType.Null)
                                            {
                                                string runtimeVersionInstance = ((string)runtimeVersionValue);
                                                hivePropertiesInstance.RuntimeVersion = runtimeVersionInstance;
                                            }
                                            
                                            JToken scriptValue = propertiesValue["script"];
                                            if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                            {
                                                string scriptInstance = ((string)scriptValue);
                                                hivePropertiesInstance.Script = scriptInstance;
                                            }
                                            
                                            JToken typeValue2 = propertiesValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                hivePropertiesInstance.Type = typeInstance2;
                                            }
                                            jobInformationInstance.Properties = hivePropertiesInstance;
                                        }
                                        if (typeName == "USql")
                                        {
                                            USqlProperties uSqlPropertiesInstance = new USqlProperties();
                                            
                                            JToken resourcesArray = propertiesValue["resources"];
                                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                                {
                                                    JobResource jobResourceInstance = new JobResource();
                                                    uSqlPropertiesInstance.Resources.Add(jobResourceInstance);
                                                    
                                                    JToken nameValue2 = resourcesValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        jobResourceInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken resourcePathValue = resourcesValue["resourcePath"];
                                                    if (resourcePathValue != null && resourcePathValue.Type != JTokenType.Null)
                                                    {
                                                        string resourcePathInstance = ((string)resourcePathValue);
                                                        jobResourceInstance.ResourcePath = resourcePathInstance;
                                                    }
                                                    
                                                    JToken typeValue3 = resourcesValue["type"];
                                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance3 = ((string)typeValue3);
                                                        jobResourceInstance.Type = typeInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken algebraFilePathValue = propertiesValue["algebraFilePath"];
                                            if (algebraFilePathValue != null && algebraFilePathValue.Type != JTokenType.Null)
                                            {
                                                string algebraFilePathInstance = ((string)algebraFilePathValue);
                                                uSqlPropertiesInstance.AlgebraFilePath = algebraFilePathInstance;
                                            }
                                            
                                            JToken totalCompilationTimeValue = propertiesValue["totalCompilationTime"];
                                            if (totalCompilationTimeValue != null && totalCompilationTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalCompilationTimeInstance = TimeSpan.Parse(((string)totalCompilationTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalCompilationTime = totalCompilationTimeInstance;
                                            }
                                            
                                            JToken totalPauseTimeValue = propertiesValue["totalPauseTime"];
                                            if (totalPauseTimeValue != null && totalPauseTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalPauseTimeInstance = TimeSpan.Parse(((string)totalPauseTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalPausedTime = totalPauseTimeInstance;
                                            }
                                            
                                            JToken totalQueuedTimeValue = propertiesValue["totalQueuedTime"];
                                            if (totalQueuedTimeValue != null && totalQueuedTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalQueuedTimeInstance = TimeSpan.Parse(((string)totalQueuedTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalQueuedTime = totalQueuedTimeInstance;
                                            }
                                            
                                            JToken totalRunningTimeValue = propertiesValue["totalRunningTime"];
                                            if (totalRunningTimeValue != null && totalRunningTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalRunningTimeInstance = TimeSpan.Parse(((string)totalRunningTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalRunningTime = totalRunningTimeInstance;
                                            }
                                            
                                            JToken rootProcessNodeIdValue = propertiesValue["rootProcessNodeId"];
                                            if (rootProcessNodeIdValue != null && rootProcessNodeIdValue.Type != JTokenType.Null)
                                            {
                                                Guid rootProcessNodeIdInstance = Guid.Parse(((string)rootProcessNodeIdValue));
                                                uSqlPropertiesInstance.RootProcessNodeId = rootProcessNodeIdInstance;
                                            }
                                            
                                            JToken yarnApplicationIdValue = propertiesValue["yarnApplicationId"];
                                            if (yarnApplicationIdValue != null && yarnApplicationIdValue.Type != JTokenType.Null)
                                            {
                                                int yarnApplicationIdInstance = ((int)yarnApplicationIdValue);
                                                uSqlPropertiesInstance.YarnApplicationId = yarnApplicationIdInstance;
                                            }
                                            
                                            JToken yarnApplicationTimeStampValue = propertiesValue["yarnApplicationTimeStamp"];
                                            if (yarnApplicationTimeStampValue != null && yarnApplicationTimeStampValue.Type != JTokenType.Null)
                                            {
                                                long yarnApplicationTimeStampInstance = ((long)yarnApplicationTimeStampValue);
                                                uSqlPropertiesInstance.YarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
                                            }
                                            
                                            JToken compileModeValue = propertiesValue["compileMode"];
                                            if (compileModeValue != null && compileModeValue.Type != JTokenType.Null)
                                            {
                                                string compileModeInstance = ((string)compileModeValue);
                                                uSqlPropertiesInstance.CompileMode = compileModeInstance;
                                            }
                                            
                                            JToken diagnosticsArray = propertiesValue["diagnostics"];
                                            if (diagnosticsArray != null && diagnosticsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken diagnosticsValue in ((JArray)diagnosticsArray))
                                                {
                                                    Diagnostics diagnosticsInstance = new Diagnostics();
                                                    uSqlPropertiesInstance.Diagnostics.Add(diagnosticsInstance);
                                                    
                                                    JToken columnNumberValue = diagnosticsValue["columnNumber"];
                                                    if (columnNumberValue != null && columnNumberValue.Type != JTokenType.Null)
                                                    {
                                                        int columnNumberInstance = ((int)columnNumberValue);
                                                        diagnosticsInstance.ColumnNumber = columnNumberInstance;
                                                    }
                                                    
                                                    JToken endValue = diagnosticsValue["end"];
                                                    if (endValue != null && endValue.Type != JTokenType.Null)
                                                    {
                                                        int endInstance = ((int)endValue);
                                                        diagnosticsInstance.End = endInstance;
                                                    }
                                                    
                                                    JToken lineNumberValue = diagnosticsValue["lineNumber"];
                                                    if (lineNumberValue != null && lineNumberValue.Type != JTokenType.Null)
                                                    {
                                                        int lineNumberInstance = ((int)lineNumberValue);
                                                        diagnosticsInstance.LineNumber = lineNumberInstance;
                                                    }
                                                    
                                                    JToken messageValue = diagnosticsValue["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        diagnosticsInstance.Message = messageInstance;
                                                    }
                                                    
                                                    JToken severityValue = diagnosticsValue["severity"];
                                                    if (severityValue != null && severityValue.Type != JTokenType.Null)
                                                    {
                                                        string severityInstance = ((string)severityValue);
                                                        diagnosticsInstance.Severity = severityInstance;
                                                    }
                                                    
                                                    JToken startValue = diagnosticsValue["start"];
                                                    if (startValue != null && startValue.Type != JTokenType.Null)
                                                    {
                                                        int startInstance = ((int)startValue);
                                                        diagnosticsInstance.Start = startInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken runtimeVersionValue2 = propertiesValue["runtimeVersion"];
                                            if (runtimeVersionValue2 != null && runtimeVersionValue2.Type != JTokenType.Null)
                                            {
                                                string runtimeVersionInstance2 = ((string)runtimeVersionValue2);
                                                uSqlPropertiesInstance.RuntimeVersion = runtimeVersionInstance2;
                                            }
                                            
                                            JToken scriptValue2 = propertiesValue["script"];
                                            if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                            {
                                                string scriptInstance2 = ((string)scriptValue2);
                                                uSqlPropertiesInstance.Script = scriptInstance2;
                                            }
                                            
                                            JToken typeValue4 = propertiesValue["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                uSqlPropertiesInstance.Type = typeInstance4;
                                            }
                                            jobInformationInstance.Properties = uSqlPropertiesInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                result.Count = countInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of the Data Lake Analytics JobInformation
        /// objects within the specified resource group with a link to the
        /// next page, if any.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Analytics account to get the
        /// job from
        /// </param>
        /// <param name='queryString'>
        /// Optional. OData Query parameter string (e.g.
        /// '$orderBy=SubmitTime,$filter=State eq Succeeded'). If null is
        /// passed returns all JobInfo items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of jobInfo items.
        /// </returns>
        public async Task<JobInfoListResponse> ListWithQueryStringAsync(string resourceGroupName, string accountName, string queryString, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("queryString", queryString);
                TracingAdapter.Enter(invocationId, this, "ListWithQueryStringAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.JobServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.JobServiceUri);
            }
            url = url + "/Jobs";
            List<string> queryParameters = new List<string>();
            if (queryString != null)
            {
                queryParameters.Add(queryString);
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.AnalyticsJob 0.9.5-preview" + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("x-ms-client-resource-group-name", resourceGroupName);
                httpRequest.Headers.Add("x-ms-client-subscription-id", this.Client.Credentials.SubscriptionId);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    JobInfoListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new JobInfoListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    JobInformation jobInformationInstance = new JobInformation();
                                    result.Value.Add(jobInformationInstance);
                                    
                                    JToken jobIdValue = valueValue["jobId"];
                                    if (jobIdValue != null && jobIdValue.Type != JTokenType.Null)
                                    {
                                        Guid jobIdInstance = Guid.Parse(((string)jobIdValue));
                                        jobInformationInstance.JobId = jobIdInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        jobInformationInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        jobInformationInstance.Type = typeInstance;
                                    }
                                    
                                    JToken submitterValue = valueValue["submitter"];
                                    if (submitterValue != null && submitterValue.Type != JTokenType.Null)
                                    {
                                        string submitterInstance = ((string)submitterValue);
                                        jobInformationInstance.Submitter = submitterInstance;
                                    }
                                    
                                    JToken errorMessageValue = valueValue["errorMessage"];
                                    if (errorMessageValue != null && errorMessageValue.Type != JTokenType.Null)
                                    {
                                        string errorMessageInstance = ((string)errorMessageValue);
                                        jobInformationInstance.ErrorMessage = errorMessageInstance;
                                    }
                                    
                                    JToken degreeOfParallelismValue = valueValue["degreeOfParallelism"];
                                    if (degreeOfParallelismValue != null && degreeOfParallelismValue.Type != JTokenType.Null)
                                    {
                                        int degreeOfParallelismInstance = ((int)degreeOfParallelismValue);
                                        jobInformationInstance.DegreeOfParallelism = degreeOfParallelismInstance;
                                    }
                                    
                                    JToken priorityValue = valueValue["priority"];
                                    if (priorityValue != null && priorityValue.Type != JTokenType.Null)
                                    {
                                        int priorityInstance = ((int)priorityValue);
                                        jobInformationInstance.Priority = priorityInstance;
                                    }
                                    
                                    JToken submitTimeValue = valueValue["submitTime"];
                                    if (submitTimeValue != null && submitTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset submitTimeInstance = ((DateTimeOffset)submitTimeValue);
                                        jobInformationInstance.SubmitTime = submitTimeInstance;
                                    }
                                    
                                    JToken startTimeValue = valueValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                        jobInformationInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken endTimeValue = valueValue["endTime"];
                                    if (endTimeValue != null && endTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset endTimeInstance = ((DateTimeOffset)endTimeValue);
                                        jobInformationInstance.EndTime = endTimeInstance;
                                    }
                                    
                                    JToken stateValue = valueValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        JobState stateInstance = DataLakeAnalyticsJobManagementClient.ParseJobState(((string)stateValue));
                                        jobInformationInstance.State = stateInstance;
                                    }
                                    
                                    JToken resultValue = valueValue["result"];
                                    if (resultValue != null && resultValue.Type != JTokenType.Null)
                                    {
                                        JobResult resultInstance = DataLakeAnalyticsJobManagementClient.ParseJobResult(((string)resultValue));
                                        jobInformationInstance.Result = resultInstance;
                                    }
                                    
                                    JToken stateAuditRecordsArray = valueValue["stateAuditRecords"];
                                    if (stateAuditRecordsArray != null && stateAuditRecordsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken stateAuditRecordsValue in ((JArray)stateAuditRecordsArray))
                                        {
                                            JobStateAuditRecord jobStateAuditRecordInstance = new JobStateAuditRecord();
                                            jobInformationInstance.StateAuditRecords.Add(jobStateAuditRecordInstance);
                                            
                                            JToken newStateValue = stateAuditRecordsValue["newState"];
                                            if (newStateValue != null && newStateValue.Type != JTokenType.Null)
                                            {
                                                string newStateInstance = ((string)newStateValue);
                                                jobStateAuditRecordInstance.NewState = newStateInstance;
                                            }
                                            
                                            JToken timeStampValue = stateAuditRecordsValue["timeStamp"];
                                            if (timeStampValue != null && timeStampValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset timeStampInstance = ((DateTimeOffset)timeStampValue);
                                                jobStateAuditRecordInstance.TimeStamp = timeStampInstance;
                                            }
                                            
                                            JToken requestedByUserValue = stateAuditRecordsValue["requestedByUser"];
                                            if (requestedByUserValue != null && requestedByUserValue.Type != JTokenType.Null)
                                            {
                                                string requestedByUserInstance = ((string)requestedByUserValue);
                                                jobStateAuditRecordInstance.RequestedByUser = requestedByUserInstance;
                                            }
                                            
                                            JToken detailsValue = stateAuditRecordsValue["details"];
                                            if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                            {
                                                string detailsInstance = ((string)detailsValue);
                                                jobStateAuditRecordInstance.Details = detailsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        string typeName = ((string)propertiesValue["type"]);
                                        if (typeName == "Hive")
                                        {
                                            HiveProperties hivePropertiesInstance = new HiveProperties();
                                            
                                            JToken statementCountValue = propertiesValue["statementCount"];
                                            if (statementCountValue != null && statementCountValue.Type != JTokenType.Null)
                                            {
                                                int statementCountInstance = ((int)statementCountValue);
                                                hivePropertiesInstance.StatementCount = statementCountInstance;
                                            }
                                            
                                            JToken executedStatementCountValue = propertiesValue["executedStatementCount"];
                                            if (executedStatementCountValue != null && executedStatementCountValue.Type != JTokenType.Null)
                                            {
                                                int executedStatementCountInstance = ((int)executedStatementCountValue);
                                                hivePropertiesInstance.ExecutedStatementCount = executedStatementCountInstance;
                                            }
                                            
                                            JToken logsLocationValue = propertiesValue["logsLocation"];
                                            if (logsLocationValue != null && logsLocationValue.Type != JTokenType.Null)
                                            {
                                                string logsLocationInstance = ((string)logsLocationValue);
                                                hivePropertiesInstance.LogsLocation = logsLocationInstance;
                                            }
                                            
                                            JToken statementInfoArray = propertiesValue["statementInfo"];
                                            if (statementInfoArray != null && statementInfoArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken statementInfoValue in ((JArray)statementInfoArray))
                                                {
                                                    HiveJobStatementInfo hiveJobStatementInfoInstance = new HiveJobStatementInfo();
                                                    hivePropertiesInstance.StatementInfo.Add(hiveJobStatementInfoInstance);
                                                    
                                                    JToken logLocationValue = statementInfoValue["logLocation"];
                                                    if (logLocationValue != null && logLocationValue.Type != JTokenType.Null)
                                                    {
                                                        string logLocationInstance = ((string)logLocationValue);
                                                        hiveJobStatementInfoInstance.LogLocation = logLocationInstance;
                                                    }
                                                    
                                                    JToken resultPreviewLocationValue = statementInfoValue["resultPreviewLocation"];
                                                    if (resultPreviewLocationValue != null && resultPreviewLocationValue.Type != JTokenType.Null)
                                                    {
                                                        string resultPreviewLocationInstance = ((string)resultPreviewLocationValue);
                                                        hiveJobStatementInfoInstance.ResultPreviewLocation = resultPreviewLocationInstance;
                                                    }
                                                    
                                                    JToken resultLocationValue = statementInfoValue["resultLocation"];
                                                    if (resultLocationValue != null && resultLocationValue.Type != JTokenType.Null)
                                                    {
                                                        string resultLocationInstance = ((string)resultLocationValue);
                                                        hiveJobStatementInfoInstance.ResultLocation = resultLocationInstance;
                                                    }
                                                    
                                                    JToken errorMessageValue2 = statementInfoValue["errorMessage"];
                                                    if (errorMessageValue2 != null && errorMessageValue2.Type != JTokenType.Null)
                                                    {
                                                        string errorMessageInstance2 = ((string)errorMessageValue2);
                                                        hiveJobStatementInfoInstance.ErrorMessage = errorMessageInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken warehouseLocationValue = propertiesValue["warehouseLocation"];
                                            if (warehouseLocationValue != null && warehouseLocationValue.Type != JTokenType.Null)
                                            {
                                                string warehouseLocationInstance = ((string)warehouseLocationValue);
                                                hivePropertiesInstance.WarehouseLocation = warehouseLocationInstance;
                                            }
                                            
                                            JToken runtimeVersionValue = propertiesValue["runtimeVersion"];
                                            if (runtimeVersionValue != null && runtimeVersionValue.Type != JTokenType.Null)
                                            {
                                                string runtimeVersionInstance = ((string)runtimeVersionValue);
                                                hivePropertiesInstance.RuntimeVersion = runtimeVersionInstance;
                                            }
                                            
                                            JToken scriptValue = propertiesValue["script"];
                                            if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                            {
                                                string scriptInstance = ((string)scriptValue);
                                                hivePropertiesInstance.Script = scriptInstance;
                                            }
                                            
                                            JToken typeValue2 = propertiesValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                hivePropertiesInstance.Type = typeInstance2;
                                            }
                                            jobInformationInstance.Properties = hivePropertiesInstance;
                                        }
                                        if (typeName == "USql")
                                        {
                                            USqlProperties uSqlPropertiesInstance = new USqlProperties();
                                            
                                            JToken resourcesArray = propertiesValue["resources"];
                                            if (resourcesArray != null && resourcesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken resourcesValue in ((JArray)resourcesArray))
                                                {
                                                    JobResource jobResourceInstance = new JobResource();
                                                    uSqlPropertiesInstance.Resources.Add(jobResourceInstance);
                                                    
                                                    JToken nameValue2 = resourcesValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        jobResourceInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken resourcePathValue = resourcesValue["resourcePath"];
                                                    if (resourcePathValue != null && resourcePathValue.Type != JTokenType.Null)
                                                    {
                                                        string resourcePathInstance = ((string)resourcePathValue);
                                                        jobResourceInstance.ResourcePath = resourcePathInstance;
                                                    }
                                                    
                                                    JToken typeValue3 = resourcesValue["type"];
                                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance3 = ((string)typeValue3);
                                                        jobResourceInstance.Type = typeInstance3;
                                                    }
                                                }
                                            }
                                            
                                            JToken algebraFilePathValue = propertiesValue["algebraFilePath"];
                                            if (algebraFilePathValue != null && algebraFilePathValue.Type != JTokenType.Null)
                                            {
                                                string algebraFilePathInstance = ((string)algebraFilePathValue);
                                                uSqlPropertiesInstance.AlgebraFilePath = algebraFilePathInstance;
                                            }
                                            
                                            JToken totalCompilationTimeValue = propertiesValue["totalCompilationTime"];
                                            if (totalCompilationTimeValue != null && totalCompilationTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalCompilationTimeInstance = TimeSpan.Parse(((string)totalCompilationTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalCompilationTime = totalCompilationTimeInstance;
                                            }
                                            
                                            JToken totalPauseTimeValue = propertiesValue["totalPauseTime"];
                                            if (totalPauseTimeValue != null && totalPauseTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalPauseTimeInstance = TimeSpan.Parse(((string)totalPauseTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalPausedTime = totalPauseTimeInstance;
                                            }
                                            
                                            JToken totalQueuedTimeValue = propertiesValue["totalQueuedTime"];
                                            if (totalQueuedTimeValue != null && totalQueuedTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalQueuedTimeInstance = TimeSpan.Parse(((string)totalQueuedTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalQueuedTime = totalQueuedTimeInstance;
                                            }
                                            
                                            JToken totalRunningTimeValue = propertiesValue["totalRunningTime"];
                                            if (totalRunningTimeValue != null && totalRunningTimeValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan totalRunningTimeInstance = TimeSpan.Parse(((string)totalRunningTimeValue), CultureInfo.InvariantCulture);
                                                uSqlPropertiesInstance.TotalRunningTime = totalRunningTimeInstance;
                                            }
                                            
                                            JToken rootProcessNodeIdValue = propertiesValue["rootProcessNodeId"];
                                            if (rootProcessNodeIdValue != null && rootProcessNodeIdValue.Type != JTokenType.Null)
                                            {
                                                Guid rootProcessNodeIdInstance = Guid.Parse(((string)rootProcessNodeIdValue));
                                                uSqlPropertiesInstance.RootProcessNodeId = rootProcessNodeIdInstance;
                                            }
                                            
                                            JToken yarnApplicationIdValue = propertiesValue["yarnApplicationId"];
                                            if (yarnApplicationIdValue != null && yarnApplicationIdValue.Type != JTokenType.Null)
                                            {
                                                int yarnApplicationIdInstance = ((int)yarnApplicationIdValue);
                                                uSqlPropertiesInstance.YarnApplicationId = yarnApplicationIdInstance;
                                            }
                                            
                                            JToken yarnApplicationTimeStampValue = propertiesValue["yarnApplicationTimeStamp"];
                                            if (yarnApplicationTimeStampValue != null && yarnApplicationTimeStampValue.Type != JTokenType.Null)
                                            {
                                                long yarnApplicationTimeStampInstance = ((long)yarnApplicationTimeStampValue);
                                                uSqlPropertiesInstance.YarnApplicationTimeStamp = yarnApplicationTimeStampInstance;
                                            }
                                            
                                            JToken compileModeValue = propertiesValue["compileMode"];
                                            if (compileModeValue != null && compileModeValue.Type != JTokenType.Null)
                                            {
                                                string compileModeInstance = ((string)compileModeValue);
                                                uSqlPropertiesInstance.CompileMode = compileModeInstance;
                                            }
                                            
                                            JToken diagnosticsArray = propertiesValue["diagnostics"];
                                            if (diagnosticsArray != null && diagnosticsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken diagnosticsValue in ((JArray)diagnosticsArray))
                                                {
                                                    Diagnostics diagnosticsInstance = new Diagnostics();
                                                    uSqlPropertiesInstance.Diagnostics.Add(diagnosticsInstance);
                                                    
                                                    JToken columnNumberValue = diagnosticsValue["columnNumber"];
                                                    if (columnNumberValue != null && columnNumberValue.Type != JTokenType.Null)
                                                    {
                                                        int columnNumberInstance = ((int)columnNumberValue);
                                                        diagnosticsInstance.ColumnNumber = columnNumberInstance;
                                                    }
                                                    
                                                    JToken endValue = diagnosticsValue["end"];
                                                    if (endValue != null && endValue.Type != JTokenType.Null)
                                                    {
                                                        int endInstance = ((int)endValue);
                                                        diagnosticsInstance.End = endInstance;
                                                    }
                                                    
                                                    JToken lineNumberValue = diagnosticsValue["lineNumber"];
                                                    if (lineNumberValue != null && lineNumberValue.Type != JTokenType.Null)
                                                    {
                                                        int lineNumberInstance = ((int)lineNumberValue);
                                                        diagnosticsInstance.LineNumber = lineNumberInstance;
                                                    }
                                                    
                                                    JToken messageValue = diagnosticsValue["message"];
                                                    if (messageValue != null && messageValue.Type != JTokenType.Null)
                                                    {
                                                        string messageInstance = ((string)messageValue);
                                                        diagnosticsInstance.Message = messageInstance;
                                                    }
                                                    
                                                    JToken severityValue = diagnosticsValue["severity"];
                                                    if (severityValue != null && severityValue.Type != JTokenType.Null)
                                                    {
                                                        string severityInstance = ((string)severityValue);
                                                        diagnosticsInstance.Severity = severityInstance;
                                                    }
                                                    
                                                    JToken startValue = diagnosticsValue["start"];
                                                    if (startValue != null && startValue.Type != JTokenType.Null)
                                                    {
                                                        int startInstance = ((int)startValue);
                                                        diagnosticsInstance.Start = startInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken runtimeVersionValue2 = propertiesValue["runtimeVersion"];
                                            if (runtimeVersionValue2 != null && runtimeVersionValue2.Type != JTokenType.Null)
                                            {
                                                string runtimeVersionInstance2 = ((string)runtimeVersionValue2);
                                                uSqlPropertiesInstance.RuntimeVersion = runtimeVersionInstance2;
                                            }
                                            
                                            JToken scriptValue2 = propertiesValue["script"];
                                            if (scriptValue2 != null && scriptValue2.Type != JTokenType.Null)
                                            {
                                                string scriptInstance2 = ((string)scriptValue2);
                                                uSqlPropertiesInstance.Script = scriptInstance2;
                                            }
                                            
                                            JToken typeValue4 = propertiesValue["type"];
                                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                            {
                                                string typeInstance4 = ((string)typeValue4);
                                                uSqlPropertiesInstance.Type = typeInstance4;
                                            }
                                            jobInformationInstance.Properties = uSqlPropertiesInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                            
                            JToken countValue = responseDoc["count"];
                            if (countValue != null && countValue.Type != JTokenType.Null)
                            {
                                long countInstance = ((long)countValue);
                                result.Count = countInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
