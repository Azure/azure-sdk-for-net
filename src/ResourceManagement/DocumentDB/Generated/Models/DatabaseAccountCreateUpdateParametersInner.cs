// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.DocumentDB.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.DocumentDB;
    using Microsoft.Azure.Management.DocumentDB.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Parameters to create and update DocumentDB database accounts.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DatabaseAccountCreateUpdateParametersInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the
        /// DatabaseAccountCreateUpdateParametersInner class.
        /// </summary>
        public DatabaseAccountCreateUpdateParametersInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// DatabaseAccountCreateUpdateParametersInner class.
        /// </summary>
        /// <param name="locations">An array that contains the georeplication
        /// locations enabled for the DocumentDB account.</param>
        /// <param name="kind">Indicates the type of database account. This can
        /// only be set at database account creation. Possible values include:
        /// 'GlobalDocumentDB', 'MongoDB', 'Parse'</param>
        /// <param name="consistencyPolicy">The consistency policy for the
        /// DocumentDB account.</param>
        /// <param name="ipRangeFilter">DocumentDB Firewall Support: This value
        /// specifies the set of IP addresses or IP address ranges in CIDR form
        /// to be included as the allowed list of client IPs for a given
        /// database account. IP addresses/ranges must be comma separated and
        /// must not contain any spaces.</param>
        /// <param name="enableAutomaticFailover">Enables automatic failover of
        /// the write region in the rare event that the region is unavailable
        /// due to an outage. Automatic failover will result in a new write
        /// region for the account and is chosen based on the failover
        /// priorities configured for the account.</param>
        public DatabaseAccountCreateUpdateParametersInner(IList<Location> locations, string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string kind = default(string), ConsistencyPolicy consistencyPolicy = default(ConsistencyPolicy), string ipRangeFilter = default(string), bool? enableAutomaticFailover = default(bool?))
            : base(location, id, name, type, tags)
        {
            Kind = kind;
            ConsistencyPolicy = consistencyPolicy;
            Locations = locations;
            IpRangeFilter = ipRangeFilter;
            EnableAutomaticFailover = enableAutomaticFailover;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for DatabaseAccountCreateUpdateParametersInner
        /// class.
        /// </summary>
        static DatabaseAccountCreateUpdateParametersInner()
        {
            DatabaseAccountOfferType = "Standard";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets indicates the type of database account. This can only
        /// be set at database account creation. Possible values include:
        /// 'GlobalDocumentDB', 'MongoDB', 'Parse'
        /// </summary>
        [JsonProperty(PropertyName = "kind")]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or sets the consistency policy for the DocumentDB account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.consistencyPolicy")]
        public ConsistencyPolicy ConsistencyPolicy { get; set; }

        /// <summary>
        /// Gets or sets an array that contains the georeplication locations
        /// enabled for the DocumentDB account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.locations")]
        public IList<Location> Locations { get; set; }

        /// <summary>
        /// Gets or sets documentDB Firewall Support: This value specifies the
        /// set of IP addresses or IP address ranges in CIDR form to be
        /// included as the allowed list of client IPs for a given database
        /// account. IP addresses/ranges must be comma separated and must not
        /// contain any spaces.
        /// </summary>
        [JsonProperty(PropertyName = "properties.ipRangeFilter")]
        public string IpRangeFilter { get; set; }

        /// <summary>
        /// Gets or sets enables automatic failover of the write region in the
        /// rare event that the region is unavailable due to an outage.
        /// Automatic failover will result in a new write region for the
        /// account and is chosen based on the failover priorities configured
        /// for the account.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableAutomaticFailover")]
        public bool? EnableAutomaticFailover { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseAccountOfferType")]
        public static string DatabaseAccountOfferType { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Locations == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Locations");
            }
            if (ConsistencyPolicy != null)
            {
                ConsistencyPolicy.Validate();
            }
            if (Locations != null)
            {
                foreach (var element in Locations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
