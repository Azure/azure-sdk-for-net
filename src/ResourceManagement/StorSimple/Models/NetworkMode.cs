// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.StorSimple;
    using Microsoft.Azure.Management.StorSimple.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for NetworkMode.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NetworkMode
    {
        [EnumMember(Value = "Invalid")]
        Invalid,
        [EnumMember(Value = "IPV4")]
        IPV4,
        [EnumMember(Value = "IPV6")]
        IPV6,
        [EnumMember(Value = "BOTH")]
        BOTH
    }
    internal static class NetworkModeEnumExtension
    {
        internal static string ToSerializedValue(this NetworkMode? value)
        {
            return value == null ? null : ((NetworkMode)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this NetworkMode value)
        {
            switch( value )
            {
                case NetworkMode.Invalid:
                    return "Invalid";
                case NetworkMode.IPV4:
                    return "IPV4";
                case NetworkMode.IPV6:
                    return "IPV6";
                case NetworkMode.BOTH:
                    return "BOTH";
            }
            return null;
        }

        internal static NetworkMode? ParseNetworkMode(this string value)
        {
            switch( value )
            {
                case "Invalid":
                    return NetworkMode.Invalid;
                case "IPV4":
                    return NetworkMode.IPV4;
                case "IPV6":
                    return NetworkMode.IPV6;
                case "BOTH":
                    return NetworkMode.BOTH;
            }
            return null;
        }
    }
}
