// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.StorSimple;
    using Microsoft.Azure.Management.StorSimple.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for NetInterfaceId.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum NetInterfaceId
    {
        [EnumMember(Value = "Invalid")]
        Invalid,
        [EnumMember(Value = "Data0")]
        Data0,
        [EnumMember(Value = "Data1")]
        Data1,
        [EnumMember(Value = "Data2")]
        Data2,
        [EnumMember(Value = "Data3")]
        Data3,
        [EnumMember(Value = "Data4")]
        Data4,
        [EnumMember(Value = "Data5")]
        Data5
    }
    internal static class NetInterfaceIdEnumExtension
    {
        internal static string ToSerializedValue(this NetInterfaceId? value)
        {
            return value == null ? null : ((NetInterfaceId)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this NetInterfaceId value)
        {
            switch( value )
            {
                case NetInterfaceId.Invalid:
                    return "Invalid";
                case NetInterfaceId.Data0:
                    return "Data0";
                case NetInterfaceId.Data1:
                    return "Data1";
                case NetInterfaceId.Data2:
                    return "Data2";
                case NetInterfaceId.Data3:
                    return "Data3";
                case NetInterfaceId.Data4:
                    return "Data4";
                case NetInterfaceId.Data5:
                    return "Data5";
            }
            return null;
        }

        internal static NetInterfaceId? ParseNetInterfaceId(this string value)
        {
            switch( value )
            {
                case "Invalid":
                    return NetInterfaceId.Invalid;
                case "Data0":
                    return NetInterfaceId.Data0;
                case "Data1":
                    return NetInterfaceId.Data1;
                case "Data2":
                    return NetInterfaceId.Data2;
                case "Data3":
                    return NetInterfaceId.Data3;
                case "Data4":
                    return NetInterfaceId.Data4;
                case "Data5":
                    return NetInterfaceId.Data5;
            }
            return null;
        }
    }
}
