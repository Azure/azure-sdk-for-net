// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.StorSimple;
    using Microsoft.Azure.Management.StorSimple.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for DeviceType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum DeviceType
    {
        [EnumMember(Value = "Invalid")]
        Invalid,
        [EnumMember(Value = "Series8000VirtualAppliance")]
        Series8000VirtualAppliance,
        [EnumMember(Value = "Series8000PhysicalAppliance")]
        Series8000PhysicalAppliance
    }
    internal static class DeviceTypeEnumExtension
    {
        internal static string ToSerializedValue(this DeviceType? value)
        {
            return value == null ? null : ((DeviceType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this DeviceType value)
        {
            switch( value )
            {
                case DeviceType.Invalid:
                    return "Invalid";
                case DeviceType.Series8000VirtualAppliance:
                    return "Series8000VirtualAppliance";
                case DeviceType.Series8000PhysicalAppliance:
                    return "Series8000PhysicalAppliance";
            }
            return null;
        }

        internal static DeviceType? ParseDeviceType(this string value)
        {
            switch( value )
            {
                case "Invalid":
                    return DeviceType.Invalid;
                case "Series8000VirtualAppliance":
                    return DeviceType.Series8000VirtualAppliance;
                case "Series8000PhysicalAppliance":
                    return DeviceType.Series8000PhysicalAppliance;
            }
            return null;
        }
    }
}
