// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.StorSimple;
    using Microsoft.Azure.Management.StorSimple.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for RecurrenceType.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum RecurrenceType
    {
        [EnumMember(Value = "Minutes")]
        Minutes,
        [EnumMember(Value = "Hourly")]
        Hourly,
        [EnumMember(Value = "Daily")]
        Daily,
        [EnumMember(Value = "Weekly")]
        Weekly
    }
    internal static class RecurrenceTypeEnumExtension
    {
        internal static string ToSerializedValue(this RecurrenceType? value)
        {
            return value == null ? null : ((RecurrenceType)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this RecurrenceType value)
        {
            switch( value )
            {
                case RecurrenceType.Minutes:
                    return "Minutes";
                case RecurrenceType.Hourly:
                    return "Hourly";
                case RecurrenceType.Daily:
                    return "Daily";
                case RecurrenceType.Weekly:
                    return "Weekly";
            }
            return null;
        }

        internal static RecurrenceType? ParseRecurrenceType(this string value)
        {
            switch( value )
            {
                case "Minutes":
                    return RecurrenceType.Minutes;
                case "Hourly":
                    return RecurrenceType.Hourly;
                case "Daily":
                    return RecurrenceType.Daily;
                case "Weekly":
                    return RecurrenceType.Weekly;
            }
            return null;
        }
    }
}
