// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.StorSimple;
    using Microsoft.Azure.Management.StorSimple.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for HardwareComponentStatus.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum HardwareComponentStatus
    {
        [EnumMember(Value = "Unknown")]
        Unknown,
        [EnumMember(Value = "NotPresent")]
        NotPresent,
        [EnumMember(Value = "PoweredOff")]
        PoweredOff,
        [EnumMember(Value = "Ok")]
        Ok,
        [EnumMember(Value = "Recovering")]
        Recovering,
        [EnumMember(Value = "Warning")]
        Warning,
        [EnumMember(Value = "Failure")]
        Failure
    }
    internal static class HardwareComponentStatusEnumExtension
    {
        internal static string ToSerializedValue(this HardwareComponentStatus? value)
        {
            return value == null ? null : ((HardwareComponentStatus)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this HardwareComponentStatus value)
        {
            switch( value )
            {
                case HardwareComponentStatus.Unknown:
                    return "Unknown";
                case HardwareComponentStatus.NotPresent:
                    return "NotPresent";
                case HardwareComponentStatus.PoweredOff:
                    return "PoweredOff";
                case HardwareComponentStatus.Ok:
                    return "Ok";
                case HardwareComponentStatus.Recovering:
                    return "Recovering";
                case HardwareComponentStatus.Warning:
                    return "Warning";
                case HardwareComponentStatus.Failure:
                    return "Failure";
            }
            return null;
        }

        internal static HardwareComponentStatus? ParseHardwareComponentStatus(this string value)
        {
            switch( value )
            {
                case "Unknown":
                    return HardwareComponentStatus.Unknown;
                case "NotPresent":
                    return HardwareComponentStatus.NotPresent;
                case "PoweredOff":
                    return HardwareComponentStatus.PoweredOff;
                case "Ok":
                    return HardwareComponentStatus.Ok;
                case "Recovering":
                    return HardwareComponentStatus.Recovering;
                case "Warning":
                    return HardwareComponentStatus.Warning;
                case "Failure":
                    return HardwareComponentStatus.Failure;
            }
            return null;
        }
    }
}
