// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.StorSimple.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.StorSimple;
    using Microsoft.Azure.Management.StorSimple.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for TargetEligibilityResultCode.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum TargetEligibilityResultCode
    {
        [EnumMember(Value = "TargetAndSourceCannotBeSameError")]
        TargetAndSourceCannotBeSameError,
        [EnumMember(Value = "TargetIsNotOnlineError")]
        TargetIsNotOnlineError,
        [EnumMember(Value = "TargetSourceIncompatibleVersionError")]
        TargetSourceIncompatibleVersionError,
        [EnumMember(Value = "LocalToTieredVolumesConversionWarning")]
        LocalToTieredVolumesConversionWarning,
        [EnumMember(Value = "TargetInsufficientCapacityError")]
        TargetInsufficientCapacityError,
        [EnumMember(Value = "TargetInsufficientLocalVolumeMemoryError")]
        TargetInsufficientLocalVolumeMemoryError,
        [EnumMember(Value = "TargetInsufficientTieredVolumeMemoryError")]
        TargetInsufficientTieredVolumeMemoryError
    }
    internal static class TargetEligibilityResultCodeEnumExtension
    {
        internal static string ToSerializedValue(this TargetEligibilityResultCode? value)
        {
            return value == null ? null : ((TargetEligibilityResultCode)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this TargetEligibilityResultCode value)
        {
            switch( value )
            {
                case TargetEligibilityResultCode.TargetAndSourceCannotBeSameError:
                    return "TargetAndSourceCannotBeSameError";
                case TargetEligibilityResultCode.TargetIsNotOnlineError:
                    return "TargetIsNotOnlineError";
                case TargetEligibilityResultCode.TargetSourceIncompatibleVersionError:
                    return "TargetSourceIncompatibleVersionError";
                case TargetEligibilityResultCode.LocalToTieredVolumesConversionWarning:
                    return "LocalToTieredVolumesConversionWarning";
                case TargetEligibilityResultCode.TargetInsufficientCapacityError:
                    return "TargetInsufficientCapacityError";
                case TargetEligibilityResultCode.TargetInsufficientLocalVolumeMemoryError:
                    return "TargetInsufficientLocalVolumeMemoryError";
                case TargetEligibilityResultCode.TargetInsufficientTieredVolumeMemoryError:
                    return "TargetInsufficientTieredVolumeMemoryError";
            }
            return null;
        }

        internal static TargetEligibilityResultCode? ParseTargetEligibilityResultCode(this string value)
        {
            switch( value )
            {
                case "TargetAndSourceCannotBeSameError":
                    return TargetEligibilityResultCode.TargetAndSourceCannotBeSameError;
                case "TargetIsNotOnlineError":
                    return TargetEligibilityResultCode.TargetIsNotOnlineError;
                case "TargetSourceIncompatibleVersionError":
                    return TargetEligibilityResultCode.TargetSourceIncompatibleVersionError;
                case "LocalToTieredVolumesConversionWarning":
                    return TargetEligibilityResultCode.LocalToTieredVolumesConversionWarning;
                case "TargetInsufficientCapacityError":
                    return TargetEligibilityResultCode.TargetInsufficientCapacityError;
                case "TargetInsufficientLocalVolumeMemoryError":
                    return TargetEligibilityResultCode.TargetInsufficientLocalVolumeMemoryError;
                case "TargetInsufficientTieredVolumeMemoryError":
                    return TargetEligibilityResultCode.TargetInsufficientTieredVolumeMemoryError;
            }
            return null;
        }
    }
}
