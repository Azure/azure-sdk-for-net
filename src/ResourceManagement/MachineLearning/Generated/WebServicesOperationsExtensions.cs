// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearning.Fluent
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.MachineLearning;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WebServicesOperations.
    /// </summary>
    public static partial class WebServicesOperationsExtensions
    {
            /// <summary>
            /// Create or update a web service. This call will overwrite an existing web
            /// service. Note that there is no warning or confirmation. This is a
            /// nonrecoverable operation. If your intent is to create a new web service,
            /// call the Get operation first to verify that it does not exist.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='webServiceName'>
            /// The name of the web service.
            /// </param>
            /// <param name='createOrUpdatePayload'>
            /// The payload that is used to create or update the web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebServiceInner> CreateOrUpdateAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, WebServiceInner createOrUpdatePayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, webServiceName, createOrUpdatePayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Web Service Definition as specified by a subscription, resource
            /// group, and name. Note that the storage credentials and web service keys are
            /// not returned by this call. To get the web service access keys, call List
            /// Keys.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='webServiceName'>
            /// The name of the web service.
            /// </param>
            /// <param name='region'>
            /// The region for which encrypted credential parameters are valid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebServiceInner> GetAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, string region = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, webServiceName, region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Modifies an existing web service resource. The PATCH API call is an
            /// asynchronous operation. To determine whether it has completed successfully,
            /// you must perform a Get operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='webServiceName'>
            /// The name of the web service.
            /// </param>
            /// <param name='patchPayload'>
            /// The payload to use to patch the web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebServiceInner> PatchAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, WebServiceInner patchPayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchWithHttpMessagesAsync(resourceGroupName, webServiceName, patchPayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='webServiceName'>
            /// The name of the web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task RemoveAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.RemoveWithHttpMessagesAsync(resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates an encrypted credentials parameter blob for the specified region.
            /// To get the web service from a region other than the region in which it has
            /// been created, you must first call Create Regional Web Services Properties
            /// to create a copy of the encrypted credential parameter blob in that region.
            /// You only need to do this before the first time that you get the web service
            /// in the new region.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='webServiceName'>
            /// The name of the web service.
            /// </param>
            /// <param name='region'>
            /// The region for which encrypted credential parameters are created.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AsyncOperationStatusInner> CreateRegionalPropertiesAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateRegionalPropertiesWithHttpMessagesAsync(resourceGroupName, webServiceName, region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the access keys for the specified web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='webServiceName'>
            /// The name of the web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebServiceKeysInner> ListKeysAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysWithHttpMessagesAsync(resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web services in the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='skiptoken'>
            /// Continuation token for pagination.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WebServiceInner>> ListByResourceGroupAsync(this IWebServicesOperations operations, string resourceGroupName, string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web services in the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='skiptoken'>
            /// Continuation token for pagination.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WebServiceInner>> ListBySubscriptionIdAsync(this IWebServicesOperations operations, string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionIdWithHttpMessagesAsync(skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a web service. This call will overwrite an existing web
            /// service. Note that there is no warning or confirmation. This is a
            /// nonrecoverable operation. If your intent is to create a new web service,
            /// call the Get operation first to verify that it does not exist.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='webServiceName'>
            /// The name of the web service.
            /// </param>
            /// <param name='createOrUpdatePayload'>
            /// The payload that is used to create or update the web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebServiceInner> BeginCreateOrUpdateAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, WebServiceInner createOrUpdatePayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, webServiceName, createOrUpdatePayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Modifies an existing web service resource. The PATCH API call is an
            /// asynchronous operation. To determine whether it has completed successfully,
            /// you must perform a Get operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='webServiceName'>
            /// The name of the web service.
            /// </param>
            /// <param name='patchPayload'>
            /// The payload to use to patch the web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WebServiceInner> BeginPatchAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, WebServiceInner patchPayload, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginPatchWithHttpMessagesAsync(resourceGroupName, webServiceName, patchPayload, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the specified web service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='webServiceName'>
            /// The name of the web service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginRemoveAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginRemoveWithHttpMessagesAsync(resourceGroupName, webServiceName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates an encrypted credentials parameter blob for the specified region.
            /// To get the web service from a region other than the region in which it has
            /// been created, you must first call Create Regional Web Services Properties
            /// to create a copy of the encrypted credential parameter blob in that region.
            /// You only need to do this before the first time that you get the web service
            /// in the new region.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group in which the web service is located.
            /// </param>
            /// <param name='webServiceName'>
            /// The name of the web service.
            /// </param>
            /// <param name='region'>
            /// The region for which encrypted credential parameters are created.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AsyncOperationStatusInner> BeginCreateRegionalPropertiesAsync(this IWebServicesOperations operations, string resourceGroupName, string webServiceName, string region, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateRegionalPropertiesWithHttpMessagesAsync(resourceGroupName, webServiceName, region, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web services in the specified resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WebServiceInner>> ListByResourceGroupNextAsync(this IWebServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web services in the specified subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<WebServiceInner>> ListBySubscriptionIdNextAsync(this IWebServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBySubscriptionIdNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
