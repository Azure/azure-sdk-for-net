// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.MachineLearning.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.MachineLearning;
    using Microsoft.Azure.Management.MachineLearning.Fluent;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Defines a global parameter in the graph.
    /// </summary>
    public partial class GraphParameter
    {
        /// <summary>
        /// Initializes a new instance of the GraphParameter class.
        /// </summary>
        public GraphParameter()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GraphParameter class.
        /// </summary>
        /// <param name="type">Graph parameter's type. Possible values include:
        /// 'String', 'Int', 'Float', 'Enumerated', 'Script', 'Mode',
        /// 'Credential', 'Boolean', 'Double', 'ColumnPicker',
        /// 'ParameterRange', 'DataGatewayName'</param>
        /// <param name="links">Association links for this parameter to nodes
        /// in the graph.</param>
        /// <param name="description">Description of this graph
        /// parameter.</param>
        public GraphParameter(string type, IList<GraphParameterLink> links, string description = default(string))
        {
            Description = description;
            Type = type;
            Links = links;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets description of this graph parameter.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets graph parameter's type. Possible values include:
        /// 'String', 'Int', 'Float', 'Enumerated', 'Script', 'Mode',
        /// 'Credential', 'Boolean', 'Double', 'ColumnPicker',
        /// 'ParameterRange', 'DataGatewayName'
        /// </summary>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets association links for this parameter to nodes in the
        /// graph.
        /// </summary>
        [JsonProperty(PropertyName = "links")]
        public IList<GraphParameterLink> Links { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Type");
            }
            if (Links == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Links");
            }
            if (Links != null)
            {
                foreach (var element in Links)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
