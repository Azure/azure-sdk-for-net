// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.WebServices.Models
{
    using System.Linq;

    /// <summary>
    /// Properties specific to a Graph based web service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Graph")]
    public partial class WebServicePropertiesForGraph : WebServiceProperties
    {
        /// <summary>
        /// Initializes a new instance of the WebServicePropertiesForGraph
        /// class.
        /// </summary>
        public WebServicePropertiesForGraph() { }

        /// <summary>
        /// Initializes a new instance of the WebServicePropertiesForGraph
        /// class.
        /// </summary>
        /// <param name="title">The title of the Azure ML web service.</param>
        /// <param name="description">The description of the Azure ML web
        /// service.</param>
        /// <param name="createdOn">The moment of time the Azure ML web
        /// service was created.</param>
        /// <param name="modifiedOn">The moment of time the web service was
        /// last modified.</param>
        /// <param name="provisioningState">The web service resource's
        /// provisioning state. Possible values include: 'Unknown',
        /// 'Provisioning', 'Succeeded', 'Failed', 'Canceled'</param>
        /// <param name="keys">The set of access keys for the web service. If
        /// not specified at creation time (PUT), they will be generated
        /// automatically by the resource provider.</param>
        /// <param name="readOnlyProperty">If true, the web service can no
        /// longer be updated / patched, only removed. Otherwise, the service
        /// resource supports changes.</param>
        /// <param name="swaggerLocation">The uri for the swagger spec
        /// associated with this web service.</param>
        /// <param name="exposeSampleData">Flag that controls whether to
        /// expose sample data or not in the web service's swagger
        /// definition.</param>
        /// <param name="realtimeConfiguration">Configuration for the
        /// service's realtime endpoint.</param>
        /// <param name="diagnostics">Settings controlling the diagnostics
        /// traces collection for the web service.</param>
        /// <param name="storageAccount">The storage account associated with
        /// the service. This is used to store both datasets and diagnostic
        /// traces. This information is required at creation time (PUT) and
        /// only the key is updateable after that. The account credentials
        /// are hidden on a GET web service call.</param>
        /// <param name="machineLearningWorkspace">This is only populated at
        /// creation time (PUT) for web services originating from an AzureML
        /// Studio experiment.</param>
        /// <param name="commitmentPlan">The commitment plan associated with
        /// this web service. This is required to be specified at creation
        /// time (PUT) and is not updateable afterwards.</param>
        /// <param name="input">Swagger schema for the service's input(s), as
        /// applicable.</param>
        /// <param name="output">Swagger schema for the service's output(s),
        /// as applicable.</param>
        /// <param name="exampleRequest">Sample request data for each of the
        /// service's inputs, as applicable.</param>
        /// <param name="assets">Set of assets associated with the web
        /// service.</param>
        /// <param name="parameters">The set of global parameters values
        /// defined for the web service, given as a global parameter name to
        /// default value map. If no default value is specified, the
        /// parameter is considered to be required.</param>
        /// <param name="package">The definition of the graph package making
        /// up this web service.</param>
        public WebServicePropertiesForGraph(string title = default(string), string description = default(string), System.DateTime? createdOn = default(System.DateTime?), System.DateTime? modifiedOn = default(System.DateTime?), string provisioningState = default(string), WebServiceKeys keys = default(WebServiceKeys), bool? readOnlyProperty = default(bool?), string swaggerLocation = default(string), bool? exposeSampleData = default(bool?), RealtimeConfiguration realtimeConfiguration = default(RealtimeConfiguration), DiagnosticsConfiguration diagnostics = default(DiagnosticsConfiguration), StorageAccount storageAccount = default(StorageAccount), MachineLearningWorkspace machineLearningWorkspace = default(MachineLearningWorkspace), CommitmentPlan commitmentPlan = default(CommitmentPlan), ServiceInputOutputSpecification input = default(ServiceInputOutputSpecification), ServiceInputOutputSpecification output = default(ServiceInputOutputSpecification), ExampleRequest exampleRequest = default(ExampleRequest), System.Collections.Generic.IDictionary<string, AssetItem> assets = default(System.Collections.Generic.IDictionary<string, AssetItem>), System.Collections.Generic.IDictionary<string, string> parameters = default(System.Collections.Generic.IDictionary<string, string>), GraphPackage package = default(GraphPackage))
            : base(title, description, createdOn, modifiedOn, provisioningState, keys, readOnlyProperty, swaggerLocation, exposeSampleData, realtimeConfiguration, diagnostics, storageAccount, machineLearningWorkspace, commitmentPlan, input, output, exampleRequest, assets, parameters)
        {
            Package = package;
        }

        /// <summary>
        /// Gets or sets the definition of the graph package making up this
        /// web service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "package")]
        public GraphPackage Package { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
