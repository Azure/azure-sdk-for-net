// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.WebServices.Models
{
    using System.Linq;

    /// <summary>
    /// Information about an asset associated with the web service.
    /// </summary>
    public partial class AssetItem
    {
        /// <summary>
        /// Initializes a new instance of the AssetItem class.
        /// </summary>
        public AssetItem() { }

        /// <summary>
        /// Initializes a new instance of the AssetItem class.
        /// </summary>
        /// <param name="name">Asset's friendly name.</param>
        /// <param name="type">Asset's type. Possible values include:
        /// 'Module', 'Resource'</param>
        /// <param name="locationInfo">Access information for the
        /// asset.</param>
        /// <param name="id">Asset's Id.</param>
        /// <param name="inputPorts">Information about the asset's input
        /// ports.</param>
        /// <param name="outputPorts">Information about the asset's output
        /// ports.</param>
        /// <param name="metadata">If the asset is a custom module, this holds
        /// the module's metadata.</param>
        /// <param name="parameters">If the asset is a custom module, this
        /// holds the module's parameters.</param>
        public AssetItem(string name, string type, AssetLocation locationInfo, string id = default(string), System.Collections.Generic.IDictionary<string, InputPort> inputPorts = default(System.Collections.Generic.IDictionary<string, InputPort>), System.Collections.Generic.IDictionary<string, OutputPort> outputPorts = default(System.Collections.Generic.IDictionary<string, OutputPort>), System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<ModuleAssetParameter> parameters = default(System.Collections.Generic.IList<ModuleAssetParameter>))
        {
            Name = name;
            Id = id;
            Type = type;
            LocationInfo = locationInfo;
            InputPorts = inputPorts;
            OutputPorts = outputPorts;
            Metadata = metadata;
            Parameters = parameters;
        }

        /// <summary>
        /// Gets or sets asset's friendly name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets asset's Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets asset's type. Possible values include: 'Module',
        /// 'Resource'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets access information for the asset.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "locationInfo")]
        public AssetLocation LocationInfo { get; set; }

        /// <summary>
        /// Gets or sets information about the asset's input ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "inputPorts")]
        public System.Collections.Generic.IDictionary<string, InputPort> InputPorts { get; set; }

        /// <summary>
        /// Gets or sets information about the asset's output ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outputPorts")]
        public System.Collections.Generic.IDictionary<string, OutputPort> OutputPorts { get; set; }

        /// <summary>
        /// Gets or sets if the asset is a custom module, this holds the
        /// module's metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata")]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or sets if the asset is a custom module, this holds the
        /// module's parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parameters")]
        public System.Collections.Generic.IList<ModuleAssetParameter> Parameters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
            if (LocationInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "LocationInfo");
            }
            if (this.LocationInfo != null)
            {
                this.LocationInfo.Validate();
            }
        }
    }
}
