// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.WebServices.Models
{
    using System.Linq;

    /// <summary>
    /// Swagger 2.0 schema for a column within the data table representing a
    /// web service input or output. See Swagger specification:
    /// http://swagger.io/specification/
    /// </summary>
    public partial class ColumnSpecification
    {
        /// <summary>
        /// Initializes a new instance of the ColumnSpecification class.
        /// </summary>
        public ColumnSpecification() { }

        /// <summary>
        /// Initializes a new instance of the ColumnSpecification class.
        /// </summary>
        /// <param name="type">Data type of the column. Possible values
        /// include: 'Boolean', 'Integer', 'Number', 'String'</param>
        /// <param name="format">Additional format information for the data
        /// type. Possible values include: 'Byte', 'Char', 'Datetime',
        /// 'Double', 'Duration', 'Float', 'Int8', 'Int16', 'Int32', 'Int64',
        /// 'Uint8', 'Uint16', 'Uint32', 'Uint64'</param>
        /// <param name="enumProperty">If the data type is categorical, this
        /// provides the list of accepted categories.</param>
        /// <param name="xMsIsnullable">Flag indicating if the type supports
        /// null values or not.</param>
        /// <param name="xMsIsordered">Flag indicating whether the categories
        /// are treated as an ordered set or not, if this is a categorical
        /// column.</param>
        public ColumnSpecification(string type, string format = default(string), System.Collections.Generic.IList<object> enumProperty = default(System.Collections.Generic.IList<object>), bool? xMsIsnullable = default(bool?), bool? xMsIsordered = default(bool?))
        {
            Type = type;
            Format = format;
            EnumProperty = enumProperty;
            XMsIsnullable = xMsIsnullable;
            XMsIsordered = xMsIsordered;
        }

        /// <summary>
        /// Gets or sets data type of the column. Possible values include:
        /// 'Boolean', 'Integer', 'Number', 'String'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets additional format information for the data type.
        /// Possible values include: 'Byte', 'Char', 'Datetime', 'Double',
        /// 'Duration', 'Float', 'Int8', 'Int16', 'Int32', 'Int64', 'Uint8',
        /// 'Uint16', 'Uint32', 'Uint64'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "format")]
        public string Format { get; set; }

        /// <summary>
        /// Gets or sets if the data type is categorical, this provides the
        /// list of accepted categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enum")]
        public System.Collections.Generic.IList<object> EnumProperty { get; set; }

        /// <summary>
        /// Gets or sets flag indicating if the type supports null values or
        /// not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "x-ms-isnullable")]
        public bool? XMsIsnullable { get; set; }

        /// <summary>
        /// Gets or sets flag indicating whether the categories are treated as
        /// an ordered set or not, if this is a categorical column.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "x-ms-isordered")]
        public bool? XMsIsordered { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }
        }
    }
}
