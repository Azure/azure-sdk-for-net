// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.WebServices.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the access location for a web service asset.
    /// </summary>
    public partial class AssetLocation
    {
        /// <summary>
        /// Initializes a new instance of the AssetLocation class.
        /// </summary>
        public AssetLocation() { }

        /// <summary>
        /// Initializes a new instance of the AssetLocation class.
        /// </summary>
        /// <param name="uri">The URI where the asset is accessible from,
        /// (e.g. aml://abc for system assets or https://xyz for user
        /// asets</param>
        /// <param name="credentials">Access credentials for the asset, if
        /// applicable (e.g. asset specified by storage account connection
        /// string + blob URI)</param>
        public AssetLocation(string uri, string credentials = default(string))
        {
            Uri = uri;
            Credentials = credentials;
        }

        /// <summary>
        /// Gets or sets the URI where the asset is accessible from, (e.g.
        /// aml://abc for system assets or https://xyz for user asets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uri")]
        public string Uri { get; set; }

        /// <summary>
        /// Gets or sets access credentials for the asset, if applicable (e.g.
        /// asset specified by storage account connection string + blob URI)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "credentials")]
        public string Credentials { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Uri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Uri");
            }
        }
    }
}
