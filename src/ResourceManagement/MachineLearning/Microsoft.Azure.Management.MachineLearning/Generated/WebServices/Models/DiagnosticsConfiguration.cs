// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.MachineLearning.WebServices.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Diagnostics settings for an Azure ML web service.
    /// </summary>
    public partial class DiagnosticsConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the DiagnosticsConfiguration class.
        /// </summary>
        public DiagnosticsConfiguration() { }

        /// <summary>
        /// Initializes a new instance of the DiagnosticsConfiguration class.
        /// </summary>
        public DiagnosticsConfiguration(string level, DateTime? expiry = default(DateTime?))
        {
            Level = level;
            Expiry = expiry;
        }

        /// <summary>
        /// Level of tracing to be used: None - disables tracing; Error -
        /// collects only error (stderr) traces; All - collects all traces
        /// (stdout and stderr). Possible values include: 'None', 'Error',
        /// 'All'
        /// </summary>
        [JsonProperty(PropertyName = "level")]
        public string Level { get; set; }

        /// <summary>
        /// Moment of time after which diagnostics are no longer collected. If
        /// null, diagnostic collection is not time limited.
        /// </summary>
        [JsonProperty(PropertyName = "expiry")]
        public DateTime? Expiry { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Level == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Level");
            }
        }
    }
}
