// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Storage;
using Microsoft.Azure.Management.Storage.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Storage
{
    /// <summary>
    /// The Storage Management Client.
    /// </summary>
    public partial class StorageManagementClient : ServiceClient<StorageManagementClient>, IStorageManagementClient
    {
        private string _apiVersion;
        
        /// <summary>
        /// Gets the API version.
        /// </summary>
        public string ApiVersion
        {
            get { return this._apiVersion; }
        }
        
        private Uri _baseUri;
        
        /// <summary>
        /// Gets the URI used as the base for all cloud service requests.
        /// </summary>
        public Uri BaseUri
        {
            get { return this._baseUri; }
        }
        
        private SubscriptionCloudCredentials _credentials;
        
        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft
        /// Azure subscription. The subscription ID forms part of the URI for
        /// every service call.
        /// </summary>
        public SubscriptionCloudCredentials Credentials
        {
            get { return this._credentials; }
        }
        
        private int _longRunningOperationInitialTimeout;
        
        /// <summary>
        /// Gets or sets the initial timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationInitialTimeout
        {
            get { return this._longRunningOperationInitialTimeout; }
            set { this._longRunningOperationInitialTimeout = value; }
        }
        
        private int _longRunningOperationRetryTimeout;
        
        /// <summary>
        /// Gets or sets the retry timeout for Long Running Operations.
        /// </summary>
        public int LongRunningOperationRetryTimeout
        {
            get { return this._longRunningOperationRetryTimeout; }
            set { this._longRunningOperationRetryTimeout = value; }
        }
        
        private IStorageAccountOperations _storageAccounts;
        
        /// <summary>
        /// Operations for managing storage accounts.
        /// </summary>
        public virtual IStorageAccountOperations StorageAccounts
        {
            get { return this._storageAccounts; }
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageManagementClient class.
        /// </summary>
        public StorageManagementClient()
            : base()
        {
            this._storageAccounts = new StorageAccountOperations(this);
            this._apiVersion = "2015-05-01-preview";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        public StorageManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        public StorageManagementClient(SubscriptionCloudCredentials credentials)
            : this()
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com/");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public StorageManagementClient(HttpClient httpClient)
            : base(httpClient)
        {
            this._storageAccounts = new StorageAccountOperations(this);
            this._apiVersion = "2015-05-01-preview";
            this._longRunningOperationInitialTimeout = -1;
            this._longRunningOperationRetryTimeout = -1;
            this.HttpClient.Timeout = TimeSpan.FromSeconds(300);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='baseUri'>
        /// Optional. Gets the URI used as the base for all cloud service
        /// requests.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public StorageManagementClient(SubscriptionCloudCredentials credentials, Uri baseUri, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            if (baseUri == null)
            {
                throw new ArgumentNullException("baseUri");
            }
            this._credentials = credentials;
            this._baseUri = baseUri;
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Initializes a new instance of the StorageManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Gets subscription credentials which uniquely identify
        /// Microsoft Azure subscription. The subscription ID forms part of
        /// the URI for every service call.
        /// </param>
        /// <param name='httpClient'>
        /// The Http client
        /// </param>
        public StorageManagementClient(SubscriptionCloudCredentials credentials, HttpClient httpClient)
            : this(httpClient)
        {
            if (credentials == null)
            {
                throw new ArgumentNullException("credentials");
            }
            this._credentials = credentials;
            this._baseUri = new Uri("https://management.azure.com/");
            
            this.Credentials.InitializeServiceClient(this);
        }
        
        /// <summary>
        /// Clones properties from current instance to another
        /// StorageManagementClient instance
        /// </summary>
        /// <param name='client'>
        /// Instance of StorageManagementClient to clone to
        /// </param>
        protected override void Clone(ServiceClient<StorageManagementClient> client)
        {
            base.Clone(client);
            
            if (client is StorageManagementClient)
            {
                StorageManagementClient clonedClient = ((StorageManagementClient)client);
                
                clonedClient._credentials = this._credentials;
                clonedClient._baseUri = this._baseUri;
                clonedClient._apiVersion = this._apiVersion;
                clonedClient._longRunningOperationInitialTimeout = this._longRunningOperationInitialTimeout;
                clonedClient._longRunningOperationRetryTimeout = this._longRunningOperationRetryTimeout;
                
                clonedClient.Credentials.InitializeServiceClient(clonedClient);
            }
        }
        
        /// <summary>
        /// Parse enum values for type AccountType.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static AccountType ParseAccountType(string value)
        {
            if ("Standard_LRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return AccountType.StandardLRS;
            }
            if ("Standard_ZRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return AccountType.StandardZRS;
            }
            if ("Standard_GRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return AccountType.StandardGRS;
            }
            if ("Standard_RAGRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return AccountType.StandardRAGRS;
            }
            if ("Premium_LRS".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return AccountType.PremiumLRS;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type AccountType to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string AccountTypeToString(AccountType value)
        {
            if (value == AccountType.StandardLRS)
            {
                return "Standard_LRS";
            }
            if (value == AccountType.StandardZRS)
            {
                return "Standard_ZRS";
            }
            if (value == AccountType.StandardGRS)
            {
                return "Standard_GRS";
            }
            if (value == AccountType.StandardRAGRS)
            {
                return "Standard_RAGRS";
            }
            if (value == AccountType.PremiumLRS)
            {
                return "Premium_LRS";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Parse enum values for type KeyName.
        /// </summary>
        /// <param name='value'>
        /// The value to parse.
        /// </param>
        /// <returns>
        /// The enum value.
        /// </returns>
        internal static KeyName ParseKeyName(string value)
        {
            if ("key1".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return KeyName.Key1;
            }
            if ("key2".Equals(value, StringComparison.OrdinalIgnoreCase))
            {
                return KeyName.Key2;
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// Convert an enum of type KeyName to a string.
        /// </summary>
        /// <param name='value'>
        /// The value to convert to a string.
        /// </param>
        /// <returns>
        /// The enum value as a string.
        /// </returns>
        internal static string KeyNameToString(KeyName value)
        {
            if (value == KeyName.Key1)
            {
                return "key1";
            }
            if (value == KeyName.Key2)
            {
                return "key2";
            }
            throw new ArgumentOutOfRangeException("value");
        }
        
        /// <summary>
        /// The Get Create Operation Status operation returns the status of the
        /// specified create operation. After calling the asynchronous Begin
        /// Create operation, you can call Get Create Operation Status to
        /// determine whether the operation has succeeded, failed, or is still
        /// in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. The URL where the status of the long-running create
        /// operation can be checked.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Create storage account operation response.
        /// </returns>
        public async Task<StorageAccountCreateResponse> GetCreateOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.InternalServerError)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageAccountCreateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.InternalServerError)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageAccountCreateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageAccount storageAccountInstance = new StorageAccount();
                            result.StorageAccount = storageAccountInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                storageAccountInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                storageAccountInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                storageAccountInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                storageAccountInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    storageAccountInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                    storageAccountInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken accountTypeValue = propertiesValue["accountType"];
                                if (accountTypeValue != null && accountTypeValue.Type != JTokenType.Null)
                                {
                                    AccountType accountTypeInstance = StorageManagementClient.ParseAccountType(((string)accountTypeValue));
                                    storageAccountInstance.AccountType = accountTypeInstance;
                                }
                                
                                JToken primaryEndpointsValue = propertiesValue["primaryEndpoints"];
                                if (primaryEndpointsValue != null && primaryEndpointsValue.Type != JTokenType.Null)
                                {
                                    Endpoints primaryEndpointsInstance = new Endpoints();
                                    storageAccountInstance.PrimaryEndpoints = primaryEndpointsInstance;
                                    
                                    JToken blobValue = primaryEndpointsValue["blob"];
                                    if (blobValue != null && blobValue.Type != JTokenType.Null)
                                    {
                                        Uri blobInstance = TypeConversion.TryParseUri(((string)blobValue));
                                        primaryEndpointsInstance.Blob = blobInstance;
                                    }
                                    
                                    JToken queueValue = primaryEndpointsValue["queue"];
                                    if (queueValue != null && queueValue.Type != JTokenType.Null)
                                    {
                                        Uri queueInstance = TypeConversion.TryParseUri(((string)queueValue));
                                        primaryEndpointsInstance.Queue = queueInstance;
                                    }
                                    
                                    JToken tableValue = primaryEndpointsValue["table"];
                                    if (tableValue != null && tableValue.Type != JTokenType.Null)
                                    {
                                        Uri tableInstance = TypeConversion.TryParseUri(((string)tableValue));
                                        primaryEndpointsInstance.Table = tableInstance;
                                    }
                                }
                                
                                JToken primaryLocationValue = propertiesValue["primaryLocation"];
                                if (primaryLocationValue != null && primaryLocationValue.Type != JTokenType.Null)
                                {
                                    string primaryLocationInstance = ((string)primaryLocationValue);
                                    storageAccountInstance.PrimaryLocation = primaryLocationInstance;
                                }
                                
                                JToken statusOfPrimaryValue = propertiesValue["statusOfPrimary"];
                                if (statusOfPrimaryValue != null && statusOfPrimaryValue.Type != JTokenType.Null)
                                {
                                    AccountStatus statusOfPrimaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfPrimaryValue), true));
                                    storageAccountInstance.StatusOfPrimary = statusOfPrimaryInstance;
                                }
                                
                                JToken lastGeoFailoverTimeValue = propertiesValue["lastGeoFailoverTime"];
                                if (lastGeoFailoverTimeValue != null && lastGeoFailoverTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastGeoFailoverTimeInstance = ((DateTime)lastGeoFailoverTimeValue);
                                    storageAccountInstance.LastGeoFailoverTime = lastGeoFailoverTimeInstance;
                                }
                                
                                JToken secondaryLocationValue = propertiesValue["secondaryLocation"];
                                if (secondaryLocationValue != null && secondaryLocationValue.Type != JTokenType.Null)
                                {
                                    string secondaryLocationInstance = ((string)secondaryLocationValue);
                                    storageAccountInstance.SecondaryLocation = secondaryLocationInstance;
                                }
                                
                                JToken statusOfSecondaryValue = propertiesValue["statusOfSecondary"];
                                if (statusOfSecondaryValue != null && statusOfSecondaryValue.Type != JTokenType.Null)
                                {
                                    AccountStatus statusOfSecondaryInstance = ((AccountStatus)Enum.Parse(typeof(AccountStatus), ((string)statusOfSecondaryValue), true));
                                    storageAccountInstance.StatusOfSecondary = statusOfSecondaryInstance;
                                }
                                
                                JToken creationTimeValue = propertiesValue["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime creationTimeInstance = ((DateTime)creationTimeValue);
                                    storageAccountInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken customDomainValue = propertiesValue["customDomain"];
                                if (customDomainValue != null && customDomainValue.Type != JTokenType.Null)
                                {
                                    CustomDomain customDomainInstance = new CustomDomain();
                                    storageAccountInstance.CustomDomain = customDomainInstance;
                                    
                                    JToken nameValue2 = customDomainValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        customDomainInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken useSubDomainValue = customDomainValue["useSubDomain"];
                                    if (useSubDomainValue != null && useSubDomainValue.Type != JTokenType.Null)
                                    {
                                        bool useSubDomainInstance = ((bool)useSubDomainValue);
                                        customDomainInstance.UseSubDomain = useSubDomainInstance;
                                    }
                                }
                                
                                JToken secondaryEndpointsValue = propertiesValue["secondaryEndpoints"];
                                if (secondaryEndpointsValue != null && secondaryEndpointsValue.Type != JTokenType.Null)
                                {
                                    Endpoints secondaryEndpointsInstance = new Endpoints();
                                    storageAccountInstance.SecondaryEndpoints = secondaryEndpointsInstance;
                                    
                                    JToken blobValue2 = secondaryEndpointsValue["blob"];
                                    if (blobValue2 != null && blobValue2.Type != JTokenType.Null)
                                    {
                                        Uri blobInstance2 = TypeConversion.TryParseUri(((string)blobValue2));
                                        secondaryEndpointsInstance.Blob = blobInstance2;
                                    }
                                    
                                    JToken queueValue2 = secondaryEndpointsValue["queue"];
                                    if (queueValue2 != null && queueValue2.Type != JTokenType.Null)
                                    {
                                        Uri queueInstance2 = TypeConversion.TryParseUri(((string)queueValue2));
                                        secondaryEndpointsInstance.Queue = queueInstance2;
                                    }
                                    
                                    JToken tableValue2 = secondaryEndpointsValue["table"];
                                    if (tableValue2 != null && tableValue2.Type != JTokenType.Null)
                                    {
                                        Uri tableInstance2 = TypeConversion.TryParseUri(((string)tableValue2));
                                        secondaryEndpointsInstance.Table = tableInstance2;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("RetryAfter"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("RetryAfter").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Conflict)
                    {
                        result.Status = OperationStatus.Failed;
                    }
                    if (statusCode == HttpStatusCode.InternalServerError)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.Accepted)
                    {
                        result.Status = OperationStatus.InProgress;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
