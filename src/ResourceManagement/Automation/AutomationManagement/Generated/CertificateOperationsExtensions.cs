// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;

namespace Microsoft.Azure.Management.Automation
{
    public static partial class CertificateOperationsExtensions
    {
        /// <summary>
        /// Create a certificate.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create or update
        /// certificate operation.
        /// </param>
        /// <returns>
        /// The response model for the create or update certificate operation.
        /// </returns>
        public static CertificateCreateOrUpdateResponse CreateOrUpdate(this ICertificateOperations operations, string resourceGroupName, string automationAccount, CertificateCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICertificateOperations)s).CreateOrUpdateAsync(resourceGroupName, automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a certificate.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create or update
        /// certificate operation.
        /// </param>
        /// <returns>
        /// The response model for the create or update certificate operation.
        /// </returns>
        public static Task<CertificateCreateOrUpdateResponse> CreateOrUpdateAsync(this ICertificateOperations operations, string resourceGroupName, string automationAccount, CertificateCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete the certificate.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of certificate.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this ICertificateOperations operations, string resourceGroupName, string automationAccount, string certificateName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICertificateOperations)s).DeleteAsync(resourceGroupName, automationAccount, certificateName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete the certificate.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of certificate.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this ICertificateOperations operations, string resourceGroupName, string automationAccount, string certificateName)
        {
            return operations.DeleteAsync(resourceGroupName, automationAccount, certificateName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the certificate identified by certificate name.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of certificate.
        /// </param>
        /// <returns>
        /// The response model for the get certificate operation.
        /// </returns>
        public static CertificateGetResponse Get(this ICertificateOperations operations, string resourceGroupName, string automationAccount, string certificateName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICertificateOperations)s).GetAsync(resourceGroupName, automationAccount, certificateName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the certificate identified by certificate name.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='certificateName'>
        /// Required. The name of certificate.
        /// </param>
        /// <returns>
        /// The response model for the get certificate operation.
        /// </returns>
        public static Task<CertificateGetResponse> GetAsync(this ICertificateOperations operations, string resourceGroupName, string automationAccount, string certificateName)
        {
            return operations.GetAsync(resourceGroupName, automationAccount, certificateName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of certificates.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <returns>
        /// The response model for the list certificate operation.
        /// </returns>
        public static CertificateListResponse List(this ICertificateOperations operations, string resourceGroupName, string automationAccount)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICertificateOperations)s).ListAsync(resourceGroupName, automationAccount);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of certificates.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <returns>
        /// The response model for the list certificate operation.
        /// </returns>
        public static Task<CertificateListResponse> ListAsync(this ICertificateOperations operations, string resourceGroupName, string automationAccount)
        {
            return operations.ListAsync(resourceGroupName, automationAccount, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve next list of certificates.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <returns>
        /// The response model for the list certificate operation.
        /// </returns>
        public static CertificateListResponse ListNext(this ICertificateOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICertificateOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve next list of certificates.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <returns>
        /// The response model for the list certificate operation.
        /// </returns>
        public static Task<CertificateListResponse> ListNextAsync(this ICertificateOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Update a certificate.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the patch certificate
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Patch(this ICertificateOperations operations, string resourceGroupName, string automationAccount, CertificatePatchParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICertificateOperations)s).PatchAsync(resourceGroupName, automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update a certificate.  (see
        /// http://aka.ms/azureautomationsdk/certificateoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.ICertificateOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the patch certificate
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> PatchAsync(this ICertificateOperations operations, string resourceGroupName, string automationAccount, CertificatePatchParameters parameters)
        {
            return operations.PatchAsync(resourceGroupName, automationAccount, parameters, CancellationToken.None);
        }
    }
}
