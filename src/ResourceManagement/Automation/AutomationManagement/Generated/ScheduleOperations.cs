// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Automation
{
    /// <summary>
    /// Service operation for automation schedules.  (see
    /// http://aka.ms/azureautomationsdk/scheduleoperations for more
    /// information)
    /// </summary>
    internal partial class ScheduleOperations : IServiceOperations<AutomationManagementClient>, IScheduleOperations
    {
        /// <summary>
        /// Initializes a new instance of the ScheduleOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ScheduleOperations(AutomationManagementClient client)
        {
            this._client = client;
        }
        
        private AutomationManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Automation.AutomationManagementClient.
        /// </summary>
        public AutomationManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a schedule.  (see
        /// http://aka.ms/azureautomationsdk/scheduleoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create or update schedule
        /// operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the create or update schedule operation.
        /// </returns>
        public async Task<ScheduleCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string automationAccount, ScheduleCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.Properties.Frequency == null)
            {
                throw new ArgumentNullException("parameters.Properties.Frequency");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/schedules/";
            url = url + Uri.EscapeDataString(parameters.Name);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-31");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject scheduleCreateOrUpdateParametersValue = new JObject();
                requestDoc = scheduleCreateOrUpdateParametersValue;
                
                scheduleCreateOrUpdateParametersValue["name"] = parameters.Name;
                
                JObject propertiesValue = new JObject();
                scheduleCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.Description != null)
                {
                    propertiesValue["description"] = parameters.Properties.Description;
                }
                
                propertiesValue["startTime"] = parameters.Properties.StartTime;
                
                if (parameters.Properties.ExpiryTime != null)
                {
                    propertiesValue["expiryTime"] = parameters.Properties.ExpiryTime.Value;
                }
                
                if (parameters.Properties.Interval != null)
                {
                    propertiesValue["interval"] = parameters.Properties.Interval.Value;
                }
                
                propertiesValue["frequency"] = parameters.Properties.Frequency;
                
                if (parameters.Properties.TimeZone != null)
                {
                    propertiesValue["timeZone"] = parameters.Properties.TimeZone;
                }
                
                if (parameters.Properties.AdvancedSchedule != null)
                {
                    JObject advancedScheduleValue = new JObject();
                    propertiesValue["advancedSchedule"] = advancedScheduleValue;
                    
                    if (parameters.Properties.AdvancedSchedule.WeekDays != null)
                    {
                        if (parameters.Properties.AdvancedSchedule.WeekDays is ILazyCollection == false || ((ILazyCollection)parameters.Properties.AdvancedSchedule.WeekDays).IsInitialized)
                        {
                            JArray weekDaysArray = new JArray();
                            foreach (string weekDaysItem in parameters.Properties.AdvancedSchedule.WeekDays)
                            {
                                weekDaysArray.Add(weekDaysItem);
                            }
                            advancedScheduleValue["weekDays"] = weekDaysArray;
                        }
                    }
                    
                    if (parameters.Properties.AdvancedSchedule.MonthDays != null)
                    {
                        if (parameters.Properties.AdvancedSchedule.MonthDays is ILazyCollection == false || ((ILazyCollection)parameters.Properties.AdvancedSchedule.MonthDays).IsInitialized)
                        {
                            JArray monthDaysArray = new JArray();
                            foreach (int monthDaysItem in parameters.Properties.AdvancedSchedule.MonthDays)
                            {
                                monthDaysArray.Add(monthDaysItem);
                            }
                            advancedScheduleValue["monthDays"] = monthDaysArray;
                        }
                    }
                    
                    if (parameters.Properties.AdvancedSchedule.MonthlyOccurrences != null)
                    {
                        if (parameters.Properties.AdvancedSchedule.MonthlyOccurrences is ILazyCollection == false || ((ILazyCollection)parameters.Properties.AdvancedSchedule.MonthlyOccurrences).IsInitialized)
                        {
                            JArray monthlyOccurrencesArray = new JArray();
                            foreach (AdvancedScheduleMonthlyOccurrence monthlyOccurrencesItem in parameters.Properties.AdvancedSchedule.MonthlyOccurrences)
                            {
                                JObject advancedScheduleMonthlyOccurrenceValue = new JObject();
                                monthlyOccurrencesArray.Add(advancedScheduleMonthlyOccurrenceValue);
                                
                                if (monthlyOccurrencesItem.Occurrence != null)
                                {
                                    advancedScheduleMonthlyOccurrenceValue["occurrence"] = monthlyOccurrencesItem.Occurrence.Value;
                                }
                                
                                if (monthlyOccurrencesItem.Day != null)
                                {
                                    advancedScheduleMonthlyOccurrenceValue["day"] = monthlyOccurrencesItem.Day;
                                }
                            }
                            advancedScheduleValue["monthlyOccurrences"] = monthlyOccurrencesArray;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ScheduleCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ScheduleCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Schedule scheduleInstance = new Schedule();
                            result.Schedule = scheduleInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                scheduleInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                scheduleInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                ScheduleProperties propertiesInstance = new ScheduleProperties();
                                scheduleInstance.Properties = propertiesInstance;
                                
                                JToken startTimeValue = propertiesValue2["startTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                    propertiesInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken startTimeOffsetMinutesValue = propertiesValue2["startTimeOffsetMinutes"];
                                if (startTimeOffsetMinutesValue != null && startTimeOffsetMinutesValue.Type != JTokenType.Null)
                                {
                                    double startTimeOffsetMinutesInstance = ((double)startTimeOffsetMinutesValue);
                                    propertiesInstance.StartTimeOffsetMinutes = startTimeOffsetMinutesInstance;
                                }
                                
                                JToken expiryTimeValue = propertiesValue2["expiryTime"];
                                if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset expiryTimeInstance = ((DateTimeOffset)expiryTimeValue);
                                    propertiesInstance.ExpiryTime = expiryTimeInstance;
                                }
                                
                                JToken expiryTimeOffsetMinutesValue = propertiesValue2["expiryTimeOffsetMinutes"];
                                if (expiryTimeOffsetMinutesValue != null && expiryTimeOffsetMinutesValue.Type != JTokenType.Null)
                                {
                                    double expiryTimeOffsetMinutesInstance = ((double)expiryTimeOffsetMinutesValue);
                                    propertiesInstance.ExpiryTimeOffsetMinutes = expiryTimeOffsetMinutesInstance;
                                }
                                
                                JToken isEnabledValue = propertiesValue2["isEnabled"];
                                if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                {
                                    bool isEnabledInstance = ((bool)isEnabledValue);
                                    propertiesInstance.IsEnabled = isEnabledInstance;
                                }
                                
                                JToken nextRunValue = propertiesValue2["nextRun"];
                                if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset nextRunInstance = ((DateTimeOffset)nextRunValue);
                                    propertiesInstance.NextRun = nextRunInstance;
                                }
                                
                                JToken nextRunOffsetMinutesValue = propertiesValue2["nextRunOffsetMinutes"];
                                if (nextRunOffsetMinutesValue != null && nextRunOffsetMinutesValue.Type != JTokenType.Null)
                                {
                                    double nextRunOffsetMinutesInstance = ((double)nextRunOffsetMinutesValue);
                                    propertiesInstance.NextRunOffsetMinutes = nextRunOffsetMinutesInstance;
                                }
                                
                                JToken intervalValue = propertiesValue2["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    byte intervalInstance = ((byte)intervalValue);
                                    propertiesInstance.Interval = intervalInstance;
                                }
                                
                                JToken frequencyValue = propertiesValue2["frequency"];
                                if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                {
                                    string frequencyInstance = ((string)frequencyValue);
                                    propertiesInstance.Frequency = frequencyInstance;
                                }
                                
                                JToken timeZoneValue = propertiesValue2["timeZone"];
                                if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                {
                                    string timeZoneInstance = ((string)timeZoneValue);
                                    propertiesInstance.TimeZone = timeZoneInstance;
                                }
                                
                                JToken advancedScheduleValue2 = propertiesValue2["advancedSchedule"];
                                if (advancedScheduleValue2 != null && advancedScheduleValue2.Type != JTokenType.Null)
                                {
                                    AdvancedSchedule advancedScheduleInstance = new AdvancedSchedule();
                                    propertiesInstance.AdvancedSchedule = advancedScheduleInstance;
                                    
                                    JToken weekDaysArray2 = advancedScheduleValue2["weekDays"];
                                    if (weekDaysArray2 != null && weekDaysArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken weekDaysValue in ((JArray)weekDaysArray2))
                                        {
                                            advancedScheduleInstance.WeekDays.Add(((string)weekDaysValue));
                                        }
                                    }
                                    
                                    JToken monthDaysArray2 = advancedScheduleValue2["monthDays"];
                                    if (monthDaysArray2 != null && monthDaysArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken monthDaysValue in ((JArray)monthDaysArray2))
                                        {
                                            advancedScheduleInstance.MonthDays.Add(((int)monthDaysValue));
                                        }
                                    }
                                    
                                    JToken monthlyOccurrencesArray2 = advancedScheduleValue2["monthlyOccurrences"];
                                    if (monthlyOccurrencesArray2 != null && monthlyOccurrencesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken monthlyOccurrencesValue in ((JArray)monthlyOccurrencesArray2))
                                        {
                                            AdvancedScheduleMonthlyOccurrence advancedScheduleMonthlyOccurrenceInstance = new AdvancedScheduleMonthlyOccurrence();
                                            advancedScheduleInstance.MonthlyOccurrences.Add(advancedScheduleMonthlyOccurrenceInstance);
                                            
                                            JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                            if (occurrenceValue != null && occurrenceValue.Type != JTokenType.Null)
                                            {
                                                int occurrenceInstance = ((int)occurrenceValue);
                                                advancedScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                            }
                                            
                                            JToken dayValue = monthlyOccurrencesValue["day"];
                                            if (dayValue != null && dayValue.Type != JTokenType.Null)
                                            {
                                                string dayInstance = ((string)dayValue);
                                                advancedScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                            }
                                        }
                                    }
                                }
                                
                                JToken creationTimeValue = propertiesValue2["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                    propertiesInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = propertiesValue2["lastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                    propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue2["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete the schedule identified by schedule name.  (see
        /// http://aka.ms/azureautomationsdk/scheduleoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleName'>
        /// Required. The schedule name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string automationAccount, string scheduleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (scheduleName == null)
            {
                throw new ArgumentNullException("scheduleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("scheduleName", scheduleName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/schedules/";
            url = url + Uri.EscapeDataString(scheduleName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-31");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the schedule identified by schedule name.  (see
        /// http://aka.ms/azureautomationsdk/scheduleoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='scheduleName'>
        /// Required. The schedule name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get schedule operation.
        /// </returns>
        public async Task<ScheduleGetResponse> GetAsync(string resourceGroupName, string automationAccount, string scheduleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (scheduleName == null)
            {
                throw new ArgumentNullException("scheduleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("scheduleName", scheduleName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/schedules/";
            url = url + Uri.EscapeDataString(scheduleName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-31");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ScheduleGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ScheduleGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Schedule scheduleInstance = new Schedule();
                            result.Schedule = scheduleInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                scheduleInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                scheduleInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ScheduleProperties propertiesInstance = new ScheduleProperties();
                                scheduleInstance.Properties = propertiesInstance;
                                
                                JToken startTimeValue = propertiesValue["startTime"];
                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                    propertiesInstance.StartTime = startTimeInstance;
                                }
                                
                                JToken startTimeOffsetMinutesValue = propertiesValue["startTimeOffsetMinutes"];
                                if (startTimeOffsetMinutesValue != null && startTimeOffsetMinutesValue.Type != JTokenType.Null)
                                {
                                    double startTimeOffsetMinutesInstance = ((double)startTimeOffsetMinutesValue);
                                    propertiesInstance.StartTimeOffsetMinutes = startTimeOffsetMinutesInstance;
                                }
                                
                                JToken expiryTimeValue = propertiesValue["expiryTime"];
                                if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset expiryTimeInstance = ((DateTimeOffset)expiryTimeValue);
                                    propertiesInstance.ExpiryTime = expiryTimeInstance;
                                }
                                
                                JToken expiryTimeOffsetMinutesValue = propertiesValue["expiryTimeOffsetMinutes"];
                                if (expiryTimeOffsetMinutesValue != null && expiryTimeOffsetMinutesValue.Type != JTokenType.Null)
                                {
                                    double expiryTimeOffsetMinutesInstance = ((double)expiryTimeOffsetMinutesValue);
                                    propertiesInstance.ExpiryTimeOffsetMinutes = expiryTimeOffsetMinutesInstance;
                                }
                                
                                JToken isEnabledValue = propertiesValue["isEnabled"];
                                if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                {
                                    bool isEnabledInstance = ((bool)isEnabledValue);
                                    propertiesInstance.IsEnabled = isEnabledInstance;
                                }
                                
                                JToken nextRunValue = propertiesValue["nextRun"];
                                if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset nextRunInstance = ((DateTimeOffset)nextRunValue);
                                    propertiesInstance.NextRun = nextRunInstance;
                                }
                                
                                JToken nextRunOffsetMinutesValue = propertiesValue["nextRunOffsetMinutes"];
                                if (nextRunOffsetMinutesValue != null && nextRunOffsetMinutesValue.Type != JTokenType.Null)
                                {
                                    double nextRunOffsetMinutesInstance = ((double)nextRunOffsetMinutesValue);
                                    propertiesInstance.NextRunOffsetMinutes = nextRunOffsetMinutesInstance;
                                }
                                
                                JToken intervalValue = propertiesValue["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    byte intervalInstance = ((byte)intervalValue);
                                    propertiesInstance.Interval = intervalInstance;
                                }
                                
                                JToken frequencyValue = propertiesValue["frequency"];
                                if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                {
                                    string frequencyInstance = ((string)frequencyValue);
                                    propertiesInstance.Frequency = frequencyInstance;
                                }
                                
                                JToken timeZoneValue = propertiesValue["timeZone"];
                                if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                {
                                    string timeZoneInstance = ((string)timeZoneValue);
                                    propertiesInstance.TimeZone = timeZoneInstance;
                                }
                                
                                JToken advancedScheduleValue = propertiesValue["advancedSchedule"];
                                if (advancedScheduleValue != null && advancedScheduleValue.Type != JTokenType.Null)
                                {
                                    AdvancedSchedule advancedScheduleInstance = new AdvancedSchedule();
                                    propertiesInstance.AdvancedSchedule = advancedScheduleInstance;
                                    
                                    JToken weekDaysArray = advancedScheduleValue["weekDays"];
                                    if (weekDaysArray != null && weekDaysArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken weekDaysValue in ((JArray)weekDaysArray))
                                        {
                                            advancedScheduleInstance.WeekDays.Add(((string)weekDaysValue));
                                        }
                                    }
                                    
                                    JToken monthDaysArray = advancedScheduleValue["monthDays"];
                                    if (monthDaysArray != null && monthDaysArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken monthDaysValue in ((JArray)monthDaysArray))
                                        {
                                            advancedScheduleInstance.MonthDays.Add(((int)monthDaysValue));
                                        }
                                    }
                                    
                                    JToken monthlyOccurrencesArray = advancedScheduleValue["monthlyOccurrences"];
                                    if (monthlyOccurrencesArray != null && monthlyOccurrencesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken monthlyOccurrencesValue in ((JArray)monthlyOccurrencesArray))
                                        {
                                            AdvancedScheduleMonthlyOccurrence advancedScheduleMonthlyOccurrenceInstance = new AdvancedScheduleMonthlyOccurrence();
                                            advancedScheduleInstance.MonthlyOccurrences.Add(advancedScheduleMonthlyOccurrenceInstance);
                                            
                                            JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                            if (occurrenceValue != null && occurrenceValue.Type != JTokenType.Null)
                                            {
                                                int occurrenceInstance = ((int)occurrenceValue);
                                                advancedScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                            }
                                            
                                            JToken dayValue = monthlyOccurrencesValue["day"];
                                            if (dayValue != null && dayValue.Type != JTokenType.Null)
                                            {
                                                string dayInstance = ((string)dayValue);
                                                advancedScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                            }
                                        }
                                    }
                                }
                                
                                JToken creationTimeValue = propertiesValue["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                    propertiesInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                    propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of schedules.  (see
        /// http://aka.ms/azureautomationsdk/scheduleoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list schedule operation.
        /// </returns>
        public async Task<ScheduleListResponse> ListAsync(string resourceGroupName, string automationAccount, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/schedules";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-31");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("ocp-referer", url);
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ScheduleListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ScheduleListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Schedule scheduleInstance = new Schedule();
                                    result.Schedules.Add(scheduleInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        scheduleInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        scheduleInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ScheduleProperties propertiesInstance = new ScheduleProperties();
                                        scheduleInstance.Properties = propertiesInstance;
                                        
                                        JToken startTimeValue = propertiesValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                            propertiesInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken startTimeOffsetMinutesValue = propertiesValue["startTimeOffsetMinutes"];
                                        if (startTimeOffsetMinutesValue != null && startTimeOffsetMinutesValue.Type != JTokenType.Null)
                                        {
                                            double startTimeOffsetMinutesInstance = ((double)startTimeOffsetMinutesValue);
                                            propertiesInstance.StartTimeOffsetMinutes = startTimeOffsetMinutesInstance;
                                        }
                                        
                                        JToken expiryTimeValue = propertiesValue["expiryTime"];
                                        if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset expiryTimeInstance = ((DateTimeOffset)expiryTimeValue);
                                            propertiesInstance.ExpiryTime = expiryTimeInstance;
                                        }
                                        
                                        JToken expiryTimeOffsetMinutesValue = propertiesValue["expiryTimeOffsetMinutes"];
                                        if (expiryTimeOffsetMinutesValue != null && expiryTimeOffsetMinutesValue.Type != JTokenType.Null)
                                        {
                                            double expiryTimeOffsetMinutesInstance = ((double)expiryTimeOffsetMinutesValue);
                                            propertiesInstance.ExpiryTimeOffsetMinutes = expiryTimeOffsetMinutesInstance;
                                        }
                                        
                                        JToken isEnabledValue = propertiesValue["isEnabled"];
                                        if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                        {
                                            bool isEnabledInstance = ((bool)isEnabledValue);
                                            propertiesInstance.IsEnabled = isEnabledInstance;
                                        }
                                        
                                        JToken nextRunValue = propertiesValue["nextRun"];
                                        if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset nextRunInstance = ((DateTimeOffset)nextRunValue);
                                            propertiesInstance.NextRun = nextRunInstance;
                                        }
                                        
                                        JToken nextRunOffsetMinutesValue = propertiesValue["nextRunOffsetMinutes"];
                                        if (nextRunOffsetMinutesValue != null && nextRunOffsetMinutesValue.Type != JTokenType.Null)
                                        {
                                            double nextRunOffsetMinutesInstance = ((double)nextRunOffsetMinutesValue);
                                            propertiesInstance.NextRunOffsetMinutes = nextRunOffsetMinutesInstance;
                                        }
                                        
                                        JToken intervalValue = propertiesValue["interval"];
                                        if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                        {
                                            byte intervalInstance = ((byte)intervalValue);
                                            propertiesInstance.Interval = intervalInstance;
                                        }
                                        
                                        JToken frequencyValue = propertiesValue["frequency"];
                                        if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                        {
                                            string frequencyInstance = ((string)frequencyValue);
                                            propertiesInstance.Frequency = frequencyInstance;
                                        }
                                        
                                        JToken timeZoneValue = propertiesValue["timeZone"];
                                        if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance = ((string)timeZoneValue);
                                            propertiesInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken advancedScheduleValue = propertiesValue["advancedSchedule"];
                                        if (advancedScheduleValue != null && advancedScheduleValue.Type != JTokenType.Null)
                                        {
                                            AdvancedSchedule advancedScheduleInstance = new AdvancedSchedule();
                                            propertiesInstance.AdvancedSchedule = advancedScheduleInstance;
                                            
                                            JToken weekDaysArray = advancedScheduleValue["weekDays"];
                                            if (weekDaysArray != null && weekDaysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken weekDaysValue in ((JArray)weekDaysArray))
                                                {
                                                    advancedScheduleInstance.WeekDays.Add(((string)weekDaysValue));
                                                }
                                            }
                                            
                                            JToken monthDaysArray = advancedScheduleValue["monthDays"];
                                            if (monthDaysArray != null && monthDaysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken monthDaysValue in ((JArray)monthDaysArray))
                                                {
                                                    advancedScheduleInstance.MonthDays.Add(((int)monthDaysValue));
                                                }
                                            }
                                            
                                            JToken monthlyOccurrencesArray = advancedScheduleValue["monthlyOccurrences"];
                                            if (monthlyOccurrencesArray != null && monthlyOccurrencesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken monthlyOccurrencesValue in ((JArray)monthlyOccurrencesArray))
                                                {
                                                    AdvancedScheduleMonthlyOccurrence advancedScheduleMonthlyOccurrenceInstance = new AdvancedScheduleMonthlyOccurrence();
                                                    advancedScheduleInstance.MonthlyOccurrences.Add(advancedScheduleMonthlyOccurrenceInstance);
                                                    
                                                    JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                                    if (occurrenceValue != null && occurrenceValue.Type != JTokenType.Null)
                                                    {
                                                        int occurrenceInstance = ((int)occurrenceValue);
                                                        advancedScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                                    }
                                                    
                                                    JToken dayValue = monthlyOccurrencesValue["day"];
                                                    if (dayValue != null && dayValue.Type != JTokenType.Null)
                                                    {
                                                        string dayInstance = ((string)dayValue);
                                                        advancedScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                            propertiesInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve next list of schedules.  (see
        /// http://aka.ms/azureautomationsdk/scheduleoperations for more
        /// information)
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list schedule operation.
        /// </returns>
        public async Task<ScheduleListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("ocp-referer", url);
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ScheduleListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ScheduleListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Schedule scheduleInstance = new Schedule();
                                    result.Schedules.Add(scheduleInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        scheduleInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        scheduleInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ScheduleProperties propertiesInstance = new ScheduleProperties();
                                        scheduleInstance.Properties = propertiesInstance;
                                        
                                        JToken startTimeValue = propertiesValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                            propertiesInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken startTimeOffsetMinutesValue = propertiesValue["startTimeOffsetMinutes"];
                                        if (startTimeOffsetMinutesValue != null && startTimeOffsetMinutesValue.Type != JTokenType.Null)
                                        {
                                            double startTimeOffsetMinutesInstance = ((double)startTimeOffsetMinutesValue);
                                            propertiesInstance.StartTimeOffsetMinutes = startTimeOffsetMinutesInstance;
                                        }
                                        
                                        JToken expiryTimeValue = propertiesValue["expiryTime"];
                                        if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset expiryTimeInstance = ((DateTimeOffset)expiryTimeValue);
                                            propertiesInstance.ExpiryTime = expiryTimeInstance;
                                        }
                                        
                                        JToken expiryTimeOffsetMinutesValue = propertiesValue["expiryTimeOffsetMinutes"];
                                        if (expiryTimeOffsetMinutesValue != null && expiryTimeOffsetMinutesValue.Type != JTokenType.Null)
                                        {
                                            double expiryTimeOffsetMinutesInstance = ((double)expiryTimeOffsetMinutesValue);
                                            propertiesInstance.ExpiryTimeOffsetMinutes = expiryTimeOffsetMinutesInstance;
                                        }
                                        
                                        JToken isEnabledValue = propertiesValue["isEnabled"];
                                        if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                        {
                                            bool isEnabledInstance = ((bool)isEnabledValue);
                                            propertiesInstance.IsEnabled = isEnabledInstance;
                                        }
                                        
                                        JToken nextRunValue = propertiesValue["nextRun"];
                                        if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset nextRunInstance = ((DateTimeOffset)nextRunValue);
                                            propertiesInstance.NextRun = nextRunInstance;
                                        }
                                        
                                        JToken nextRunOffsetMinutesValue = propertiesValue["nextRunOffsetMinutes"];
                                        if (nextRunOffsetMinutesValue != null && nextRunOffsetMinutesValue.Type != JTokenType.Null)
                                        {
                                            double nextRunOffsetMinutesInstance = ((double)nextRunOffsetMinutesValue);
                                            propertiesInstance.NextRunOffsetMinutes = nextRunOffsetMinutesInstance;
                                        }
                                        
                                        JToken intervalValue = propertiesValue["interval"];
                                        if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                        {
                                            byte intervalInstance = ((byte)intervalValue);
                                            propertiesInstance.Interval = intervalInstance;
                                        }
                                        
                                        JToken frequencyValue = propertiesValue["frequency"];
                                        if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                        {
                                            string frequencyInstance = ((string)frequencyValue);
                                            propertiesInstance.Frequency = frequencyInstance;
                                        }
                                        
                                        JToken timeZoneValue = propertiesValue["timeZone"];
                                        if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                        {
                                            string timeZoneInstance = ((string)timeZoneValue);
                                            propertiesInstance.TimeZone = timeZoneInstance;
                                        }
                                        
                                        JToken advancedScheduleValue = propertiesValue["advancedSchedule"];
                                        if (advancedScheduleValue != null && advancedScheduleValue.Type != JTokenType.Null)
                                        {
                                            AdvancedSchedule advancedScheduleInstance = new AdvancedSchedule();
                                            propertiesInstance.AdvancedSchedule = advancedScheduleInstance;
                                            
                                            JToken weekDaysArray = advancedScheduleValue["weekDays"];
                                            if (weekDaysArray != null && weekDaysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken weekDaysValue in ((JArray)weekDaysArray))
                                                {
                                                    advancedScheduleInstance.WeekDays.Add(((string)weekDaysValue));
                                                }
                                            }
                                            
                                            JToken monthDaysArray = advancedScheduleValue["monthDays"];
                                            if (monthDaysArray != null && monthDaysArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken monthDaysValue in ((JArray)monthDaysArray))
                                                {
                                                    advancedScheduleInstance.MonthDays.Add(((int)monthDaysValue));
                                                }
                                            }
                                            
                                            JToken monthlyOccurrencesArray = advancedScheduleValue["monthlyOccurrences"];
                                            if (monthlyOccurrencesArray != null && monthlyOccurrencesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken monthlyOccurrencesValue in ((JArray)monthlyOccurrencesArray))
                                                {
                                                    AdvancedScheduleMonthlyOccurrence advancedScheduleMonthlyOccurrenceInstance = new AdvancedScheduleMonthlyOccurrence();
                                                    advancedScheduleInstance.MonthlyOccurrences.Add(advancedScheduleMonthlyOccurrenceInstance);
                                                    
                                                    JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                                    if (occurrenceValue != null && occurrenceValue.Type != JTokenType.Null)
                                                    {
                                                        int occurrenceInstance = ((int)occurrenceValue);
                                                        advancedScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                                    }
                                                    
                                                    JToken dayValue = monthlyOccurrencesValue["day"];
                                                    if (dayValue != null && dayValue.Type != JTokenType.Null)
                                                    {
                                                        string dayInstance = ((string)dayValue);
                                                        advancedScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                            propertiesInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update the schedule identified by schedule name.  (see
        /// http://aka.ms/azureautomationsdk/scheduleoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the patch schedule operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> PatchAsync(string resourceGroupName, string automationAccount, SchedulePatchParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "PatchAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/schedules/";
            url = url + Uri.EscapeDataString(parameters.Name);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-10-31");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject schedulePatchParametersValue = new JObject();
                requestDoc = schedulePatchParametersValue;
                
                schedulePatchParametersValue["name"] = parameters.Name;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    schedulePatchParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    if (parameters.Properties.IsEnabled != null)
                    {
                        propertiesValue["isEnabled"] = parameters.Properties.IsEnabled.Value;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
