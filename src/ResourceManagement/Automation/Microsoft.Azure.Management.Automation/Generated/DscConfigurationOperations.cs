// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Automation
{
    /// <summary>
    /// Service operation for configurations.  (see
    /// http://aka.ms/azureautomationsdk/configurationoperations for more
    /// information)
    /// </summary>
    internal partial class DscConfigurationOperations : IServiceOperations<AutomationManagementClient>, IDscConfigurationOperations
    {
        /// <summary>
        /// Initializes a new instance of the DscConfigurationOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DscConfigurationOperations(AutomationManagementClient client)
        {
            this._client = client;
        }
        
        private AutomationManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Automation.AutomationManagementClient.
        /// </summary>
        public AutomationManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create the configuration identified by configuration name.  (see
        /// http://aka.ms/azureautomationsdk/configurationoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The create or update parameters for configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the configuration create response.
        /// </returns>
        public async Task<DscConfigurationCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string automationAccount, DscConfigurationCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.Properties.Source == null)
            {
                throw new ArgumentNullException("parameters.Properties.Source");
            }
            if (parameters.Properties.Source.ContentHash != null)
            {
                if (parameters.Properties.Source.ContentHash.Algorithm == null)
                {
                    throw new ArgumentNullException("parameters.Properties.Source.ContentHash.Algorithm");
                }
                if (parameters.Properties.Source.ContentHash.Value == null)
                {
                    throw new ArgumentNullException("parameters.Properties.Source.ContentHash.Value");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/configurations/";
            if (parameters.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject dscConfigurationCreateOrUpdateParametersValue = new JObject();
                requestDoc = dscConfigurationCreateOrUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                dscConfigurationCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                propertiesValue["logVerbose"] = parameters.Properties.LogVerbose;
                
                propertiesValue["logProgress"] = parameters.Properties.LogProgress;
                
                JObject sourceValue = new JObject();
                propertiesValue["source"] = sourceValue;
                
                if (parameters.Properties.Source.ContentHash != null)
                {
                    JObject hashValue = new JObject();
                    sourceValue["hash"] = hashValue;
                    
                    hashValue["algorithm"] = parameters.Properties.Source.ContentHash.Algorithm;
                    
                    hashValue["value"] = parameters.Properties.Source.ContentHash.Value;
                }
                
                if (parameters.Properties.Source.ContentType != null)
                {
                    sourceValue["type"] = parameters.Properties.Source.ContentType;
                }
                
                if (parameters.Properties.Source.Value != null)
                {
                    sourceValue["value"] = parameters.Properties.Source.Value;
                }
                
                if (parameters.Properties.Source.Version != null)
                {
                    sourceValue["version"] = parameters.Properties.Source.Version;
                }
                
                if (parameters.Properties.Parameters != null)
                {
                    if (parameters.Properties.Parameters is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Parameters).IsInitialized)
                    {
                        JObject parametersDictionary = new JObject();
                        foreach (KeyValuePair<string, DscConfigurationParameter> pair in parameters.Properties.Parameters)
                        {
                            string parametersKey = pair.Key;
                            DscConfigurationParameter parametersValue = pair.Value;
                            JObject dscConfigurationParameterValue = new JObject();
                            parametersDictionary[parametersKey] = dscConfigurationParameterValue;
                            
                            if (parametersValue.Type != null)
                            {
                                dscConfigurationParameterValue["type"] = parametersValue.Type;
                            }
                            
                            dscConfigurationParameterValue["isMandatory"] = parametersValue.IsMandatory;
                            
                            dscConfigurationParameterValue["position"] = parametersValue.Position;
                            
                            if (parametersValue.DefaultValue != null)
                            {
                                dscConfigurationParameterValue["defaultValue"] = parametersValue.DefaultValue;
                            }
                        }
                        propertiesValue["parameters"] = parametersDictionary;
                    }
                }
                
                if (parameters.Properties.Description != null)
                {
                    propertiesValue["description"] = parameters.Properties.Description;
                }
                
                if (parameters.Name != null)
                {
                    dscConfigurationCreateOrUpdateParametersValue["name"] = parameters.Name;
                }
                
                if (parameters.Location != null)
                {
                    dscConfigurationCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair2 in parameters.Tags)
                    {
                        string tagsKey = pair2.Key;
                        string tagsValue = pair2.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    dscConfigurationCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DscConfigurationCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DscConfigurationCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            DscConfiguration configurationInstance = new DscConfiguration();
                            result.Configuration = configurationInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                DscConfigurationProperties propertiesInstance = new DscConfigurationProperties();
                                configurationInstance.Properties = propertiesInstance;
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    DscConfigurationProvisioningState provisioningStateInstance = ((DscConfigurationProvisioningState)Enum.Parse(typeof(DscConfigurationProvisioningState), ((string)provisioningStateValue), true));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken jobCountValue = propertiesValue2["jobCount"];
                                if (jobCountValue != null && jobCountValue.Type != JTokenType.Null)
                                {
                                    int jobCountInstance = ((int)jobCountValue);
                                    propertiesInstance.JobCount = jobCountInstance;
                                }
                                
                                JToken parametersSequenceElement = ((JToken)propertiesValue2["parameters"]);
                                if (parametersSequenceElement != null && parametersSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in parametersSequenceElement)
                                    {
                                        string parametersKey2 = ((string)property.Name);
                                        JObject varToken = ((JObject)property.Value);
                                        DscConfigurationParameter dscConfigurationParameterInstance = new DscConfigurationParameter();
                                        propertiesInstance.Parameters.Add(parametersKey2, dscConfigurationParameterInstance);
                                        
                                        JToken typeValue = varToken["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            dscConfigurationParameterInstance.Type = typeInstance;
                                        }
                                        
                                        JToken isMandatoryValue = varToken["isMandatory"];
                                        if (isMandatoryValue != null && isMandatoryValue.Type != JTokenType.Null)
                                        {
                                            bool isMandatoryInstance = ((bool)isMandatoryValue);
                                            dscConfigurationParameterInstance.IsMandatory = isMandatoryInstance;
                                        }
                                        
                                        JToken positionValue = varToken["position"];
                                        if (positionValue != null && positionValue.Type != JTokenType.Null)
                                        {
                                            int positionInstance = ((int)positionValue);
                                            dscConfigurationParameterInstance.Position = positionInstance;
                                        }
                                        
                                        JToken defaultValueValue = varToken["defaultValue"];
                                        if (defaultValueValue != null && defaultValueValue.Type != JTokenType.Null)
                                        {
                                            string defaultValueInstance = ((string)defaultValueValue);
                                            dscConfigurationParameterInstance.DefaultValue = defaultValueInstance;
                                        }
                                    }
                                }
                                
                                JToken sourceValue2 = propertiesValue2["source"];
                                if (sourceValue2 != null && sourceValue2.Type != JTokenType.Null)
                                {
                                    ContentSource sourceInstance = new ContentSource();
                                    propertiesInstance.Source = sourceInstance;
                                    
                                    JToken hashValue2 = sourceValue2["hash"];
                                    if (hashValue2 != null && hashValue2.Type != JTokenType.Null)
                                    {
                                        ContentHash hashInstance = new ContentHash();
                                        sourceInstance.ContentHash = hashInstance;
                                        
                                        JToken algorithmValue = hashValue2["algorithm"];
                                        if (algorithmValue != null && algorithmValue.Type != JTokenType.Null)
                                        {
                                            string algorithmInstance = ((string)algorithmValue);
                                            hashInstance.Algorithm = algorithmInstance;
                                        }
                                        
                                        JToken valueValue = hashValue2["value"];
                                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue);
                                            hashInstance.Value = valueInstance;
                                        }
                                    }
                                    
                                    JToken typeValue2 = sourceValue2["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        sourceInstance.ContentType = typeInstance2;
                                    }
                                    
                                    JToken valueValue2 = sourceValue2["value"];
                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue2);
                                        sourceInstance.Value = valueInstance2;
                                    }
                                    
                                    JToken versionValue = sourceValue2["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        sourceInstance.Version = versionInstance;
                                    }
                                }
                                
                                JToken stateValue = propertiesValue2["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken logVerboseValue = propertiesValue2["logVerbose"];
                                if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                {
                                    bool logVerboseInstance = ((bool)logVerboseValue);
                                    propertiesInstance.LogVerbose = logVerboseInstance;
                                }
                                
                                JToken creationTimeValue = propertiesValue2["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                    propertiesInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = propertiesValue2["lastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                    propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue2["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                configurationInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                configurationInstance.Name = nameInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                configurationInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property2.Name);
                                    string tagsValue2 = ((string)property2.Value);
                                    configurationInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                configurationInstance.Type = typeInstance3;
                            }
                            
                            JToken etagValue = responseDoc["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                configurationInstance.Etag = etagInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the configuration identified by configuration name.  (see
        /// http://aka.ms/azureautomationsdk/configurationoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='configurationName'>
        /// Required. The configuration name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get configuration operation.
        /// </returns>
        public async Task<DscConfigurationGetResponse> GetAsync(string resourceGroupName, string automationAccount, string configurationName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (configurationName == null)
            {
                throw new ArgumentNullException("configurationName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("configurationName", configurationName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/configurations/";
            url = url + Uri.EscapeDataString(configurationName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DscConfigurationGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DscConfigurationGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            DscConfiguration configurationInstance = new DscConfiguration();
                            result.Configuration = configurationInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DscConfigurationProperties propertiesInstance = new DscConfigurationProperties();
                                configurationInstance.Properties = propertiesInstance;
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    DscConfigurationProvisioningState provisioningStateInstance = ((DscConfigurationProvisioningState)Enum.Parse(typeof(DscConfigurationProvisioningState), ((string)provisioningStateValue), true));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken jobCountValue = propertiesValue["jobCount"];
                                if (jobCountValue != null && jobCountValue.Type != JTokenType.Null)
                                {
                                    int jobCountInstance = ((int)jobCountValue);
                                    propertiesInstance.JobCount = jobCountInstance;
                                }
                                
                                JToken parametersSequenceElement = ((JToken)propertiesValue["parameters"]);
                                if (parametersSequenceElement != null && parametersSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in parametersSequenceElement)
                                    {
                                        string parametersKey = ((string)property.Name);
                                        JObject varToken = ((JObject)property.Value);
                                        DscConfigurationParameter dscConfigurationParameterInstance = new DscConfigurationParameter();
                                        propertiesInstance.Parameters.Add(parametersKey, dscConfigurationParameterInstance);
                                        
                                        JToken typeValue = varToken["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            dscConfigurationParameterInstance.Type = typeInstance;
                                        }
                                        
                                        JToken isMandatoryValue = varToken["isMandatory"];
                                        if (isMandatoryValue != null && isMandatoryValue.Type != JTokenType.Null)
                                        {
                                            bool isMandatoryInstance = ((bool)isMandatoryValue);
                                            dscConfigurationParameterInstance.IsMandatory = isMandatoryInstance;
                                        }
                                        
                                        JToken positionValue = varToken["position"];
                                        if (positionValue != null && positionValue.Type != JTokenType.Null)
                                        {
                                            int positionInstance = ((int)positionValue);
                                            dscConfigurationParameterInstance.Position = positionInstance;
                                        }
                                        
                                        JToken defaultValueValue = varToken["defaultValue"];
                                        if (defaultValueValue != null && defaultValueValue.Type != JTokenType.Null)
                                        {
                                            string defaultValueInstance = ((string)defaultValueValue);
                                            dscConfigurationParameterInstance.DefaultValue = defaultValueInstance;
                                        }
                                    }
                                }
                                
                                JToken sourceValue = propertiesValue["source"];
                                if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                {
                                    ContentSource sourceInstance = new ContentSource();
                                    propertiesInstance.Source = sourceInstance;
                                    
                                    JToken hashValue = sourceValue["hash"];
                                    if (hashValue != null && hashValue.Type != JTokenType.Null)
                                    {
                                        ContentHash hashInstance = new ContentHash();
                                        sourceInstance.ContentHash = hashInstance;
                                        
                                        JToken algorithmValue = hashValue["algorithm"];
                                        if (algorithmValue != null && algorithmValue.Type != JTokenType.Null)
                                        {
                                            string algorithmInstance = ((string)algorithmValue);
                                            hashInstance.Algorithm = algorithmInstance;
                                        }
                                        
                                        JToken valueValue = hashValue["value"];
                                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                                        {
                                            string valueInstance = ((string)valueValue);
                                            hashInstance.Value = valueInstance;
                                        }
                                    }
                                    
                                    JToken typeValue2 = sourceValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        sourceInstance.ContentType = typeInstance2;
                                    }
                                    
                                    JToken valueValue2 = sourceValue["value"];
                                    if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                    {
                                        string valueInstance2 = ((string)valueValue2);
                                        sourceInstance.Value = valueInstance2;
                                    }
                                    
                                    JToken versionValue = sourceValue["version"];
                                    if (versionValue != null && versionValue.Type != JTokenType.Null)
                                    {
                                        string versionInstance = ((string)versionValue);
                                        sourceInstance.Version = versionInstance;
                                    }
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    string stateInstance = ((string)stateValue);
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken logVerboseValue = propertiesValue["logVerbose"];
                                if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                {
                                    bool logVerboseInstance = ((bool)logVerboseValue);
                                    propertiesInstance.LogVerbose = logVerboseInstance;
                                }
                                
                                JToken creationTimeValue = propertiesValue["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                    propertiesInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                    propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                configurationInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                configurationInstance.Name = nameInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                configurationInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property2.Name);
                                    string tagsValue = ((string)property2.Value);
                                    configurationInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken typeValue3 = responseDoc["type"];
                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                            {
                                string typeInstance3 = ((string)typeValue3);
                                configurationInstance.Type = typeInstance3;
                            }
                            
                            JToken etagValue = responseDoc["etag"];
                            if (etagValue != null && etagValue.Type != JTokenType.Null)
                            {
                                string etagInstance = ((string)etagValue);
                                configurationInstance.Etag = etagInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the configuration script identified by configuration name.
        /// (see http://aka.ms/azureautomationsdk/configurationoperations for
        /// more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='configurationName'>
        /// Required. The configuration name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get configuration operation.
        /// </returns>
        public async Task<DscConfigurationGetContentResponse> GetContentAsync(string resourceGroupName, string automationAccount, string configurationName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (configurationName == null)
            {
                throw new ArgumentNullException("configurationName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("configurationName", configurationName);
                TracingAdapter.Enter(invocationId, this, "GetContentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/configurations/";
            url = url + Uri.EscapeDataString(configurationName);
            url = url + "/content";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DscConfigurationGetContentResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DscConfigurationGetContentResponse();
                        result.Content = responseContent;
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of configurations.  (see
        /// http://aka.ms/azureautomationsdk/configurationoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list configuration operation.
        /// </returns>
        public async Task<DscConfigurationListResponse> ListAsync(string resourceGroupName, string automationAccount, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/configurations";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("ocp-referer", url);
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DscConfigurationListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DscConfigurationListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    DscConfiguration dscConfigurationInstance = new DscConfiguration();
                                    result.Configurations.Add(dscConfigurationInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        DscConfigurationProperties propertiesInstance = new DscConfigurationProperties();
                                        dscConfigurationInstance.Properties = propertiesInstance;
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            DscConfigurationProvisioningState provisioningStateInstance = ((DscConfigurationProvisioningState)Enum.Parse(typeof(DscConfigurationProvisioningState), ((string)provisioningStateValue), true));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken jobCountValue = propertiesValue["jobCount"];
                                        if (jobCountValue != null && jobCountValue.Type != JTokenType.Null)
                                        {
                                            int jobCountInstance = ((int)jobCountValue);
                                            propertiesInstance.JobCount = jobCountInstance;
                                        }
                                        
                                        JToken parametersSequenceElement = ((JToken)propertiesValue["parameters"]);
                                        if (parametersSequenceElement != null && parametersSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in parametersSequenceElement)
                                            {
                                                string parametersKey = ((string)property.Name);
                                                JObject varToken = ((JObject)property.Value);
                                                DscConfigurationParameter dscConfigurationParameterInstance = new DscConfigurationParameter();
                                                propertiesInstance.Parameters.Add(parametersKey, dscConfigurationParameterInstance);
                                                
                                                JToken typeValue = varToken["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    dscConfigurationParameterInstance.Type = typeInstance;
                                                }
                                                
                                                JToken isMandatoryValue = varToken["isMandatory"];
                                                if (isMandatoryValue != null && isMandatoryValue.Type != JTokenType.Null)
                                                {
                                                    bool isMandatoryInstance = ((bool)isMandatoryValue);
                                                    dscConfigurationParameterInstance.IsMandatory = isMandatoryInstance;
                                                }
                                                
                                                JToken positionValue = varToken["position"];
                                                if (positionValue != null && positionValue.Type != JTokenType.Null)
                                                {
                                                    int positionInstance = ((int)positionValue);
                                                    dscConfigurationParameterInstance.Position = positionInstance;
                                                }
                                                
                                                JToken defaultValueValue = varToken["defaultValue"];
                                                if (defaultValueValue != null && defaultValueValue.Type != JTokenType.Null)
                                                {
                                                    string defaultValueInstance = ((string)defaultValueValue);
                                                    dscConfigurationParameterInstance.DefaultValue = defaultValueInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken sourceValue = propertiesValue["source"];
                                        if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                        {
                                            ContentSource sourceInstance = new ContentSource();
                                            propertiesInstance.Source = sourceInstance;
                                            
                                            JToken hashValue = sourceValue["hash"];
                                            if (hashValue != null && hashValue.Type != JTokenType.Null)
                                            {
                                                ContentHash hashInstance = new ContentHash();
                                                sourceInstance.ContentHash = hashInstance;
                                                
                                                JToken algorithmValue = hashValue["algorithm"];
                                                if (algorithmValue != null && algorithmValue.Type != JTokenType.Null)
                                                {
                                                    string algorithmInstance = ((string)algorithmValue);
                                                    hashInstance.Algorithm = algorithmInstance;
                                                }
                                                
                                                JToken valueValue2 = hashValue["value"];
                                                if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                {
                                                    string valueInstance = ((string)valueValue2);
                                                    hashInstance.Value = valueInstance;
                                                }
                                            }
                                            
                                            JToken typeValue2 = sourceValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                sourceInstance.ContentType = typeInstance2;
                                            }
                                            
                                            JToken valueValue3 = sourceValue["value"];
                                            if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                            {
                                                string valueInstance2 = ((string)valueValue3);
                                                sourceInstance.Value = valueInstance2;
                                            }
                                            
                                            JToken versionValue = sourceValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                sourceInstance.Version = versionInstance;
                                            }
                                        }
                                        
                                        JToken stateValue = propertiesValue["state"];
                                        if (stateValue != null && stateValue.Type != JTokenType.Null)
                                        {
                                            string stateInstance = ((string)stateValue);
                                            propertiesInstance.State = stateInstance;
                                        }
                                        
                                        JToken logVerboseValue = propertiesValue["logVerbose"];
                                        if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                        {
                                            bool logVerboseInstance = ((bool)logVerboseValue);
                                            propertiesInstance.LogVerbose = logVerboseInstance;
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                            propertiesInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        dscConfigurationInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        dscConfigurationInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        dscConfigurationInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property2.Name);
                                            string tagsValue = ((string)property2.Value);
                                            dscConfigurationInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken typeValue3 = valueValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        dscConfigurationInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken etagValue = valueValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        dscConfigurationInstance.Etag = etagInstance;
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve next list of configurations.  (see
        /// http://aka.ms/azureautomationsdk/configurationoperations for more
        /// information)
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list configuration operation.
        /// </returns>
        public async Task<DscConfigurationListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("ocp-referer", url);
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DscConfigurationListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DscConfigurationListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    DscConfiguration dscConfigurationInstance = new DscConfiguration();
                                    result.Configurations.Add(dscConfigurationInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        DscConfigurationProperties propertiesInstance = new DscConfigurationProperties();
                                        dscConfigurationInstance.Properties = propertiesInstance;
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            DscConfigurationProvisioningState provisioningStateInstance = ((DscConfigurationProvisioningState)Enum.Parse(typeof(DscConfigurationProvisioningState), ((string)provisioningStateValue), true));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken jobCountValue = propertiesValue["jobCount"];
                                        if (jobCountValue != null && jobCountValue.Type != JTokenType.Null)
                                        {
                                            int jobCountInstance = ((int)jobCountValue);
                                            propertiesInstance.JobCount = jobCountInstance;
                                        }
                                        
                                        JToken parametersSequenceElement = ((JToken)propertiesValue["parameters"]);
                                        if (parametersSequenceElement != null && parametersSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in parametersSequenceElement)
                                            {
                                                string parametersKey = ((string)property.Name);
                                                JObject varToken = ((JObject)property.Value);
                                                DscConfigurationParameter dscConfigurationParameterInstance = new DscConfigurationParameter();
                                                propertiesInstance.Parameters.Add(parametersKey, dscConfigurationParameterInstance);
                                                
                                                JToken typeValue = varToken["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    dscConfigurationParameterInstance.Type = typeInstance;
                                                }
                                                
                                                JToken isMandatoryValue = varToken["isMandatory"];
                                                if (isMandatoryValue != null && isMandatoryValue.Type != JTokenType.Null)
                                                {
                                                    bool isMandatoryInstance = ((bool)isMandatoryValue);
                                                    dscConfigurationParameterInstance.IsMandatory = isMandatoryInstance;
                                                }
                                                
                                                JToken positionValue = varToken["position"];
                                                if (positionValue != null && positionValue.Type != JTokenType.Null)
                                                {
                                                    int positionInstance = ((int)positionValue);
                                                    dscConfigurationParameterInstance.Position = positionInstance;
                                                }
                                                
                                                JToken defaultValueValue = varToken["defaultValue"];
                                                if (defaultValueValue != null && defaultValueValue.Type != JTokenType.Null)
                                                {
                                                    string defaultValueInstance = ((string)defaultValueValue);
                                                    dscConfigurationParameterInstance.DefaultValue = defaultValueInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken sourceValue = propertiesValue["source"];
                                        if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                        {
                                            ContentSource sourceInstance = new ContentSource();
                                            propertiesInstance.Source = sourceInstance;
                                            
                                            JToken hashValue = sourceValue["hash"];
                                            if (hashValue != null && hashValue.Type != JTokenType.Null)
                                            {
                                                ContentHash hashInstance = new ContentHash();
                                                sourceInstance.ContentHash = hashInstance;
                                                
                                                JToken algorithmValue = hashValue["algorithm"];
                                                if (algorithmValue != null && algorithmValue.Type != JTokenType.Null)
                                                {
                                                    string algorithmInstance = ((string)algorithmValue);
                                                    hashInstance.Algorithm = algorithmInstance;
                                                }
                                                
                                                JToken valueValue2 = hashValue["value"];
                                                if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                {
                                                    string valueInstance = ((string)valueValue2);
                                                    hashInstance.Value = valueInstance;
                                                }
                                            }
                                            
                                            JToken typeValue2 = sourceValue["type"];
                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                            {
                                                string typeInstance2 = ((string)typeValue2);
                                                sourceInstance.ContentType = typeInstance2;
                                            }
                                            
                                            JToken valueValue3 = sourceValue["value"];
                                            if (valueValue3 != null && valueValue3.Type != JTokenType.Null)
                                            {
                                                string valueInstance2 = ((string)valueValue3);
                                                sourceInstance.Value = valueInstance2;
                                            }
                                            
                                            JToken versionValue = sourceValue["version"];
                                            if (versionValue != null && versionValue.Type != JTokenType.Null)
                                            {
                                                string versionInstance = ((string)versionValue);
                                                sourceInstance.Version = versionInstance;
                                            }
                                        }
                                        
                                        JToken stateValue = propertiesValue["state"];
                                        if (stateValue != null && stateValue.Type != JTokenType.Null)
                                        {
                                            string stateInstance = ((string)stateValue);
                                            propertiesInstance.State = stateInstance;
                                        }
                                        
                                        JToken logVerboseValue = propertiesValue["logVerbose"];
                                        if (logVerboseValue != null && logVerboseValue.Type != JTokenType.Null)
                                        {
                                            bool logVerboseInstance = ((bool)logVerboseValue);
                                            propertiesInstance.LogVerbose = logVerboseInstance;
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                            propertiesInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        dscConfigurationInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        dscConfigurationInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        dscConfigurationInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property2.Name);
                                            string tagsValue = ((string)property2.Value);
                                            dscConfigurationInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken typeValue3 = valueValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        dscConfigurationInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken etagValue = valueValue["etag"];
                                    if (etagValue != null && etagValue.Type != JTokenType.Null)
                                    {
                                        string etagInstance = ((string)etagValue);
                                        dscConfigurationInstance.Etag = etagInstance;
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
