// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Automation
{
    /// <summary>
    /// Service operation for automation activities.  (see
    /// http://aka.ms/azureautomationsdk/activityoperations for more
    /// information)
    /// </summary>
    internal partial class ActivityOperations : IServiceOperations<AutomationManagementClient>, IActivityOperations
    {
        /// <summary>
        /// Initializes a new instance of the ActivityOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ActivityOperations(AutomationManagementClient client)
        {
            this._client = client;
        }
        
        private AutomationManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Automation.AutomationManagementClient.
        /// </summary>
        public AutomationManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Retrieve the activity in the module identified by module name and
        /// activity name.  (see
        /// http://aka.ms/azureautomationsdk/activityoperations for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='moduleName'>
        /// Required. The name of module.
        /// </param>
        /// <param name='activityName'>
        /// Required. The name of activity.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get activity operation.
        /// </returns>
        public async Task<ActivityGetResponse> GetAsync(string resourceGroupName, string automationAccount, string moduleName, string activityName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException("moduleName");
            }
            if (activityName == null)
            {
                throw new ArgumentNullException("activityName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("moduleName", moduleName);
                tracingParameters.Add("activityName", activityName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/modules/";
            url = url + Uri.EscapeDataString(moduleName);
            url = url + "/activities/";
            url = url + Uri.EscapeDataString(activityName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Activity activityInstance = new Activity();
                            result.Activity = activityInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                activityInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ActivityProperties propertiesInstance = new ActivityProperties();
                                activityInstance.Properties = propertiesInstance;
                                
                                JToken definitionValue = propertiesValue["definition"];
                                if (definitionValue != null && definitionValue.Type != JTokenType.Null)
                                {
                                    string definitionInstance = ((string)definitionValue);
                                    propertiesInstance.Definition = definitionInstance;
                                }
                                
                                JToken parameterSetsArray = propertiesValue["parameterSets"];
                                if (parameterSetsArray != null && parameterSetsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken parameterSetsValue in ((JArray)parameterSetsArray))
                                    {
                                        ActivityParameterSet activityParameterSetInstance = new ActivityParameterSet();
                                        propertiesInstance.ParameterSets.Add(activityParameterSetInstance);
                                        
                                        JToken nameValue2 = parameterSetsValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            activityParameterSetInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken parametersArray = parameterSetsValue["parameters"];
                                        if (parametersArray != null && parametersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken parametersValue in ((JArray)parametersArray))
                                            {
                                                ActivityParameter activityParameterInstance = new ActivityParameter();
                                                activityParameterSetInstance.Parameters.Add(activityParameterInstance);
                                                
                                                JToken nameValue3 = parametersValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    activityParameterInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken typeValue = parametersValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    activityParameterInstance.Type = typeInstance;
                                                }
                                                
                                                JToken isMandatoryValue = parametersValue["isMandatory"];
                                                if (isMandatoryValue != null && isMandatoryValue.Type != JTokenType.Null)
                                                {
                                                    bool isMandatoryInstance = ((bool)isMandatoryValue);
                                                    activityParameterInstance.IsMandatory = isMandatoryInstance;
                                                }
                                                
                                                JToken isDynamicValue = parametersValue["isDynamic"];
                                                if (isDynamicValue != null && isDynamicValue.Type != JTokenType.Null)
                                                {
                                                    bool isDynamicInstance = ((bool)isDynamicValue);
                                                    activityParameterInstance.IsDynamic = isDynamicInstance;
                                                }
                                                
                                                JToken positionValue = parametersValue["position"];
                                                if (positionValue != null && positionValue.Type != JTokenType.Null)
                                                {
                                                    bool positionInstance = ((bool)positionValue);
                                                    activityParameterInstance.Position = positionInstance;
                                                }
                                                
                                                JToken valueFromPipelineValue = parametersValue["valueFromPipeline"];
                                                if (valueFromPipelineValue != null && valueFromPipelineValue.Type != JTokenType.Null)
                                                {
                                                    bool valueFromPipelineInstance = ((bool)valueFromPipelineValue);
                                                    activityParameterInstance.ValueFromPipeline = valueFromPipelineInstance;
                                                }
                                                
                                                JToken valueFromPipelineByPropertyNameValue = parametersValue["valueFromPipelineByPropertyName"];
                                                if (valueFromPipelineByPropertyNameValue != null && valueFromPipelineByPropertyNameValue.Type != JTokenType.Null)
                                                {
                                                    bool valueFromPipelineByPropertyNameInstance = ((bool)valueFromPipelineByPropertyNameValue);
                                                    activityParameterInstance.ValueFromPipelineByPropertyName = valueFromPipelineByPropertyNameInstance;
                                                }
                                                
                                                JToken valueFromRemainingArgumentsValue = parametersValue["valueFromRemainingArguments"];
                                                if (valueFromRemainingArgumentsValue != null && valueFromRemainingArgumentsValue.Type != JTokenType.Null)
                                                {
                                                    bool valueFromRemainingArgumentsInstance = ((bool)valueFromRemainingArgumentsValue);
                                                    activityParameterInstance.ValueFromRemainingArguments = valueFromRemainingArgumentsInstance;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken outputTypesArray = propertiesValue["outputTypes"];
                                if (outputTypesArray != null && outputTypesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken outputTypesValue in ((JArray)outputTypesArray))
                                    {
                                        ActivityOutputType activityOutputTypeInstance = new ActivityOutputType();
                                        propertiesInstance.OutputTypes.Add(activityOutputTypeInstance);
                                        
                                        JToken nameValue4 = outputTypesValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            activityOutputTypeInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken typeValue2 = outputTypesValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            activityOutputTypeInstance.Type = typeInstance2;
                                        }
                                    }
                                }
                                
                                JToken creationTimeValue = propertiesValue["creationTime"];
                                if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                    propertiesInstance.CreationTime = creationTimeInstance;
                                }
                                
                                JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                    propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of activities in the module identified by module
        /// name.  (see http://aka.ms/azureautomationsdk/activityoperations
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='moduleName'>
        /// Required. The name of module.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list activity operation.
        /// </returns>
        public async Task<ActivityListResponse> ListAsync(string resourceGroupName, string automationAccount, string moduleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (moduleName == null)
            {
                throw new ArgumentNullException("moduleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("moduleName", moduleName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/modules/";
            url = url + Uri.EscapeDataString(moduleName);
            url = url + "/activities";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-01-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("ocp-referer", url);
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Activity activityInstance = new Activity();
                                    result.Activities.Add(activityInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        activityInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ActivityProperties propertiesInstance = new ActivityProperties();
                                        activityInstance.Properties = propertiesInstance;
                                        
                                        JToken definitionValue = propertiesValue["definition"];
                                        if (definitionValue != null && definitionValue.Type != JTokenType.Null)
                                        {
                                            string definitionInstance = ((string)definitionValue);
                                            propertiesInstance.Definition = definitionInstance;
                                        }
                                        
                                        JToken parameterSetsArray = propertiesValue["parameterSets"];
                                        if (parameterSetsArray != null && parameterSetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken parameterSetsValue in ((JArray)parameterSetsArray))
                                            {
                                                ActivityParameterSet activityParameterSetInstance = new ActivityParameterSet();
                                                propertiesInstance.ParameterSets.Add(activityParameterSetInstance);
                                                
                                                JToken nameValue2 = parameterSetsValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    activityParameterSetInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken parametersArray = parameterSetsValue["parameters"];
                                                if (parametersArray != null && parametersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken parametersValue in ((JArray)parametersArray))
                                                    {
                                                        ActivityParameter activityParameterInstance = new ActivityParameter();
                                                        activityParameterSetInstance.Parameters.Add(activityParameterInstance);
                                                        
                                                        JToken nameValue3 = parametersValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            activityParameterInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        JToken typeValue = parametersValue["type"];
                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance = ((string)typeValue);
                                                            activityParameterInstance.Type = typeInstance;
                                                        }
                                                        
                                                        JToken isMandatoryValue = parametersValue["isMandatory"];
                                                        if (isMandatoryValue != null && isMandatoryValue.Type != JTokenType.Null)
                                                        {
                                                            bool isMandatoryInstance = ((bool)isMandatoryValue);
                                                            activityParameterInstance.IsMandatory = isMandatoryInstance;
                                                        }
                                                        
                                                        JToken isDynamicValue = parametersValue["isDynamic"];
                                                        if (isDynamicValue != null && isDynamicValue.Type != JTokenType.Null)
                                                        {
                                                            bool isDynamicInstance = ((bool)isDynamicValue);
                                                            activityParameterInstance.IsDynamic = isDynamicInstance;
                                                        }
                                                        
                                                        JToken positionValue = parametersValue["position"];
                                                        if (positionValue != null && positionValue.Type != JTokenType.Null)
                                                        {
                                                            bool positionInstance = ((bool)positionValue);
                                                            activityParameterInstance.Position = positionInstance;
                                                        }
                                                        
                                                        JToken valueFromPipelineValue = parametersValue["valueFromPipeline"];
                                                        if (valueFromPipelineValue != null && valueFromPipelineValue.Type != JTokenType.Null)
                                                        {
                                                            bool valueFromPipelineInstance = ((bool)valueFromPipelineValue);
                                                            activityParameterInstance.ValueFromPipeline = valueFromPipelineInstance;
                                                        }
                                                        
                                                        JToken valueFromPipelineByPropertyNameValue = parametersValue["valueFromPipelineByPropertyName"];
                                                        if (valueFromPipelineByPropertyNameValue != null && valueFromPipelineByPropertyNameValue.Type != JTokenType.Null)
                                                        {
                                                            bool valueFromPipelineByPropertyNameInstance = ((bool)valueFromPipelineByPropertyNameValue);
                                                            activityParameterInstance.ValueFromPipelineByPropertyName = valueFromPipelineByPropertyNameInstance;
                                                        }
                                                        
                                                        JToken valueFromRemainingArgumentsValue = parametersValue["valueFromRemainingArguments"];
                                                        if (valueFromRemainingArgumentsValue != null && valueFromRemainingArgumentsValue.Type != JTokenType.Null)
                                                        {
                                                            bool valueFromRemainingArgumentsInstance = ((bool)valueFromRemainingArgumentsValue);
                                                            activityParameterInstance.ValueFromRemainingArguments = valueFromRemainingArgumentsInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken outputTypesArray = propertiesValue["outputTypes"];
                                        if (outputTypesArray != null && outputTypesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputTypesValue in ((JArray)outputTypesArray))
                                            {
                                                ActivityOutputType activityOutputTypeInstance = new ActivityOutputType();
                                                propertiesInstance.OutputTypes.Add(activityOutputTypeInstance);
                                                
                                                JToken nameValue4 = outputTypesValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    activityOutputTypeInstance.Name = nameInstance4;
                                                }
                                                
                                                JToken typeValue2 = outputTypesValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    activityOutputTypeInstance.Type = typeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                            propertiesInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve next list of activities in the module identified by module
        /// name.  (see http://aka.ms/azureautomationsdk/activityoperations
        /// for more information)
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list activity operation.
        /// </returns>
        public async Task<ActivityListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("ocp-referer", url);
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ActivityListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ActivityListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Activity activityInstance = new Activity();
                                    result.Activities.Add(activityInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        activityInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ActivityProperties propertiesInstance = new ActivityProperties();
                                        activityInstance.Properties = propertiesInstance;
                                        
                                        JToken definitionValue = propertiesValue["definition"];
                                        if (definitionValue != null && definitionValue.Type != JTokenType.Null)
                                        {
                                            string definitionInstance = ((string)definitionValue);
                                            propertiesInstance.Definition = definitionInstance;
                                        }
                                        
                                        JToken parameterSetsArray = propertiesValue["parameterSets"];
                                        if (parameterSetsArray != null && parameterSetsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken parameterSetsValue in ((JArray)parameterSetsArray))
                                            {
                                                ActivityParameterSet activityParameterSetInstance = new ActivityParameterSet();
                                                propertiesInstance.ParameterSets.Add(activityParameterSetInstance);
                                                
                                                JToken nameValue2 = parameterSetsValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    activityParameterSetInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken parametersArray = parameterSetsValue["parameters"];
                                                if (parametersArray != null && parametersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken parametersValue in ((JArray)parametersArray))
                                                    {
                                                        ActivityParameter activityParameterInstance = new ActivityParameter();
                                                        activityParameterSetInstance.Parameters.Add(activityParameterInstance);
                                                        
                                                        JToken nameValue3 = parametersValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            activityParameterInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        JToken typeValue = parametersValue["type"];
                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance = ((string)typeValue);
                                                            activityParameterInstance.Type = typeInstance;
                                                        }
                                                        
                                                        JToken isMandatoryValue = parametersValue["isMandatory"];
                                                        if (isMandatoryValue != null && isMandatoryValue.Type != JTokenType.Null)
                                                        {
                                                            bool isMandatoryInstance = ((bool)isMandatoryValue);
                                                            activityParameterInstance.IsMandatory = isMandatoryInstance;
                                                        }
                                                        
                                                        JToken isDynamicValue = parametersValue["isDynamic"];
                                                        if (isDynamicValue != null && isDynamicValue.Type != JTokenType.Null)
                                                        {
                                                            bool isDynamicInstance = ((bool)isDynamicValue);
                                                            activityParameterInstance.IsDynamic = isDynamicInstance;
                                                        }
                                                        
                                                        JToken positionValue = parametersValue["position"];
                                                        if (positionValue != null && positionValue.Type != JTokenType.Null)
                                                        {
                                                            bool positionInstance = ((bool)positionValue);
                                                            activityParameterInstance.Position = positionInstance;
                                                        }
                                                        
                                                        JToken valueFromPipelineValue = parametersValue["valueFromPipeline"];
                                                        if (valueFromPipelineValue != null && valueFromPipelineValue.Type != JTokenType.Null)
                                                        {
                                                            bool valueFromPipelineInstance = ((bool)valueFromPipelineValue);
                                                            activityParameterInstance.ValueFromPipeline = valueFromPipelineInstance;
                                                        }
                                                        
                                                        JToken valueFromPipelineByPropertyNameValue = parametersValue["valueFromPipelineByPropertyName"];
                                                        if (valueFromPipelineByPropertyNameValue != null && valueFromPipelineByPropertyNameValue.Type != JTokenType.Null)
                                                        {
                                                            bool valueFromPipelineByPropertyNameInstance = ((bool)valueFromPipelineByPropertyNameValue);
                                                            activityParameterInstance.ValueFromPipelineByPropertyName = valueFromPipelineByPropertyNameInstance;
                                                        }
                                                        
                                                        JToken valueFromRemainingArgumentsValue = parametersValue["valueFromRemainingArguments"];
                                                        if (valueFromRemainingArgumentsValue != null && valueFromRemainingArgumentsValue.Type != JTokenType.Null)
                                                        {
                                                            bool valueFromRemainingArgumentsInstance = ((bool)valueFromRemainingArgumentsValue);
                                                            activityParameterInstance.ValueFromRemainingArguments = valueFromRemainingArgumentsInstance;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken outputTypesArray = propertiesValue["outputTypes"];
                                        if (outputTypesArray != null && outputTypesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken outputTypesValue in ((JArray)outputTypesArray))
                                            {
                                                ActivityOutputType activityOutputTypeInstance = new ActivityOutputType();
                                                propertiesInstance.OutputTypes.Add(activityOutputTypeInstance);
                                                
                                                JToken nameValue4 = outputTypesValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    activityOutputTypeInstance.Name = nameInstance4;
                                                }
                                                
                                                JToken typeValue2 = outputTypesValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    activityOutputTypeInstance.Type = typeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken creationTimeValue = propertiesValue["creationTime"];
                                        if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                            propertiesInstance.CreationTime = creationTimeInstance;
                                        }
                                        
                                        JToken lastModifiedTimeValue = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
