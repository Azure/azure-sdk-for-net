// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;

namespace Microsoft.Azure.Management.Automation
{
    public static partial class ConnectionOperationsExtensions
    {
        /// <summary>
        /// Create a connection.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create or update
        /// connection operation.
        /// </param>
        /// <returns>
        /// The response model for the create or update connection operation.
        /// </returns>
        public static ConnectionCreateOrUpdateResponse CreateOrUpdate(this IConnectionOperations operations, string resourceGroupName, string automationAccount, ConnectionCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConnectionOperations)s).CreateOrUpdateAsync(resourceGroupName, automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a connection.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create or update
        /// connection operation.
        /// </param>
        /// <returns>
        /// The response model for the create or update connection operation.
        /// </returns>
        public static Task<ConnectionCreateOrUpdateResponse> CreateOrUpdateAsync(this IConnectionOperations operations, string resourceGroupName, string automationAccount, ConnectionCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, automationAccount, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete the connection.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='connectionName'>
        /// Required. The name of connection.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IConnectionOperations operations, string resourceGroupName, string automationAccount, string connectionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConnectionOperations)s).DeleteAsync(resourceGroupName, automationAccount, connectionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete the connection.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='connectionName'>
        /// Required. The name of connection.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IConnectionOperations operations, string resourceGroupName, string automationAccount, string connectionName)
        {
            return operations.DeleteAsync(resourceGroupName, automationAccount, connectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the connection identified by connection name.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='connectionName'>
        /// Required. The name of connection.
        /// </param>
        /// <returns>
        /// The response model for the get connection operation.
        /// </returns>
        public static ConnectionGetResponse Get(this IConnectionOperations operations, string resourceGroupName, string automationAccount, string connectionName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConnectionOperations)s).GetAsync(resourceGroupName, automationAccount, connectionName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the connection identified by connection name.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='connectionName'>
        /// Required. The name of connection.
        /// </param>
        /// <returns>
        /// The response model for the get connection operation.
        /// </returns>
        public static Task<ConnectionGetResponse> GetAsync(this IConnectionOperations operations, string resourceGroupName, string automationAccount, string connectionName)
        {
            return operations.GetAsync(resourceGroupName, automationAccount, connectionName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve a list of connections.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <returns>
        /// The response model for the list connection operation.
        /// </returns>
        public static ConnectionListResponse List(this IConnectionOperations operations, string resourceGroupName, string automationAccount)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConnectionOperations)s).ListAsync(resourceGroupName, automationAccount);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve a list of connections.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <returns>
        /// The response model for the list connection operation.
        /// </returns>
        public static Task<ConnectionListResponse> ListAsync(this IConnectionOperations operations, string resourceGroupName, string automationAccount)
        {
            return operations.ListAsync(resourceGroupName, automationAccount, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve next list of connections.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <returns>
        /// The response model for the list connection operation.
        /// </returns>
        public static ConnectionListResponse ListNext(this IConnectionOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConnectionOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve next list of connections.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <returns>
        /// The response model for the list connection operation.
        /// </returns>
        public static Task<ConnectionListResponse> ListNextAsync(this IConnectionOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Update a connection.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the patch a connection
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Patch(this IConnectionOperations operations, string resourceGroupName, string automationAccount, ConnectionPatchParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IConnectionOperations)s).PatchAsync(resourceGroupName, automationAccount, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update a connection.  (see
        /// http://aka.ms/azureautomationsdk/connectionoperations for more
        /// information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Automation.IConnectionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the patch a connection
        /// operation.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> PatchAsync(this IConnectionOperations operations, string resourceGroupName, string automationAccount, ConnectionPatchParameters parameters)
        {
            return operations.PatchAsync(resourceGroupName, automationAccount, parameters, CancellationToken.None);
        }
    }
}
