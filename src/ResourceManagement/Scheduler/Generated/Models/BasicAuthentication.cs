// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Scheduler.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Scheduler;
    using Microsoft.Azure.Management.Scheduler.Fluent;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class BasicAuthentication : HttpAuthentication
    {
        /// <summary>
        /// Initializes a new instance of the BasicAuthentication class.
        /// </summary>
        public BasicAuthentication()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BasicAuthentication class.
        /// </summary>
        /// <param name="type">Gets or sets the HTTP authentication type.
        /// Possible values include: 'NotSpecified', 'ClientCertificate',
        /// 'ActiveDirectoryOAuth', 'Basic'</param>
        /// <param name="username">Gets or sets the username.</param>
        /// <param name="password">Gets or sets the password, return value will
        /// always be empty.</param>
        public BasicAuthentication(HttpAuthenticationType? type = default(HttpAuthenticationType?), string username = default(string), string password = default(string))
            : base(type)
        {
            Username = username;
            Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the username.
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Gets or sets the password, return value will always be empty.
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

    }
}
