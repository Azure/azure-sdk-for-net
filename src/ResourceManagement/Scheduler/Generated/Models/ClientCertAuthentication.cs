// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Scheduler.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Scheduler;
    using Microsoft.Azure.Management.Scheduler.Fluent;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class ClientCertAuthentication : HttpAuthentication
    {
        /// <summary>
        /// Initializes a new instance of the ClientCertAuthentication class.
        /// </summary>
        public ClientCertAuthentication()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClientCertAuthentication class.
        /// </summary>
        /// <param name="type">Gets or sets the HTTP authentication type.
        /// Possible values include: 'NotSpecified', 'ClientCertificate',
        /// 'ActiveDirectoryOAuth', 'Basic'</param>
        /// <param name="password">Gets or sets the certificate password,
        /// return value will always be empty.</param>
        /// <param name="pfx">Gets or sets the pfx certificate. Accepts
        /// certification in base64 encoding, return value will always be
        /// empty.</param>
        /// <param name="certificateThumbprint">Gets or sets the certificate
        /// thumbprint.</param>
        /// <param name="certificateExpirationDate">Gets or sets the
        /// certificate expiration date.</param>
        /// <param name="certificateSubjectName">Gets or sets the certificate
        /// subject name.</param>
        public ClientCertAuthentication(HttpAuthenticationType? type = default(HttpAuthenticationType?), string password = default(string), string pfx = default(string), string certificateThumbprint = default(string), System.DateTime? certificateExpirationDate = default(System.DateTime?), string certificateSubjectName = default(string))
            : base(type)
        {
            Password = password;
            Pfx = pfx;
            CertificateThumbprint = certificateThumbprint;
            CertificateExpirationDate = certificateExpirationDate;
            CertificateSubjectName = certificateSubjectName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the certificate password, return value will always be
        /// empty.
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets the pfx certificate. Accepts certification in base64
        /// encoding, return value will always be empty.
        /// </summary>
        [JsonProperty(PropertyName = "pfx")]
        public string Pfx { get; set; }

        /// <summary>
        /// Gets or sets the certificate thumbprint.
        /// </summary>
        [JsonProperty(PropertyName = "certificateThumbprint")]
        public string CertificateThumbprint { get; set; }

        /// <summary>
        /// Gets or sets the certificate expiration date.
        /// </summary>
        [JsonProperty(PropertyName = "certificateExpirationDate")]
        public System.DateTime? CertificateExpirationDate { get; set; }

        /// <summary>
        /// Gets or sets the certificate subject name.
        /// </summary>
        [JsonProperty(PropertyName = "certificateSubjectName")]
        public string CertificateSubjectName { get; set; }

    }
}
