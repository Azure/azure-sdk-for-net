// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.2.2.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Scheduler.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Scheduler;
    using Microsoft.Azure.Management.Scheduler.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for JobExecutionStatus.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum JobExecutionStatus
    {
        [EnumMember(Value = "Completed")]
        Completed,
        [EnumMember(Value = "Failed")]
        Failed,
        [EnumMember(Value = "Postponed")]
        Postponed
    }
    internal static class JobExecutionStatusEnumExtension
    {
        internal static string ToSerializedValue(this JobExecutionStatus? value)  =>
            value == null ? null : ((JobExecutionStatus)value).ToSerializedValue();

        internal static string ToSerializedValue(this JobExecutionStatus value)
        {
            switch( value )
            {
                case JobExecutionStatus.Completed:
                    return "Completed";
                case JobExecutionStatus.Failed:
                    return "Failed";
                case JobExecutionStatus.Postponed:
                    return "Postponed";
            }
            return null;
        }

        internal static JobExecutionStatus? ParseJobExecutionStatus(this string value)
        {
            switch( value )
            {
                case "Completed":
                    return JobExecutionStatus.Completed;
                case "Failed":
                    return JobExecutionStatus.Failed;
                case "Postponed":
                    return JobExecutionStatus.Postponed;
            }
            return null;
        }
    }
}
