// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using Hyak.Common;
using Microsoft.Azure.Management.Insights.Models;

namespace Microsoft.Azure.Management.Insights.Models
{
    /// <summary>
    /// Enable the collection of Performance Counters.
    /// </summary>
    public partial class PerformanceCounterConfiguration
    {
        private IList<LocalizedString> _annotations;
        
        /// <summary>
        /// Optional. The display name for the counter.
        /// </summary>
        public IList<LocalizedString> Annotations
        {
            get { return this._annotations; }
            set { this._annotations = value; }
        }
        
        private string _counterSpecifier;
        
        /// <summary>
        /// Optional. The name of the performance counter. For example,
        /// "\\Processor(_Total)\\% Processor Time". To get a list of
        /// performance counters on your host run the command typeperf.
        /// </summary>
        public string CounterSpecifier
        {
            get { return this._counterSpecifier; }
            set { this._counterSpecifier = value; }
        }
        
        private TimeSpan _sampleRate;
        
        /// <summary>
        /// Optional. How often the counter should be sampled.
        /// </summary>
        public TimeSpan SampleRate
        {
            get { return this._sampleRate; }
            set { this._sampleRate = value; }
        }
        
        private Units _unit;
        
        /// <summary>
        /// Optional. The unit of measure of the counter.
        /// </summary>
        public Units Unit
        {
            get { return this._unit; }
            set { this._unit = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the PerformanceCounterConfiguration
        /// class.
        /// </summary>
        public PerformanceCounterConfiguration()
        {
            this.Annotations = new LazyList<LocalizedString>();
        }
    }
}
