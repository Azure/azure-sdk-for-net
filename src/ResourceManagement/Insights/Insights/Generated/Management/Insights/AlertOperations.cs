// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Insights;
using Microsoft.Azure.Management.Insights.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Insights
{
    /// <summary>
    /// Operations for managing alert rules and incidents.
    /// </summary>
    internal partial class AlertOperations : IServiceOperations<InsightsManagementClient>, IAlertOperations
    {
        /// <summary>
        /// Initializes a new instance of the AlertOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AlertOperations(InsightsManagementClient client)
        {
            this._client = client;
        }
        
        private InsightsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Insights.InsightsManagementClient.
        /// </summary>
        public InsightsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to create or update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateOrUpdateRuleAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/alertrules/";
            if (parameters.Properties != null && parameters.Properties.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Properties.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject ruleCreateOrUpdateParametersValue = new JObject();
                requestDoc = ruleCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    ruleCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    if (parameters.Tags is ILazyCollection == false || ((ILazyCollection)parameters.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in parameters.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        ruleCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                    }
                }
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    ruleCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    propertiesValue["isEnabled"] = parameters.Properties.IsEnabled;
                    
                    if (parameters.Properties.Condition != null)
                    {
                        JObject conditionValue = new JObject();
                        propertiesValue["condition"] = conditionValue;
                        if (parameters.Properties.Condition is ThresholdRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            ThresholdRuleCondition derived = ((ThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived.DataSource != null)
                            {
                                JObject dataSourceValue = new JObject();
                                conditionValue["dataSource"] = dataSourceValue;
                                if (derived.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived2 = ((RuleMetricDataSource)derived.DataSource);
                                    
                                    if (derived2.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived2.ResourceUri;
                                    }
                                    
                                    if (derived2.MetricNamespace != null)
                                    {
                                        dataSourceValue["metricNamespace"] = derived2.MetricNamespace;
                                    }
                                    
                                    if (derived2.MetricName != null)
                                    {
                                        dataSourceValue["metricName"] = derived2.MetricName;
                                    }
                                }
                                if (derived.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived3 = ((RuleManagementEventDataSource)derived.DataSource);
                                    
                                    if (derived3.EventName != null)
                                    {
                                        dataSourceValue["eventName"] = derived3.EventName;
                                    }
                                    
                                    if (derived3.EventSource != null)
                                    {
                                        dataSourceValue["eventSource"] = derived3.EventSource;
                                    }
                                    
                                    if (derived3.Level != null)
                                    {
                                        dataSourceValue["level"] = derived3.Level;
                                    }
                                    
                                    if (derived3.OperationName != null)
                                    {
                                        dataSourceValue["operationName"] = derived3.OperationName;
                                    }
                                    
                                    if (derived3.ResourceGroupName != null)
                                    {
                                        dataSourceValue["resourceGroupName"] = derived3.ResourceGroupName;
                                    }
                                    
                                    if (derived3.ResourceProviderName != null)
                                    {
                                        dataSourceValue["resourceProviderName"] = derived3.ResourceProviderName;
                                    }
                                    
                                    if (derived3.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived3.ResourceUri;
                                    }
                                    
                                    if (derived3.Status != null)
                                    {
                                        dataSourceValue["status"] = derived3.Status;
                                    }
                                    
                                    if (derived3.SubStatus != null)
                                    {
                                        dataSourceValue["subStatus"] = derived3.SubStatus;
                                    }
                                    
                                    if (derived3.Claims != null)
                                    {
                                        JObject claimsValue = new JObject();
                                        dataSourceValue["claims"] = claimsValue;
                                        
                                        if (derived3.Claims.EmailAddress != null)
                                        {
                                            claimsValue["emailAddress"] = derived3.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            conditionValue["operator"] = derived.Operator.ToString();
                            
                            conditionValue["threshold"] = derived.Threshold;
                            
                            conditionValue["windowSize"] = XmlConvert.ToString(derived.WindowSize);
                            
                            if (derived.TimeAggregation != null)
                            {
                                conditionValue["timeAggregation"] = derived.TimeAggregation.Value.ToString();
                            }
                        }
                        if (parameters.Properties.Condition is LocationThresholdRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            LocationThresholdRuleCondition derived4 = ((LocationThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived4.DataSource != null)
                            {
                                JObject dataSourceValue2 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue2;
                                if (derived4.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue2["odata.type"] = derived4.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived5 = ((RuleMetricDataSource)derived4.DataSource);
                                    
                                    if (derived5.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived5.ResourceUri;
                                    }
                                    
                                    if (derived5.MetricNamespace != null)
                                    {
                                        dataSourceValue2["metricNamespace"] = derived5.MetricNamespace;
                                    }
                                    
                                    if (derived5.MetricName != null)
                                    {
                                        dataSourceValue2["metricName"] = derived5.MetricName;
                                    }
                                }
                                if (derived4.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue2["odata.type"] = derived4.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived6 = ((RuleManagementEventDataSource)derived4.DataSource);
                                    
                                    if (derived6.EventName != null)
                                    {
                                        dataSourceValue2["eventName"] = derived6.EventName;
                                    }
                                    
                                    if (derived6.EventSource != null)
                                    {
                                        dataSourceValue2["eventSource"] = derived6.EventSource;
                                    }
                                    
                                    if (derived6.Level != null)
                                    {
                                        dataSourceValue2["level"] = derived6.Level;
                                    }
                                    
                                    if (derived6.OperationName != null)
                                    {
                                        dataSourceValue2["operationName"] = derived6.OperationName;
                                    }
                                    
                                    if (derived6.ResourceGroupName != null)
                                    {
                                        dataSourceValue2["resourceGroupName"] = derived6.ResourceGroupName;
                                    }
                                    
                                    if (derived6.ResourceProviderName != null)
                                    {
                                        dataSourceValue2["resourceProviderName"] = derived6.ResourceProviderName;
                                    }
                                    
                                    if (derived6.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived6.ResourceUri;
                                    }
                                    
                                    if (derived6.Status != null)
                                    {
                                        dataSourceValue2["status"] = derived6.Status;
                                    }
                                    
                                    if (derived6.SubStatus != null)
                                    {
                                        dataSourceValue2["subStatus"] = derived6.SubStatus;
                                    }
                                    
                                    if (derived6.Claims != null)
                                    {
                                        JObject claimsValue2 = new JObject();
                                        dataSourceValue2["claims"] = claimsValue2;
                                        
                                        if (derived6.Claims.EmailAddress != null)
                                        {
                                            claimsValue2["emailAddress"] = derived6.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            conditionValue["windowSize"] = XmlConvert.ToString(derived4.WindowSize);
                            
                            conditionValue["failedLocationCount"] = derived4.FailedLocationCount;
                        }
                        if (parameters.Properties.Condition is ManagementEventRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            ManagementEventRuleCondition derived7 = ((ManagementEventRuleCondition)parameters.Properties.Condition);
                            
                            if (derived7.DataSource != null)
                            {
                                JObject dataSourceValue3 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue3;
                                if (derived7.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue3["odata.type"] = derived7.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived8 = ((RuleMetricDataSource)derived7.DataSource);
                                    
                                    if (derived8.ResourceUri != null)
                                    {
                                        dataSourceValue3["resourceUri"] = derived8.ResourceUri;
                                    }
                                    
                                    if (derived8.MetricNamespace != null)
                                    {
                                        dataSourceValue3["metricNamespace"] = derived8.MetricNamespace;
                                    }
                                    
                                    if (derived8.MetricName != null)
                                    {
                                        dataSourceValue3["metricName"] = derived8.MetricName;
                                    }
                                }
                                if (derived7.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue3["odata.type"] = derived7.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived9 = ((RuleManagementEventDataSource)derived7.DataSource);
                                    
                                    if (derived9.EventName != null)
                                    {
                                        dataSourceValue3["eventName"] = derived9.EventName;
                                    }
                                    
                                    if (derived9.EventSource != null)
                                    {
                                        dataSourceValue3["eventSource"] = derived9.EventSource;
                                    }
                                    
                                    if (derived9.Level != null)
                                    {
                                        dataSourceValue3["level"] = derived9.Level;
                                    }
                                    
                                    if (derived9.OperationName != null)
                                    {
                                        dataSourceValue3["operationName"] = derived9.OperationName;
                                    }
                                    
                                    if (derived9.ResourceGroupName != null)
                                    {
                                        dataSourceValue3["resourceGroupName"] = derived9.ResourceGroupName;
                                    }
                                    
                                    if (derived9.ResourceProviderName != null)
                                    {
                                        dataSourceValue3["resourceProviderName"] = derived9.ResourceProviderName;
                                    }
                                    
                                    if (derived9.ResourceUri != null)
                                    {
                                        dataSourceValue3["resourceUri"] = derived9.ResourceUri;
                                    }
                                    
                                    if (derived9.Status != null)
                                    {
                                        dataSourceValue3["status"] = derived9.Status;
                                    }
                                    
                                    if (derived9.SubStatus != null)
                                    {
                                        dataSourceValue3["subStatus"] = derived9.SubStatus;
                                    }
                                    
                                    if (derived9.Claims != null)
                                    {
                                        JObject claimsValue3 = new JObject();
                                        dataSourceValue3["claims"] = claimsValue3;
                                        
                                        if (derived9.Claims.EmailAddress != null)
                                        {
                                            claimsValue3["emailAddress"] = derived9.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            if (derived7.Aggregation != null)
                            {
                                JObject aggregationValue = new JObject();
                                conditionValue["aggregation"] = aggregationValue;
                                
                                aggregationValue["operator"] = derived7.Aggregation.Operator.ToString();
                                
                                aggregationValue["threshold"] = derived7.Aggregation.Threshold;
                                
                                aggregationValue["windowSize"] = XmlConvert.ToString(derived7.Aggregation.WindowSize);
                            }
                        }
                    }
                    
                    if (parameters.Properties.Actions != null)
                    {
                        if (parameters.Properties.Actions is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Actions).IsInitialized)
                        {
                            JArray actionsArray = new JArray();
                            foreach (RuleAction actionsItem in parameters.Properties.Actions)
                            {
                                JObject ruleActionValue = new JObject();
                                actionsArray.Add(ruleActionValue);
                                if (actionsItem is RuleEmailAction)
                                {
                                    ruleActionValue["odata.type"] = actionsItem.GetType().FullName;
                                    RuleEmailAction derived10 = ((RuleEmailAction)actionsItem);
                                    
                                    ruleActionValue["sendToServiceOwners"] = derived10.SendToServiceOwners;
                                    
                                    if (derived10.CustomEmails != null)
                                    {
                                        if (derived10.CustomEmails is ILazyCollection == false || ((ILazyCollection)derived10.CustomEmails).IsInitialized)
                                        {
                                            JArray customEmailsArray = new JArray();
                                            foreach (string customEmailsItem in derived10.CustomEmails)
                                            {
                                                customEmailsArray.Add(customEmailsItem);
                                            }
                                            ruleActionValue["customEmails"] = customEmailsArray;
                                        }
                                    }
                                }
                                if (actionsItem is RuleWebhookAction)
                                {
                                    ruleActionValue["odata.type"] = actionsItem.GetType().FullName;
                                    RuleWebhookAction derived11 = ((RuleWebhookAction)actionsItem);
                                    
                                    if (derived11.ServiceUri != null)
                                    {
                                        ruleActionValue["serviceUri"] = derived11.ServiceUri;
                                    }
                                    
                                    if (derived11.Properties != null)
                                    {
                                        if (derived11.Properties is ILazyCollection == false || ((ILazyCollection)derived11.Properties).IsInitialized)
                                        {
                                            JObject propertiesDictionary = new JObject();
                                            foreach (KeyValuePair<string, string> pair2 in derived11.Properties)
                                            {
                                                string propertiesKey = pair2.Key;
                                                string propertiesValue2 = pair2.Value;
                                                propertiesDictionary[propertiesKey] = propertiesValue2;
                                            }
                                            ruleActionValue["properties"] = propertiesDictionary;
                                        }
                                    }
                                }
                            }
                            propertiesValue["actions"] = actionsArray;
                        }
                    }
                    
                    propertiesValue["lastUpdatedTime"] = parameters.Properties.LastUpdatedTime;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AzureOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                TracingAdapter.Enter(invocationId, this, "DeleteRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/alertrules/";
            url = url + Uri.EscapeDataString(ruleName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AzureOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <param name='incidentName'>
        /// Required. The name of the incident to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Incident operation response.
        /// </returns>
        public async Task<IncidentGetResponse> GetIncidentAsync(string resourceGroupName, string ruleName, string incidentName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            if (incidentName == null)
            {
                throw new ArgumentNullException("incidentName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                tracingParameters.Add("incidentName", incidentName);
                TracingAdapter.Enter(invocationId, this, "GetIncidentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/alertrules/";
            url = url + Uri.EscapeDataString(ruleName);
            url = url + "/incidents/";
            url = url + Uri.EscapeDataString(incidentName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IncidentGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new IncidentGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Incident incidentInstance = new Incident();
                            result.Incident = incidentInstance;
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                incidentInstance.Name = nameInstance;
                            }
                            
                            JToken ruleNameValue = responseDoc["ruleName"];
                            if (ruleNameValue != null && ruleNameValue.Type != JTokenType.Null)
                            {
                                string ruleNameInstance = ((string)ruleNameValue);
                                incidentInstance.RuleName = ruleNameInstance;
                            }
                            
                            JToken isActiveValue = responseDoc["isActive"];
                            if (isActiveValue != null && isActiveValue.Type != JTokenType.Null)
                            {
                                bool isActiveInstance = ((bool)isActiveValue);
                                incidentInstance.IsActive = isActiveInstance;
                            }
                            
                            JToken activatedTimeValue = responseDoc["activatedTime"];
                            if (activatedTimeValue != null && activatedTimeValue.Type != JTokenType.Null)
                            {
                                DateTime activatedTimeInstance = ((DateTime)activatedTimeValue);
                                incidentInstance.ActivatedTime = activatedTimeInstance;
                            }
                            
                            JToken resolvedTimeValue = responseDoc["resolvedTime"];
                            if (resolvedTimeValue != null && resolvedTimeValue.Type != JTokenType.Null)
                            {
                                DateTime resolvedTimeInstance = ((DateTime)resolvedTimeValue);
                                incidentInstance.ResolvedTime = resolvedTimeInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule to retrieve.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The Get Rule operation response.
        /// </returns>
        public async Task<RuleGetResponse> GetRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                TracingAdapter.Enter(invocationId, this, "GetRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/alertrules/";
            url = url + Uri.EscapeDataString(ruleName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RuleGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RuleGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                result.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                result.Name = nameInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    result.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                Rule propertiesInstance = new Rule();
                                result.Properties = propertiesInstance;
                                
                                JToken nameValue2 = propertiesValue["name"];
                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                {
                                    string nameInstance2 = ((string)nameValue2);
                                    propertiesInstance.Name = nameInstance2;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken isEnabledValue = propertiesValue["isEnabled"];
                                if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                {
                                    bool isEnabledInstance = ((bool)isEnabledValue);
                                    propertiesInstance.IsEnabled = isEnabledInstance;
                                }
                                
                                JToken conditionValue = propertiesValue["condition"];
                                if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                {
                                    string typeName = ((string)conditionValue["odata.type"]);
                                    if (typeName == "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition")
                                    {
                                        ThresholdRuleCondition thresholdRuleConditionInstance = new ThresholdRuleCondition();
                                        
                                        JToken dataSourceValue = conditionValue["dataSource"];
                                        if (dataSourceValue != null && dataSourceValue.Type != JTokenType.Null)
                                        {
                                            string typeName2 = ((string)dataSourceValue["odata.type"]);
                                            if (typeName2 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                            {
                                                RuleMetricDataSource ruleMetricDataSourceInstance = new RuleMetricDataSource();
                                                
                                                JToken resourceUriValue = dataSourceValue["resourceUri"];
                                                if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                                {
                                                    string resourceUriInstance = ((string)resourceUriValue);
                                                    ruleMetricDataSourceInstance.ResourceUri = resourceUriInstance;
                                                }
                                                
                                                JToken metricNamespaceValue = dataSourceValue["metricNamespace"];
                                                if (metricNamespaceValue != null && metricNamespaceValue.Type != JTokenType.Null)
                                                {
                                                    string metricNamespaceInstance = ((string)metricNamespaceValue);
                                                    ruleMetricDataSourceInstance.MetricNamespace = metricNamespaceInstance;
                                                }
                                                
                                                JToken metricNameValue = dataSourceValue["metricName"];
                                                if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                {
                                                    string metricNameInstance = ((string)metricNameValue);
                                                    ruleMetricDataSourceInstance.MetricName = metricNameInstance;
                                                }
                                                thresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance;
                                            }
                                            if (typeName2 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                            {
                                                RuleManagementEventDataSource ruleManagementEventDataSourceInstance = new RuleManagementEventDataSource();
                                                
                                                JToken eventNameValue = dataSourceValue["eventName"];
                                                if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                                {
                                                    string eventNameInstance = ((string)eventNameValue);
                                                    ruleManagementEventDataSourceInstance.EventName = eventNameInstance;
                                                }
                                                
                                                JToken eventSourceValue = dataSourceValue["eventSource"];
                                                if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                                {
                                                    string eventSourceInstance = ((string)eventSourceValue);
                                                    ruleManagementEventDataSourceInstance.EventSource = eventSourceInstance;
                                                }
                                                
                                                JToken levelValue = dataSourceValue["level"];
                                                if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                {
                                                    string levelInstance = ((string)levelValue);
                                                    ruleManagementEventDataSourceInstance.Level = levelInstance;
                                                }
                                                
                                                JToken operationNameValue = dataSourceValue["operationName"];
                                                if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                                {
                                                    string operationNameInstance = ((string)operationNameValue);
                                                    ruleManagementEventDataSourceInstance.OperationName = operationNameInstance;
                                                }
                                                
                                                JToken resourceGroupNameValue = dataSourceValue["resourceGroupName"];
                                                if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                                {
                                                    string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                                    ruleManagementEventDataSourceInstance.ResourceGroupName = resourceGroupNameInstance;
                                                }
                                                
                                                JToken resourceProviderNameValue = dataSourceValue["resourceProviderName"];
                                                if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                                {
                                                    string resourceProviderNameInstance = ((string)resourceProviderNameValue);
                                                    ruleManagementEventDataSourceInstance.ResourceProviderName = resourceProviderNameInstance;
                                                }
                                                
                                                JToken resourceUriValue2 = dataSourceValue["resourceUri"];
                                                if (resourceUriValue2 != null && resourceUriValue2.Type != JTokenType.Null)
                                                {
                                                    string resourceUriInstance2 = ((string)resourceUriValue2);
                                                    ruleManagementEventDataSourceInstance.ResourceUri = resourceUriInstance2;
                                                }
                                                
                                                JToken statusValue = dataSourceValue["status"];
                                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                {
                                                    string statusInstance = ((string)statusValue);
                                                    ruleManagementEventDataSourceInstance.Status = statusInstance;
                                                }
                                                
                                                JToken subStatusValue = dataSourceValue["subStatus"];
                                                if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                                {
                                                    string subStatusInstance = ((string)subStatusValue);
                                                    ruleManagementEventDataSourceInstance.SubStatus = subStatusInstance;
                                                }
                                                
                                                JToken claimsValue = dataSourceValue["claims"];
                                                if (claimsValue != null && claimsValue.Type != JTokenType.Null)
                                                {
                                                    RuleManagementEventClaimsDataSource claimsInstance = new RuleManagementEventClaimsDataSource();
                                                    ruleManagementEventDataSourceInstance.Claims = claimsInstance;
                                                    
                                                    JToken emailAddressValue = claimsValue["emailAddress"];
                                                    if (emailAddressValue != null && emailAddressValue.Type != JTokenType.Null)
                                                    {
                                                        string emailAddressInstance = ((string)emailAddressValue);
                                                        claimsInstance.EmailAddress = emailAddressInstance;
                                                    }
                                                }
                                                thresholdRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance;
                                            }
                                        }
                                        
                                        JToken operatorValue = conditionValue["operator"];
                                        if (operatorValue != null && operatorValue.Type != JTokenType.Null)
                                        {
                                            ConditionOperator operatorInstance = ((ConditionOperator)Enum.Parse(typeof(ConditionOperator), ((string)operatorValue), true));
                                            thresholdRuleConditionInstance.Operator = operatorInstance;
                                        }
                                        
                                        JToken thresholdValue = conditionValue["threshold"];
                                        if (thresholdValue != null && thresholdValue.Type != JTokenType.Null)
                                        {
                                            double thresholdInstance = ((double)thresholdValue);
                                            thresholdRuleConditionInstance.Threshold = thresholdInstance;
                                        }
                                        
                                        JToken windowSizeValue = conditionValue["windowSize"];
                                        if (windowSizeValue != null && windowSizeValue.Type != JTokenType.Null)
                                        {
                                            TimeSpan windowSizeInstance = XmlConvert.ToTimeSpan(((string)windowSizeValue));
                                            thresholdRuleConditionInstance.WindowSize = windowSizeInstance;
                                        }
                                        
                                        JToken timeAggregationValue = conditionValue["timeAggregation"];
                                        if (timeAggregationValue != null && timeAggregationValue.Type != JTokenType.Null)
                                        {
                                            TimeAggregationOperator timeAggregationInstance = ((TimeAggregationOperator)Enum.Parse(typeof(TimeAggregationOperator), ((string)timeAggregationValue), true));
                                            thresholdRuleConditionInstance.TimeAggregation = timeAggregationInstance;
                                        }
                                        propertiesInstance.Condition = thresholdRuleConditionInstance;
                                    }
                                    if (typeName == "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition")
                                    {
                                        LocationThresholdRuleCondition locationThresholdRuleConditionInstance = new LocationThresholdRuleCondition();
                                        
                                        JToken dataSourceValue2 = conditionValue["dataSource"];
                                        if (dataSourceValue2 != null && dataSourceValue2.Type != JTokenType.Null)
                                        {
                                            string typeName3 = ((string)dataSourceValue2["odata.type"]);
                                            if (typeName3 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                            {
                                                RuleMetricDataSource ruleMetricDataSourceInstance2 = new RuleMetricDataSource();
                                                
                                                JToken resourceUriValue3 = dataSourceValue2["resourceUri"];
                                                if (resourceUriValue3 != null && resourceUriValue3.Type != JTokenType.Null)
                                                {
                                                    string resourceUriInstance3 = ((string)resourceUriValue3);
                                                    ruleMetricDataSourceInstance2.ResourceUri = resourceUriInstance3;
                                                }
                                                
                                                JToken metricNamespaceValue2 = dataSourceValue2["metricNamespace"];
                                                if (metricNamespaceValue2 != null && metricNamespaceValue2.Type != JTokenType.Null)
                                                {
                                                    string metricNamespaceInstance2 = ((string)metricNamespaceValue2);
                                                    ruleMetricDataSourceInstance2.MetricNamespace = metricNamespaceInstance2;
                                                }
                                                
                                                JToken metricNameValue2 = dataSourceValue2["metricName"];
                                                if (metricNameValue2 != null && metricNameValue2.Type != JTokenType.Null)
                                                {
                                                    string metricNameInstance2 = ((string)metricNameValue2);
                                                    ruleMetricDataSourceInstance2.MetricName = metricNameInstance2;
                                                }
                                                locationThresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance2;
                                            }
                                            if (typeName3 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                            {
                                                RuleManagementEventDataSource ruleManagementEventDataSourceInstance2 = new RuleManagementEventDataSource();
                                                
                                                JToken eventNameValue2 = dataSourceValue2["eventName"];
                                                if (eventNameValue2 != null && eventNameValue2.Type != JTokenType.Null)
                                                {
                                                    string eventNameInstance2 = ((string)eventNameValue2);
                                                    ruleManagementEventDataSourceInstance2.EventName = eventNameInstance2;
                                                }
                                                
                                                JToken eventSourceValue2 = dataSourceValue2["eventSource"];
                                                if (eventSourceValue2 != null && eventSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string eventSourceInstance2 = ((string)eventSourceValue2);
                                                    ruleManagementEventDataSourceInstance2.EventSource = eventSourceInstance2;
                                                }
                                                
                                                JToken levelValue2 = dataSourceValue2["level"];
                                                if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                {
                                                    string levelInstance2 = ((string)levelValue2);
                                                    ruleManagementEventDataSourceInstance2.Level = levelInstance2;
                                                }
                                                
                                                JToken operationNameValue2 = dataSourceValue2["operationName"];
                                                if (operationNameValue2 != null && operationNameValue2.Type != JTokenType.Null)
                                                {
                                                    string operationNameInstance2 = ((string)operationNameValue2);
                                                    ruleManagementEventDataSourceInstance2.OperationName = operationNameInstance2;
                                                }
                                                
                                                JToken resourceGroupNameValue2 = dataSourceValue2["resourceGroupName"];
                                                if (resourceGroupNameValue2 != null && resourceGroupNameValue2.Type != JTokenType.Null)
                                                {
                                                    string resourceGroupNameInstance2 = ((string)resourceGroupNameValue2);
                                                    ruleManagementEventDataSourceInstance2.ResourceGroupName = resourceGroupNameInstance2;
                                                }
                                                
                                                JToken resourceProviderNameValue2 = dataSourceValue2["resourceProviderName"];
                                                if (resourceProviderNameValue2 != null && resourceProviderNameValue2.Type != JTokenType.Null)
                                                {
                                                    string resourceProviderNameInstance2 = ((string)resourceProviderNameValue2);
                                                    ruleManagementEventDataSourceInstance2.ResourceProviderName = resourceProviderNameInstance2;
                                                }
                                                
                                                JToken resourceUriValue4 = dataSourceValue2["resourceUri"];
                                                if (resourceUriValue4 != null && resourceUriValue4.Type != JTokenType.Null)
                                                {
                                                    string resourceUriInstance4 = ((string)resourceUriValue4);
                                                    ruleManagementEventDataSourceInstance2.ResourceUri = resourceUriInstance4;
                                                }
                                                
                                                JToken statusValue2 = dataSourceValue2["status"];
                                                if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                                {
                                                    string statusInstance2 = ((string)statusValue2);
                                                    ruleManagementEventDataSourceInstance2.Status = statusInstance2;
                                                }
                                                
                                                JToken subStatusValue2 = dataSourceValue2["subStatus"];
                                                if (subStatusValue2 != null && subStatusValue2.Type != JTokenType.Null)
                                                {
                                                    string subStatusInstance2 = ((string)subStatusValue2);
                                                    ruleManagementEventDataSourceInstance2.SubStatus = subStatusInstance2;
                                                }
                                                
                                                JToken claimsValue2 = dataSourceValue2["claims"];
                                                if (claimsValue2 != null && claimsValue2.Type != JTokenType.Null)
                                                {
                                                    RuleManagementEventClaimsDataSource claimsInstance2 = new RuleManagementEventClaimsDataSource();
                                                    ruleManagementEventDataSourceInstance2.Claims = claimsInstance2;
                                                    
                                                    JToken emailAddressValue2 = claimsValue2["emailAddress"];
                                                    if (emailAddressValue2 != null && emailAddressValue2.Type != JTokenType.Null)
                                                    {
                                                        string emailAddressInstance2 = ((string)emailAddressValue2);
                                                        claimsInstance2.EmailAddress = emailAddressInstance2;
                                                    }
                                                }
                                                locationThresholdRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance2;
                                            }
                                        }
                                        
                                        JToken windowSizeValue2 = conditionValue["windowSize"];
                                        if (windowSizeValue2 != null && windowSizeValue2.Type != JTokenType.Null)
                                        {
                                            TimeSpan windowSizeInstance2 = XmlConvert.ToTimeSpan(((string)windowSizeValue2));
                                            locationThresholdRuleConditionInstance.WindowSize = windowSizeInstance2;
                                        }
                                        
                                        JToken failedLocationCountValue = conditionValue["failedLocationCount"];
                                        if (failedLocationCountValue != null && failedLocationCountValue.Type != JTokenType.Null)
                                        {
                                            int failedLocationCountInstance = ((int)failedLocationCountValue);
                                            locationThresholdRuleConditionInstance.FailedLocationCount = failedLocationCountInstance;
                                        }
                                        propertiesInstance.Condition = locationThresholdRuleConditionInstance;
                                    }
                                    if (typeName == "Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition")
                                    {
                                        ManagementEventRuleCondition managementEventRuleConditionInstance = new ManagementEventRuleCondition();
                                        
                                        JToken dataSourceValue3 = conditionValue["dataSource"];
                                        if (dataSourceValue3 != null && dataSourceValue3.Type != JTokenType.Null)
                                        {
                                            string typeName4 = ((string)dataSourceValue3["odata.type"]);
                                            if (typeName4 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                            {
                                                RuleMetricDataSource ruleMetricDataSourceInstance3 = new RuleMetricDataSource();
                                                
                                                JToken resourceUriValue5 = dataSourceValue3["resourceUri"];
                                                if (resourceUriValue5 != null && resourceUriValue5.Type != JTokenType.Null)
                                                {
                                                    string resourceUriInstance5 = ((string)resourceUriValue5);
                                                    ruleMetricDataSourceInstance3.ResourceUri = resourceUriInstance5;
                                                }
                                                
                                                JToken metricNamespaceValue3 = dataSourceValue3["metricNamespace"];
                                                if (metricNamespaceValue3 != null && metricNamespaceValue3.Type != JTokenType.Null)
                                                {
                                                    string metricNamespaceInstance3 = ((string)metricNamespaceValue3);
                                                    ruleMetricDataSourceInstance3.MetricNamespace = metricNamespaceInstance3;
                                                }
                                                
                                                JToken metricNameValue3 = dataSourceValue3["metricName"];
                                                if (metricNameValue3 != null && metricNameValue3.Type != JTokenType.Null)
                                                {
                                                    string metricNameInstance3 = ((string)metricNameValue3);
                                                    ruleMetricDataSourceInstance3.MetricName = metricNameInstance3;
                                                }
                                                managementEventRuleConditionInstance.DataSource = ruleMetricDataSourceInstance3;
                                            }
                                            if (typeName4 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                            {
                                                RuleManagementEventDataSource ruleManagementEventDataSourceInstance3 = new RuleManagementEventDataSource();
                                                
                                                JToken eventNameValue3 = dataSourceValue3["eventName"];
                                                if (eventNameValue3 != null && eventNameValue3.Type != JTokenType.Null)
                                                {
                                                    string eventNameInstance3 = ((string)eventNameValue3);
                                                    ruleManagementEventDataSourceInstance3.EventName = eventNameInstance3;
                                                }
                                                
                                                JToken eventSourceValue3 = dataSourceValue3["eventSource"];
                                                if (eventSourceValue3 != null && eventSourceValue3.Type != JTokenType.Null)
                                                {
                                                    string eventSourceInstance3 = ((string)eventSourceValue3);
                                                    ruleManagementEventDataSourceInstance3.EventSource = eventSourceInstance3;
                                                }
                                                
                                                JToken levelValue3 = dataSourceValue3["level"];
                                                if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                {
                                                    string levelInstance3 = ((string)levelValue3);
                                                    ruleManagementEventDataSourceInstance3.Level = levelInstance3;
                                                }
                                                
                                                JToken operationNameValue3 = dataSourceValue3["operationName"];
                                                if (operationNameValue3 != null && operationNameValue3.Type != JTokenType.Null)
                                                {
                                                    string operationNameInstance3 = ((string)operationNameValue3);
                                                    ruleManagementEventDataSourceInstance3.OperationName = operationNameInstance3;
                                                }
                                                
                                                JToken resourceGroupNameValue3 = dataSourceValue3["resourceGroupName"];
                                                if (resourceGroupNameValue3 != null && resourceGroupNameValue3.Type != JTokenType.Null)
                                                {
                                                    string resourceGroupNameInstance3 = ((string)resourceGroupNameValue3);
                                                    ruleManagementEventDataSourceInstance3.ResourceGroupName = resourceGroupNameInstance3;
                                                }
                                                
                                                JToken resourceProviderNameValue3 = dataSourceValue3["resourceProviderName"];
                                                if (resourceProviderNameValue3 != null && resourceProviderNameValue3.Type != JTokenType.Null)
                                                {
                                                    string resourceProviderNameInstance3 = ((string)resourceProviderNameValue3);
                                                    ruleManagementEventDataSourceInstance3.ResourceProviderName = resourceProviderNameInstance3;
                                                }
                                                
                                                JToken resourceUriValue6 = dataSourceValue3["resourceUri"];
                                                if (resourceUriValue6 != null && resourceUriValue6.Type != JTokenType.Null)
                                                {
                                                    string resourceUriInstance6 = ((string)resourceUriValue6);
                                                    ruleManagementEventDataSourceInstance3.ResourceUri = resourceUriInstance6;
                                                }
                                                
                                                JToken statusValue3 = dataSourceValue3["status"];
                                                if (statusValue3 != null && statusValue3.Type != JTokenType.Null)
                                                {
                                                    string statusInstance3 = ((string)statusValue3);
                                                    ruleManagementEventDataSourceInstance3.Status = statusInstance3;
                                                }
                                                
                                                JToken subStatusValue3 = dataSourceValue3["subStatus"];
                                                if (subStatusValue3 != null && subStatusValue3.Type != JTokenType.Null)
                                                {
                                                    string subStatusInstance3 = ((string)subStatusValue3);
                                                    ruleManagementEventDataSourceInstance3.SubStatus = subStatusInstance3;
                                                }
                                                
                                                JToken claimsValue3 = dataSourceValue3["claims"];
                                                if (claimsValue3 != null && claimsValue3.Type != JTokenType.Null)
                                                {
                                                    RuleManagementEventClaimsDataSource claimsInstance3 = new RuleManagementEventClaimsDataSource();
                                                    ruleManagementEventDataSourceInstance3.Claims = claimsInstance3;
                                                    
                                                    JToken emailAddressValue3 = claimsValue3["emailAddress"];
                                                    if (emailAddressValue3 != null && emailAddressValue3.Type != JTokenType.Null)
                                                    {
                                                        string emailAddressInstance3 = ((string)emailAddressValue3);
                                                        claimsInstance3.EmailAddress = emailAddressInstance3;
                                                    }
                                                }
                                                managementEventRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance3;
                                            }
                                        }
                                        
                                        JToken aggregationValue = conditionValue["aggregation"];
                                        if (aggregationValue != null && aggregationValue.Type != JTokenType.Null)
                                        {
                                            ManagementEventAggregationCondition aggregationInstance = new ManagementEventAggregationCondition();
                                            managementEventRuleConditionInstance.Aggregation = aggregationInstance;
                                            
                                            JToken operatorValue2 = aggregationValue["operator"];
                                            if (operatorValue2 != null && operatorValue2.Type != JTokenType.Null)
                                            {
                                                ConditionOperator operatorInstance2 = ((ConditionOperator)Enum.Parse(typeof(ConditionOperator), ((string)operatorValue2), true));
                                                aggregationInstance.Operator = operatorInstance2;
                                            }
                                            
                                            JToken thresholdValue2 = aggregationValue["threshold"];
                                            if (thresholdValue2 != null && thresholdValue2.Type != JTokenType.Null)
                                            {
                                                double thresholdInstance2 = ((double)thresholdValue2);
                                                aggregationInstance.Threshold = thresholdInstance2;
                                            }
                                            
                                            JToken windowSizeValue3 = aggregationValue["windowSize"];
                                            if (windowSizeValue3 != null && windowSizeValue3.Type != JTokenType.Null)
                                            {
                                                TimeSpan windowSizeInstance3 = XmlConvert.ToTimeSpan(((string)windowSizeValue3));
                                                aggregationInstance.WindowSize = windowSizeInstance3;
                                            }
                                        }
                                        propertiesInstance.Condition = managementEventRuleConditionInstance;
                                    }
                                }
                                
                                JToken actionsArray = propertiesValue["actions"];
                                if (actionsArray != null && actionsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken actionsValue in ((JArray)actionsArray))
                                    {
                                        string typeName5 = ((string)actionsValue["odata.type"]);
                                        if (typeName5 == "Microsoft.Azure.Management.Insights.Models.RuleEmailAction")
                                        {
                                            RuleEmailAction ruleEmailActionInstance = new RuleEmailAction();
                                            
                                            JToken sendToServiceOwnersValue = actionsValue["sendToServiceOwners"];
                                            if (sendToServiceOwnersValue != null && sendToServiceOwnersValue.Type != JTokenType.Null)
                                            {
                                                bool sendToServiceOwnersInstance = ((bool)sendToServiceOwnersValue);
                                                ruleEmailActionInstance.SendToServiceOwners = sendToServiceOwnersInstance;
                                            }
                                            
                                            JToken customEmailsArray = actionsValue["customEmails"];
                                            if (customEmailsArray != null && customEmailsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken customEmailsValue in ((JArray)customEmailsArray))
                                                {
                                                    ruleEmailActionInstance.CustomEmails.Add(((string)customEmailsValue));
                                                }
                                            }
                                            propertiesInstance.Actions.Add(ruleEmailActionInstance);
                                        }
                                        if (typeName5 == "Microsoft.Azure.Management.Insights.Models.RuleWebhookAction")
                                        {
                                            RuleWebhookAction ruleWebhookActionInstance = new RuleWebhookAction();
                                            
                                            JToken serviceUriValue = actionsValue["serviceUri"];
                                            if (serviceUriValue != null && serviceUriValue.Type != JTokenType.Null)
                                            {
                                                string serviceUriInstance = ((string)serviceUriValue);
                                                ruleWebhookActionInstance.ServiceUri = serviceUriInstance;
                                            }
                                            
                                            JToken propertiesSequenceElement = ((JToken)actionsValue["properties"]);
                                            if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property2 in propertiesSequenceElement)
                                                {
                                                    string propertiesKey = ((string)property2.Name);
                                                    string propertiesValue2 = ((string)property2.Value);
                                                    ruleWebhookActionInstance.Properties.Add(propertiesKey, propertiesValue2);
                                                }
                                            }
                                            propertiesInstance.Actions.Add(ruleWebhookActionInstance);
                                        }
                                    }
                                }
                                
                                JToken lastUpdatedTimeValue = propertiesValue["lastUpdatedTime"];
                                if (lastUpdatedTimeValue != null && lastUpdatedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastUpdatedTimeInstance = ((DateTime)lastUpdatedTimeValue);
                                    propertiesInstance.LastUpdatedTime = lastUpdatedTimeInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='ruleName'>
        /// Required. The name of the rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List incidents operation response.
        /// </returns>
        public async Task<IncidentListResponse> ListIncidentsForRuleAsync(string resourceGroupName, string ruleName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (ruleName == null)
            {
                throw new ArgumentNullException("ruleName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("ruleName", ruleName);
                TracingAdapter.Enter(invocationId, this, "ListIncidentsForRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/alertrules/";
            url = url + Uri.EscapeDataString(ruleName);
            url = url + "/incidents";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    IncidentListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new IncidentListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Incident incidentInstance = new Incident();
                                    result.Value.Add(incidentInstance);
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        incidentInstance.Name = nameInstance;
                                    }
                                    
                                    JToken ruleNameValue = valueValue["ruleName"];
                                    if (ruleNameValue != null && ruleNameValue.Type != JTokenType.Null)
                                    {
                                        string ruleNameInstance = ((string)ruleNameValue);
                                        incidentInstance.RuleName = ruleNameInstance;
                                    }
                                    
                                    JToken isActiveValue = valueValue["isActive"];
                                    if (isActiveValue != null && isActiveValue.Type != JTokenType.Null)
                                    {
                                        bool isActiveInstance = ((bool)isActiveValue);
                                        incidentInstance.IsActive = isActiveInstance;
                                    }
                                    
                                    JToken activatedTimeValue = valueValue["activatedTime"];
                                    if (activatedTimeValue != null && activatedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime activatedTimeInstance = ((DateTime)activatedTimeValue);
                                        incidentInstance.ActivatedTime = activatedTimeInstance;
                                    }
                                    
                                    JToken resolvedTimeValue = valueValue["resolvedTime"];
                                    if (resolvedTimeValue != null && resolvedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime resolvedTimeInstance = ((DateTime)resolvedTimeValue);
                                        incidentInstance.ResolvedTime = resolvedTimeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List the alert rules within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Optional. The resource identifier of the target of the alert rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Rules operation response.
        /// </returns>
        public async Task<RuleListResponse> ListRulesAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("targetResourceUri", targetResourceUri);
                TracingAdapter.Enter(invocationId, this, "ListRulesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/alertrules";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            List<string> odataFilter = new List<string>();
            if (targetResourceUri != null)
            {
                odataFilter.Add("targetResourceUri eq " + Uri.EscapeDataString(targetResourceUri));
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RuleListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RuleListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RuleResourceCollection ruleResourceCollectionInstance = new RuleResourceCollection();
                            result.RuleResourceCollection = ruleResourceCollectionInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RuleResource ruleResourceInstance = new RuleResource();
                                    ruleResourceCollectionInstance.Value.Add(ruleResourceInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        ruleResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        ruleResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        ruleResourceInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            ruleResourceInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        Rule propertiesInstance = new Rule();
                                        ruleResourceInstance.Properties = propertiesInstance;
                                        
                                        JToken nameValue2 = propertiesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            propertiesInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken isEnabledValue = propertiesValue["isEnabled"];
                                        if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                        {
                                            bool isEnabledInstance = ((bool)isEnabledValue);
                                            propertiesInstance.IsEnabled = isEnabledInstance;
                                        }
                                        
                                        JToken conditionValue = propertiesValue["condition"];
                                        if (conditionValue != null && conditionValue.Type != JTokenType.Null)
                                        {
                                            string typeName = ((string)conditionValue["odata.type"]);
                                            if (typeName == "Microsoft.Azure.Management.Insights.Models.ThresholdRuleCondition")
                                            {
                                                ThresholdRuleCondition thresholdRuleConditionInstance = new ThresholdRuleCondition();
                                                
                                                JToken dataSourceValue = conditionValue["dataSource"];
                                                if (dataSourceValue != null && dataSourceValue.Type != JTokenType.Null)
                                                {
                                                    string typeName2 = ((string)dataSourceValue["odata.type"]);
                                                    if (typeName2 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                                    {
                                                        RuleMetricDataSource ruleMetricDataSourceInstance = new RuleMetricDataSource();
                                                        
                                                        JToken resourceUriValue = dataSourceValue["resourceUri"];
                                                        if (resourceUriValue != null && resourceUriValue.Type != JTokenType.Null)
                                                        {
                                                            string resourceUriInstance = ((string)resourceUriValue);
                                                            ruleMetricDataSourceInstance.ResourceUri = resourceUriInstance;
                                                        }
                                                        
                                                        JToken metricNamespaceValue = dataSourceValue["metricNamespace"];
                                                        if (metricNamespaceValue != null && metricNamespaceValue.Type != JTokenType.Null)
                                                        {
                                                            string metricNamespaceInstance = ((string)metricNamespaceValue);
                                                            ruleMetricDataSourceInstance.MetricNamespace = metricNamespaceInstance;
                                                        }
                                                        
                                                        JToken metricNameValue = dataSourceValue["metricName"];
                                                        if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                        {
                                                            string metricNameInstance = ((string)metricNameValue);
                                                            ruleMetricDataSourceInstance.MetricName = metricNameInstance;
                                                        }
                                                        thresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance;
                                                    }
                                                    if (typeName2 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                                    {
                                                        RuleManagementEventDataSource ruleManagementEventDataSourceInstance = new RuleManagementEventDataSource();
                                                        
                                                        JToken eventNameValue = dataSourceValue["eventName"];
                                                        if (eventNameValue != null && eventNameValue.Type != JTokenType.Null)
                                                        {
                                                            string eventNameInstance = ((string)eventNameValue);
                                                            ruleManagementEventDataSourceInstance.EventName = eventNameInstance;
                                                        }
                                                        
                                                        JToken eventSourceValue = dataSourceValue["eventSource"];
                                                        if (eventSourceValue != null && eventSourceValue.Type != JTokenType.Null)
                                                        {
                                                            string eventSourceInstance = ((string)eventSourceValue);
                                                            ruleManagementEventDataSourceInstance.EventSource = eventSourceInstance;
                                                        }
                                                        
                                                        JToken levelValue = dataSourceValue["level"];
                                                        if (levelValue != null && levelValue.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance = ((string)levelValue);
                                                            ruleManagementEventDataSourceInstance.Level = levelInstance;
                                                        }
                                                        
                                                        JToken operationNameValue = dataSourceValue["operationName"];
                                                        if (operationNameValue != null && operationNameValue.Type != JTokenType.Null)
                                                        {
                                                            string operationNameInstance = ((string)operationNameValue);
                                                            ruleManagementEventDataSourceInstance.OperationName = operationNameInstance;
                                                        }
                                                        
                                                        JToken resourceGroupNameValue = dataSourceValue["resourceGroupName"];
                                                        if (resourceGroupNameValue != null && resourceGroupNameValue.Type != JTokenType.Null)
                                                        {
                                                            string resourceGroupNameInstance = ((string)resourceGroupNameValue);
                                                            ruleManagementEventDataSourceInstance.ResourceGroupName = resourceGroupNameInstance;
                                                        }
                                                        
                                                        JToken resourceProviderNameValue = dataSourceValue["resourceProviderName"];
                                                        if (resourceProviderNameValue != null && resourceProviderNameValue.Type != JTokenType.Null)
                                                        {
                                                            string resourceProviderNameInstance = ((string)resourceProviderNameValue);
                                                            ruleManagementEventDataSourceInstance.ResourceProviderName = resourceProviderNameInstance;
                                                        }
                                                        
                                                        JToken resourceUriValue2 = dataSourceValue["resourceUri"];
                                                        if (resourceUriValue2 != null && resourceUriValue2.Type != JTokenType.Null)
                                                        {
                                                            string resourceUriInstance2 = ((string)resourceUriValue2);
                                                            ruleManagementEventDataSourceInstance.ResourceUri = resourceUriInstance2;
                                                        }
                                                        
                                                        JToken statusValue = dataSourceValue["status"];
                                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                        {
                                                            string statusInstance = ((string)statusValue);
                                                            ruleManagementEventDataSourceInstance.Status = statusInstance;
                                                        }
                                                        
                                                        JToken subStatusValue = dataSourceValue["subStatus"];
                                                        if (subStatusValue != null && subStatusValue.Type != JTokenType.Null)
                                                        {
                                                            string subStatusInstance = ((string)subStatusValue);
                                                            ruleManagementEventDataSourceInstance.SubStatus = subStatusInstance;
                                                        }
                                                        
                                                        JToken claimsValue = dataSourceValue["claims"];
                                                        if (claimsValue != null && claimsValue.Type != JTokenType.Null)
                                                        {
                                                            RuleManagementEventClaimsDataSource claimsInstance = new RuleManagementEventClaimsDataSource();
                                                            ruleManagementEventDataSourceInstance.Claims = claimsInstance;
                                                            
                                                            JToken emailAddressValue = claimsValue["emailAddress"];
                                                            if (emailAddressValue != null && emailAddressValue.Type != JTokenType.Null)
                                                            {
                                                                string emailAddressInstance = ((string)emailAddressValue);
                                                                claimsInstance.EmailAddress = emailAddressInstance;
                                                            }
                                                        }
                                                        thresholdRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance;
                                                    }
                                                }
                                                
                                                JToken operatorValue = conditionValue["operator"];
                                                if (operatorValue != null && operatorValue.Type != JTokenType.Null)
                                                {
                                                    ConditionOperator operatorInstance = ((ConditionOperator)Enum.Parse(typeof(ConditionOperator), ((string)operatorValue), true));
                                                    thresholdRuleConditionInstance.Operator = operatorInstance;
                                                }
                                                
                                                JToken thresholdValue = conditionValue["threshold"];
                                                if (thresholdValue != null && thresholdValue.Type != JTokenType.Null)
                                                {
                                                    double thresholdInstance = ((double)thresholdValue);
                                                    thresholdRuleConditionInstance.Threshold = thresholdInstance;
                                                }
                                                
                                                JToken windowSizeValue = conditionValue["windowSize"];
                                                if (windowSizeValue != null && windowSizeValue.Type != JTokenType.Null)
                                                {
                                                    TimeSpan windowSizeInstance = XmlConvert.ToTimeSpan(((string)windowSizeValue));
                                                    thresholdRuleConditionInstance.WindowSize = windowSizeInstance;
                                                }
                                                
                                                JToken timeAggregationValue = conditionValue["timeAggregation"];
                                                if (timeAggregationValue != null && timeAggregationValue.Type != JTokenType.Null)
                                                {
                                                    TimeAggregationOperator timeAggregationInstance = ((TimeAggregationOperator)Enum.Parse(typeof(TimeAggregationOperator), ((string)timeAggregationValue), true));
                                                    thresholdRuleConditionInstance.TimeAggregation = timeAggregationInstance;
                                                }
                                                propertiesInstance.Condition = thresholdRuleConditionInstance;
                                            }
                                            if (typeName == "Microsoft.Azure.Management.Insights.Models.LocationThresholdRuleCondition")
                                            {
                                                LocationThresholdRuleCondition locationThresholdRuleConditionInstance = new LocationThresholdRuleCondition();
                                                
                                                JToken dataSourceValue2 = conditionValue["dataSource"];
                                                if (dataSourceValue2 != null && dataSourceValue2.Type != JTokenType.Null)
                                                {
                                                    string typeName3 = ((string)dataSourceValue2["odata.type"]);
                                                    if (typeName3 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                                    {
                                                        RuleMetricDataSource ruleMetricDataSourceInstance2 = new RuleMetricDataSource();
                                                        
                                                        JToken resourceUriValue3 = dataSourceValue2["resourceUri"];
                                                        if (resourceUriValue3 != null && resourceUriValue3.Type != JTokenType.Null)
                                                        {
                                                            string resourceUriInstance3 = ((string)resourceUriValue3);
                                                            ruleMetricDataSourceInstance2.ResourceUri = resourceUriInstance3;
                                                        }
                                                        
                                                        JToken metricNamespaceValue2 = dataSourceValue2["metricNamespace"];
                                                        if (metricNamespaceValue2 != null && metricNamespaceValue2.Type != JTokenType.Null)
                                                        {
                                                            string metricNamespaceInstance2 = ((string)metricNamespaceValue2);
                                                            ruleMetricDataSourceInstance2.MetricNamespace = metricNamespaceInstance2;
                                                        }
                                                        
                                                        JToken metricNameValue2 = dataSourceValue2["metricName"];
                                                        if (metricNameValue2 != null && metricNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string metricNameInstance2 = ((string)metricNameValue2);
                                                            ruleMetricDataSourceInstance2.MetricName = metricNameInstance2;
                                                        }
                                                        locationThresholdRuleConditionInstance.DataSource = ruleMetricDataSourceInstance2;
                                                    }
                                                    if (typeName3 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                                    {
                                                        RuleManagementEventDataSource ruleManagementEventDataSourceInstance2 = new RuleManagementEventDataSource();
                                                        
                                                        JToken eventNameValue2 = dataSourceValue2["eventName"];
                                                        if (eventNameValue2 != null && eventNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string eventNameInstance2 = ((string)eventNameValue2);
                                                            ruleManagementEventDataSourceInstance2.EventName = eventNameInstance2;
                                                        }
                                                        
                                                        JToken eventSourceValue2 = dataSourceValue2["eventSource"];
                                                        if (eventSourceValue2 != null && eventSourceValue2.Type != JTokenType.Null)
                                                        {
                                                            string eventSourceInstance2 = ((string)eventSourceValue2);
                                                            ruleManagementEventDataSourceInstance2.EventSource = eventSourceInstance2;
                                                        }
                                                        
                                                        JToken levelValue2 = dataSourceValue2["level"];
                                                        if (levelValue2 != null && levelValue2.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance2 = ((string)levelValue2);
                                                            ruleManagementEventDataSourceInstance2.Level = levelInstance2;
                                                        }
                                                        
                                                        JToken operationNameValue2 = dataSourceValue2["operationName"];
                                                        if (operationNameValue2 != null && operationNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string operationNameInstance2 = ((string)operationNameValue2);
                                                            ruleManagementEventDataSourceInstance2.OperationName = operationNameInstance2;
                                                        }
                                                        
                                                        JToken resourceGroupNameValue2 = dataSourceValue2["resourceGroupName"];
                                                        if (resourceGroupNameValue2 != null && resourceGroupNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string resourceGroupNameInstance2 = ((string)resourceGroupNameValue2);
                                                            ruleManagementEventDataSourceInstance2.ResourceGroupName = resourceGroupNameInstance2;
                                                        }
                                                        
                                                        JToken resourceProviderNameValue2 = dataSourceValue2["resourceProviderName"];
                                                        if (resourceProviderNameValue2 != null && resourceProviderNameValue2.Type != JTokenType.Null)
                                                        {
                                                            string resourceProviderNameInstance2 = ((string)resourceProviderNameValue2);
                                                            ruleManagementEventDataSourceInstance2.ResourceProviderName = resourceProviderNameInstance2;
                                                        }
                                                        
                                                        JToken resourceUriValue4 = dataSourceValue2["resourceUri"];
                                                        if (resourceUriValue4 != null && resourceUriValue4.Type != JTokenType.Null)
                                                        {
                                                            string resourceUriInstance4 = ((string)resourceUriValue4);
                                                            ruleManagementEventDataSourceInstance2.ResourceUri = resourceUriInstance4;
                                                        }
                                                        
                                                        JToken statusValue2 = dataSourceValue2["status"];
                                                        if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                                        {
                                                            string statusInstance2 = ((string)statusValue2);
                                                            ruleManagementEventDataSourceInstance2.Status = statusInstance2;
                                                        }
                                                        
                                                        JToken subStatusValue2 = dataSourceValue2["subStatus"];
                                                        if (subStatusValue2 != null && subStatusValue2.Type != JTokenType.Null)
                                                        {
                                                            string subStatusInstance2 = ((string)subStatusValue2);
                                                            ruleManagementEventDataSourceInstance2.SubStatus = subStatusInstance2;
                                                        }
                                                        
                                                        JToken claimsValue2 = dataSourceValue2["claims"];
                                                        if (claimsValue2 != null && claimsValue2.Type != JTokenType.Null)
                                                        {
                                                            RuleManagementEventClaimsDataSource claimsInstance2 = new RuleManagementEventClaimsDataSource();
                                                            ruleManagementEventDataSourceInstance2.Claims = claimsInstance2;
                                                            
                                                            JToken emailAddressValue2 = claimsValue2["emailAddress"];
                                                            if (emailAddressValue2 != null && emailAddressValue2.Type != JTokenType.Null)
                                                            {
                                                                string emailAddressInstance2 = ((string)emailAddressValue2);
                                                                claimsInstance2.EmailAddress = emailAddressInstance2;
                                                            }
                                                        }
                                                        locationThresholdRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance2;
                                                    }
                                                }
                                                
                                                JToken windowSizeValue2 = conditionValue["windowSize"];
                                                if (windowSizeValue2 != null && windowSizeValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan windowSizeInstance2 = XmlConvert.ToTimeSpan(((string)windowSizeValue2));
                                                    locationThresholdRuleConditionInstance.WindowSize = windowSizeInstance2;
                                                }
                                                
                                                JToken failedLocationCountValue = conditionValue["failedLocationCount"];
                                                if (failedLocationCountValue != null && failedLocationCountValue.Type != JTokenType.Null)
                                                {
                                                    int failedLocationCountInstance = ((int)failedLocationCountValue);
                                                    locationThresholdRuleConditionInstance.FailedLocationCount = failedLocationCountInstance;
                                                }
                                                propertiesInstance.Condition = locationThresholdRuleConditionInstance;
                                            }
                                            if (typeName == "Microsoft.Azure.Management.Insights.Models.ManagementEventRuleCondition")
                                            {
                                                ManagementEventRuleCondition managementEventRuleConditionInstance = new ManagementEventRuleCondition();
                                                
                                                JToken dataSourceValue3 = conditionValue["dataSource"];
                                                if (dataSourceValue3 != null && dataSourceValue3.Type != JTokenType.Null)
                                                {
                                                    string typeName4 = ((string)dataSourceValue3["odata.type"]);
                                                    if (typeName4 == "Microsoft.Azure.Management.Insights.Models.RuleMetricDataSource")
                                                    {
                                                        RuleMetricDataSource ruleMetricDataSourceInstance3 = new RuleMetricDataSource();
                                                        
                                                        JToken resourceUriValue5 = dataSourceValue3["resourceUri"];
                                                        if (resourceUriValue5 != null && resourceUriValue5.Type != JTokenType.Null)
                                                        {
                                                            string resourceUriInstance5 = ((string)resourceUriValue5);
                                                            ruleMetricDataSourceInstance3.ResourceUri = resourceUriInstance5;
                                                        }
                                                        
                                                        JToken metricNamespaceValue3 = dataSourceValue3["metricNamespace"];
                                                        if (metricNamespaceValue3 != null && metricNamespaceValue3.Type != JTokenType.Null)
                                                        {
                                                            string metricNamespaceInstance3 = ((string)metricNamespaceValue3);
                                                            ruleMetricDataSourceInstance3.MetricNamespace = metricNamespaceInstance3;
                                                        }
                                                        
                                                        JToken metricNameValue3 = dataSourceValue3["metricName"];
                                                        if (metricNameValue3 != null && metricNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string metricNameInstance3 = ((string)metricNameValue3);
                                                            ruleMetricDataSourceInstance3.MetricName = metricNameInstance3;
                                                        }
                                                        managementEventRuleConditionInstance.DataSource = ruleMetricDataSourceInstance3;
                                                    }
                                                    if (typeName4 == "Microsoft.Azure.Management.Insights.Models.RuleManagementEventDataSource")
                                                    {
                                                        RuleManagementEventDataSource ruleManagementEventDataSourceInstance3 = new RuleManagementEventDataSource();
                                                        
                                                        JToken eventNameValue3 = dataSourceValue3["eventName"];
                                                        if (eventNameValue3 != null && eventNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string eventNameInstance3 = ((string)eventNameValue3);
                                                            ruleManagementEventDataSourceInstance3.EventName = eventNameInstance3;
                                                        }
                                                        
                                                        JToken eventSourceValue3 = dataSourceValue3["eventSource"];
                                                        if (eventSourceValue3 != null && eventSourceValue3.Type != JTokenType.Null)
                                                        {
                                                            string eventSourceInstance3 = ((string)eventSourceValue3);
                                                            ruleManagementEventDataSourceInstance3.EventSource = eventSourceInstance3;
                                                        }
                                                        
                                                        JToken levelValue3 = dataSourceValue3["level"];
                                                        if (levelValue3 != null && levelValue3.Type != JTokenType.Null)
                                                        {
                                                            string levelInstance3 = ((string)levelValue3);
                                                            ruleManagementEventDataSourceInstance3.Level = levelInstance3;
                                                        }
                                                        
                                                        JToken operationNameValue3 = dataSourceValue3["operationName"];
                                                        if (operationNameValue3 != null && operationNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string operationNameInstance3 = ((string)operationNameValue3);
                                                            ruleManagementEventDataSourceInstance3.OperationName = operationNameInstance3;
                                                        }
                                                        
                                                        JToken resourceGroupNameValue3 = dataSourceValue3["resourceGroupName"];
                                                        if (resourceGroupNameValue3 != null && resourceGroupNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string resourceGroupNameInstance3 = ((string)resourceGroupNameValue3);
                                                            ruleManagementEventDataSourceInstance3.ResourceGroupName = resourceGroupNameInstance3;
                                                        }
                                                        
                                                        JToken resourceProviderNameValue3 = dataSourceValue3["resourceProviderName"];
                                                        if (resourceProviderNameValue3 != null && resourceProviderNameValue3.Type != JTokenType.Null)
                                                        {
                                                            string resourceProviderNameInstance3 = ((string)resourceProviderNameValue3);
                                                            ruleManagementEventDataSourceInstance3.ResourceProviderName = resourceProviderNameInstance3;
                                                        }
                                                        
                                                        JToken resourceUriValue6 = dataSourceValue3["resourceUri"];
                                                        if (resourceUriValue6 != null && resourceUriValue6.Type != JTokenType.Null)
                                                        {
                                                            string resourceUriInstance6 = ((string)resourceUriValue6);
                                                            ruleManagementEventDataSourceInstance3.ResourceUri = resourceUriInstance6;
                                                        }
                                                        
                                                        JToken statusValue3 = dataSourceValue3["status"];
                                                        if (statusValue3 != null && statusValue3.Type != JTokenType.Null)
                                                        {
                                                            string statusInstance3 = ((string)statusValue3);
                                                            ruleManagementEventDataSourceInstance3.Status = statusInstance3;
                                                        }
                                                        
                                                        JToken subStatusValue3 = dataSourceValue3["subStatus"];
                                                        if (subStatusValue3 != null && subStatusValue3.Type != JTokenType.Null)
                                                        {
                                                            string subStatusInstance3 = ((string)subStatusValue3);
                                                            ruleManagementEventDataSourceInstance3.SubStatus = subStatusInstance3;
                                                        }
                                                        
                                                        JToken claimsValue3 = dataSourceValue3["claims"];
                                                        if (claimsValue3 != null && claimsValue3.Type != JTokenType.Null)
                                                        {
                                                            RuleManagementEventClaimsDataSource claimsInstance3 = new RuleManagementEventClaimsDataSource();
                                                            ruleManagementEventDataSourceInstance3.Claims = claimsInstance3;
                                                            
                                                            JToken emailAddressValue3 = claimsValue3["emailAddress"];
                                                            if (emailAddressValue3 != null && emailAddressValue3.Type != JTokenType.Null)
                                                            {
                                                                string emailAddressInstance3 = ((string)emailAddressValue3);
                                                                claimsInstance3.EmailAddress = emailAddressInstance3;
                                                            }
                                                        }
                                                        managementEventRuleConditionInstance.DataSource = ruleManagementEventDataSourceInstance3;
                                                    }
                                                }
                                                
                                                JToken aggregationValue = conditionValue["aggregation"];
                                                if (aggregationValue != null && aggregationValue.Type != JTokenType.Null)
                                                {
                                                    ManagementEventAggregationCondition aggregationInstance = new ManagementEventAggregationCondition();
                                                    managementEventRuleConditionInstance.Aggregation = aggregationInstance;
                                                    
                                                    JToken operatorValue2 = aggregationValue["operator"];
                                                    if (operatorValue2 != null && operatorValue2.Type != JTokenType.Null)
                                                    {
                                                        ConditionOperator operatorInstance2 = ((ConditionOperator)Enum.Parse(typeof(ConditionOperator), ((string)operatorValue2), true));
                                                        aggregationInstance.Operator = operatorInstance2;
                                                    }
                                                    
                                                    JToken thresholdValue2 = aggregationValue["threshold"];
                                                    if (thresholdValue2 != null && thresholdValue2.Type != JTokenType.Null)
                                                    {
                                                        double thresholdInstance2 = ((double)thresholdValue2);
                                                        aggregationInstance.Threshold = thresholdInstance2;
                                                    }
                                                    
                                                    JToken windowSizeValue3 = aggregationValue["windowSize"];
                                                    if (windowSizeValue3 != null && windowSizeValue3.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan windowSizeInstance3 = XmlConvert.ToTimeSpan(((string)windowSizeValue3));
                                                        aggregationInstance.WindowSize = windowSizeInstance3;
                                                    }
                                                }
                                                propertiesInstance.Condition = managementEventRuleConditionInstance;
                                            }
                                        }
                                        
                                        JToken actionsArray = propertiesValue["actions"];
                                        if (actionsArray != null && actionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken actionsValue in ((JArray)actionsArray))
                                            {
                                                string typeName5 = ((string)actionsValue["odata.type"]);
                                                if (typeName5 == "Microsoft.Azure.Management.Insights.Models.RuleEmailAction")
                                                {
                                                    RuleEmailAction ruleEmailActionInstance = new RuleEmailAction();
                                                    
                                                    JToken sendToServiceOwnersValue = actionsValue["sendToServiceOwners"];
                                                    if (sendToServiceOwnersValue != null && sendToServiceOwnersValue.Type != JTokenType.Null)
                                                    {
                                                        bool sendToServiceOwnersInstance = ((bool)sendToServiceOwnersValue);
                                                        ruleEmailActionInstance.SendToServiceOwners = sendToServiceOwnersInstance;
                                                    }
                                                    
                                                    JToken customEmailsArray = actionsValue["customEmails"];
                                                    if (customEmailsArray != null && customEmailsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken customEmailsValue in ((JArray)customEmailsArray))
                                                        {
                                                            ruleEmailActionInstance.CustomEmails.Add(((string)customEmailsValue));
                                                        }
                                                    }
                                                    propertiesInstance.Actions.Add(ruleEmailActionInstance);
                                                }
                                                if (typeName5 == "Microsoft.Azure.Management.Insights.Models.RuleWebhookAction")
                                                {
                                                    RuleWebhookAction ruleWebhookActionInstance = new RuleWebhookAction();
                                                    
                                                    JToken serviceUriValue = actionsValue["serviceUri"];
                                                    if (serviceUriValue != null && serviceUriValue.Type != JTokenType.Null)
                                                    {
                                                        string serviceUriInstance = ((string)serviceUriValue);
                                                        ruleWebhookActionInstance.ServiceUri = serviceUriInstance;
                                                    }
                                                    
                                                    JToken propertiesSequenceElement = ((JToken)actionsValue["properties"]);
                                                    if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property2 in propertiesSequenceElement)
                                                        {
                                                            string propertiesKey = ((string)property2.Name);
                                                            string propertiesValue2 = ((string)property2.Value);
                                                            ruleWebhookActionInstance.Properties.Add(propertiesKey, propertiesValue2);
                                                        }
                                                    }
                                                    propertiesInstance.Actions.Add(ruleWebhookActionInstance);
                                                }
                                            }
                                        }
                                        
                                        JToken lastUpdatedTimeValue = propertiesValue["lastUpdatedTime"];
                                        if (lastUpdatedTimeValue != null && lastUpdatedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastUpdatedTimeInstance = ((DateTime)lastUpdatedTimeValue);
                                            propertiesInstance.LastUpdatedTime = lastUpdatedTimeInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Required. The rule to update.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateRuleAsync(string resourceGroupName, RuleCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateRuleAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/alertrules/";
            if (parameters.Properties != null && parameters.Properties.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Properties.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2016-03-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject ruleCreateOrUpdateParametersValue = new JObject();
                requestDoc = ruleCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    ruleCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    if (parameters.Tags is ILazyCollection == false || ((ILazyCollection)parameters.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in parameters.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        ruleCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                    }
                }
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    ruleCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Properties.Description;
                    }
                    
                    propertiesValue["isEnabled"] = parameters.Properties.IsEnabled;
                    
                    if (parameters.Properties.Condition != null)
                    {
                        JObject conditionValue = new JObject();
                        propertiesValue["condition"] = conditionValue;
                        if (parameters.Properties.Condition is ThresholdRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            ThresholdRuleCondition derived = ((ThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived.DataSource != null)
                            {
                                JObject dataSourceValue = new JObject();
                                conditionValue["dataSource"] = dataSourceValue;
                                if (derived.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived2 = ((RuleMetricDataSource)derived.DataSource);
                                    
                                    if (derived2.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived2.ResourceUri;
                                    }
                                    
                                    if (derived2.MetricNamespace != null)
                                    {
                                        dataSourceValue["metricNamespace"] = derived2.MetricNamespace;
                                    }
                                    
                                    if (derived2.MetricName != null)
                                    {
                                        dataSourceValue["metricName"] = derived2.MetricName;
                                    }
                                }
                                if (derived.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue["odata.type"] = derived.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived3 = ((RuleManagementEventDataSource)derived.DataSource);
                                    
                                    if (derived3.EventName != null)
                                    {
                                        dataSourceValue["eventName"] = derived3.EventName;
                                    }
                                    
                                    if (derived3.EventSource != null)
                                    {
                                        dataSourceValue["eventSource"] = derived3.EventSource;
                                    }
                                    
                                    if (derived3.Level != null)
                                    {
                                        dataSourceValue["level"] = derived3.Level;
                                    }
                                    
                                    if (derived3.OperationName != null)
                                    {
                                        dataSourceValue["operationName"] = derived3.OperationName;
                                    }
                                    
                                    if (derived3.ResourceGroupName != null)
                                    {
                                        dataSourceValue["resourceGroupName"] = derived3.ResourceGroupName;
                                    }
                                    
                                    if (derived3.ResourceProviderName != null)
                                    {
                                        dataSourceValue["resourceProviderName"] = derived3.ResourceProviderName;
                                    }
                                    
                                    if (derived3.ResourceUri != null)
                                    {
                                        dataSourceValue["resourceUri"] = derived3.ResourceUri;
                                    }
                                    
                                    if (derived3.Status != null)
                                    {
                                        dataSourceValue["status"] = derived3.Status;
                                    }
                                    
                                    if (derived3.SubStatus != null)
                                    {
                                        dataSourceValue["subStatus"] = derived3.SubStatus;
                                    }
                                    
                                    if (derived3.Claims != null)
                                    {
                                        JObject claimsValue = new JObject();
                                        dataSourceValue["claims"] = claimsValue;
                                        
                                        if (derived3.Claims.EmailAddress != null)
                                        {
                                            claimsValue["emailAddress"] = derived3.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            conditionValue["operator"] = derived.Operator.ToString();
                            
                            conditionValue["threshold"] = derived.Threshold;
                            
                            conditionValue["windowSize"] = XmlConvert.ToString(derived.WindowSize);
                            
                            if (derived.TimeAggregation != null)
                            {
                                conditionValue["timeAggregation"] = derived.TimeAggregation.Value.ToString();
                            }
                        }
                        if (parameters.Properties.Condition is LocationThresholdRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            LocationThresholdRuleCondition derived4 = ((LocationThresholdRuleCondition)parameters.Properties.Condition);
                            
                            if (derived4.DataSource != null)
                            {
                                JObject dataSourceValue2 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue2;
                                if (derived4.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue2["odata.type"] = derived4.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived5 = ((RuleMetricDataSource)derived4.DataSource);
                                    
                                    if (derived5.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived5.ResourceUri;
                                    }
                                    
                                    if (derived5.MetricNamespace != null)
                                    {
                                        dataSourceValue2["metricNamespace"] = derived5.MetricNamespace;
                                    }
                                    
                                    if (derived5.MetricName != null)
                                    {
                                        dataSourceValue2["metricName"] = derived5.MetricName;
                                    }
                                }
                                if (derived4.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue2["odata.type"] = derived4.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived6 = ((RuleManagementEventDataSource)derived4.DataSource);
                                    
                                    if (derived6.EventName != null)
                                    {
                                        dataSourceValue2["eventName"] = derived6.EventName;
                                    }
                                    
                                    if (derived6.EventSource != null)
                                    {
                                        dataSourceValue2["eventSource"] = derived6.EventSource;
                                    }
                                    
                                    if (derived6.Level != null)
                                    {
                                        dataSourceValue2["level"] = derived6.Level;
                                    }
                                    
                                    if (derived6.OperationName != null)
                                    {
                                        dataSourceValue2["operationName"] = derived6.OperationName;
                                    }
                                    
                                    if (derived6.ResourceGroupName != null)
                                    {
                                        dataSourceValue2["resourceGroupName"] = derived6.ResourceGroupName;
                                    }
                                    
                                    if (derived6.ResourceProviderName != null)
                                    {
                                        dataSourceValue2["resourceProviderName"] = derived6.ResourceProviderName;
                                    }
                                    
                                    if (derived6.ResourceUri != null)
                                    {
                                        dataSourceValue2["resourceUri"] = derived6.ResourceUri;
                                    }
                                    
                                    if (derived6.Status != null)
                                    {
                                        dataSourceValue2["status"] = derived6.Status;
                                    }
                                    
                                    if (derived6.SubStatus != null)
                                    {
                                        dataSourceValue2["subStatus"] = derived6.SubStatus;
                                    }
                                    
                                    if (derived6.Claims != null)
                                    {
                                        JObject claimsValue2 = new JObject();
                                        dataSourceValue2["claims"] = claimsValue2;
                                        
                                        if (derived6.Claims.EmailAddress != null)
                                        {
                                            claimsValue2["emailAddress"] = derived6.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            conditionValue["windowSize"] = XmlConvert.ToString(derived4.WindowSize);
                            
                            conditionValue["failedLocationCount"] = derived4.FailedLocationCount;
                        }
                        if (parameters.Properties.Condition is ManagementEventRuleCondition)
                        {
                            conditionValue["odata.type"] = parameters.Properties.Condition.GetType().FullName;
                            ManagementEventRuleCondition derived7 = ((ManagementEventRuleCondition)parameters.Properties.Condition);
                            
                            if (derived7.DataSource != null)
                            {
                                JObject dataSourceValue3 = new JObject();
                                conditionValue["dataSource"] = dataSourceValue3;
                                if (derived7.DataSource is RuleMetricDataSource)
                                {
                                    dataSourceValue3["odata.type"] = derived7.DataSource.GetType().FullName;
                                    RuleMetricDataSource derived8 = ((RuleMetricDataSource)derived7.DataSource);
                                    
                                    if (derived8.ResourceUri != null)
                                    {
                                        dataSourceValue3["resourceUri"] = derived8.ResourceUri;
                                    }
                                    
                                    if (derived8.MetricNamespace != null)
                                    {
                                        dataSourceValue3["metricNamespace"] = derived8.MetricNamespace;
                                    }
                                    
                                    if (derived8.MetricName != null)
                                    {
                                        dataSourceValue3["metricName"] = derived8.MetricName;
                                    }
                                }
                                if (derived7.DataSource is RuleManagementEventDataSource)
                                {
                                    dataSourceValue3["odata.type"] = derived7.DataSource.GetType().FullName;
                                    RuleManagementEventDataSource derived9 = ((RuleManagementEventDataSource)derived7.DataSource);
                                    
                                    if (derived9.EventName != null)
                                    {
                                        dataSourceValue3["eventName"] = derived9.EventName;
                                    }
                                    
                                    if (derived9.EventSource != null)
                                    {
                                        dataSourceValue3["eventSource"] = derived9.EventSource;
                                    }
                                    
                                    if (derived9.Level != null)
                                    {
                                        dataSourceValue3["level"] = derived9.Level;
                                    }
                                    
                                    if (derived9.OperationName != null)
                                    {
                                        dataSourceValue3["operationName"] = derived9.OperationName;
                                    }
                                    
                                    if (derived9.ResourceGroupName != null)
                                    {
                                        dataSourceValue3["resourceGroupName"] = derived9.ResourceGroupName;
                                    }
                                    
                                    if (derived9.ResourceProviderName != null)
                                    {
                                        dataSourceValue3["resourceProviderName"] = derived9.ResourceProviderName;
                                    }
                                    
                                    if (derived9.ResourceUri != null)
                                    {
                                        dataSourceValue3["resourceUri"] = derived9.ResourceUri;
                                    }
                                    
                                    if (derived9.Status != null)
                                    {
                                        dataSourceValue3["status"] = derived9.Status;
                                    }
                                    
                                    if (derived9.SubStatus != null)
                                    {
                                        dataSourceValue3["subStatus"] = derived9.SubStatus;
                                    }
                                    
                                    if (derived9.Claims != null)
                                    {
                                        JObject claimsValue3 = new JObject();
                                        dataSourceValue3["claims"] = claimsValue3;
                                        
                                        if (derived9.Claims.EmailAddress != null)
                                        {
                                            claimsValue3["emailAddress"] = derived9.Claims.EmailAddress;
                                        }
                                    }
                                }
                            }
                            
                            if (derived7.Aggregation != null)
                            {
                                JObject aggregationValue = new JObject();
                                conditionValue["aggregation"] = aggregationValue;
                                
                                aggregationValue["operator"] = derived7.Aggregation.Operator.ToString();
                                
                                aggregationValue["threshold"] = derived7.Aggregation.Threshold;
                                
                                aggregationValue["windowSize"] = XmlConvert.ToString(derived7.Aggregation.WindowSize);
                            }
                        }
                    }
                    
                    if (parameters.Properties.Actions != null)
                    {
                        if (parameters.Properties.Actions is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Actions).IsInitialized)
                        {
                            JArray actionsArray = new JArray();
                            foreach (RuleAction actionsItem in parameters.Properties.Actions)
                            {
                                JObject ruleActionValue = new JObject();
                                actionsArray.Add(ruleActionValue);
                                if (actionsItem is RuleEmailAction)
                                {
                                    ruleActionValue["odata.type"] = actionsItem.GetType().FullName;
                                    RuleEmailAction derived10 = ((RuleEmailAction)actionsItem);
                                    
                                    ruleActionValue["sendToServiceOwners"] = derived10.SendToServiceOwners;
                                    
                                    if (derived10.CustomEmails != null)
                                    {
                                        if (derived10.CustomEmails is ILazyCollection == false || ((ILazyCollection)derived10.CustomEmails).IsInitialized)
                                        {
                                            JArray customEmailsArray = new JArray();
                                            foreach (string customEmailsItem in derived10.CustomEmails)
                                            {
                                                customEmailsArray.Add(customEmailsItem);
                                            }
                                            ruleActionValue["customEmails"] = customEmailsArray;
                                        }
                                    }
                                }
                                if (actionsItem is RuleWebhookAction)
                                {
                                    ruleActionValue["odata.type"] = actionsItem.GetType().FullName;
                                    RuleWebhookAction derived11 = ((RuleWebhookAction)actionsItem);
                                    
                                    if (derived11.ServiceUri != null)
                                    {
                                        ruleActionValue["serviceUri"] = derived11.ServiceUri;
                                    }
                                    
                                    if (derived11.Properties != null)
                                    {
                                        if (derived11.Properties is ILazyCollection == false || ((ILazyCollection)derived11.Properties).IsInitialized)
                                        {
                                            JObject propertiesDictionary = new JObject();
                                            foreach (KeyValuePair<string, string> pair2 in derived11.Properties)
                                            {
                                                string propertiesKey = pair2.Key;
                                                string propertiesValue2 = pair2.Value;
                                                propertiesDictionary[propertiesKey] = propertiesValue2;
                                            }
                                            ruleActionValue["properties"] = propertiesDictionary;
                                        }
                                    }
                                }
                            }
                            propertiesValue["actions"] = actionsArray;
                        }
                    }
                    
                    propertiesValue["lastUpdatedTime"] = parameters.Properties.LastUpdatedTime;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AzureOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
