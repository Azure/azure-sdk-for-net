// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Insights;
using Microsoft.Azure.Management.Insights.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Insights
{
    /// <summary>
    /// Operations for managing autoscale.
    /// </summary>
    internal partial class AutoscaleOperations : IServiceOperations<InsightsManagementClient>, IAutoscaleOperations
    {
        /// <summary>
        /// Initializes a new instance of the AutoscaleOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AutoscaleOperations(InsightsManagementClient client)
        {
            this._client = client;
        }
        
        private InsightsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Insights.InsightsManagementClient.
        /// </summary>
        public InsightsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateOrUpdateSettingAsync(string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/autoscalesettings/";
            url = url + Uri.EscapeDataString(autoscaleSettingName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject autoscaleSettingCreateOrUpdateParametersValue = new JObject();
                requestDoc = autoscaleSettingCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    autoscaleSettingCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    if (parameters.Tags is ILazyCollection == false || ((ILazyCollection)parameters.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in parameters.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        autoscaleSettingCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                    }
                }
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    autoscaleSettingCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Profiles != null)
                    {
                        if (parameters.Properties.Profiles is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Profiles).IsInitialized)
                        {
                            JArray profilesArray = new JArray();
                            foreach (AutoscaleProfile profilesItem in parameters.Properties.Profiles)
                            {
                                JObject autoscaleProfileValue = new JObject();
                                profilesArray.Add(autoscaleProfileValue);
                                
                                if (profilesItem.Name != null)
                                {
                                    autoscaleProfileValue["name"] = profilesItem.Name;
                                }
                                
                                if (profilesItem.Capacity != null)
                                {
                                    JObject capacityValue = new JObject();
                                    autoscaleProfileValue["capacity"] = capacityValue;
                                    
                                    if (profilesItem.Capacity.Minimum != null)
                                    {
                                        capacityValue["minimum"] = profilesItem.Capacity.Minimum;
                                    }
                                    
                                    if (profilesItem.Capacity.Maximum != null)
                                    {
                                        capacityValue["maximum"] = profilesItem.Capacity.Maximum;
                                    }
                                    
                                    if (profilesItem.Capacity.Default != null)
                                    {
                                        capacityValue["default"] = profilesItem.Capacity.Default;
                                    }
                                }
                                
                                if (profilesItem.Rules != null)
                                {
                                    if (profilesItem.Rules is ILazyCollection == false || ((ILazyCollection)profilesItem.Rules).IsInitialized)
                                    {
                                        JArray rulesArray = new JArray();
                                        foreach (ScaleRule rulesItem in profilesItem.Rules)
                                        {
                                            JObject scaleRuleValue = new JObject();
                                            rulesArray.Add(scaleRuleValue);
                                            
                                            if (rulesItem.MetricTrigger != null)
                                            {
                                                JObject metricTriggerValue = new JObject();
                                                scaleRuleValue["metricTrigger"] = metricTriggerValue;
                                                
                                                if (rulesItem.MetricTrigger.MetricName != null)
                                                {
                                                    metricTriggerValue["metricName"] = rulesItem.MetricTrigger.MetricName;
                                                }
                                                
                                                if (rulesItem.MetricTrigger.MetricNamespace != null)
                                                {
                                                    metricTriggerValue["metricNamespace"] = rulesItem.MetricTrigger.MetricNamespace;
                                                }
                                                
                                                if (rulesItem.MetricTrigger.MetricResourceUri != null)
                                                {
                                                    metricTriggerValue["metricResourceUri"] = rulesItem.MetricTrigger.MetricResourceUri;
                                                }
                                                
                                                metricTriggerValue["timeGrain"] = XmlConvert.ToString(rulesItem.MetricTrigger.TimeGrain);
                                                
                                                metricTriggerValue["statistic"] = rulesItem.MetricTrigger.Statistic.ToString();
                                                
                                                metricTriggerValue["timeWindow"] = XmlConvert.ToString(rulesItem.MetricTrigger.TimeWindow);
                                                
                                                metricTriggerValue["timeAggregation"] = rulesItem.MetricTrigger.TimeAggregation.ToString();
                                                
                                                metricTriggerValue["operator"] = rulesItem.MetricTrigger.Operator.ToString();
                                                
                                                metricTriggerValue["threshold"] = rulesItem.MetricTrigger.Threshold;
                                            }
                                            
                                            if (rulesItem.ScaleAction != null)
                                            {
                                                JObject scaleActionValue = new JObject();
                                                scaleRuleValue["scaleAction"] = scaleActionValue;
                                                
                                                scaleActionValue["direction"] = rulesItem.ScaleAction.Direction.ToString();
                                                
                                                scaleActionValue["type"] = rulesItem.ScaleAction.Type.ToString();
                                                
                                                if (rulesItem.ScaleAction.Value != null)
                                                {
                                                    scaleActionValue["value"] = rulesItem.ScaleAction.Value;
                                                }
                                                
                                                scaleActionValue["cooldown"] = XmlConvert.ToString(rulesItem.ScaleAction.Cooldown);
                                            }
                                        }
                                        autoscaleProfileValue["rules"] = rulesArray;
                                    }
                                }
                                
                                if (profilesItem.FixedDate != null)
                                {
                                    JObject fixedDateValue = new JObject();
                                    autoscaleProfileValue["fixedDate"] = fixedDateValue;
                                    
                                    if (profilesItem.FixedDate.TimeZone != null)
                                    {
                                        fixedDateValue["timeZone"] = profilesItem.FixedDate.TimeZone;
                                    }
                                    
                                    fixedDateValue["start"] = profilesItem.FixedDate.Start;
                                    
                                    fixedDateValue["end"] = profilesItem.FixedDate.End;
                                }
                                
                                if (profilesItem.Recurrence != null)
                                {
                                    JObject recurrenceValue = new JObject();
                                    autoscaleProfileValue["recurrence"] = recurrenceValue;
                                    
                                    recurrenceValue["frequency"] = profilesItem.Recurrence.Frequency.ToString();
                                    
                                    if (profilesItem.Recurrence.Schedule != null)
                                    {
                                        JObject scheduleValue = new JObject();
                                        recurrenceValue["schedule"] = scheduleValue;
                                        
                                        if (profilesItem.Recurrence.Schedule.TimeZone != null)
                                        {
                                            scheduleValue["timeZone"] = profilesItem.Recurrence.Schedule.TimeZone;
                                        }
                                        
                                        if (profilesItem.Recurrence.Schedule.Days != null)
                                        {
                                            if (profilesItem.Recurrence.Schedule.Days is ILazyCollection == false || ((ILazyCollection)profilesItem.Recurrence.Schedule.Days).IsInitialized)
                                            {
                                                JArray daysArray = new JArray();
                                                foreach (string daysItem in profilesItem.Recurrence.Schedule.Days)
                                                {
                                                    daysArray.Add(daysItem);
                                                }
                                                scheduleValue["days"] = daysArray;
                                            }
                                        }
                                        
                                        if (profilesItem.Recurrence.Schedule.Hours != null)
                                        {
                                            if (profilesItem.Recurrence.Schedule.Hours is ILazyCollection == false || ((ILazyCollection)profilesItem.Recurrence.Schedule.Hours).IsInitialized)
                                            {
                                                JArray hoursArray = new JArray();
                                                foreach (int hoursItem in profilesItem.Recurrence.Schedule.Hours)
                                                {
                                                    hoursArray.Add(hoursItem);
                                                }
                                                scheduleValue["hours"] = hoursArray;
                                            }
                                        }
                                        
                                        if (profilesItem.Recurrence.Schedule.Minutes != null)
                                        {
                                            if (profilesItem.Recurrence.Schedule.Minutes is ILazyCollection == false || ((ILazyCollection)profilesItem.Recurrence.Schedule.Minutes).IsInitialized)
                                            {
                                                JArray minutesArray = new JArray();
                                                foreach (int minutesItem in profilesItem.Recurrence.Schedule.Minutes)
                                                {
                                                    minutesArray.Add(minutesItem);
                                                }
                                                scheduleValue["minutes"] = minutesArray;
                                            }
                                        }
                                    }
                                }
                            }
                            propertiesValue["profiles"] = profilesArray;
                        }
                    }
                    
                    if (parameters.Properties.Notifications != null)
                    {
                        if (parameters.Properties.Notifications is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Notifications).IsInitialized)
                        {
                            JArray notificationsArray = new JArray();
                            foreach (AutoscaleNotification notificationsItem in parameters.Properties.Notifications)
                            {
                                JObject notificationValue = new JObject();
                                notificationsArray.Add(notificationValue);
                                
                                if (notificationsItem.Operation != null)
                                {
                                    notificationValue["operation"] = notificationsItem.Operation;
                                }
                                
                                if (notificationsItem.Email != null)
                                {
                                    JObject emailValue = new JObject();
                                    notificationValue["email"] = emailValue;
                                    
                                    emailValue["sendToSubscriptionAdministrator"] = notificationsItem.Email.SendToSubscriptionAdministrator;
                                    
                                    emailValue["sendToSubscriptionCoAdministrators"] = notificationsItem.Email.SendToSubscriptionCoAdministrators;
                                    
                                    if (notificationsItem.Email.CustomEmails != null)
                                    {
                                        if (notificationsItem.Email.CustomEmails is ILazyCollection == false || ((ILazyCollection)notificationsItem.Email.CustomEmails).IsInitialized)
                                        {
                                            JArray customEmailsArray = new JArray();
                                            foreach (string customEmailsItem in notificationsItem.Email.CustomEmails)
                                            {
                                                customEmailsArray.Add(customEmailsItem);
                                            }
                                            emailValue["customEmails"] = customEmailsArray;
                                        }
                                    }
                                }
                                
                                if (notificationsItem.Webhooks != null)
                                {
                                    if (notificationsItem.Webhooks is ILazyCollection == false || ((ILazyCollection)notificationsItem.Webhooks).IsInitialized)
                                    {
                                        JArray webhooksArray = new JArray();
                                        foreach (WebhookNotification webhooksItem in notificationsItem.Webhooks)
                                        {
                                            JObject webhookValue = new JObject();
                                            webhooksArray.Add(webhookValue);
                                            
                                            if (webhooksItem.ServiceUri != null)
                                            {
                                                webhookValue["serviceUri"] = webhooksItem.ServiceUri;
                                            }
                                            
                                            if (webhooksItem.Properties != null)
                                            {
                                                if (webhooksItem.Properties is ILazyCollection == false || ((ILazyCollection)webhooksItem.Properties).IsInitialized)
                                                {
                                                    JObject propertiesDictionary = new JObject();
                                                    foreach (KeyValuePair<string, string> pair2 in webhooksItem.Properties)
                                                    {
                                                        string propertiesKey = pair2.Key;
                                                        string propertiesValue2 = pair2.Value;
                                                        propertiesDictionary[propertiesKey] = propertiesValue2;
                                                    }
                                                    webhookValue["properties"] = propertiesDictionary;
                                                }
                                            }
                                        }
                                        notificationValue["webhooks"] = webhooksArray;
                                    }
                                }
                            }
                            propertiesValue["notifications"] = notificationsArray;
                        }
                    }
                    
                    propertiesValue["enabled"] = parameters.Properties.Enabled;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.TargetResourceUri != null)
                    {
                        propertiesValue["targetResourceUri"] = parameters.Properties.TargetResourceUri;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AzureOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteSettingAsync(string resourceGroupName, string autoscaleSettingName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                TracingAdapter.Enter(invocationId, this, "DeleteSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/autoscalesettings/";
            url = url + Uri.EscapeDataString(autoscaleSettingName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AzureOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AutoscaleSettingGetResponse> GetSettingAsync(string resourceGroupName, string autoscaleSettingName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                TracingAdapter.Enter(invocationId, this, "GetSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/autoscalesettings/";
            url = url + Uri.EscapeDataString(autoscaleSettingName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AutoscaleSettingGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AutoscaleSettingGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                result.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                result.Name = nameInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                result.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    result.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                AutoscaleSetting propertiesInstance = new AutoscaleSetting();
                                result.Properties = propertiesInstance;
                                
                                JToken profilesArray = propertiesValue["profiles"];
                                if (profilesArray != null && profilesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken profilesValue in ((JArray)profilesArray))
                                    {
                                        AutoscaleProfile autoscaleProfileInstance = new AutoscaleProfile();
                                        propertiesInstance.Profiles.Add(autoscaleProfileInstance);
                                        
                                        JToken nameValue2 = profilesValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            autoscaleProfileInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken capacityValue = profilesValue["capacity"];
                                        if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                        {
                                            ScaleCapacity capacityInstance = new ScaleCapacity();
                                            autoscaleProfileInstance.Capacity = capacityInstance;
                                            
                                            JToken minimumValue = capacityValue["minimum"];
                                            if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                            {
                                                string minimumInstance = ((string)minimumValue);
                                                capacityInstance.Minimum = minimumInstance;
                                            }
                                            
                                            JToken maximumValue = capacityValue["maximum"];
                                            if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                            {
                                                string maximumInstance = ((string)maximumValue);
                                                capacityInstance.Maximum = maximumInstance;
                                            }
                                            
                                            JToken defaultValue = capacityValue["default"];
                                            if (defaultValue != null && defaultValue.Type != JTokenType.Null)
                                            {
                                                string defaultInstance = ((string)defaultValue);
                                                capacityInstance.Default = defaultInstance;
                                            }
                                        }
                                        
                                        JToken rulesArray = profilesValue["rules"];
                                        if (rulesArray != null && rulesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken rulesValue in ((JArray)rulesArray))
                                            {
                                                ScaleRule scaleRuleInstance = new ScaleRule();
                                                autoscaleProfileInstance.Rules.Add(scaleRuleInstance);
                                                
                                                JToken metricTriggerValue = rulesValue["metricTrigger"];
                                                if (metricTriggerValue != null && metricTriggerValue.Type != JTokenType.Null)
                                                {
                                                    MetricTrigger metricTriggerInstance = new MetricTrigger();
                                                    scaleRuleInstance.MetricTrigger = metricTriggerInstance;
                                                    
                                                    JToken metricNameValue = metricTriggerValue["metricName"];
                                                    if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                    {
                                                        string metricNameInstance = ((string)metricNameValue);
                                                        metricTriggerInstance.MetricName = metricNameInstance;
                                                    }
                                                    
                                                    JToken metricNamespaceValue = metricTriggerValue["metricNamespace"];
                                                    if (metricNamespaceValue != null && metricNamespaceValue.Type != JTokenType.Null)
                                                    {
                                                        string metricNamespaceInstance = ((string)metricNamespaceValue);
                                                        metricTriggerInstance.MetricNamespace = metricNamespaceInstance;
                                                    }
                                                    
                                                    JToken metricResourceUriValue = metricTriggerValue["metricResourceUri"];
                                                    if (metricResourceUriValue != null && metricResourceUriValue.Type != JTokenType.Null)
                                                    {
                                                        string metricResourceUriInstance = ((string)metricResourceUriValue);
                                                        metricTriggerInstance.MetricResourceUri = metricResourceUriInstance;
                                                    }
                                                    
                                                    JToken timeGrainValue = metricTriggerValue["timeGrain"];
                                                    if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                        metricTriggerInstance.TimeGrain = timeGrainInstance;
                                                    }
                                                    
                                                    JToken statisticValue = metricTriggerValue["statistic"];
                                                    if (statisticValue != null && statisticValue.Type != JTokenType.Null)
                                                    {
                                                        MetricStatisticType statisticInstance = ((MetricStatisticType)Enum.Parse(typeof(MetricStatisticType), ((string)statisticValue), true));
                                                        metricTriggerInstance.Statistic = statisticInstance;
                                                    }
                                                    
                                                    JToken timeWindowValue = metricTriggerValue["timeWindow"];
                                                    if (timeWindowValue != null && timeWindowValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan timeWindowInstance = XmlConvert.ToTimeSpan(((string)timeWindowValue));
                                                        metricTriggerInstance.TimeWindow = timeWindowInstance;
                                                    }
                                                    
                                                    JToken timeAggregationValue = metricTriggerValue["timeAggregation"];
                                                    if (timeAggregationValue != null && timeAggregationValue.Type != JTokenType.Null)
                                                    {
                                                        TimeAggregationType timeAggregationInstance = ((TimeAggregationType)Enum.Parse(typeof(TimeAggregationType), ((string)timeAggregationValue), true));
                                                        metricTriggerInstance.TimeAggregation = timeAggregationInstance;
                                                    }
                                                    
                                                    JToken operatorValue = metricTriggerValue["operator"];
                                                    if (operatorValue != null && operatorValue.Type != JTokenType.Null)
                                                    {
                                                        ComparisonOperationType operatorInstance = ((ComparisonOperationType)Enum.Parse(typeof(ComparisonOperationType), ((string)operatorValue), true));
                                                        metricTriggerInstance.Operator = operatorInstance;
                                                    }
                                                    
                                                    JToken thresholdValue = metricTriggerValue["threshold"];
                                                    if (thresholdValue != null && thresholdValue.Type != JTokenType.Null)
                                                    {
                                                        double thresholdInstance = ((double)thresholdValue);
                                                        metricTriggerInstance.Threshold = thresholdInstance;
                                                    }
                                                }
                                                
                                                JToken scaleActionValue = rulesValue["scaleAction"];
                                                if (scaleActionValue != null && scaleActionValue.Type != JTokenType.Null)
                                                {
                                                    ScaleAction scaleActionInstance = new ScaleAction();
                                                    scaleRuleInstance.ScaleAction = scaleActionInstance;
                                                    
                                                    JToken directionValue = scaleActionValue["direction"];
                                                    if (directionValue != null && directionValue.Type != JTokenType.Null)
                                                    {
                                                        ScaleDirection directionInstance = ((ScaleDirection)Enum.Parse(typeof(ScaleDirection), ((string)directionValue), true));
                                                        scaleActionInstance.Direction = directionInstance;
                                                    }
                                                    
                                                    JToken typeValue = scaleActionValue["type"];
                                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                    {
                                                        ScaleType typeInstance = ((ScaleType)Enum.Parse(typeof(ScaleType), ((string)typeValue), true));
                                                        scaleActionInstance.Type = typeInstance;
                                                    }
                                                    
                                                    JToken valueValue = scaleActionValue["value"];
                                                    if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                    {
                                                        string valueInstance = ((string)valueValue);
                                                        scaleActionInstance.Value = valueInstance;
                                                    }
                                                    
                                                    JToken cooldownValue = scaleActionValue["cooldown"];
                                                    if (cooldownValue != null && cooldownValue.Type != JTokenType.Null)
                                                    {
                                                        TimeSpan cooldownInstance = XmlConvert.ToTimeSpan(((string)cooldownValue));
                                                        scaleActionInstance.Cooldown = cooldownInstance;
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken fixedDateValue = profilesValue["fixedDate"];
                                        if (fixedDateValue != null && fixedDateValue.Type != JTokenType.Null)
                                        {
                                            TimeWindow fixedDateInstance = new TimeWindow();
                                            autoscaleProfileInstance.FixedDate = fixedDateInstance;
                                            
                                            JToken timeZoneValue = fixedDateValue["timeZone"];
                                            if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                            {
                                                string timeZoneInstance = ((string)timeZoneValue);
                                                fixedDateInstance.TimeZone = timeZoneInstance;
                                            }
                                            
                                            JToken startValue = fixedDateValue["start"];
                                            if (startValue != null && startValue.Type != JTokenType.Null)
                                            {
                                                DateTime startInstance = ((DateTime)startValue);
                                                fixedDateInstance.Start = startInstance;
                                            }
                                            
                                            JToken endValue = fixedDateValue["end"];
                                            if (endValue != null && endValue.Type != JTokenType.Null)
                                            {
                                                DateTime endInstance = ((DateTime)endValue);
                                                fixedDateInstance.End = endInstance;
                                            }
                                        }
                                        
                                        JToken recurrenceValue = profilesValue["recurrence"];
                                        if (recurrenceValue != null && recurrenceValue.Type != JTokenType.Null)
                                        {
                                            Recurrence recurrenceInstance = new Recurrence();
                                            autoscaleProfileInstance.Recurrence = recurrenceInstance;
                                            
                                            JToken frequencyValue = recurrenceValue["frequency"];
                                            if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                            {
                                                RecurrenceFrequency frequencyInstance = ((RecurrenceFrequency)Enum.Parse(typeof(RecurrenceFrequency), ((string)frequencyValue), true));
                                                recurrenceInstance.Frequency = frequencyInstance;
                                            }
                                            
                                            JToken scheduleValue = recurrenceValue["schedule"];
                                            if (scheduleValue != null && scheduleValue.Type != JTokenType.Null)
                                            {
                                                RecurrentSchedule scheduleInstance = new RecurrentSchedule();
                                                recurrenceInstance.Schedule = scheduleInstance;
                                                
                                                JToken timeZoneValue2 = scheduleValue["timeZone"];
                                                if (timeZoneValue2 != null && timeZoneValue2.Type != JTokenType.Null)
                                                {
                                                    string timeZoneInstance2 = ((string)timeZoneValue2);
                                                    scheduleInstance.TimeZone = timeZoneInstance2;
                                                }
                                                
                                                JToken daysArray = scheduleValue["days"];
                                                if (daysArray != null && daysArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken daysValue in ((JArray)daysArray))
                                                    {
                                                        scheduleInstance.Days.Add(((string)daysValue));
                                                    }
                                                }
                                                
                                                JToken hoursArray = scheduleValue["hours"];
                                                if (hoursArray != null && hoursArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken hoursValue in ((JArray)hoursArray))
                                                    {
                                                        scheduleInstance.Hours.Add(((int)hoursValue));
                                                    }
                                                }
                                                
                                                JToken minutesArray = scheduleValue["minutes"];
                                                if (minutesArray != null && minutesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken minutesValue in ((JArray)minutesArray))
                                                    {
                                                        scheduleInstance.Minutes.Add(((int)minutesValue));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken notificationsArray = propertiesValue["notifications"];
                                if (notificationsArray != null && notificationsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken notificationsValue in ((JArray)notificationsArray))
                                    {
                                        AutoscaleNotification notificationInstance = new AutoscaleNotification();
                                        propertiesInstance.Notifications.Add(notificationInstance);
                                        
                                        JToken operationValue = notificationsValue["operation"];
                                        if (operationValue != null && operationValue.Type != JTokenType.Null)
                                        {
                                            string operationInstance = ((string)operationValue);
                                            notificationInstance.Operation = operationInstance;
                                        }
                                        
                                        JToken emailValue = notificationsValue["email"];
                                        if (emailValue != null && emailValue.Type != JTokenType.Null)
                                        {
                                            EmailNotification emailInstance = new EmailNotification();
                                            notificationInstance.Email = emailInstance;
                                            
                                            JToken sendToSubscriptionAdministratorValue = emailValue["sendToSubscriptionAdministrator"];
                                            if (sendToSubscriptionAdministratorValue != null && sendToSubscriptionAdministratorValue.Type != JTokenType.Null)
                                            {
                                                bool sendToSubscriptionAdministratorInstance = ((bool)sendToSubscriptionAdministratorValue);
                                                emailInstance.SendToSubscriptionAdministrator = sendToSubscriptionAdministratorInstance;
                                            }
                                            
                                            JToken sendToSubscriptionCoAdministratorsValue = emailValue["sendToSubscriptionCoAdministrators"];
                                            if (sendToSubscriptionCoAdministratorsValue != null && sendToSubscriptionCoAdministratorsValue.Type != JTokenType.Null)
                                            {
                                                bool sendToSubscriptionCoAdministratorsInstance = ((bool)sendToSubscriptionCoAdministratorsValue);
                                                emailInstance.SendToSubscriptionCoAdministrators = sendToSubscriptionCoAdministratorsInstance;
                                            }
                                            
                                            JToken customEmailsArray = emailValue["customEmails"];
                                            if (customEmailsArray != null && customEmailsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken customEmailsValue in ((JArray)customEmailsArray))
                                                {
                                                    emailInstance.CustomEmails.Add(((string)customEmailsValue));
                                                }
                                            }
                                        }
                                        
                                        JToken webhooksArray = notificationsValue["webhooks"];
                                        if (webhooksArray != null && webhooksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken webhooksValue in ((JArray)webhooksArray))
                                            {
                                                WebhookNotification webhookInstance = new WebhookNotification();
                                                notificationInstance.Webhooks.Add(webhookInstance);
                                                
                                                JToken serviceUriValue = webhooksValue["serviceUri"];
                                                if (serviceUriValue != null && serviceUriValue.Type != JTokenType.Null)
                                                {
                                                    string serviceUriInstance = ((string)serviceUriValue);
                                                    webhookInstance.ServiceUri = serviceUriInstance;
                                                }
                                                
                                                JToken propertiesSequenceElement = ((JToken)webhooksValue["properties"]);
                                                if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property2 in propertiesSequenceElement)
                                                    {
                                                        string propertiesKey = ((string)property2.Name);
                                                        string propertiesValue2 = ((string)property2.Value);
                                                        webhookInstance.Properties.Add(propertiesKey, propertiesValue2);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken enabledValue = propertiesValue["enabled"];
                                if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                {
                                    bool enabledInstance = ((bool)enabledValue);
                                    propertiesInstance.Enabled = enabledInstance;
                                }
                                
                                JToken nameValue3 = propertiesValue["name"];
                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                {
                                    string nameInstance3 = ((string)nameValue3);
                                    propertiesInstance.Name = nameInstance3;
                                }
                                
                                JToken targetResourceUriValue = propertiesValue["targetResourceUri"];
                                if (targetResourceUriValue != null && targetResourceUriValue.Type != JTokenType.Null)
                                {
                                    string targetResourceUriInstance = ((string)targetResourceUriValue);
                                    propertiesInstance.TargetResourceUri = targetResourceUriInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='targetResourceUri'>
        /// Optional. The resource identifier of the target of the autoscale
        /// setting.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The List Autoscale settings operation response.
        /// </returns>
        public async Task<AutoscaleSettingListResponse> ListSettingsAsync(string resourceGroupName, string targetResourceUri, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("targetResourceUri", targetResourceUri);
                TracingAdapter.Enter(invocationId, this, "ListSettingsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/autoscalesettings";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            List<string> odataFilter = new List<string>();
            if (targetResourceUri != null)
            {
                odataFilter.Add("targetResourceUri eq " + Uri.EscapeDataString(targetResourceUri));
            }
            if (odataFilter.Count > 0)
            {
                queryParameters.Add("$filter=" + string.Join(null, odataFilter));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AutoscaleSettingListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AutoscaleSettingListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AutoscaleSettingResourceCollection autoscaleSettingResourceCollectionInstance = new AutoscaleSettingResourceCollection();
                            result.AutoscaleSettingResourceCollection = autoscaleSettingResourceCollectionInstance;
                            
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    AutoscaleSettingResource autoscaleSettingResourceInstance = new AutoscaleSettingResource();
                                    autoscaleSettingResourceCollectionInstance.Value.Add(autoscaleSettingResourceInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        autoscaleSettingResourceInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        autoscaleSettingResourceInstance.Name = nameInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        autoscaleSettingResourceInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            autoscaleSettingResourceInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        AutoscaleSetting propertiesInstance = new AutoscaleSetting();
                                        autoscaleSettingResourceInstance.Properties = propertiesInstance;
                                        
                                        JToken profilesArray = propertiesValue["profiles"];
                                        if (profilesArray != null && profilesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken profilesValue in ((JArray)profilesArray))
                                            {
                                                AutoscaleProfile autoscaleProfileInstance = new AutoscaleProfile();
                                                propertiesInstance.Profiles.Add(autoscaleProfileInstance);
                                                
                                                JToken nameValue2 = profilesValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    autoscaleProfileInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken capacityValue = profilesValue["capacity"];
                                                if (capacityValue != null && capacityValue.Type != JTokenType.Null)
                                                {
                                                    ScaleCapacity capacityInstance = new ScaleCapacity();
                                                    autoscaleProfileInstance.Capacity = capacityInstance;
                                                    
                                                    JToken minimumValue = capacityValue["minimum"];
                                                    if (minimumValue != null && minimumValue.Type != JTokenType.Null)
                                                    {
                                                        string minimumInstance = ((string)minimumValue);
                                                        capacityInstance.Minimum = minimumInstance;
                                                    }
                                                    
                                                    JToken maximumValue = capacityValue["maximum"];
                                                    if (maximumValue != null && maximumValue.Type != JTokenType.Null)
                                                    {
                                                        string maximumInstance = ((string)maximumValue);
                                                        capacityInstance.Maximum = maximumInstance;
                                                    }
                                                    
                                                    JToken defaultValue = capacityValue["default"];
                                                    if (defaultValue != null && defaultValue.Type != JTokenType.Null)
                                                    {
                                                        string defaultInstance = ((string)defaultValue);
                                                        capacityInstance.Default = defaultInstance;
                                                    }
                                                }
                                                
                                                JToken rulesArray = profilesValue["rules"];
                                                if (rulesArray != null && rulesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken rulesValue in ((JArray)rulesArray))
                                                    {
                                                        ScaleRule scaleRuleInstance = new ScaleRule();
                                                        autoscaleProfileInstance.Rules.Add(scaleRuleInstance);
                                                        
                                                        JToken metricTriggerValue = rulesValue["metricTrigger"];
                                                        if (metricTriggerValue != null && metricTriggerValue.Type != JTokenType.Null)
                                                        {
                                                            MetricTrigger metricTriggerInstance = new MetricTrigger();
                                                            scaleRuleInstance.MetricTrigger = metricTriggerInstance;
                                                            
                                                            JToken metricNameValue = metricTriggerValue["metricName"];
                                                            if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                            {
                                                                string metricNameInstance = ((string)metricNameValue);
                                                                metricTriggerInstance.MetricName = metricNameInstance;
                                                            }
                                                            
                                                            JToken metricNamespaceValue = metricTriggerValue["metricNamespace"];
                                                            if (metricNamespaceValue != null && metricNamespaceValue.Type != JTokenType.Null)
                                                            {
                                                                string metricNamespaceInstance = ((string)metricNamespaceValue);
                                                                metricTriggerInstance.MetricNamespace = metricNamespaceInstance;
                                                            }
                                                            
                                                            JToken metricResourceUriValue = metricTriggerValue["metricResourceUri"];
                                                            if (metricResourceUriValue != null && metricResourceUriValue.Type != JTokenType.Null)
                                                            {
                                                                string metricResourceUriInstance = ((string)metricResourceUriValue);
                                                                metricTriggerInstance.MetricResourceUri = metricResourceUriInstance;
                                                            }
                                                            
                                                            JToken timeGrainValue = metricTriggerValue["timeGrain"];
                                                            if (timeGrainValue != null && timeGrainValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan timeGrainInstance = XmlConvert.ToTimeSpan(((string)timeGrainValue));
                                                                metricTriggerInstance.TimeGrain = timeGrainInstance;
                                                            }
                                                            
                                                            JToken statisticValue = metricTriggerValue["statistic"];
                                                            if (statisticValue != null && statisticValue.Type != JTokenType.Null)
                                                            {
                                                                MetricStatisticType statisticInstance = ((MetricStatisticType)Enum.Parse(typeof(MetricStatisticType), ((string)statisticValue), true));
                                                                metricTriggerInstance.Statistic = statisticInstance;
                                                            }
                                                            
                                                            JToken timeWindowValue = metricTriggerValue["timeWindow"];
                                                            if (timeWindowValue != null && timeWindowValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan timeWindowInstance = XmlConvert.ToTimeSpan(((string)timeWindowValue));
                                                                metricTriggerInstance.TimeWindow = timeWindowInstance;
                                                            }
                                                            
                                                            JToken timeAggregationValue = metricTriggerValue["timeAggregation"];
                                                            if (timeAggregationValue != null && timeAggregationValue.Type != JTokenType.Null)
                                                            {
                                                                TimeAggregationType timeAggregationInstance = ((TimeAggregationType)Enum.Parse(typeof(TimeAggregationType), ((string)timeAggregationValue), true));
                                                                metricTriggerInstance.TimeAggregation = timeAggregationInstance;
                                                            }
                                                            
                                                            JToken operatorValue = metricTriggerValue["operator"];
                                                            if (operatorValue != null && operatorValue.Type != JTokenType.Null)
                                                            {
                                                                ComparisonOperationType operatorInstance = ((ComparisonOperationType)Enum.Parse(typeof(ComparisonOperationType), ((string)operatorValue), true));
                                                                metricTriggerInstance.Operator = operatorInstance;
                                                            }
                                                            
                                                            JToken thresholdValue = metricTriggerValue["threshold"];
                                                            if (thresholdValue != null && thresholdValue.Type != JTokenType.Null)
                                                            {
                                                                double thresholdInstance = ((double)thresholdValue);
                                                                metricTriggerInstance.Threshold = thresholdInstance;
                                                            }
                                                        }
                                                        
                                                        JToken scaleActionValue = rulesValue["scaleAction"];
                                                        if (scaleActionValue != null && scaleActionValue.Type != JTokenType.Null)
                                                        {
                                                            ScaleAction scaleActionInstance = new ScaleAction();
                                                            scaleRuleInstance.ScaleAction = scaleActionInstance;
                                                            
                                                            JToken directionValue = scaleActionValue["direction"];
                                                            if (directionValue != null && directionValue.Type != JTokenType.Null)
                                                            {
                                                                ScaleDirection directionInstance = ((ScaleDirection)Enum.Parse(typeof(ScaleDirection), ((string)directionValue), true));
                                                                scaleActionInstance.Direction = directionInstance;
                                                            }
                                                            
                                                            JToken typeValue = scaleActionValue["type"];
                                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                            {
                                                                ScaleType typeInstance = ((ScaleType)Enum.Parse(typeof(ScaleType), ((string)typeValue), true));
                                                                scaleActionInstance.Type = typeInstance;
                                                            }
                                                            
                                                            JToken valueValue2 = scaleActionValue["value"];
                                                            if (valueValue2 != null && valueValue2.Type != JTokenType.Null)
                                                            {
                                                                string valueInstance = ((string)valueValue2);
                                                                scaleActionInstance.Value = valueInstance;
                                                            }
                                                            
                                                            JToken cooldownValue = scaleActionValue["cooldown"];
                                                            if (cooldownValue != null && cooldownValue.Type != JTokenType.Null)
                                                            {
                                                                TimeSpan cooldownInstance = XmlConvert.ToTimeSpan(((string)cooldownValue));
                                                                scaleActionInstance.Cooldown = cooldownInstance;
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken fixedDateValue = profilesValue["fixedDate"];
                                                if (fixedDateValue != null && fixedDateValue.Type != JTokenType.Null)
                                                {
                                                    TimeWindow fixedDateInstance = new TimeWindow();
                                                    autoscaleProfileInstance.FixedDate = fixedDateInstance;
                                                    
                                                    JToken timeZoneValue = fixedDateValue["timeZone"];
                                                    if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                                    {
                                                        string timeZoneInstance = ((string)timeZoneValue);
                                                        fixedDateInstance.TimeZone = timeZoneInstance;
                                                    }
                                                    
                                                    JToken startValue = fixedDateValue["start"];
                                                    if (startValue != null && startValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime startInstance = ((DateTime)startValue);
                                                        fixedDateInstance.Start = startInstance;
                                                    }
                                                    
                                                    JToken endValue = fixedDateValue["end"];
                                                    if (endValue != null && endValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime endInstance = ((DateTime)endValue);
                                                        fixedDateInstance.End = endInstance;
                                                    }
                                                }
                                                
                                                JToken recurrenceValue = profilesValue["recurrence"];
                                                if (recurrenceValue != null && recurrenceValue.Type != JTokenType.Null)
                                                {
                                                    Recurrence recurrenceInstance = new Recurrence();
                                                    autoscaleProfileInstance.Recurrence = recurrenceInstance;
                                                    
                                                    JToken frequencyValue = recurrenceValue["frequency"];
                                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                                    {
                                                        RecurrenceFrequency frequencyInstance = ((RecurrenceFrequency)Enum.Parse(typeof(RecurrenceFrequency), ((string)frequencyValue), true));
                                                        recurrenceInstance.Frequency = frequencyInstance;
                                                    }
                                                    
                                                    JToken scheduleValue = recurrenceValue["schedule"];
                                                    if (scheduleValue != null && scheduleValue.Type != JTokenType.Null)
                                                    {
                                                        RecurrentSchedule scheduleInstance = new RecurrentSchedule();
                                                        recurrenceInstance.Schedule = scheduleInstance;
                                                        
                                                        JToken timeZoneValue2 = scheduleValue["timeZone"];
                                                        if (timeZoneValue2 != null && timeZoneValue2.Type != JTokenType.Null)
                                                        {
                                                            string timeZoneInstance2 = ((string)timeZoneValue2);
                                                            scheduleInstance.TimeZone = timeZoneInstance2;
                                                        }
                                                        
                                                        JToken daysArray = scheduleValue["days"];
                                                        if (daysArray != null && daysArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken daysValue in ((JArray)daysArray))
                                                            {
                                                                scheduleInstance.Days.Add(((string)daysValue));
                                                            }
                                                        }
                                                        
                                                        JToken hoursArray = scheduleValue["hours"];
                                                        if (hoursArray != null && hoursArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken hoursValue in ((JArray)hoursArray))
                                                            {
                                                                scheduleInstance.Hours.Add(((int)hoursValue));
                                                            }
                                                        }
                                                        
                                                        JToken minutesArray = scheduleValue["minutes"];
                                                        if (minutesArray != null && minutesArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken minutesValue in ((JArray)minutesArray))
                                                            {
                                                                scheduleInstance.Minutes.Add(((int)minutesValue));
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken notificationsArray = propertiesValue["notifications"];
                                        if (notificationsArray != null && notificationsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken notificationsValue in ((JArray)notificationsArray))
                                            {
                                                AutoscaleNotification notificationInstance = new AutoscaleNotification();
                                                propertiesInstance.Notifications.Add(notificationInstance);
                                                
                                                JToken operationValue = notificationsValue["operation"];
                                                if (operationValue != null && operationValue.Type != JTokenType.Null)
                                                {
                                                    string operationInstance = ((string)operationValue);
                                                    notificationInstance.Operation = operationInstance;
                                                }
                                                
                                                JToken emailValue = notificationsValue["email"];
                                                if (emailValue != null && emailValue.Type != JTokenType.Null)
                                                {
                                                    EmailNotification emailInstance = new EmailNotification();
                                                    notificationInstance.Email = emailInstance;
                                                    
                                                    JToken sendToSubscriptionAdministratorValue = emailValue["sendToSubscriptionAdministrator"];
                                                    if (sendToSubscriptionAdministratorValue != null && sendToSubscriptionAdministratorValue.Type != JTokenType.Null)
                                                    {
                                                        bool sendToSubscriptionAdministratorInstance = ((bool)sendToSubscriptionAdministratorValue);
                                                        emailInstance.SendToSubscriptionAdministrator = sendToSubscriptionAdministratorInstance;
                                                    }
                                                    
                                                    JToken sendToSubscriptionCoAdministratorsValue = emailValue["sendToSubscriptionCoAdministrators"];
                                                    if (sendToSubscriptionCoAdministratorsValue != null && sendToSubscriptionCoAdministratorsValue.Type != JTokenType.Null)
                                                    {
                                                        bool sendToSubscriptionCoAdministratorsInstance = ((bool)sendToSubscriptionCoAdministratorsValue);
                                                        emailInstance.SendToSubscriptionCoAdministrators = sendToSubscriptionCoAdministratorsInstance;
                                                    }
                                                    
                                                    JToken customEmailsArray = emailValue["customEmails"];
                                                    if (customEmailsArray != null && customEmailsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken customEmailsValue in ((JArray)customEmailsArray))
                                                        {
                                                            emailInstance.CustomEmails.Add(((string)customEmailsValue));
                                                        }
                                                    }
                                                }
                                                
                                                JToken webhooksArray = notificationsValue["webhooks"];
                                                if (webhooksArray != null && webhooksArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken webhooksValue in ((JArray)webhooksArray))
                                                    {
                                                        WebhookNotification webhookInstance = new WebhookNotification();
                                                        notificationInstance.Webhooks.Add(webhookInstance);
                                                        
                                                        JToken serviceUriValue = webhooksValue["serviceUri"];
                                                        if (serviceUriValue != null && serviceUriValue.Type != JTokenType.Null)
                                                        {
                                                            string serviceUriInstance = ((string)serviceUriValue);
                                                            webhookInstance.ServiceUri = serviceUriInstance;
                                                        }
                                                        
                                                        JToken propertiesSequenceElement = ((JToken)webhooksValue["properties"]);
                                                        if (propertiesSequenceElement != null && propertiesSequenceElement.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property2 in propertiesSequenceElement)
                                                            {
                                                                string propertiesKey = ((string)property2.Name);
                                                                string propertiesValue2 = ((string)property2.Value);
                                                                webhookInstance.Properties.Add(propertiesKey, propertiesValue2);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken enabledValue = propertiesValue["enabled"];
                                        if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                        {
                                            bool enabledInstance = ((bool)enabledValue);
                                            propertiesInstance.Enabled = enabledInstance;
                                        }
                                        
                                        JToken nameValue3 = propertiesValue["name"];
                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                        {
                                            string nameInstance3 = ((string)nameValue3);
                                            propertiesInstance.Name = nameInstance3;
                                        }
                                        
                                        JToken targetResourceUriValue = propertiesValue["targetResourceUri"];
                                        if (targetResourceUriValue != null && targetResourceUriValue.Type != JTokenType.Null)
                                        {
                                            string targetResourceUriInstance = ((string)targetResourceUriValue);
                                            propertiesInstance.TargetResourceUri = targetResourceUriInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <param name='resourceGroupName'>
        /// Required. The resource name.
        /// </param>
        /// <param name='autoscaleSettingName'>
        /// Required. The autoscale setting name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> UpdateSettingAsync(string resourceGroupName, string autoscaleSettingName, AutoscaleSettingCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (autoscaleSettingName == null)
            {
                throw new ArgumentNullException("autoscaleSettingName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("autoscaleSettingName", autoscaleSettingName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateSettingAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/microsoft.insights/autoscalesettings/";
            url = url + Uri.EscapeDataString(autoscaleSettingName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject autoscaleSettingCreateOrUpdateParametersValue = new JObject();
                requestDoc = autoscaleSettingCreateOrUpdateParametersValue;
                
                if (parameters.Location != null)
                {
                    autoscaleSettingCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    if (parameters.Tags is ILazyCollection == false || ((ILazyCollection)parameters.Tags).IsInitialized)
                    {
                        JObject tagsDictionary = new JObject();
                        foreach (KeyValuePair<string, string> pair in parameters.Tags)
                        {
                            string tagsKey = pair.Key;
                            string tagsValue = pair.Value;
                            tagsDictionary[tagsKey] = tagsValue;
                        }
                        autoscaleSettingCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                    }
                }
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    autoscaleSettingCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.Profiles != null)
                    {
                        if (parameters.Properties.Profiles is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Profiles).IsInitialized)
                        {
                            JArray profilesArray = new JArray();
                            foreach (AutoscaleProfile profilesItem in parameters.Properties.Profiles)
                            {
                                JObject autoscaleProfileValue = new JObject();
                                profilesArray.Add(autoscaleProfileValue);
                                
                                if (profilesItem.Name != null)
                                {
                                    autoscaleProfileValue["name"] = profilesItem.Name;
                                }
                                
                                if (profilesItem.Capacity != null)
                                {
                                    JObject capacityValue = new JObject();
                                    autoscaleProfileValue["capacity"] = capacityValue;
                                    
                                    if (profilesItem.Capacity.Minimum != null)
                                    {
                                        capacityValue["minimum"] = profilesItem.Capacity.Minimum;
                                    }
                                    
                                    if (profilesItem.Capacity.Maximum != null)
                                    {
                                        capacityValue["maximum"] = profilesItem.Capacity.Maximum;
                                    }
                                    
                                    if (profilesItem.Capacity.Default != null)
                                    {
                                        capacityValue["default"] = profilesItem.Capacity.Default;
                                    }
                                }
                                
                                if (profilesItem.Rules != null)
                                {
                                    if (profilesItem.Rules is ILazyCollection == false || ((ILazyCollection)profilesItem.Rules).IsInitialized)
                                    {
                                        JArray rulesArray = new JArray();
                                        foreach (ScaleRule rulesItem in profilesItem.Rules)
                                        {
                                            JObject scaleRuleValue = new JObject();
                                            rulesArray.Add(scaleRuleValue);
                                            
                                            if (rulesItem.MetricTrigger != null)
                                            {
                                                JObject metricTriggerValue = new JObject();
                                                scaleRuleValue["metricTrigger"] = metricTriggerValue;
                                                
                                                if (rulesItem.MetricTrigger.MetricName != null)
                                                {
                                                    metricTriggerValue["metricName"] = rulesItem.MetricTrigger.MetricName;
                                                }
                                                
                                                if (rulesItem.MetricTrigger.MetricNamespace != null)
                                                {
                                                    metricTriggerValue["metricNamespace"] = rulesItem.MetricTrigger.MetricNamespace;
                                                }
                                                
                                                if (rulesItem.MetricTrigger.MetricResourceUri != null)
                                                {
                                                    metricTriggerValue["metricResourceUri"] = rulesItem.MetricTrigger.MetricResourceUri;
                                                }
                                                
                                                metricTriggerValue["timeGrain"] = XmlConvert.ToString(rulesItem.MetricTrigger.TimeGrain);
                                                
                                                metricTriggerValue["statistic"] = rulesItem.MetricTrigger.Statistic.ToString();
                                                
                                                metricTriggerValue["timeWindow"] = XmlConvert.ToString(rulesItem.MetricTrigger.TimeWindow);
                                                
                                                metricTriggerValue["timeAggregation"] = rulesItem.MetricTrigger.TimeAggregation.ToString();
                                                
                                                metricTriggerValue["operator"] = rulesItem.MetricTrigger.Operator.ToString();
                                                
                                                metricTriggerValue["threshold"] = rulesItem.MetricTrigger.Threshold;
                                            }
                                            
                                            if (rulesItem.ScaleAction != null)
                                            {
                                                JObject scaleActionValue = new JObject();
                                                scaleRuleValue["scaleAction"] = scaleActionValue;
                                                
                                                scaleActionValue["direction"] = rulesItem.ScaleAction.Direction.ToString();
                                                
                                                scaleActionValue["type"] = rulesItem.ScaleAction.Type.ToString();
                                                
                                                if (rulesItem.ScaleAction.Value != null)
                                                {
                                                    scaleActionValue["value"] = rulesItem.ScaleAction.Value;
                                                }
                                                
                                                scaleActionValue["cooldown"] = XmlConvert.ToString(rulesItem.ScaleAction.Cooldown);
                                            }
                                        }
                                        autoscaleProfileValue["rules"] = rulesArray;
                                    }
                                }
                                
                                if (profilesItem.FixedDate != null)
                                {
                                    JObject fixedDateValue = new JObject();
                                    autoscaleProfileValue["fixedDate"] = fixedDateValue;
                                    
                                    if (profilesItem.FixedDate.TimeZone != null)
                                    {
                                        fixedDateValue["timeZone"] = profilesItem.FixedDate.TimeZone;
                                    }
                                    
                                    fixedDateValue["start"] = profilesItem.FixedDate.Start;
                                    
                                    fixedDateValue["end"] = profilesItem.FixedDate.End;
                                }
                                
                                if (profilesItem.Recurrence != null)
                                {
                                    JObject recurrenceValue = new JObject();
                                    autoscaleProfileValue["recurrence"] = recurrenceValue;
                                    
                                    recurrenceValue["frequency"] = profilesItem.Recurrence.Frequency.ToString();
                                    
                                    if (profilesItem.Recurrence.Schedule != null)
                                    {
                                        JObject scheduleValue = new JObject();
                                        recurrenceValue["schedule"] = scheduleValue;
                                        
                                        if (profilesItem.Recurrence.Schedule.TimeZone != null)
                                        {
                                            scheduleValue["timeZone"] = profilesItem.Recurrence.Schedule.TimeZone;
                                        }
                                        
                                        if (profilesItem.Recurrence.Schedule.Days != null)
                                        {
                                            if (profilesItem.Recurrence.Schedule.Days is ILazyCollection == false || ((ILazyCollection)profilesItem.Recurrence.Schedule.Days).IsInitialized)
                                            {
                                                JArray daysArray = new JArray();
                                                foreach (string daysItem in profilesItem.Recurrence.Schedule.Days)
                                                {
                                                    daysArray.Add(daysItem);
                                                }
                                                scheduleValue["days"] = daysArray;
                                            }
                                        }
                                        
                                        if (profilesItem.Recurrence.Schedule.Hours != null)
                                        {
                                            if (profilesItem.Recurrence.Schedule.Hours is ILazyCollection == false || ((ILazyCollection)profilesItem.Recurrence.Schedule.Hours).IsInitialized)
                                            {
                                                JArray hoursArray = new JArray();
                                                foreach (int hoursItem in profilesItem.Recurrence.Schedule.Hours)
                                                {
                                                    hoursArray.Add(hoursItem);
                                                }
                                                scheduleValue["hours"] = hoursArray;
                                            }
                                        }
                                        
                                        if (profilesItem.Recurrence.Schedule.Minutes != null)
                                        {
                                            if (profilesItem.Recurrence.Schedule.Minutes is ILazyCollection == false || ((ILazyCollection)profilesItem.Recurrence.Schedule.Minutes).IsInitialized)
                                            {
                                                JArray minutesArray = new JArray();
                                                foreach (int minutesItem in profilesItem.Recurrence.Schedule.Minutes)
                                                {
                                                    minutesArray.Add(minutesItem);
                                                }
                                                scheduleValue["minutes"] = minutesArray;
                                            }
                                        }
                                    }
                                }
                            }
                            propertiesValue["profiles"] = profilesArray;
                        }
                    }
                    
                    if (parameters.Properties.Notifications != null)
                    {
                        if (parameters.Properties.Notifications is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Notifications).IsInitialized)
                        {
                            JArray notificationsArray = new JArray();
                            foreach (AutoscaleNotification notificationsItem in parameters.Properties.Notifications)
                            {
                                JObject notificationValue = new JObject();
                                notificationsArray.Add(notificationValue);
                                
                                if (notificationsItem.Operation != null)
                                {
                                    notificationValue["operation"] = notificationsItem.Operation;
                                }
                                
                                if (notificationsItem.Email != null)
                                {
                                    JObject emailValue = new JObject();
                                    notificationValue["email"] = emailValue;
                                    
                                    emailValue["sendToSubscriptionAdministrator"] = notificationsItem.Email.SendToSubscriptionAdministrator;
                                    
                                    emailValue["sendToSubscriptionCoAdministrators"] = notificationsItem.Email.SendToSubscriptionCoAdministrators;
                                    
                                    if (notificationsItem.Email.CustomEmails != null)
                                    {
                                        if (notificationsItem.Email.CustomEmails is ILazyCollection == false || ((ILazyCollection)notificationsItem.Email.CustomEmails).IsInitialized)
                                        {
                                            JArray customEmailsArray = new JArray();
                                            foreach (string customEmailsItem in notificationsItem.Email.CustomEmails)
                                            {
                                                customEmailsArray.Add(customEmailsItem);
                                            }
                                            emailValue["customEmails"] = customEmailsArray;
                                        }
                                    }
                                }
                                
                                if (notificationsItem.Webhooks != null)
                                {
                                    if (notificationsItem.Webhooks is ILazyCollection == false || ((ILazyCollection)notificationsItem.Webhooks).IsInitialized)
                                    {
                                        JArray webhooksArray = new JArray();
                                        foreach (WebhookNotification webhooksItem in notificationsItem.Webhooks)
                                        {
                                            JObject webhookValue = new JObject();
                                            webhooksArray.Add(webhookValue);
                                            
                                            if (webhooksItem.ServiceUri != null)
                                            {
                                                webhookValue["serviceUri"] = webhooksItem.ServiceUri;
                                            }
                                            
                                            if (webhooksItem.Properties != null)
                                            {
                                                if (webhooksItem.Properties is ILazyCollection == false || ((ILazyCollection)webhooksItem.Properties).IsInitialized)
                                                {
                                                    JObject propertiesDictionary = new JObject();
                                                    foreach (KeyValuePair<string, string> pair2 in webhooksItem.Properties)
                                                    {
                                                        string propertiesKey = pair2.Key;
                                                        string propertiesValue2 = pair2.Value;
                                                        propertiesDictionary[propertiesKey] = propertiesValue2;
                                                    }
                                                    webhookValue["properties"] = propertiesDictionary;
                                                }
                                            }
                                        }
                                        notificationValue["webhooks"] = webhooksArray;
                                    }
                                }
                            }
                            propertiesValue["notifications"] = notificationsArray;
                        }
                    }
                    
                    propertiesValue["enabled"] = parameters.Properties.Enabled;
                    
                    if (parameters.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Properties.Name;
                    }
                    
                    if (parameters.Properties.TargetResourceUri != null)
                    {
                        propertiesValue["targetResourceUri"] = parameters.Properties.TargetResourceUri;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AzureOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
