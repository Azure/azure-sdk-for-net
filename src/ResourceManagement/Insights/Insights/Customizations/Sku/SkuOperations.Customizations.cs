// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.Insights.Models;

namespace Microsoft.Azure.Management.Insights
{
    /// <summary>
    /// Operations for managing resources sku.
    /// </summary>
    internal partial class SkuOperations : IServiceOperations<InsightsManagementClient>, ISkuOperations
    {
        /// <param name='resourceId'>
        /// Required. The resource id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<SkuListResponse> ListSkuDefinitionsAsync(string resourceId, string apiVersion, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }

            if (AntaresSkuOperations.IsAntaresResourceType(resourceId))
            {
                // Antares does not currently support the new contract and has no API to get all valid SKUs so these are hardcoded for now.
                return AntaresSkuOperations.ListAntaresSkus();
            }
            else
            {
                return await this.ListSkuDefinitionsInternalAsync(resourceId, apiVersion, cancellationToken);
            }
        }

        /// <param name='resourceId'>
        /// Required. The resource id.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public Task<SkuGetResponse> GetCurrentSkuAsync(string resourceId, string apiVersion, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }

            if (AntaresSkuOperations.IsAntaresResourceType(resourceId))
            {
                return AntaresSkuOperations.GetAntaresCurrentSku(this, resourceId, apiVersion, cancellationToken);
            }
            else
            {
                return this.GetCurrentSkuInternalAsync(resourceId, apiVersion, cancellationToken);
            }
        }

        public Task<SkuUpdateResponse> UpdateCurrentSkuAsync(string resourceId, SkuUpdateParameters parameters, string apiVersion, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceId == null)
            {
                throw new ArgumentNullException("resourceId");
            }

            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }

            if (parameters.Sku == null)
            {
                throw new ArgumentNullException("Sku");
            }

            if (parameters.Sku.Name == null)
            {
                throw new ArgumentNullException("Sku.Name");
            }

            if (parameters.Sku.Tier == null)
            {
                throw new ArgumentNullException("Sku.Tier");
            }

            // Confirm resourceId is supported
            if (AntaresSkuOperations.IsAntaresResourceType(resourceId))
            {
                return AntaresSkuOperations.UpdateAntaresCurrentSkuAsync(this, resourceId, parameters, apiVersion, cancellationToken);
            }
            else
            {
                return this.UpdateCurrentSkuInternalAsync(resourceId, parameters, apiVersion, cancellationToken);
            }
        }
    }
}
