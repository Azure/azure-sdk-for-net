// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Insights
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// EventsOperations operations.
    /// </summary>
    public partial interface IEventsOperations
    {
        /// <summary>
        /// Provides the list of events. The **$filter** is very restricted and
        /// allows only the following patterns. - List events for a resource
        /// group: $filter=eventTimestamp ge '&lt;Start Time&gt;' and
        /// eventTimestamp le '&lt;End Time&gt;' and eventChannels eq 'Admin,
        /// Operation' and resourceGroupName eq '&lt;ResourceGroupName&gt;'. -
        /// List events for resource: $filter=eventTimestamp ge '&lt;Start
        /// Time&gt;' and eventTimestamp le '&lt;End Time&gt;' and
        /// eventChannels eq 'Admin, Operation' and resourceUri eq
        /// '&lt;ResourceURI&gt;'. - List events for a subscription:
        /// $filter=eventTimestamp ge '&lt;Start Time&gt;' and eventTimestamp
        /// le '&lt;End Time&gt;' and eventChannels eq 'Admin, Operation'.
        /// -List events for a resource provider: $filter=eventTimestamp ge
        /// '&lt;Start Time&gt;' and eventTimestamp le '&lt;End Time&gt;' and
        /// eventChannels eq 'Admin, Operation' and resourceProvider eq
        /// '&lt;ResourceProviderName&gt;'. - List events for a correlation Id:
        /// api-version=2014-04-01&amp;$filter=eventTimestamp ge
        /// '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
        /// '2014-07-20T04:36:37.6407898Z' and eventChannels eq 'Admin,
        /// Operation' and correlationId eq '&lt;CorrelationID&gt;'. No other
        /// syntax is allowed.
        /// </summary>
        /// <param name='odataQuery'>
        /// OData parameters to apply to the operation.
        /// </param>
        /// <param name='select'>
        /// Used to fetch events with only the given properties. The filter is
        /// a comma separated list of property names to be returned. Possible
        /// values are: authorization, channels, claims, correlationId,
        /// description, eventDataId, eventName, eventTimestamp, httpRequest,
        /// level, operationId, operationName, properties, resourceGroupName,
        /// resourceProviderName, resourceId, status, submissionTimestamp,
        /// subStatus, subscriptionId
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<EventData>>> ListWithHttpMessagesAsync(Microsoft.Rest.Azure.OData.ODataQuery<EventData> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<EventData>), string select = default(string), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Provides the list of events. The **$filter** is very restricted and
        /// allows only the following patterns. - List events for a resource
        /// group: $filter=eventTimestamp ge '&lt;Start Time&gt;' and
        /// eventTimestamp le '&lt;End Time&gt;' and eventChannels eq 'Admin,
        /// Operation' and resourceGroupName eq '&lt;ResourceGroupName&gt;'. -
        /// List events for resource: $filter=eventTimestamp ge '&lt;Start
        /// Time&gt;' and eventTimestamp le '&lt;End Time&gt;' and
        /// eventChannels eq 'Admin, Operation' and resourceUri eq
        /// '&lt;ResourceURI&gt;'. - List events for a subscription:
        /// $filter=eventTimestamp ge '&lt;Start Time&gt;' and eventTimestamp
        /// le '&lt;End Time&gt;' and eventChannels eq 'Admin, Operation'.
        /// -List events for a resource provider: $filter=eventTimestamp ge
        /// '&lt;Start Time&gt;' and eventTimestamp le '&lt;End Time&gt;' and
        /// eventChannels eq 'Admin, Operation' and resourceProvider eq
        /// '&lt;ResourceProviderName&gt;'. - List events for a correlation Id:
        /// api-version=2014-04-01&amp;$filter=eventTimestamp ge
        /// '2014-07-16T04:36:37.6407898Z' and eventTimestamp le
        /// '2014-07-20T04:36:37.6407898Z' and eventChannels eq 'Admin,
        /// Operation' and correlationId eq '&lt;CorrelationID&gt;'. No other
        /// syntax is allowed.
        /// </summary>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<EventData>>> ListNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
