// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.OperationalInsights;
using Microsoft.Azure.Management.OperationalInsights.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.OperationalInsights
{
    /// <summary>
    /// Operations for managing storage insights.
    /// </summary>
    internal partial class StorageInsightOperations : IServiceOperations<OperationalInsightsManagementClient>, IStorageInsightOperations
    {
        /// <summary>
        /// Initializes a new instance of the StorageInsightOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal StorageInsightOperations(OperationalInsightsManagementClient client)
        {
            this._client = client;
        }
        
        private OperationalInsightsManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.OperationalInsights.OperationalInsightsManagementClient.
        /// </summary>
        public OperationalInsightsManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create or update a storage insight.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the storage insight.
        /// </param>
        /// <param name='workspaceName'>
        /// Required. The name of the parent workspace that will contain the
        /// storage insight
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters required to create or update a storage
        /// insight.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The create or update storage insight operation response.
        /// </returns>
        public async Task<StorageInsightCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string workspaceName, StorageInsightCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException("workspaceName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.StorageInsight != null)
            {
                if (parameters.StorageInsight.Name == null)
                {
                    throw new ArgumentNullException("parameters.StorageInsight.Name");
                }
                if (parameters.StorageInsight.Properties == null)
                {
                    throw new ArgumentNullException("parameters.StorageInsight.Properties");
                }
                if (parameters.StorageInsight.Properties.StorageAccount == null)
                {
                    throw new ArgumentNullException("parameters.StorageInsight.Properties.StorageAccount");
                }
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("workspaceName", workspaceName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.OperationalInsights/workspaces/";
            url = url + Uri.EscapeDataString(workspaceName);
            url = url + "/storageInsightConfigs/";
            if (parameters.StorageInsight != null && parameters.StorageInsight.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.StorageInsight.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-20");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject storageInsightCreateOrUpdateParametersValue = new JObject();
                requestDoc = storageInsightCreateOrUpdateParametersValue;
                
                if (parameters.StorageInsight != null)
                {
                    JObject propertiesValue = new JObject();
                    storageInsightCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.StorageInsight.Properties.Containers != null)
                    {
                        if (parameters.StorageInsight.Properties.Containers is ILazyCollection == false || ((ILazyCollection)parameters.StorageInsight.Properties.Containers).IsInitialized)
                        {
                            JArray containersArray = new JArray();
                            foreach (string containersItem in parameters.StorageInsight.Properties.Containers)
                            {
                                containersArray.Add(containersItem);
                            }
                            propertiesValue["containers"] = containersArray;
                        }
                    }
                    
                    if (parameters.StorageInsight.Properties.Tables != null)
                    {
                        if (parameters.StorageInsight.Properties.Tables is ILazyCollection == false || ((ILazyCollection)parameters.StorageInsight.Properties.Tables).IsInitialized)
                        {
                            JArray tablesArray = new JArray();
                            foreach (string tablesItem in parameters.StorageInsight.Properties.Tables)
                            {
                                tablesArray.Add(tablesItem);
                            }
                            propertiesValue["tables"] = tablesArray;
                        }
                    }
                    
                    JObject storageAccountValue = new JObject();
                    propertiesValue["storageAccount"] = storageAccountValue;
                    
                    if (parameters.StorageInsight.Properties.StorageAccount.Id != null)
                    {
                        storageAccountValue["id"] = parameters.StorageInsight.Properties.StorageAccount.Id;
                    }
                    
                    if (parameters.StorageInsight.Properties.StorageAccount.Key != null)
                    {
                        storageAccountValue["key"] = parameters.StorageInsight.Properties.StorageAccount.Key;
                    }
                    
                    if (parameters.StorageInsight.Properties.Status != null)
                    {
                        JObject statusValue = new JObject();
                        propertiesValue["status"] = statusValue;
                        
                        if (parameters.StorageInsight.Properties.Status.State != null)
                        {
                            statusValue["state"] = parameters.StorageInsight.Properties.Status.State;
                        }
                    }
                    
                    if (parameters.StorageInsight.ETag != null)
                    {
                        storageInsightCreateOrUpdateParametersValue["eTag"] = parameters.StorageInsight.ETag;
                    }
                    
                    if (parameters.StorageInsight.Id != null)
                    {
                        storageInsightCreateOrUpdateParametersValue["id"] = parameters.StorageInsight.Id;
                    }
                    
                    storageInsightCreateOrUpdateParametersValue["name"] = parameters.StorageInsight.Name;
                    
                    if (parameters.StorageInsight.Type != null)
                    {
                        storageInsightCreateOrUpdateParametersValue["type"] = parameters.StorageInsight.Type;
                    }
                    
                    if (parameters.StorageInsight.Location != null)
                    {
                        storageInsightCreateOrUpdateParametersValue["location"] = parameters.StorageInsight.Location;
                    }
                    
                    if (parameters.StorageInsight.Tags != null)
                    {
                        if (parameters.StorageInsight.Tags is ILazyCollection == false || ((ILazyCollection)parameters.StorageInsight.Tags).IsInitialized)
                        {
                            JObject tagsDictionary = new JObject();
                            foreach (KeyValuePair<string, string> pair in parameters.StorageInsight.Tags)
                            {
                                string tagsKey = pair.Key;
                                string tagsValue = pair.Value;
                                tagsDictionary[tagsKey] = tagsValue;
                            }
                            storageInsightCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageInsightCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageInsightCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageInsight storageInsightInstance = new StorageInsight();
                            result.StorageInsight = storageInsightInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                StorageInsightProperties propertiesInstance = new StorageInsightProperties();
                                storageInsightInstance.Properties = propertiesInstance;
                                
                                JToken containersArray2 = propertiesValue2["containers"];
                                if (containersArray2 != null && containersArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken containersValue in ((JArray)containersArray2))
                                    {
                                        propertiesInstance.Containers.Add(((string)containersValue));
                                    }
                                }
                                
                                JToken tablesArray2 = propertiesValue2["tables"];
                                if (tablesArray2 != null && tablesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken tablesValue in ((JArray)tablesArray2))
                                    {
                                        propertiesInstance.Tables.Add(((string)tablesValue));
                                    }
                                }
                                
                                JToken storageAccountValue2 = propertiesValue2["storageAccount"];
                                if (storageAccountValue2 != null && storageAccountValue2.Type != JTokenType.Null)
                                {
                                    StorageAccount storageAccountInstance = new StorageAccount();
                                    propertiesInstance.StorageAccount = storageAccountInstance;
                                    
                                    JToken idValue = storageAccountValue2["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        storageAccountInstance.Id = idInstance;
                                    }
                                    
                                    JToken keyValue = storageAccountValue2["key"];
                                    if (keyValue != null && keyValue.Type != JTokenType.Null)
                                    {
                                        string keyInstance = ((string)keyValue);
                                        storageAccountInstance.Key = keyInstance;
                                    }
                                }
                                
                                JToken statusValue2 = propertiesValue2["status"];
                                if (statusValue2 != null && statusValue2.Type != JTokenType.Null)
                                {
                                    StorageInsightStatus statusInstance = new StorageInsightStatus();
                                    propertiesInstance.Status = statusInstance;
                                    
                                    JToken stateValue = statusValue2["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        string stateInstance = ((string)stateValue);
                                        statusInstance.State = stateInstance;
                                    }
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                storageInsightInstance.ETag = eTagInstance;
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                storageInsightInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                storageInsightInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                storageInsightInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                storageInsightInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    storageInsightInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes a storage insight instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the storage insight.
        /// </param>
        /// <param name='workspaceName'>
        /// Required. The name of the workspace that contains the storage
        /// insight.
        /// </param>
        /// <param name='storageInsightName'>
        /// Required. The name of the storage insight.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string workspaceName, string storageInsightName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException("workspaceName");
            }
            if (storageInsightName == null)
            {
                throw new ArgumentNullException("storageInsightName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("workspaceName", workspaceName);
                tracingParameters.Add("storageInsightName", storageInsightName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.OperationalInsights/workspaces/";
            url = url + Uri.EscapeDataString(workspaceName);
            url = url + "/storageInsightConfigs/";
            url = url + Uri.EscapeDataString(storageInsightName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-20");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets a storage insight instance.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the storage insight.
        /// </param>
        /// <param name='workspaceName'>
        /// Required. The name of the workspace that contains the storage
        /// insight.
        /// </param>
        /// <param name='storageInsightName'>
        /// Required. The name of the storage insight
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The get storage insight operation response.
        /// </returns>
        public async Task<StorageInsightGetResponse> GetAsync(string resourceGroupName, string workspaceName, string storageInsightName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException("workspaceName");
            }
            if (storageInsightName == null)
            {
                throw new ArgumentNullException("storageInsightName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("workspaceName", workspaceName);
                tracingParameters.Add("storageInsightName", storageInsightName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.OperationalInsights/workspaces/";
            url = url + Uri.EscapeDataString(workspaceName);
            url = url + "/storageInsightConfigs/";
            url = url + Uri.EscapeDataString(storageInsightName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-20");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageInsightGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageInsightGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            StorageInsight storageInsightInstance = new StorageInsight();
                            result.StorageInsight = storageInsightInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                StorageInsightProperties propertiesInstance = new StorageInsightProperties();
                                storageInsightInstance.Properties = propertiesInstance;
                                
                                JToken containersArray = propertiesValue["containers"];
                                if (containersArray != null && containersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken containersValue in ((JArray)containersArray))
                                    {
                                        propertiesInstance.Containers.Add(((string)containersValue));
                                    }
                                }
                                
                                JToken tablesArray = propertiesValue["tables"];
                                if (tablesArray != null && tablesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken tablesValue in ((JArray)tablesArray))
                                    {
                                        propertiesInstance.Tables.Add(((string)tablesValue));
                                    }
                                }
                                
                                JToken storageAccountValue = propertiesValue["storageAccount"];
                                if (storageAccountValue != null && storageAccountValue.Type != JTokenType.Null)
                                {
                                    StorageAccount storageAccountInstance = new StorageAccount();
                                    propertiesInstance.StorageAccount = storageAccountInstance;
                                    
                                    JToken idValue = storageAccountValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        storageAccountInstance.Id = idInstance;
                                    }
                                    
                                    JToken keyValue = storageAccountValue["key"];
                                    if (keyValue != null && keyValue.Type != JTokenType.Null)
                                    {
                                        string keyInstance = ((string)keyValue);
                                        storageAccountInstance.Key = keyInstance;
                                    }
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    StorageInsightStatus statusInstance = new StorageInsightStatus();
                                    propertiesInstance.Status = statusInstance;
                                    
                                    JToken stateValue = statusValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        string stateInstance = ((string)stateValue);
                                        statusInstance.State = stateInstance;
                                    }
                                }
                            }
                            
                            JToken eTagValue = responseDoc["eTag"];
                            if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                            {
                                string eTagInstance = ((string)eTagValue);
                                storageInsightInstance.ETag = eTagInstance;
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                storageInsightInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                storageInsightInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                storageInsightInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                storageInsightInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    storageInsightInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the first page of storage insight instances in a workspace
        /// with the link to the next page.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The resource group name of the storage insights.
        /// </param>
        /// <param name='workspaceName'>
        /// Required. The workspace that contains the storage insights.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list storage insights operation response.
        /// </returns>
        public async Task<StorageInsightListResponse> ListInWorkspaceAsync(string resourceGroupName, string workspaceName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (workspaceName == null)
            {
                throw new ArgumentNullException("workspaceName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("workspaceName", workspaceName);
                TracingAdapter.Enter(invocationId, this, "ListInWorkspaceAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.OperationalInsights/workspaces/";
            url = url + Uri.EscapeDataString(workspaceName);
            url = url + "/storageInsightConfigs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-03-20");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageInsightListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageInsightListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    StorageInsight storageInsightInstance = new StorageInsight();
                                    result.StorageInsights.Add(storageInsightInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        StorageInsightProperties propertiesInstance = new StorageInsightProperties();
                                        storageInsightInstance.Properties = propertiesInstance;
                                        
                                        JToken containersArray = propertiesValue["containers"];
                                        if (containersArray != null && containersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken containersValue in ((JArray)containersArray))
                                            {
                                                propertiesInstance.Containers.Add(((string)containersValue));
                                            }
                                        }
                                        
                                        JToken tablesArray = propertiesValue["tables"];
                                        if (tablesArray != null && tablesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken tablesValue in ((JArray)tablesArray))
                                            {
                                                propertiesInstance.Tables.Add(((string)tablesValue));
                                            }
                                        }
                                        
                                        JToken storageAccountValue = propertiesValue["storageAccount"];
                                        if (storageAccountValue != null && storageAccountValue.Type != JTokenType.Null)
                                        {
                                            StorageAccount storageAccountInstance = new StorageAccount();
                                            propertiesInstance.StorageAccount = storageAccountInstance;
                                            
                                            JToken idValue = storageAccountValue["id"];
                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                            {
                                                string idInstance = ((string)idValue);
                                                storageAccountInstance.Id = idInstance;
                                            }
                                            
                                            JToken keyValue = storageAccountValue["key"];
                                            if (keyValue != null && keyValue.Type != JTokenType.Null)
                                            {
                                                string keyInstance = ((string)keyValue);
                                                storageAccountInstance.Key = keyInstance;
                                            }
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            StorageInsightStatus statusInstance = new StorageInsightStatus();
                                            propertiesInstance.Status = statusInstance;
                                            
                                            JToken stateValue = statusValue["state"];
                                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                                            {
                                                string stateInstance = ((string)stateValue);
                                                statusInstance.State = stateInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken eTagValue = valueValue["eTag"];
                                    if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                                    {
                                        string eTagInstance = ((string)eTagValue);
                                        storageInsightInstance.ETag = eTagInstance;
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        storageInsightInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        storageInsightInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        storageInsightInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        storageInsightInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            storageInsightInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the next page of storage insight instances with the link to
        /// the next page.
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The url to the next storage insights page.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The list storage insights operation response.
        /// </returns>
        public async Task<StorageInsightListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("x-ms-client-request-id", Guid.NewGuid().ToString());
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    StorageInsightListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new StorageInsightListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    StorageInsight storageInsightInstance = new StorageInsight();
                                    result.StorageInsights.Add(storageInsightInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        StorageInsightProperties propertiesInstance = new StorageInsightProperties();
                                        storageInsightInstance.Properties = propertiesInstance;
                                        
                                        JToken containersArray = propertiesValue["containers"];
                                        if (containersArray != null && containersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken containersValue in ((JArray)containersArray))
                                            {
                                                propertiesInstance.Containers.Add(((string)containersValue));
                                            }
                                        }
                                        
                                        JToken tablesArray = propertiesValue["tables"];
                                        if (tablesArray != null && tablesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken tablesValue in ((JArray)tablesArray))
                                            {
                                                propertiesInstance.Tables.Add(((string)tablesValue));
                                            }
                                        }
                                        
                                        JToken storageAccountValue = propertiesValue["storageAccount"];
                                        if (storageAccountValue != null && storageAccountValue.Type != JTokenType.Null)
                                        {
                                            StorageAccount storageAccountInstance = new StorageAccount();
                                            propertiesInstance.StorageAccount = storageAccountInstance;
                                            
                                            JToken idValue = storageAccountValue["id"];
                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                            {
                                                string idInstance = ((string)idValue);
                                                storageAccountInstance.Id = idInstance;
                                            }
                                            
                                            JToken keyValue = storageAccountValue["key"];
                                            if (keyValue != null && keyValue.Type != JTokenType.Null)
                                            {
                                                string keyInstance = ((string)keyValue);
                                                storageAccountInstance.Key = keyInstance;
                                            }
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            StorageInsightStatus statusInstance = new StorageInsightStatus();
                                            propertiesInstance.Status = statusInstance;
                                            
                                            JToken stateValue = statusValue["state"];
                                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                                            {
                                                string stateInstance = ((string)stateValue);
                                                statusInstance.State = stateInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken eTagValue = valueValue["eTag"];
                                    if (eTagValue != null && eTagValue.Type != JTokenType.Null)
                                    {
                                        string eTagInstance = ((string)eTagValue);
                                        storageInsightInstance.ETag = eTagInstance;
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        storageInsightInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        storageInsightInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        storageInsightInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        storageInsightInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            storageInsightInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
