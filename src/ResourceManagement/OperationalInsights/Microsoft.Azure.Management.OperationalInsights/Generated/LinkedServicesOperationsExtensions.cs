// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.OperationalInsights
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for LinkedServicesOperations.
    /// </summary>
    public static partial class LinkedServicesOperationsExtensions
    {
            /// <summary>
            /// Create or update a linked service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the linked service.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the parent workspace that will contain the linked service
            /// </param>
            /// <param name='name'>
            /// The parameters required to create or update a linked service.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create or update a linked service.
            /// </param>
            public static LinkedService CreateOrUpdate(this ILinkedServicesOperations operations, string resourceGroupName, string workspaceName, string name, LinkedService parameters)
            {
                return Task.Factory.StartNew(s => ((ILinkedServicesOperations)s).CreateOrUpdateAsync(resourceGroupName, workspaceName, name, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a linked service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the linked service.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the parent workspace that will contain the linked service
            /// </param>
            /// <param name='name'>
            /// The parameters required to create or update a linked service.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create or update a linked service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinkedService> CreateOrUpdateAsync(this ILinkedServicesOperations operations, string resourceGroupName, string workspaceName, string name, LinkedService parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, name, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a linked service instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the linked service.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the linked service.
            /// </param>
            /// <param name='linkedServiceName'>
            /// Name of the linked service.
            /// </param>
            public static void Delete(this ILinkedServicesOperations operations, string resourceGroupName, string workspaceName, string linkedServiceName)
            {
                Task.Factory.StartNew(s => ((ILinkedServicesOperations)s).DeleteAsync(resourceGroupName, workspaceName, linkedServiceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a linked service instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the linked service.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the linked service.
            /// </param>
            /// <param name='linkedServiceName'>
            /// Name of the linked service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this ILinkedServicesOperations operations, string resourceGroupName, string workspaceName, string linkedServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, linkedServiceName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets a linked service instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the linked service.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the linked service.
            /// </param>
            /// <param name='linkedServiceName'>
            /// Name of the linked service.
            /// </param>
            public static LinkedService Get(this ILinkedServicesOperations operations, string resourceGroupName, string workspaceName, string linkedServiceName)
            {
                return Task.Factory.StartNew(s => ((ILinkedServicesOperations)s).GetAsync(resourceGroupName, workspaceName, linkedServiceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a linked service instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the linked service.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the linked service.
            /// </param>
            /// <param name='linkedServiceName'>
            /// Name of the linked service.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinkedService> GetAsync(this ILinkedServicesOperations operations, string resourceGroupName, string workspaceName, string linkedServiceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, linkedServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of linked services instances in a workspace with the
            /// link to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the linked services.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace that contains the linked services.
            /// </param>
            public static IPage<LinkedService> List(this ILinkedServicesOperations operations, string resourceGroupName, string workspaceName)
            {
                return Task.Factory.StartNew(s => ((ILinkedServicesOperations)s).ListAsync(resourceGroupName, workspaceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of linked services instances in a workspace with the
            /// link to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the linked services.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace that contains the linked services.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LinkedService>> ListAsync(this ILinkedServicesOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of linked services instances in a workspace with the
            /// link to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<LinkedService> ListNext(this ILinkedServicesOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ILinkedServicesOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of linked services instances in a workspace with the
            /// link to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<LinkedService>> ListNextAsync(this ILinkedServicesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
