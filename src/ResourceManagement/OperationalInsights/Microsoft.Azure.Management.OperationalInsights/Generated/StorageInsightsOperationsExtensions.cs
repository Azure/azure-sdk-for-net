// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.OperationalInsights
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for StorageInsightsOperations.
    /// </summary>
    public static partial class StorageInsightsOperationsExtensions
    {
            /// <summary>
            /// Create or update a storage insight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the storage insight.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the parent workspace that will contain the storage insight
            /// </param>
            /// <param name='name'>
            /// The parameters required to create or update a storage insight.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create or update a storage insight.
            /// </param>
            public static StorageInsight CreateOrUpdate(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string name, StorageInsight parameters)
            {
                return Task.Factory.StartNew(s => ((IStorageInsightsOperations)s).CreateOrUpdateAsync(resourceGroupName, workspaceName, name, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a storage insight.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the storage insight.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the parent workspace that will contain the storage insight
            /// </param>
            /// <param name='name'>
            /// The parameters required to create or update a storage insight.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create or update a storage insight.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageInsight> CreateOrUpdateAsync(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string name, StorageInsight parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, name, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a storage insight instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the storage insight.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the storage insight.
            /// </param>
            /// <param name='storageInsightName'>
            /// The name of the storage insight
            /// </param>
            public static StorageInsight Get(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string storageInsightName)
            {
                return Task.Factory.StartNew(s => ((IStorageInsightsOperations)s).GetAsync(resourceGroupName, workspaceName, storageInsightName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a storage insight instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the storage insight.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the storage insight.
            /// </param>
            /// <param name='storageInsightName'>
            /// The name of the storage insight
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageInsight> GetAsync(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string storageInsightName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, storageInsightName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a storage insight instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the storage insight.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the storage insight.
            /// </param>
            /// <param name='storageInsightName'>
            /// The name of the storage insight.
            /// </param>
            public static void Delete(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string storageInsightName)
            {
                Task.Factory.StartNew(s => ((IStorageInsightsOperations)s).DeleteAsync(resourceGroupName, workspaceName, storageInsightName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a storage insight instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the storage insight.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the storage insight.
            /// </param>
            /// <param name='storageInsightName'>
            /// The name of the storage insight.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, string storageInsightName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, storageInsightName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the first page of storage insight instances in a workspace with the
            /// link to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the storage insights.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace that contains the storage insights.
            /// </param>
            public static IPage<StorageInsight> ListInWorkspace(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName)
            {
                return Task.Factory.StartNew(s => ((IStorageInsightsOperations)s).ListInWorkspaceAsync(resourceGroupName, workspaceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of storage insight instances in a workspace with the
            /// link to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the storage insights.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace that contains the storage insights.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StorageInsight>> ListInWorkspaceAsync(this IStorageInsightsOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of storage insight instances in a workspace with the
            /// link to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<StorageInsight> ListInWorkspaceNext(this IStorageInsightsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IStorageInsightsOperations)s).ListInWorkspaceNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of storage insight instances in a workspace with the
            /// link to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<StorageInsight>> ListInWorkspaceNextAsync(this IStorageInsightsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
