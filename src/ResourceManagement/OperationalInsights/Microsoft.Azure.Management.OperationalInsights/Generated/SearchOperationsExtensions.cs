// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.OperationalInsights
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SearchOperations.
    /// </summary>
    public static partial class SearchOperationsExtensions
    {
            /// <summary>
            /// Deletes the specified saved search in a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='savedSearchId'>
            /// The id of the saved search.
            /// </param>
            public static void DeleteSavedSearch(this ISearchOperations operations, string resourceGroupName, string workspaceName, string savedSearchId)
            {
                Task.Factory.StartNew(s => ((ISearchOperations)s).DeleteSavedSearchAsync(resourceGroupName, workspaceName, savedSearchId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the specified saved search in a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='savedSearchId'>
            /// The id of the saved search.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteSavedSearchAsync(this ISearchOperations operations, string resourceGroupName, string workspaceName, string savedSearchId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteSavedSearchWithHttpMessagesAsync(resourceGroupName, workspaceName, savedSearchId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates or updates a saved search for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='savedSearchId'>
            /// The id of the saved search.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to save a search.
            /// </param>
            public static void CreateOrUpdateSavedSearch(this ISearchOperations operations, string resourceGroupName, string workspaceName, string savedSearchId, SearchCreateOrUpdateSavedSearchParameters parameters)
            {
                Task.Factory.StartNew(s => ((ISearchOperations)s).CreateOrUpdateSavedSearchAsync(resourceGroupName, workspaceName, savedSearchId, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a saved search for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='savedSearchId'>
            /// The id of the saved search.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to save a search.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task CreateOrUpdateSavedSearchAsync(this ISearchOperations operations, string resourceGroupName, string workspaceName, string savedSearchId, SearchCreateOrUpdateSavedSearchParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.CreateOrUpdateSavedSearchWithHttpMessagesAsync(resourceGroupName, workspaceName, savedSearchId, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets the specified saved search for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='savedSearchId'>
            /// The id of the saved search.
            /// </param>
            public static SearchGetSavedSearchResult GetSavedSearch(this ISearchOperations operations, string resourceGroupName, string workspaceName, string savedSearchId)
            {
                return Task.Factory.StartNew(s => ((ISearchOperations)s).GetSavedSearchAsync(resourceGroupName, workspaceName, savedSearchId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the specified saved search for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='savedSearchId'>
            /// The id of the saved search.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SearchGetSavedSearchResult> GetSavedSearchAsync(this ISearchOperations operations, string resourceGroupName, string workspaceName, string savedSearchId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSavedSearchWithHttpMessagesAsync(resourceGroupName, workspaceName, savedSearchId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the saved searches for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            public static SearchListSavedSearchResult ListSavedSearches(this ISearchOperations operations, string resourceGroupName, string workspaceName)
            {
                return Task.Factory.StartNew(s => ((ISearchOperations)s).ListSavedSearchesAsync(resourceGroupName, workspaceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the saved searches for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SearchListSavedSearchResult> ListSavedSearchesAsync(this ISearchOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSavedSearchesWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the results from a saved search for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='savedSearchId'>
            /// The id of the saved search.
            /// </param>
            public static SearchGetSearchResultsResponse GetSavedSearchResults(this ISearchOperations operations, string resourceGroupName, string workspaceName, string savedSearchId)
            {
                return Task.Factory.StartNew(s => ((ISearchOperations)s).GetSavedSearchResultsAsync(resourceGroupName, workspaceName, savedSearchId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the results from a saved search for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='savedSearchId'>
            /// The id of the saved search.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SearchGetSearchResultsResponse> GetSavedSearchResultsAsync(this ISearchOperations operations, string resourceGroupName, string workspaceName, string savedSearchId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSavedSearchResultsWithHttpMessagesAsync(resourceGroupName, workspaceName, savedSearchId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the schema for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            public static SearchGetSchemaResponse GetSchema(this ISearchOperations operations, string resourceGroupName, string workspaceName)
            {
                return Task.Factory.StartNew(s => ((ISearchOperations)s).GetSchemaAsync(resourceGroupName, workspaceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the schema for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SearchGetSchemaResponse> GetSchemaAsync(this ISearchOperations operations, string resourceGroupName, string workspaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSchemaWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the search results for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to execute a search query.
            /// </param>
            public static SearchGetSearchResultsResponse GetSearchResults(this ISearchOperations operations, string resourceGroupName, string workspaceName, SearchGetSearchResultsParameters parameters)
            {
                return Task.Factory.StartNew(s => ((ISearchOperations)s).GetSearchResultsAsync(resourceGroupName, workspaceName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the search results for a given workspace.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to execute a search query.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SearchGetSearchResultsResponse> GetSearchResultsAsync(this ISearchOperations operations, string resourceGroupName, string workspaceName, SearchGetSearchResultsParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSearchResultsWithHttpMessagesAsync(resourceGroupName, workspaceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets updated search results for a given search query.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='id'>
            /// The id of the search that will have results updated.
            /// </param>
            public static IEnumerable<object> UpdateSearchResults(this ISearchOperations operations, string resourceGroupName, string workspaceName, string id)
            {
                return Task.Factory.StartNew(s => ((ISearchOperations)s).UpdateSearchResultsAsync(resourceGroupName, workspaceName, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets updated search results for a given search query.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the workspace.
            /// </param>
            /// <param name='workspaceName'>
            /// A unique workspace instance name.
            /// </param>
            /// <param name='id'>
            /// The id of the search that will have results updated.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<object>> UpdateSearchResultsAsync(this ISearchOperations operations, string resourceGroupName, string workspaceName, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSearchResultsWithHttpMessagesAsync(resourceGroupName, workspaceName, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
