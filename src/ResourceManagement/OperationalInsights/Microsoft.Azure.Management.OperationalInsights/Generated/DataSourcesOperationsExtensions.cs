// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.OperationalInsights
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure.OData;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DataSourcesOperations.
    /// </summary>
    public static partial class DataSourcesOperationsExtensions
    {
            /// <summary>
            /// Create or update a data source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data source.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the parent workspace that will contain the data source
            /// </param>
            /// <param name='name'>
            /// The parameters required to create or update a data source.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create or update a data source.
            /// </param>
            public static DataSource CreateOrUpdate(this IDataSourcesOperations operations, string resourceGroupName, string workspaceName, string name, DataSource parameters)
            {
                return Task.Factory.StartNew(s => ((IDataSourcesOperations)s).CreateOrUpdateAsync(resourceGroupName, workspaceName, name, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a data source.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data source.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the parent workspace that will contain the data source
            /// </param>
            /// <param name='name'>
            /// The parameters required to create or update a data source.
            /// </param>
            /// <param name='parameters'>
            /// The parameters required to create or update a data source.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataSource> CreateOrUpdateAsync(this IDataSourcesOperations operations, string resourceGroupName, string workspaceName, string name, DataSource parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, name, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a data source instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data source.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the data source.
            /// </param>
            /// <param name='dataSourceName'>
            /// Name of the data source.
            /// </param>
            public static void Delete(this IDataSourcesOperations operations, string resourceGroupName, string workspaceName, string dataSourceName)
            {
                Task.Factory.StartNew(s => ((IDataSourcesOperations)s).DeleteAsync(resourceGroupName, workspaceName, dataSourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a data source instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data source.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the data source.
            /// </param>
            /// <param name='dataSourceName'>
            /// Name of the data source.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IDataSourcesOperations operations, string resourceGroupName, string workspaceName, string dataSourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, dataSourceName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets a data source instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data source.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the data source.
            /// </param>
            /// <param name='dataSourceName'>
            /// Name of the data source
            /// </param>
            public static DataSource Get(this IDataSourcesOperations operations, string resourceGroupName, string workspaceName, string dataSourceName)
            {
                return Task.Factory.StartNew(s => ((IDataSourcesOperations)s).GetAsync(resourceGroupName, workspaceName, dataSourceName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a data source instance.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data source.
            /// </param>
            /// <param name='workspaceName'>
            /// The name of the workspace that contains the data source.
            /// </param>
            /// <param name='dataSourceName'>
            /// Name of the data source
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DataSource> GetAsync(this IDataSourcesOperations operations, string resourceGroupName, string workspaceName, string dataSourceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, dataSourceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of data source instances in a workspace with the link
            /// to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data sources.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace that contains the data sources.
            /// </param>
            /// <param name='skiptoken'>
            /// Token for paging support.
            /// </param>
            public static IPage<DataSource> ListInWorkspace(this IDataSourcesOperations operations, ODataQuery<DataSourceFilter> odataQuery, string resourceGroupName, string workspaceName, string skiptoken = default(string))
            {
                return Task.Factory.StartNew(s => ((IDataSourcesOperations)s).ListInWorkspaceAsync(odataQuery, resourceGroupName, workspaceName, skiptoken), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of data source instances in a workspace with the link
            /// to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the data sources.
            /// </param>
            /// <param name='workspaceName'>
            /// The workspace that contains the data sources.
            /// </param>
            /// <param name='skiptoken'>
            /// Token for paging support.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataSource>> ListInWorkspaceAsync(this IDataSourcesOperations operations, ODataQuery<DataSourceFilter> odataQuery, string resourceGroupName, string workspaceName, string skiptoken = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInWorkspaceWithHttpMessagesAsync(odataQuery, resourceGroupName, workspaceName, skiptoken, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the first page of data source instances in a workspace with the link
            /// to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DataSource> ListInWorkspaceNext(this IDataSourcesOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IDataSourcesOperations)s).ListInWorkspaceNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the first page of data source instances in a workspace with the link
            /// to the next page.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DataSource>> ListInWorkspaceNextAsync(this IDataSourcesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
