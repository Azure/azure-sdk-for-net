// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Cdn
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for EndpointsOperations.
    /// </summary>
    public static partial class EndpointsOperationsExtensions
    {
            /// <summary>
            /// Lists existing CDN endpoints within a profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static IEnumerable<Endpoint> ListByProfile(this IEndpointsOperations operations, string profileName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).ListByProfileAsync(profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists existing CDN endpoints within a profile.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<Endpoint>> ListByProfileAsync(this IEndpointsOperations operations, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByProfileWithHttpMessagesAsync(profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an existing CDN endpoint with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static Endpoint Get(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).GetAsync(endpointName, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an existing CDN endpoint with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Endpoint> GetAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new CDN endpoint with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='endpointProperties'>
            /// Endpoint properties
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static Endpoint Create(this IEndpointsOperations operations, string endpointName, EndpointCreateParameters endpointProperties, string profileName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).CreateAsync(endpointName, endpointProperties, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new CDN endpoint with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='endpointProperties'>
            /// Endpoint properties
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Endpoint> CreateAsync(this IEndpointsOperations operations, string endpointName, EndpointCreateParameters endpointProperties, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(endpointName, endpointProperties, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new CDN endpoint with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='endpointProperties'>
            /// Endpoint properties
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static Endpoint BeginCreate(this IEndpointsOperations operations, string endpointName, EndpointCreateParameters endpointProperties, string profileName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).BeginCreateAsync(endpointName, endpointProperties, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new CDN endpoint with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='endpointProperties'>
            /// Endpoint properties
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Endpoint> BeginCreateAsync(this IEndpointsOperations operations, string endpointName, EndpointCreateParameters endpointProperties, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(endpointName, endpointProperties, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing CDN endpoint with the specified parameters. Only tags
            /// and OriginHostHeader can be updated after creating an endpoint. To update
            /// origins, use the Update Origin operation. To update custom domains, use
            /// the Update Custom Domain operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='endpointProperties'>
            /// Endpoint properties
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static Endpoint Update(this IEndpointsOperations operations, string endpointName, EndpointUpdateParameters endpointProperties, string profileName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).UpdateAsync(endpointName, endpointProperties, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing CDN endpoint with the specified parameters. Only tags
            /// and OriginHostHeader can be updated after creating an endpoint. To update
            /// origins, use the Update Origin operation. To update custom domains, use
            /// the Update Custom Domain operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='endpointProperties'>
            /// Endpoint properties
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Endpoint> UpdateAsync(this IEndpointsOperations operations, string endpointName, EndpointUpdateParameters endpointProperties, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(endpointName, endpointProperties, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing CDN endpoint with the specified parameters. Only tags
            /// and OriginHostHeader can be updated after creating an endpoint. To update
            /// origins, use the Update Origin operation. To update custom domains, use
            /// the Update Custom Domain operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='endpointProperties'>
            /// Endpoint properties
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static Endpoint BeginUpdate(this IEndpointsOperations operations, string endpointName, EndpointUpdateParameters endpointProperties, string profileName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).BeginUpdateAsync(endpointName, endpointProperties, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing CDN endpoint with the specified parameters. Only tags
            /// and OriginHostHeader can be updated after creating an endpoint. To update
            /// origins, use the Update Origin operation. To update custom domains, use
            /// the Update Custom Domain operation.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='endpointProperties'>
            /// Endpoint properties
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Endpoint> BeginUpdateAsync(this IEndpointsOperations operations, string endpointName, EndpointUpdateParameters endpointProperties, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(endpointName, endpointProperties, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing CDN endpoint with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static void DeleteIfExists(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName)
            {
                Task.Factory.StartNew(s => ((IEndpointsOperations)s).DeleteIfExistsAsync(endpointName, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing CDN endpoint with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteIfExistsAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteIfExistsWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Deletes an existing CDN endpoint with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static void BeginDeleteIfExists(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName)
            {
                Task.Factory.StartNew(s => ((IEndpointsOperations)s).BeginDeleteIfExistsAsync(endpointName, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing CDN endpoint with the specified parameters.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteIfExistsAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginDeleteIfExistsWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Starts an existing stopped CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static Endpoint Start(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).StartAsync(endpointName, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts an existing stopped CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Endpoint> StartAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts an existing stopped CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static Endpoint BeginStart(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).BeginStartAsync(endpointName, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts an existing stopped CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Endpoint> BeginStartAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStartWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops an existing running CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static Endpoint Stop(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).StopAsync(endpointName, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops an existing running CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Endpoint> StopAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops an existing running CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            public static Endpoint BeginStop(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).BeginStopAsync(endpointName, profileName, resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops an existing running CDN endpoint.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Endpoint> BeginStopAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginStopWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Forcibly purges CDN endpoint content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='contentPaths'>
            /// The path to the content to be purged. Can describe a file path or a wild
            /// card directory.
            /// </param>
            public static void PurgeContent(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, IList<string> contentPaths)
            {
                Task.Factory.StartNew(s => ((IEndpointsOperations)s).PurgeContentAsync(endpointName, profileName, resourceGroupName, contentPaths), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Forcibly purges CDN endpoint content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='contentPaths'>
            /// The path to the content to be purged. Can describe a file path or a wild
            /// card directory.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PurgeContentAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, IList<string> contentPaths, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.PurgeContentWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, contentPaths, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Forcibly purges CDN endpoint content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='contentPaths'>
            /// The path to the content to be purged. Can describe a file path or a wild
            /// card directory.
            /// </param>
            public static void BeginPurgeContent(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, IList<string> contentPaths)
            {
                Task.Factory.StartNew(s => ((IEndpointsOperations)s).BeginPurgeContentAsync(endpointName, profileName, resourceGroupName, contentPaths), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Forcibly purges CDN endpoint content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='contentPaths'>
            /// The path to the content to be purged. Can describe a file path or a wild
            /// card directory.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginPurgeContentAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, IList<string> contentPaths, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginPurgeContentWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, contentPaths, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Forcibly pre-loads CDN endpoint content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='contentPaths'>
            /// The path to the content to be loaded. Should describe a file path.
            /// </param>
            public static void LoadContent(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, IList<string> contentPaths)
            {
                Task.Factory.StartNew(s => ((IEndpointsOperations)s).LoadContentAsync(endpointName, profileName, resourceGroupName, contentPaths), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Forcibly pre-loads CDN endpoint content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='contentPaths'>
            /// The path to the content to be loaded. Should describe a file path.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task LoadContentAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, IList<string> contentPaths, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.LoadContentWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, contentPaths, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Forcibly pre-loads CDN endpoint content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='contentPaths'>
            /// The path to the content to be loaded. Should describe a file path.
            /// </param>
            public static void BeginLoadContent(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, IList<string> contentPaths)
            {
                Task.Factory.StartNew(s => ((IEndpointsOperations)s).BeginLoadContentAsync(endpointName, profileName, resourceGroupName, contentPaths), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Forcibly pre-loads CDN endpoint content.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='contentPaths'>
            /// The path to the content to be loaded. Should describe a file path.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginLoadContentAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, IList<string> contentPaths, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.BeginLoadContentWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, contentPaths, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Validates a custom domain mapping to ensure it maps to the correct CNAME
            /// in DNS.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='hostName'>
            /// The host name of the custom domain. Must be a domain name.
            /// </param>
            public static ValidateCustomDomainOutput ValidateCustomDomain(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, string hostName)
            {
                return Task.Factory.StartNew(s => ((IEndpointsOperations)s).ValidateCustomDomainAsync(endpointName, profileName, resourceGroupName, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates a custom domain mapping to ensure it maps to the correct CNAME
            /// in DNS.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='endpointName'>
            /// Name of the endpoint within the CDN profile.
            /// </param>
            /// <param name='profileName'>
            /// Name of the CDN profile within the resource group.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group within the Azure subscription.
            /// </param>
            /// <param name='hostName'>
            /// The host name of the custom domain. Must be a domain name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidateCustomDomainOutput> ValidateCustomDomainAsync(this IEndpointsOperations operations, string endpointName, string profileName, string resourceGroupName, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateCustomDomainWithHttpMessagesAsync(endpointName, profileName, resourceGroupName, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
