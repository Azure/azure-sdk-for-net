// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.CustomerInsights.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.CustomerInsights;
    using Microsoft.Azure.Management.CustomerInsights.Fluent;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Maps fields in Profile to their corresponding StrongIds in Related
    /// Profile.
    /// </summary>
    public partial class RelationshipTypeMapping
    {
        /// <summary>
        /// Initializes a new instance of the RelationshipTypeMapping class.
        /// </summary>
        public RelationshipTypeMapping()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RelationshipTypeMapping class.
        /// </summary>
        /// <param name="fieldMappings">Maps a profile property with the
        /// StrongId of related profile. This is an array to support StrongIds
        /// that are composite key as well.</param>
        public RelationshipTypeMapping(IList<RelationshipTypeFieldMapping> fieldMappings)
        {
            FieldMappings = fieldMappings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets maps a profile property with the StrongId of related
        /// profile. This is an array to support StrongIds that are composite
        /// key as well.
        /// </summary>
        [JsonProperty(PropertyName = "fieldMappings")]
        public IList<RelationshipTypeFieldMapping> FieldMappings { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FieldMappings == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FieldMappings");
            }
            if (FieldMappings != null)
            {
                foreach (var element in FieldMappings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
