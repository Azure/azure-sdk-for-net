// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.CustomerInsights.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.CustomerInsights;
    using Microsoft.Azure.Management.CustomerInsights.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The view resource format.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ViewResourceFormatInner : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ViewResourceFormatInner class.
        /// </summary>
        public ViewResourceFormatInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ViewResourceFormatInner class.
        /// </summary>
        /// <param name="definition">View definition.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="viewName">Name of the view.</param>
        /// <param name="userId">the user ID.</param>
        /// <param name="tenantId">the hub name.</param>
        /// <param name="displayName">Localized display name for the
        /// view.</param>
        /// <param name="changed">Date time when view was last
        /// modified.</param>
        /// <param name="created">Date time when view was created.</param>
        public ViewResourceFormatInner(string definition, string id = default(string), string name = default(string), string type = default(string), string viewName = default(string), string userId = default(string), string tenantId = default(string), IDictionary<string, string> displayName = default(IDictionary<string, string>), System.DateTime? changed = default(System.DateTime?), System.DateTime? created = default(System.DateTime?))
            : base(id, name, type)
        {
            ViewName = viewName;
            UserId = userId;
            TenantId = tenantId;
            DisplayName = displayName;
            Definition = definition;
            Changed = changed;
            Created = created;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets name of the view.
        /// </summary>
        [JsonProperty(PropertyName = "properties.viewName")]
        public string ViewName { get; private set; }

        /// <summary>
        /// Gets or sets the user ID.
        /// </summary>
        [JsonProperty(PropertyName = "properties.userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets the hub name.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Gets or sets localized display name for the view.
        /// </summary>
        [JsonProperty(PropertyName = "properties.displayName")]
        public IDictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Gets or sets view definition.
        /// </summary>
        [JsonProperty(PropertyName = "properties.definition")]
        public string Definition { get; set; }

        /// <summary>
        /// Gets date time when view was last modified.
        /// </summary>
        [JsonProperty(PropertyName = "properties.changed")]
        public System.DateTime? Changed { get; private set; }

        /// <summary>
        /// Gets date time when view was created.
        /// </summary>
        [JsonProperty(PropertyName = "properties.created")]
        public System.DateTime? Created { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Definition == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Definition");
            }
        }
    }
}
