// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.CustomerInsights.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.CustomerInsights;
    using Microsoft.Azure.Management.CustomerInsights.Fluent;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.Runtime;
    using System.Runtime.Serialization;

    /// <summary>
    /// Defines values for EntityTypes.
    /// </summary>
    [JsonConverter(typeof(StringEnumConverter))]
    public enum EntityTypes
    {
        [EnumMember(Value = "None")]
        None,
        [EnumMember(Value = "Profile")]
        Profile,
        [EnumMember(Value = "Interaction")]
        Interaction,
        [EnumMember(Value = "Relationship")]
        Relationship
    }
    internal static class EntityTypesEnumExtension
    {
        internal static string ToSerializedValue(this EntityTypes? value)
        {
            return value == null ? null : ((EntityTypes)value).ToSerializedValue();
        }

        internal static string ToSerializedValue(this EntityTypes value)
        {
            switch( value )
            {
                case EntityTypes.None:
                    return "None";
                case EntityTypes.Profile:
                    return "Profile";
                case EntityTypes.Interaction:
                    return "Interaction";
                case EntityTypes.Relationship:
                    return "Relationship";
            }
            return null;
        }

        internal static EntityTypes? ParseEntityTypes(this string value)
        {
            switch( value )
            {
                case "None":
                    return EntityTypes.None;
                case "Profile":
                    return EntityTypes.Profile;
                case "Interaction":
                    return EntityTypes.Interaction;
                case "Relationship":
                    return EntityTypes.Relationship;
            }
            return null;
        }
    }
}
