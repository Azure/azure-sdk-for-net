// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using Azure;
    using Management;
    using CustomerInsights;
    using Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Property definition.
    /// </summary>
    public partial class PropertyDefinition
    {
        /// <summary>
        /// Initializes a new instance of the PropertyDefinition class.
        /// </summary>
        public PropertyDefinition() { }

        /// <summary>
        /// Initializes a new instance of the PropertyDefinition class.
        /// </summary>
        /// <param name="fieldName">Name of the property.</param>
        /// <param name="fieldType">Type of the property.</param>
        /// <param name="arrayValueSeparator">Array value separator for
        /// properties with isArray set.</param>
        /// <param name="enumValidValues">Describes valid values for an enum
        /// property.</param>
        /// <param name="isArray">Indicates if the property is actually an
        /// array of the fieldType above on the data api.</param>
        /// <param name="isEnum">Indicates if the property is an enum.</param>
        /// <param name="isFlagEnum">Indicates if the property is an flag
        /// enum.</param>
        /// <param name="isImage">Whether the property is an Image.</param>
        /// <param name="isLocalizedString">Whether the property is a localized
        /// string.</param>
        /// <param name="isName">Whether the property is a name or a part of
        /// name.</param>
        /// <param name="isRequired">Whether property value is required on
        /// instances, IsRequired field only for Intercation. Profile Instance
        /// will not check for required field.</param>
        /// <param name="propertyId">The ID associated with the
        /// property.</param>
        /// <param name="schemaItemPropLink">URL encoded schema.org item prop
        /// link for the property.</param>
        public PropertyDefinition(string fieldName, string fieldType, string arrayValueSeparator = default(string), IList<ProfileEnumValidValuesFormat> enumValidValues = default(IList<ProfileEnumValidValuesFormat>), bool? isArray = default(bool?), bool? isEnum = default(bool?), bool? isFlagEnum = default(bool?), bool? isImage = default(bool?), bool? isLocalizedString = default(bool?), bool? isName = default(bool?), bool? isRequired = default(bool?), string propertyId = default(string), string schemaItemPropLink = default(string))
        {
            ArrayValueSeparator = arrayValueSeparator;
            EnumValidValues = enumValidValues;
            FieldName = fieldName;
            FieldType = fieldType;
            IsArray = isArray;
            IsEnum = isEnum;
            IsFlagEnum = isFlagEnum;
            IsImage = isImage;
            IsLocalizedString = isLocalizedString;
            IsName = isName;
            IsRequired = isRequired;
            PropertyId = propertyId;
            SchemaItemPropLink = schemaItemPropLink;
        }

        /// <summary>
        /// Gets or sets array value separator for properties with isArray set.
        /// </summary>
        [JsonProperty(PropertyName = "arrayValueSeparator")]
        public string ArrayValueSeparator { get; set; }

        /// <summary>
        /// Gets or sets describes valid values for an enum property.
        /// </summary>
        [JsonProperty(PropertyName = "enumValidValues")]
        public IList<ProfileEnumValidValuesFormat> EnumValidValues { get; set; }

        /// <summary>
        /// Gets or sets name of the property.
        /// </summary>
        [JsonProperty(PropertyName = "fieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// Gets or sets type of the property.
        /// </summary>
        [JsonProperty(PropertyName = "fieldType")]
        public string FieldType { get; set; }

        /// <summary>
        /// Gets or sets indicates if the property is actually an array of the
        /// fieldType above on the data api.
        /// </summary>
        [JsonProperty(PropertyName = "isArray")]
        public bool? IsArray { get; set; }

        /// <summary>
        /// Gets or sets indicates if the property is an enum.
        /// </summary>
        [JsonProperty(PropertyName = "isEnum")]
        public bool? IsEnum { get; set; }

        /// <summary>
        /// Gets or sets indicates if the property is an flag enum.
        /// </summary>
        [JsonProperty(PropertyName = "isFlagEnum")]
        public bool? IsFlagEnum { get; set; }

        /// <summary>
        /// Gets or sets whether the property is an Image.
        /// </summary>
        [JsonProperty(PropertyName = "isImage")]
        public bool? IsImage { get; set; }

        /// <summary>
        /// Gets or sets whether the property is a localized string.
        /// </summary>
        [JsonProperty(PropertyName = "isLocalizedString")]
        public bool? IsLocalizedString { get; set; }

        /// <summary>
        /// Gets or sets whether the property is a name or a part of name.
        /// </summary>
        [JsonProperty(PropertyName = "isName")]
        public bool? IsName { get; set; }

        /// <summary>
        /// Gets or sets whether property value is required on instances,
        /// IsRequired field only for Intercation. Profile Instance will not
        /// check for required field.
        /// </summary>
        [JsonProperty(PropertyName = "isRequired")]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Gets or sets the ID associated with the property.
        /// </summary>
        [JsonProperty(PropertyName = "propertyId")]
        public string PropertyId { get; set; }

        /// <summary>
        /// Gets or sets URL encoded schema.org item prop link for the
        /// property.
        /// </summary>
        [JsonProperty(PropertyName = "schemaItemPropLink")]
        public string SchemaItemPropLink { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FieldName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FieldName");
            }
            if (FieldType == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FieldType");
            }
        }
    }
}

