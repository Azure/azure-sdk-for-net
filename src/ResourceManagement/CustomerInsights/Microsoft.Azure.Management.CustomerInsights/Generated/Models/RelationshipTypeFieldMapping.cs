// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using Azure;
    using Management;
    using CustomerInsights;
    using Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Map a field of profile to its corresponding StrongId in Related
    /// Profile.
    /// </summary>
    public partial class RelationshipTypeFieldMapping
    {
        /// <summary>
        /// Initializes a new instance of the RelationshipTypeFieldMapping
        /// class.
        /// </summary>
        public RelationshipTypeFieldMapping() { }

        /// <summary>
        /// Initializes a new instance of the RelationshipTypeFieldMapping
        /// class.
        /// </summary>
        /// <param name="profileFieldName">Specifies the fieldName in
        /// profile.</param>
        /// <param name="relatedProfileKeyProperty">Specifies the KeyProperty
        /// (from StrongId) of the related profile.</param>
        public RelationshipTypeFieldMapping(string profileFieldName, string relatedProfileKeyProperty)
        {
            ProfileFieldName = profileFieldName;
            RelatedProfileKeyProperty = relatedProfileKeyProperty;
        }

        /// <summary>
        /// Gets or sets specifies the fieldName in profile.
        /// </summary>
        [JsonProperty(PropertyName = "profileFieldName")]
        public string ProfileFieldName { get; set; }

        /// <summary>
        /// Gets or sets specifies the KeyProperty (from StrongId) of the
        /// related profile.
        /// </summary>
        [JsonProperty(PropertyName = "relatedProfileKeyProperty")]
        public string RelatedProfileKeyProperty { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ProfileFieldName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ProfileFieldName");
            }
            if (RelatedProfileKeyProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RelatedProfileKeyProperty");
            }
        }
    }
}

