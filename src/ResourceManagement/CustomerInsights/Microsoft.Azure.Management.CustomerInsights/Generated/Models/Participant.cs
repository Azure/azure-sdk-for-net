// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a profile type participating in an interaction.
    /// </summary>
    public partial class Participant
    {
        /// <summary>
        /// Initializes a new instance of the Participant class.
        /// </summary>
        public Participant() { }

        /// <summary>
        /// Initializes a new instance of the Participant class.
        /// </summary>
        /// <param name="profileTypeName">Profile type name.</param>
        /// <param name="participantName">Participant name.</param>
        /// <param name="displayName">Localized display name.</param>
        /// <param name="description">Localized descriptions.</param>
        /// <param name="role">The role that the participant is playing in the
        /// interaction.</param>
        public Participant(string profileTypeName, System.Collections.Generic.IList<ParticipantPropertyReference> participantPropertyReferences, string participantName, System.Collections.Generic.IDictionary<string, string> displayName = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> description = default(System.Collections.Generic.IDictionary<string, string>), string role = default(string))
        {
            ProfileTypeName = profileTypeName;
            ParticipantPropertyReferences = participantPropertyReferences;
            ParticipantName = participantName;
            DisplayName = displayName;
            Description = description;
            Role = role;
        }

        /// <summary>
        /// Gets or sets profile type name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "profileTypeName")]
        public string ProfileTypeName { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "participantPropertyReferences")]
        public System.Collections.Generic.IList<ParticipantPropertyReference> ParticipantPropertyReferences { get; set; }

        /// <summary>
        /// Gets or sets participant name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "participantName")]
        public string ParticipantName { get; set; }

        /// <summary>
        /// Gets or sets localized display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public System.Collections.Generic.IDictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Gets or sets localized descriptions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public System.Collections.Generic.IDictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or sets the role that the participant is playing in the
        /// interaction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ProfileTypeName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProfileTypeName");
            }
            if (ParticipantPropertyReferences == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ParticipantPropertyReferences");
            }
            if (ParticipantName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ParticipantName");
            }
            if (this.ParticipantPropertyReferences != null)
            {
                foreach (var element in this.ParticipantPropertyReferences)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
