// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using System.Linq;

    /// <summary>
    /// The link resource format.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class LinkResourceFormat : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the LinkResourceFormat class.
        /// </summary>
        public LinkResourceFormat() { }

        /// <summary>
        /// Initializes a new instance of the LinkResourceFormat class.
        /// </summary>
        /// <param name="sourceInteractionType">Name of the source Interaction
        /// Type.</param>
        /// <param name="targetProfileType">Name of the target Profile
        /// Type.</param>
        /// <param name="participantPropertyReferences">The properties that
        /// represent the participating profile.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tenantId">The hub name.</param>
        /// <param name="linkName">The link name.</param>
        /// <param name="displayName">Localized display name for the
        /// Link.</param>
        /// <param name="description">Localized descriptions for the
        /// Link.</param>
        /// <param name="mappings">The set of properties mappings between the
        /// source and target Types.</param>
        /// <param name="provisioningState">Provisioning state.</param>
        /// <param name="referenceOnly">Indicating whether the link is
        /// reference only link. This flag is ingored if the Mappings are
        /// defined. If the mappings are not defined and it is set to true,
        /// links processing will not create or update profiles.</param>
        public LinkResourceFormat(string sourceInteractionType, string targetProfileType, System.Collections.Generic.IList<ParticipantPropertyReference> participantPropertyReferences, string id = default(string), string name = default(string), string type = default(string), string tenantId = default(string), string linkName = default(string), System.Collections.Generic.IDictionary<string, string> displayName = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> description = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<TypePropertiesMapping> mappings = default(System.Collections.Generic.IList<TypePropertiesMapping>), string provisioningState = default(string), bool? referenceOnly = default(bool?))
            : base(id, name, type)
        {
            TenantId = tenantId;
            LinkName = linkName;
            SourceInteractionType = sourceInteractionType;
            TargetProfileType = targetProfileType;
            DisplayName = displayName;
            Description = description;
            Mappings = mappings;
            ParticipantPropertyReferences = participantPropertyReferences;
            ProvisioningState = provisioningState;
            ReferenceOnly = referenceOnly;
        }

        /// <summary>
        /// Gets the hub name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Gets the link name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.linkName")]
        public string LinkName { get; private set; }

        /// <summary>
        /// Gets or sets name of the source Interaction Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceInteractionType")]
        public string SourceInteractionType { get; set; }

        /// <summary>
        /// Gets or sets name of the target Profile Type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetProfileType")]
        public string TargetProfileType { get; set; }

        /// <summary>
        /// Gets or sets localized display name for the Link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public System.Collections.Generic.IDictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Gets or sets localized descriptions for the Link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public System.Collections.Generic.IDictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or sets the set of properties mappings between the source and
        /// target Types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.mappings")]
        public System.Collections.Generic.IList<TypePropertiesMapping> Mappings { get; set; }

        /// <summary>
        /// Gets or sets the properties that represent the participating
        /// profile.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.participantPropertyReferences")]
        public System.Collections.Generic.IList<ParticipantPropertyReference> ParticipantPropertyReferences { get; set; }

        /// <summary>
        /// Gets provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets indicating whether the link is reference only link.
        /// This flag is ingored if the Mappings are defined. If the mappings
        /// are not defined and it is set to true, links processing will not
        /// create or update profiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.referenceOnly")]
        public bool? ReferenceOnly { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (SourceInteractionType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceInteractionType");
            }
            if (TargetProfileType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetProfileType");
            }
            if (ParticipantPropertyReferences == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ParticipantPropertyReferences");
            }
            if (this.Mappings != null)
            {
                foreach (var element in this.Mappings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ParticipantPropertyReferences != null)
            {
                foreach (var element1 in this.ParticipantPropertyReferences)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
        }
    }
}
