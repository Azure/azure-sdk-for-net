// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using Azure;
    using Management;
    using CustomerInsights;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Connector mapping property availability.
    /// </summary>
    public partial class ConnectorMappingAvailability
    {
        /// <summary>
        /// Initializes a new instance of the ConnectorMappingAvailability
        /// class.
        /// </summary>
        public ConnectorMappingAvailability() { }

        /// <summary>
        /// Initializes a new instance of the ConnectorMappingAvailability
        /// class.
        /// </summary>
        /// <param name="interval">The interval of the given frequency to
        /// use.</param>
        /// <param name="frequency">The frequency to update. Possible values
        /// include: 'Minute', 'Hour', 'Day', 'Week', 'Month'</param>
        public ConnectorMappingAvailability(int interval, FrequencyTypes? frequency = default(FrequencyTypes?))
        {
            Frequency = frequency;
            Interval = interval;
        }

        /// <summary>
        /// Gets or sets the frequency to update. Possible values include:
        /// 'Minute', 'Hour', 'Day', 'Week', 'Month'
        /// </summary>
        [JsonProperty(PropertyName = "frequency")]
        public FrequencyTypes? Frequency { get; set; }

        /// <summary>
        /// Gets or sets the interval of the given frequency to use.
        /// </summary>
        [JsonProperty(PropertyName = "interval")]
        public int Interval { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
        }
    }
}

