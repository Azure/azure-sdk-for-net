// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using System.Linq;

    /// <summary>
    /// The relationship link resource format.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RelationshipLinkResourceFormat : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the RelationshipLinkResourceFormat
        /// class.
        /// </summary>
        public RelationshipLinkResourceFormat() { }

        /// <summary>
        /// Initializes a new instance of the RelationshipLinkResourceFormat
        /// class.
        /// </summary>
        /// <param name="interactionType">The InteractionType associated with
        /// the Relationship Link.</param>
        /// <param name="profilePropertyReferences">The property references
        /// for the Profile of the Relationship.</param>
        /// <param name="relatedProfilePropertyReferences">The property
        /// references for the Related Profile of the Relationship.</param>
        /// <param name="relationshipName">The Relationship associated with
        /// the Link.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="displayName">Localized display name for the
        /// Relationship Link.</param>
        /// <param name="description">Localized descriptions for the
        /// Relationship Link.</param>
        /// <param name="linkName">The name of the Relationship Link.</param>
        /// <param name="mappings">The mappings between Interaction and
        /// Relationship fields.</param>
        /// <param name="provisioningState">Provisioning state.</param>
        /// <param name="relationshipGuidId">The relationship guid id.</param>
        /// <param name="tenantId">The hub name.</param>
        public RelationshipLinkResourceFormat(string interactionType, System.Collections.Generic.IList<ParticipantPropertyReference> profilePropertyReferences, System.Collections.Generic.IList<ParticipantPropertyReference> relatedProfilePropertyReferences, string relationshipName, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> displayName = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> description = default(System.Collections.Generic.IDictionary<string, string>), string linkName = default(string), System.Collections.Generic.IList<RelationshipLinkFieldMapping> mappings = default(System.Collections.Generic.IList<RelationshipLinkFieldMapping>), string provisioningState = default(string), string relationshipGuidId = default(string), string tenantId = default(string))
            : base(id, name, type)
        {
            DisplayName = displayName;
            Description = description;
            InteractionType = interactionType;
            LinkName = linkName;
            Mappings = mappings;
            ProfilePropertyReferences = profilePropertyReferences;
            ProvisioningState = provisioningState;
            RelatedProfilePropertyReferences = relatedProfilePropertyReferences;
            RelationshipName = relationshipName;
            RelationshipGuidId = relationshipGuidId;
            TenantId = tenantId;
        }

        /// <summary>
        /// Gets or sets localized display name for the Relationship Link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public System.Collections.Generic.IDictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Gets or sets localized descriptions for the Relationship Link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public System.Collections.Generic.IDictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or sets the InteractionType associated with the Relationship
        /// Link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.interactionType")]
        public string InteractionType { get; set; }

        /// <summary>
        /// Gets the name of the Relationship Link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.linkName")]
        public string LinkName { get; private set; }

        /// <summary>
        /// Gets or sets the mappings between Interaction and Relationship
        /// fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.mappings")]
        public System.Collections.Generic.IList<RelationshipLinkFieldMapping> Mappings { get; set; }

        /// <summary>
        /// Gets or sets the property references for the Profile of the
        /// Relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.profilePropertyReferences")]
        public System.Collections.Generic.IList<ParticipantPropertyReference> ProfilePropertyReferences { get; set; }

        /// <summary>
        /// Gets provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the property references for the Related Profile of
        /// the Relationship.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.relatedProfilePropertyReferences")]
        public System.Collections.Generic.IList<ParticipantPropertyReference> RelatedProfilePropertyReferences { get; set; }

        /// <summary>
        /// Gets or sets the Relationship associated with the Link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.relationshipName")]
        public string RelationshipName { get; set; }

        /// <summary>
        /// Gets the relationship guid id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.relationshipGuidId")]
        public string RelationshipGuidId { get; private set; }

        /// <summary>
        /// Gets the hub name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (InteractionType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "InteractionType");
            }
            if (ProfilePropertyReferences == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ProfilePropertyReferences");
            }
            if (RelatedProfilePropertyReferences == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RelatedProfilePropertyReferences");
            }
            if (RelationshipName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RelationshipName");
            }
            if (this.Mappings != null)
            {
                foreach (var element in this.Mappings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ProfilePropertyReferences != null)
            {
                foreach (var element1 in this.ProfilePropertyReferences)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.RelatedProfilePropertyReferences != null)
            {
                foreach (var element2 in this.RelatedProfilePropertyReferences)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
