// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights.Models
{
    using System.Linq;

    /// <summary>
    /// The KPI resource format.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class KpiResourceFormat : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the KpiResourceFormat class.
        /// </summary>
        public KpiResourceFormat() { }

        /// <summary>
        /// Initializes a new instance of the KpiResourceFormat class.
        /// </summary>
        /// <param name="entityType">The mapping entity type. Possible values
        /// include: 'None', 'Profile', 'Interaction', 'Relationship'</param>
        /// <param name="entityTypeName">The mapping entity name.</param>
        /// <param name="calculationWindow">The calculation window. Possible
        /// values include: 'Hour', 'Day', 'Week', 'Month'</param>
        /// <param name="function">The computation function for the KPI.
        /// Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last',
        /// 'Count', 'None'</param>
        /// <param name="expression">The computation expression for the
        /// KPI.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="tenantId">The hub name.</param>
        /// <param name="kpiName">The KPI name.</param>
        /// <param name="displayName">Localized display name for the
        /// KPI.</param>
        /// <param name="description">Localized description for the
        /// KPI.</param>
        /// <param name="unit">The unit of measurement for the KPI.</param>
        /// <param name="filter">The filter expression for the KPI.</param>
        /// <param name="groupBy">the group by properties for the KPI.</param>
        /// <param name="groupByMetadata">The KPI GroupByMetadata.</param>
        /// <param name="participantProfilesMetadata">The participant
        /// profiles.</param>
        /// <param name="provisioningState">The provisioning state.</param>
        /// <param name="thresHolds">The KPI thresholds.</param>
        /// <param name="aliases">The aliases.</param>
        /// <param name="extracts">The KPI extracts.</param>
        public KpiResourceFormat(EntityTypes? entityType, string entityTypeName, CalculationWindowTypes calculationWindow, KpiFunctions function, string expression, string id = default(string), string name = default(string), string type = default(string), string tenantId = default(string), string kpiName = default(string), System.Collections.Generic.IDictionary<string, string> displayName = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IDictionary<string, string> description = default(System.Collections.Generic.IDictionary<string, string>), string unit = default(string), string filter = default(string), System.Collections.Generic.IList<string> groupBy = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<KpiGroupByMetadata> groupByMetadata = default(System.Collections.Generic.IList<KpiGroupByMetadata>), System.Collections.Generic.IList<KpiParticipantProfilesMetadata> participantProfilesMetadata = default(System.Collections.Generic.IList<KpiParticipantProfilesMetadata>), string provisioningState = default(string), KpiThresholds thresHolds = default(KpiThresholds), System.Collections.Generic.IList<KpiAlias> aliases = default(System.Collections.Generic.IList<KpiAlias>), System.Collections.Generic.IList<KpiExtract> extracts = default(System.Collections.Generic.IList<KpiExtract>))
            : base(id, name, type)
        {
            EntityType = entityType;
            EntityTypeName = entityTypeName;
            TenantId = tenantId;
            KpiName = kpiName;
            DisplayName = displayName;
            Description = description;
            CalculationWindow = calculationWindow;
            Function = function;
            Expression = expression;
            Unit = unit;
            Filter = filter;
            GroupBy = groupBy;
            GroupByMetadata = groupByMetadata;
            ParticipantProfilesMetadata = participantProfilesMetadata;
            ProvisioningState = provisioningState;
            ThresHolds = thresHolds;
            Aliases = aliases;
            Extracts = extracts;
        }

        /// <summary>
        /// Gets or sets the mapping entity type. Possible values include:
        /// 'None', 'Profile', 'Interaction', 'Relationship'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.entityType")]
        public EntityTypes? EntityType { get; set; }

        /// <summary>
        /// Gets or sets the mapping entity name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.entityTypeName")]
        public string EntityTypeName { get; set; }

        /// <summary>
        /// Gets the hub name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tenantId")]
        public string TenantId { get; private set; }

        /// <summary>
        /// Gets the KPI name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.kpiName")]
        public string KpiName { get; private set; }

        /// <summary>
        /// Gets or sets localized display name for the KPI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public System.Collections.Generic.IDictionary<string, string> DisplayName { get; set; }

        /// <summary>
        /// Gets or sets localized description for the KPI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public System.Collections.Generic.IDictionary<string, string> Description { get; set; }

        /// <summary>
        /// Gets or sets the calculation window. Possible values include:
        /// 'Hour', 'Day', 'Week', 'Month'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.calculationWindow")]
        public CalculationWindowTypes CalculationWindow { get; set; }

        /// <summary>
        /// Gets or sets the computation function for the KPI. Possible values
        /// include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count', 'None'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.function")]
        public KpiFunctions Function { get; set; }

        /// <summary>
        /// Gets or sets the computation expression for the KPI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.expression")]
        public string Expression { get; set; }

        /// <summary>
        /// Gets or sets the unit of measurement for the KPI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.unit")]
        public string Unit { get; set; }

        /// <summary>
        /// Gets or sets the filter expression for the KPI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.filter")]
        public string Filter { get; set; }

        /// <summary>
        /// Gets or sets the group by properties for the KPI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.groupBy")]
        public System.Collections.Generic.IList<string> GroupBy { get; set; }

        /// <summary>
        /// Gets the KPI GroupByMetadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.groupByMetadata")]
        public System.Collections.Generic.IList<KpiGroupByMetadata> GroupByMetadata { get; private set; }

        /// <summary>
        /// Gets the participant profiles.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.participantProfilesMetadata")]
        public System.Collections.Generic.IList<KpiParticipantProfilesMetadata> ParticipantProfilesMetadata { get; private set; }

        /// <summary>
        /// Gets the provisioning state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets the KPI thresholds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.thresHolds")]
        public KpiThresholds ThresHolds { get; set; }

        /// <summary>
        /// Gets or sets the aliases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.aliases")]
        public System.Collections.Generic.IList<KpiAlias> Aliases { get; set; }

        /// <summary>
        /// Gets or sets the KPI extracts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.extracts")]
        public System.Collections.Generic.IList<KpiExtract> Extracts { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EntityTypeName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "EntityTypeName");
            }
            if (Expression == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Expression");
            }
            if (this.ParticipantProfilesMetadata != null)
            {
                foreach (var element in this.ParticipantProfilesMetadata)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ThresHolds != null)
            {
                this.ThresHolds.Validate();
            }
            if (this.Aliases != null)
            {
                foreach (var element1 in this.Aliases)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (this.Extracts != null)
            {
                foreach (var element2 in this.Extracts)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
