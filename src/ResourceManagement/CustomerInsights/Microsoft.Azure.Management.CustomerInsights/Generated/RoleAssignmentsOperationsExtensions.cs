// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights
{
    using Azure;
    using Management;
    using Rest;
    using Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for RoleAssignmentsOperations.
    /// </summary>
    public static partial class RoleAssignmentsOperationsExtensions
    {
            /// <summary>
            /// Gets all the role assignments for the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            public static IPage<RoleAssignmentResourceFormat> ListByHub(this IRoleAssignmentsOperations operations, string resourceGroupName, string hubName)
            {
                return operations.ListByHubAsync(resourceGroupName, hubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the role assignments for the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignmentResourceFormat>> ListByHubAsync(this IRoleAssignmentsOperations operations, string resourceGroupName, string hubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByHubWithHttpMessagesAsync(resourceGroupName, hubName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a role assignment in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='assignmentName'>
            /// The assignment name
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate RoleAssignment operation.
            /// </param>
            public static RoleAssignmentResourceFormat CreateOrUpdate(this IRoleAssignmentsOperations operations, string resourceGroupName, string hubName, string assignmentName, RoleAssignmentResourceFormat parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, hubName, assignmentName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a role assignment in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='assignmentName'>
            /// The assignment name
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate RoleAssignment operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignmentResourceFormat> CreateOrUpdateAsync(this IRoleAssignmentsOperations operations, string resourceGroupName, string hubName, string assignmentName, RoleAssignmentResourceFormat parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, hubName, assignmentName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the role assignment in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='assignmentName'>
            /// The name of the role assignment.
            /// </param>
            public static RoleAssignmentResourceFormat Get(this IRoleAssignmentsOperations operations, string resourceGroupName, string hubName, string assignmentName)
            {
                return operations.GetAsync(resourceGroupName, hubName, assignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the role assignment in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='assignmentName'>
            /// The name of the role assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignmentResourceFormat> GetAsync(this IRoleAssignmentsOperations operations, string resourceGroupName, string hubName, string assignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, hubName, assignmentName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the role assignment in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='assignmentName'>
            /// The name of the role assignment.
            /// </param>
            public static void Delete(this IRoleAssignmentsOperations operations, string resourceGroupName, string hubName, string assignmentName)
            {
                operations.DeleteAsync(resourceGroupName, hubName, assignmentName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the role assignment in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='assignmentName'>
            /// The name of the role assignment.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IRoleAssignmentsOperations operations, string resourceGroupName, string hubName, string assignmentName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, hubName, assignmentName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Creates or updates a role assignment in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='assignmentName'>
            /// The assignment name
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate RoleAssignment operation.
            /// </param>
            public static RoleAssignmentResourceFormat BeginCreateOrUpdate(this IRoleAssignmentsOperations operations, string resourceGroupName, string hubName, string assignmentName, RoleAssignmentResourceFormat parameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, hubName, assignmentName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a role assignment in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='assignmentName'>
            /// The assignment name
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate RoleAssignment operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RoleAssignmentResourceFormat> BeginCreateOrUpdateAsync(this IRoleAssignmentsOperations operations, string resourceGroupName, string hubName, string assignmentName, RoleAssignmentResourceFormat parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, hubName, assignmentName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the role assignments for the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<RoleAssignmentResourceFormat> ListByHubNext(this IRoleAssignmentsOperations operations, string nextPageLink)
            {
                return operations.ListByHubNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the role assignments for the specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<RoleAssignmentResourceFormat>> ListByHubNextAsync(this IRoleAssignmentsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByHubNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

