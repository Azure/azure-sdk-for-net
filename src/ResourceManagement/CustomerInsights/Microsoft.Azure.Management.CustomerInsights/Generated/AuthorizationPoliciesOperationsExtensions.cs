// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights
{
    using Azure;
    using Management;
    using Rest;
    using Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for AuthorizationPoliciesOperations.
    /// </summary>
    public static partial class AuthorizationPoliciesOperationsExtensions
    {
            /// <summary>
            /// Creates an authorization policy or updates an existing authorization
            /// policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='authorizationPolicyName'>
            /// The name of the policy.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate authorization policy operation.
            /// </param>
            public static AuthorizationPolicyResourceFormat CreateOrUpdate(this IAuthorizationPoliciesOperations operations, string resourceGroupName, string hubName, string authorizationPolicyName, AuthorizationPolicyResourceFormat parameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, hubName, authorizationPolicyName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an authorization policy or updates an existing authorization
            /// policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='authorizationPolicyName'>
            /// The name of the policy.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate authorization policy operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthorizationPolicyResourceFormat> CreateOrUpdateAsync(this IAuthorizationPoliciesOperations operations, string resourceGroupName, string hubName, string authorizationPolicyName, AuthorizationPolicyResourceFormat parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, hubName, authorizationPolicyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets an authorization policy in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='authorizationPolicyName'>
            /// The name of the policy.
            /// </param>
            public static AuthorizationPolicyResourceFormat Get(this IAuthorizationPoliciesOperations operations, string resourceGroupName, string hubName, string authorizationPolicyName)
            {
                return operations.GetAsync(resourceGroupName, hubName, authorizationPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets an authorization policy in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='authorizationPolicyName'>
            /// The name of the policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthorizationPolicyResourceFormat> GetAsync(this IAuthorizationPoliciesOperations operations, string resourceGroupName, string hubName, string authorizationPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, hubName, authorizationPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the authorization policies in a specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            public static IPage<AuthorizationPolicyResourceFormat> ListByHub(this IAuthorizationPoliciesOperations operations, string resourceGroupName, string hubName)
            {
                return operations.ListByHubAsync(resourceGroupName, hubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the authorization policies in a specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AuthorizationPolicyResourceFormat>> ListByHubAsync(this IAuthorizationPoliciesOperations operations, string resourceGroupName, string hubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByHubWithHttpMessagesAsync(resourceGroupName, hubName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerates the primary policy key of the specified authorization policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='authorizationPolicyName'>
            /// The name of the policy.
            /// </param>
            public static AuthorizationPolicy RegeneratePrimaryKey(this IAuthorizationPoliciesOperations operations, string resourceGroupName, string hubName, string authorizationPolicyName)
            {
                return operations.RegeneratePrimaryKeyAsync(resourceGroupName, hubName, authorizationPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerates the primary policy key of the specified authorization policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='authorizationPolicyName'>
            /// The name of the policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthorizationPolicy> RegeneratePrimaryKeyAsync(this IAuthorizationPoliciesOperations operations, string resourceGroupName, string hubName, string authorizationPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegeneratePrimaryKeyWithHttpMessagesAsync(resourceGroupName, hubName, authorizationPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Regenerates the secondary policy key of the specified authorization policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='authorizationPolicyName'>
            /// The name of the policy.
            /// </param>
            public static AuthorizationPolicy RegenerateSecondaryKey(this IAuthorizationPoliciesOperations operations, string resourceGroupName, string hubName, string authorizationPolicyName)
            {
                return operations.RegenerateSecondaryKeyAsync(resourceGroupName, hubName, authorizationPolicyName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Regenerates the secondary policy key of the specified authorization policy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='authorizationPolicyName'>
            /// The name of the policy.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AuthorizationPolicy> RegenerateSecondaryKeyAsync(this IAuthorizationPoliciesOperations operations, string resourceGroupName, string hubName, string authorizationPolicyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateSecondaryKeyWithHttpMessagesAsync(resourceGroupName, hubName, authorizationPolicyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the authorization policies in a specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AuthorizationPolicyResourceFormat> ListByHubNext(this IAuthorizationPoliciesOperations operations, string nextPageLink)
            {
                return operations.ListByHubNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the authorization policies in a specified hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AuthorizationPolicyResourceFormat>> ListByHubNextAsync(this IAuthorizationPoliciesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByHubNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

