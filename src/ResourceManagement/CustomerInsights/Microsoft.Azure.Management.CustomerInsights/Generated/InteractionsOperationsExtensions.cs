// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.CustomerInsights
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for InteractionsOperations.
    /// </summary>
    public static partial class InteractionsOperationsExtensions
    {
            /// <summary>
            /// Creates an interaction or updates an existing interaction within a hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='interactionName'>
            /// The name of the interaction.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate Interaction operation.
            /// </param>
            public static InteractionResourceFormat CreateOrUpdate(this IInteractionsOperations operations, string resourceGroupName, string hubName, string interactionName, InteractionResourceFormat parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IInteractionsOperations)s).CreateOrUpdateAsync(resourceGroupName, hubName, interactionName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an interaction or updates an existing interaction within a hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='interactionName'>
            /// The name of the interaction.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate Interaction operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<InteractionResourceFormat> CreateOrUpdateAsync(this IInteractionsOperations operations, string resourceGroupName, string hubName, string interactionName, InteractionResourceFormat parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, hubName, interactionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates an interaction or updates an existing interaction within a hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='interactionName'>
            /// The name of the interaction.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate Interaction operation.
            /// </param>
            public static InteractionResourceFormat BeginCreateOrUpdate(this IInteractionsOperations operations, string resourceGroupName, string hubName, string interactionName, InteractionResourceFormat parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IInteractionsOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, hubName, interactionName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates an interaction or updates an existing interaction within a hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='interactionName'>
            /// The name of the interaction.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate Interaction operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<InteractionResourceFormat> BeginCreateOrUpdateAsync(this IInteractionsOperations operations, string resourceGroupName, string hubName, string interactionName, InteractionResourceFormat parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, hubName, interactionName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about the specified interaction.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='interactionName'>
            /// The name of the interaction.
            /// </param>
            /// <param name='localeCode'>
            /// Locale of interaction to retrieve, default is en-us.
            /// </param>
            public static InteractionResourceFormat Get(this IInteractionsOperations operations, string resourceGroupName, string hubName, string interactionName, string localeCode = "en-us")
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IInteractionsOperations)s).GetAsync(resourceGroupName, hubName, interactionName, localeCode), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about the specified interaction.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='interactionName'>
            /// The name of the interaction.
            /// </param>
            /// <param name='localeCode'>
            /// Locale of interaction to retrieve, default is en-us.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<InteractionResourceFormat> GetAsync(this IInteractionsOperations operations, string resourceGroupName, string hubName, string interactionName, string localeCode = "en-us", System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, hubName, interactionName, localeCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all interactions in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='localeCode'>
            /// Locale of interaction to retrieve, default is en-us.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<InteractionResourceFormat> ListByHub(this IInteractionsOperations operations, string resourceGroupName, string hubName, string localeCode = "en-us")
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IInteractionsOperations)s).ListByHubAsync(resourceGroupName, hubName, localeCode), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all interactions in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='hubName'>
            /// The name of the hub.
            /// </param>
            /// <param name='localeCode'>
            /// Locale of interaction to retrieve, default is en-us.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<InteractionResourceFormat>> ListByHubAsync(this IInteractionsOperations operations, string resourceGroupName, string hubName, string localeCode = "en-us", System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByHubWithHttpMessagesAsync(resourceGroupName, hubName, localeCode, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all interactions in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<InteractionResourceFormat> ListByHubNext(this IInteractionsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IInteractionsOperations)s).ListByHubNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all interactions in the hub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<InteractionResourceFormat>> ListByHubNextAsync(this IInteractionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByHubNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
