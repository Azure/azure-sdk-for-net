// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Sql
{
    /// <summary>
    /// Represents all the operations for Azure SQL Data Sync. Contains
    /// operations to: Create, Retrieve, Update, and Delete sync groups, sync
    /// members and sync agents, and also includes the ability to get the
    /// synchronization logs.
    /// </summary>
    internal partial class DataSyncOperations : IServiceOperations<SqlManagementClient>, IDataSyncOperations
    {
        /// <summary>
        /// Initializes a new instance of the DataSyncOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal DataSyncOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Begin creating a new sync group. To determine the status of the
        /// operation, call GetCreateOrUpdateSyncAgentOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating the sync agent.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync agent.
        /// </returns>
        public async Task<SyncAgentCreateOrUpdateResponse> BeginCreateOrUpdateSyncAgentAsync(string resourceGroupName, string serverName, string syncAgentName, SyncAgentCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (syncAgentName == null)
            {
                throw new ArgumentNullException("syncAgentName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("syncAgentName", syncAgentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateSyncAgentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/syncAgents/";
            url = url + Uri.EscapeDataString(syncAgentName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject syncAgentCreateOrUpdateParametersValue = new JObject();
                requestDoc = syncAgentCreateOrUpdateParametersValue;
                
                if (parameters.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    syncAgentCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Properties.SyncDatabaseId != null)
                    {
                        propertiesValue["syncDatabaseId"] = parameters.Properties.SyncDatabaseId;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncAgentCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncAgentCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            SyncAgent syncAgentInstance = new SyncAgent();
                            result.SyncAgent = syncAgentInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                SyncAgentProperties propertiesInstance = new SyncAgentProperties();
                                syncAgentInstance.Properties = propertiesInstance;
                                
                                JToken syncDatabaseIdValue = propertiesValue2["syncDatabaseId"];
                                if (syncDatabaseIdValue != null && syncDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string syncDatabaseIdInstance = ((string)syncDatabaseIdValue);
                                    propertiesInstance.SyncDatabaseId = syncDatabaseIdInstance;
                                }
                                
                                JToken lastAliveTimeValue = propertiesValue2["lastAliveTime"];
                                if (lastAliveTimeValue != null && lastAliveTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastAliveTimeInstance = ((DateTime)lastAliveTimeValue);
                                    propertiesInstance.LastAliveTime = lastAliveTimeInstance;
                                }
                                
                                JToken versionValue = propertiesValue2["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken stateValue = propertiesValue2["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    SyncAgentState stateInstance = ((SyncAgentState)Enum.Parse(typeof(SyncAgentState), ((string)stateValue), true));
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken isUpToDateValue = propertiesValue2["isUpToDate"];
                                if (isUpToDateValue != null && isUpToDateValue.Type != JTokenType.Null)
                                {
                                    bool isUpToDateInstance = ((bool)isUpToDateValue);
                                    propertiesInstance.IsUpToDate = isUpToDateInstance;
                                }
                                
                                JToken expiryTimeValue = propertiesValue2["expiryTime"];
                                if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                    propertiesInstance.ExpiryTime = expiryTimeInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncAgentInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncAgentInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncAgentInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncAgentInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncAgentInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Created)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin creating a new sync group. To determine the status of the
        /// operation, call GetCreateOrUpdateSyncGroupOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a data sync group
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public async Task<SyncGroupCreateOrUpdateResponse> BeginCreateOrUpdateSyncGroupAsync(string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.SyncGroupName == null)
            {
                throw new ArgumentNullException("parameters.SyncGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateSyncGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(parameters.SyncGroupName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject syncGroupCreateOrUpdateParametersValue = new JObject();
                requestDoc = syncGroupCreateOrUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                syncGroupCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.Interval != null)
                {
                    propertiesValue["interval"] = parameters.Properties.Interval.Value;
                }
                
                if (parameters.Properties.ConflictResolutionPolicy != null)
                {
                    propertiesValue["conflictResolutionPolicy"] = parameters.Properties.ConflictResolutionPolicy.Value.ToString();
                }
                
                if (parameters.Properties.SyncDatabaseId != null)
                {
                    propertiesValue["syncDatabaseId"] = parameters.Properties.SyncDatabaseId;
                }
                
                if (parameters.Properties.HubDatabaseUserName != null)
                {
                    propertiesValue["hubDatabaseUserName"] = parameters.Properties.HubDatabaseUserName;
                }
                
                if (parameters.Properties.HubDatabasePassword != null)
                {
                    propertiesValue["hubDatabasePassword"] = parameters.Properties.HubDatabasePassword;
                }
                
                if (parameters.Properties.Schema != null)
                {
                    JObject schemaValue = new JObject();
                    propertiesValue["schema"] = schemaValue;
                    
                    if (parameters.Properties.Schema.Tables != null)
                    {
                        if (parameters.Properties.Schema.Tables is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Schema.Tables).IsInitialized)
                        {
                            JArray tablesArray = new JArray();
                            foreach (SyncGroupSchemaTable tablesItem in parameters.Properties.Schema.Tables)
                            {
                                JObject tablesValue = new JObject();
                                tablesArray.Add(tablesValue);
                                
                                if (tablesItem.Columns != null)
                                {
                                    if (tablesItem.Columns is ILazyCollection == false || ((ILazyCollection)tablesItem.Columns).IsInitialized)
                                    {
                                        JArray columnsArray = new JArray();
                                        foreach (SyncGroupSchemaColumn columnsItem in tablesItem.Columns)
                                        {
                                            JObject columnsValue = new JObject();
                                            columnsArray.Add(columnsValue);
                                            
                                            if (columnsItem.QuotedName != null)
                                            {
                                                columnsValue["quotedName"] = columnsItem.QuotedName;
                                            }
                                            
                                            if (columnsItem.DataSize != null)
                                            {
                                                columnsValue["dataSize"] = columnsItem.DataSize;
                                            }
                                            
                                            if (columnsItem.DataType != null)
                                            {
                                                columnsValue["dataType"] = columnsItem.DataType;
                                            }
                                        }
                                        tablesValue["columns"] = columnsArray;
                                    }
                                }
                                
                                if (tablesItem.QuotedName != null)
                                {
                                    tablesValue["quotedName"] = tablesItem.QuotedName;
                                }
                            }
                            schemaValue["tables"] = tablesArray;
                        }
                    }
                    
                    if (parameters.Properties.Schema.MasterSyncMemberName != null)
                    {
                        schemaValue["masterSyncMemberName"] = parameters.Properties.Schema.MasterSyncMemberName;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncGroupCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncGroupCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            SyncGroup syncGroupInstance = new SyncGroup();
                            result.SyncGroup = syncGroupInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                SyncGroupProperties propertiesInstance = new SyncGroupProperties();
                                syncGroupInstance.Properties = propertiesInstance;
                                
                                JToken intervalValue = propertiesValue2["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    int intervalInstance = ((int)intervalValue);
                                    propertiesInstance.Interval = intervalInstance;
                                }
                                
                                JToken syncDatabaseIdValue = propertiesValue2["syncDatabaseId"];
                                if (syncDatabaseIdValue != null && syncDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string syncDatabaseIdInstance = ((string)syncDatabaseIdValue);
                                    propertiesInstance.SyncDatabaseId = syncDatabaseIdInstance;
                                }
                                
                                JToken conflictResolutionPolicyValue = propertiesValue2["conflictResolutionPolicy"];
                                if (conflictResolutionPolicyValue != null && conflictResolutionPolicyValue.Type != JTokenType.Null)
                                {
                                    ConflictResolutionPolicyType conflictResolutionPolicyInstance = ((ConflictResolutionPolicyType)Enum.Parse(typeof(ConflictResolutionPolicyType), ((string)conflictResolutionPolicyValue), true));
                                    propertiesInstance.ConflictResolutionPolicy = conflictResolutionPolicyInstance;
                                }
                                
                                JToken hubDatabaseUserNameValue = propertiesValue2["hubDatabaseUserName"];
                                if (hubDatabaseUserNameValue != null && hubDatabaseUserNameValue.Type != JTokenType.Null)
                                {
                                    string hubDatabaseUserNameInstance = ((string)hubDatabaseUserNameValue);
                                    propertiesInstance.HubDatabaseUserName = hubDatabaseUserNameInstance;
                                }
                                
                                JToken syncStateValue = propertiesValue2["syncState"];
                                if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                {
                                    string syncStateInstance = ((string)syncStateValue);
                                    propertiesInstance.SyncState = syncStateInstance;
                                }
                                
                                JToken lastSyncTimeValue = propertiesValue2["lastSyncTime"];
                                if (lastSyncTimeValue != null && lastSyncTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSyncTimeInstance = ((DateTime)lastSyncTimeValue);
                                    propertiesInstance.LastSyncTime = lastSyncTimeInstance;
                                }
                                
                                JToken schemaValue2 = propertiesValue2["schema"];
                                if (schemaValue2 != null && schemaValue2.Type != JTokenType.Null)
                                {
                                    SyncGroupSchema schemaInstance = new SyncGroupSchema();
                                    propertiesInstance.Schema = schemaInstance;
                                    
                                    JToken tablesArray2 = schemaValue2["tables"];
                                    if (tablesArray2 != null && tablesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tablesValue2 in ((JArray)tablesArray2))
                                        {
                                            SyncGroupSchemaTable tablesInstance = new SyncGroupSchemaTable();
                                            schemaInstance.Tables.Add(tablesInstance);
                                            
                                            JToken columnsArray2 = tablesValue2["columns"];
                                            if (columnsArray2 != null && columnsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken columnsValue2 in ((JArray)columnsArray2))
                                                {
                                                    SyncGroupSchemaColumn columnsInstance = new SyncGroupSchemaColumn();
                                                    tablesInstance.Columns.Add(columnsInstance);
                                                    
                                                    JToken quotedNameValue = columnsValue2["quotedName"];
                                                    if (quotedNameValue != null && quotedNameValue.Type != JTokenType.Null)
                                                    {
                                                        string quotedNameInstance = ((string)quotedNameValue);
                                                        columnsInstance.QuotedName = quotedNameInstance;
                                                    }
                                                    
                                                    JToken dataSizeValue = columnsValue2["dataSize"];
                                                    if (dataSizeValue != null && dataSizeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataSizeInstance = ((string)dataSizeValue);
                                                        columnsInstance.DataSize = dataSizeInstance;
                                                    }
                                                    
                                                    JToken dataTypeValue = columnsValue2["dataType"];
                                                    if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataTypeInstance = ((string)dataTypeValue);
                                                        columnsInstance.DataType = dataTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken quotedNameValue2 = tablesValue2["quotedName"];
                                            if (quotedNameValue2 != null && quotedNameValue2.Type != JTokenType.Null)
                                            {
                                                string quotedNameInstance2 = ((string)quotedNameValue2);
                                                tablesInstance.QuotedName = quotedNameInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken masterSyncMemberNameValue = schemaValue2["masterSyncMemberName"];
                                    if (masterSyncMemberNameValue != null && masterSyncMemberNameValue.Type != JTokenType.Null)
                                    {
                                        string masterSyncMemberNameInstance = ((string)masterSyncMemberNameValue);
                                        schemaInstance.MasterSyncMemberName = masterSyncMemberNameInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncGroupInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncGroupInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncGroupInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncGroupInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncGroupInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.Created)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin creating a new sync member. To determine the status of the
        /// operation, call GetCreateOrUpdateSyncMemberOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public async Task<SyncMemberCreateOrUpdateResponse> BeginCreateOrUpdateSyncMemberAsync(string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.SyncGroupName == null)
            {
                throw new ArgumentNullException("parameters.SyncGroupName");
            }
            if (parameters.SyncMemberName == null)
            {
                throw new ArgumentNullException("parameters.SyncMemberName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateSyncMemberAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(parameters.SyncGroupName);
            url = url + "/syncMembers/";
            url = url + Uri.EscapeDataString(parameters.SyncMemberName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject syncMemberCreateOrUpdateParametersValue = new JObject();
                requestDoc = syncMemberCreateOrUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                syncMemberCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.SyncDirection != null)
                {
                    propertiesValue["syncDirection"] = parameters.Properties.SyncDirection.Value.ToString();
                }
                
                if (parameters.Properties.SyncAgentId != null)
                {
                    propertiesValue["syncAgentId"] = parameters.Properties.SyncAgentId;
                }
                
                if (parameters.Properties.SqlServerDatabaseId != null)
                {
                    propertiesValue["sqlServerDatabaseId"] = parameters.Properties.SqlServerDatabaseId;
                }
                
                if (parameters.Properties.ServerName != null)
                {
                    propertiesValue["serverName"] = parameters.Properties.ServerName;
                }
                
                if (parameters.Properties.DatabaseName != null)
                {
                    propertiesValue["databaseName"] = parameters.Properties.DatabaseName;
                }
                
                if (parameters.Properties.UserName != null)
                {
                    propertiesValue["userName"] = parameters.Properties.UserName;
                }
                
                if (parameters.Properties.Password != null)
                {
                    propertiesValue["password"] = parameters.Properties.Password;
                }
                
                if (parameters.Properties.DatabaseType != null)
                {
                    propertiesValue["databaseType"] = parameters.Properties.DatabaseType.Value.ToString();
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncMemberCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncMemberCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            SyncMember syncMemberInstance = new SyncMember();
                            result.SyncMember = syncMemberInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                SyncMemberProperties propertiesInstance = new SyncMemberProperties();
                                syncMemberInstance.Properties = propertiesInstance;
                                
                                JToken syncDirectionValue = propertiesValue2["syncDirection"];
                                if (syncDirectionValue != null && syncDirectionValue.Type != JTokenType.Null)
                                {
                                    SyncDirectionEnum syncDirectionInstance = ((SyncDirectionEnum)Enum.Parse(typeof(SyncDirectionEnum), ((string)syncDirectionValue), true));
                                    propertiesInstance.SyncDirection = syncDirectionInstance;
                                }
                                
                                JToken syncAgentIdValue = propertiesValue2["syncAgentId"];
                                if (syncAgentIdValue != null && syncAgentIdValue.Type != JTokenType.Null)
                                {
                                    string syncAgentIdInstance = ((string)syncAgentIdValue);
                                    propertiesInstance.SyncAgentId = syncAgentIdInstance;
                                }
                                
                                JToken sqlServerDatabaseIdValue = propertiesValue2["sqlServerDatabaseId"];
                                if (sqlServerDatabaseIdValue != null && sqlServerDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string sqlServerDatabaseIdInstance = ((string)sqlServerDatabaseIdValue);
                                    propertiesInstance.SqlServerDatabaseId = sqlServerDatabaseIdInstance;
                                }
                                
                                JToken serverNameValue = propertiesValue2["serverName"];
                                if (serverNameValue != null && serverNameValue.Type != JTokenType.Null)
                                {
                                    string serverNameInstance = ((string)serverNameValue);
                                    propertiesInstance.ServerName = serverNameInstance;
                                }
                                
                                JToken databaseNameValue = propertiesValue2["databaseName"];
                                if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                {
                                    string databaseNameInstance = ((string)databaseNameValue);
                                    propertiesInstance.DatabaseName = databaseNameInstance;
                                }
                                
                                JToken userNameValue = propertiesValue2["userName"];
                                if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                {
                                    string userNameInstance = ((string)userNameValue);
                                    propertiesInstance.UserName = userNameInstance;
                                }
                                
                                JToken databaseTypeValue = propertiesValue2["databaseType"];
                                if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                {
                                    DatabaseTypeEnum databaseTypeInstance = ((DatabaseTypeEnum)Enum.Parse(typeof(DatabaseTypeEnum), ((string)databaseTypeValue), true));
                                    propertiesInstance.DatabaseType = databaseTypeInstance;
                                }
                                
                                JToken syncStateValue = propertiesValue2["syncState"];
                                if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                {
                                    string syncStateInstance = ((string)syncStateValue);
                                    propertiesInstance.SyncState = syncStateInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncMemberInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncMemberInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncMemberInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncMemberInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncMemberInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Created)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin deleting an existing sync agent. To determine the status of
        /// the operation, call GetDeleteSyncAgentOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> BeginDeleteSyncAgentAsync(string resourceGroupName, string serverName, string syncAgentName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (syncAgentName == null)
            {
                throw new ArgumentNullException("syncAgentName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("syncAgentName", syncAgentName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteSyncAgentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/syncAgents/";
            url = url + Uri.EscapeDataString(syncAgentName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSyncOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSyncOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin deleting an existing sync group. To determine the status of
        /// the operation, call GetDeleteSyncGroupOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> BeginDeleteSyncGroupAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException("syncGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("syncGroupName", syncGroupName);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteSyncGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(syncGroupName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSyncOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSyncOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin deleting an existing sync member. To determine the status of
        /// the operation, call GetDeleteSyncMemberOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of deleting a sync member.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> BeginDeleteSyncMemberAsync(string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.SyncGroupName == null)
            {
                throw new ArgumentNullException("parameters.SyncGroupName");
            }
            if (parameters.SyncMemberName == null)
            {
                throw new ArgumentNullException("parameters.SyncMemberName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginDeleteSyncMemberAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(parameters.SyncGroupName);
            url = url + "/syncMembers/";
            url = url + Uri.EscapeDataString(parameters.SyncMemberName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSyncOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSyncOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin starting refreshing the sync schema of a hub database. To
        /// determine the status of the operation, call
        /// GetInvokeSyncHubSchemaRefreshOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies sync group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> BeginInvokeSyncHubSchemaRefreshAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException("syncGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("syncGroupName", syncGroupName);
                TracingAdapter.Enter(invocationId, this, "BeginInvokeSyncHubSchemaRefreshAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(syncGroupName);
            url = url + "/refreshHubSchema";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSyncOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSyncOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin starting refreshing the member database schema of sync
        /// member. To determine the status of the operation, call
        /// GetInvokeSyncMemberSchemaRefreshOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies sync group name and sync member name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> BeginInvokeSyncMemberSchemaRefreshAsync(string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.SyncGroupName == null)
            {
                throw new ArgumentNullException("parameters.SyncGroupName");
            }
            if (parameters.SyncMemberName == null)
            {
                throw new ArgumentNullException("parameters.SyncMemberName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginInvokeSyncMemberSchemaRefreshAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(parameters.SyncGroupName);
            url = url + "/syncMembers/";
            url = url + Uri.EscapeDataString(parameters.SyncMemberName);
            url = url + "/refreshSchema";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSyncOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSyncOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin updating an existing sync group with the specified
        /// parameters. To get the status of this operation, call
        /// GetUpdateSyncGroupOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of updating a sync group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public async Task<SyncGroupCreateOrUpdateResponse> BeginUpdateSyncGroupAsync(string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.SyncGroupName == null)
            {
                throw new ArgumentNullException("parameters.SyncGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateSyncGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(parameters.SyncGroupName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject syncGroupCreateOrUpdateParametersValue = new JObject();
                requestDoc = syncGroupCreateOrUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                syncGroupCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.Interval != null)
                {
                    propertiesValue["interval"] = parameters.Properties.Interval.Value;
                }
                
                if (parameters.Properties.ConflictResolutionPolicy != null)
                {
                    propertiesValue["conflictResolutionPolicy"] = parameters.Properties.ConflictResolutionPolicy.Value.ToString();
                }
                
                if (parameters.Properties.SyncDatabaseId != null)
                {
                    propertiesValue["syncDatabaseId"] = parameters.Properties.SyncDatabaseId;
                }
                
                if (parameters.Properties.HubDatabaseUserName != null)
                {
                    propertiesValue["hubDatabaseUserName"] = parameters.Properties.HubDatabaseUserName;
                }
                
                if (parameters.Properties.HubDatabasePassword != null)
                {
                    propertiesValue["hubDatabasePassword"] = parameters.Properties.HubDatabasePassword;
                }
                
                if (parameters.Properties.Schema != null)
                {
                    JObject schemaValue = new JObject();
                    propertiesValue["schema"] = schemaValue;
                    
                    if (parameters.Properties.Schema.Tables != null)
                    {
                        if (parameters.Properties.Schema.Tables is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Schema.Tables).IsInitialized)
                        {
                            JArray tablesArray = new JArray();
                            foreach (SyncGroupSchemaTable tablesItem in parameters.Properties.Schema.Tables)
                            {
                                JObject tablesValue = new JObject();
                                tablesArray.Add(tablesValue);
                                
                                if (tablesItem.Columns != null)
                                {
                                    if (tablesItem.Columns is ILazyCollection == false || ((ILazyCollection)tablesItem.Columns).IsInitialized)
                                    {
                                        JArray columnsArray = new JArray();
                                        foreach (SyncGroupSchemaColumn columnsItem in tablesItem.Columns)
                                        {
                                            JObject columnsValue = new JObject();
                                            columnsArray.Add(columnsValue);
                                            
                                            if (columnsItem.QuotedName != null)
                                            {
                                                columnsValue["quotedName"] = columnsItem.QuotedName;
                                            }
                                            
                                            if (columnsItem.DataSize != null)
                                            {
                                                columnsValue["dataSize"] = columnsItem.DataSize;
                                            }
                                            
                                            if (columnsItem.DataType != null)
                                            {
                                                columnsValue["dataType"] = columnsItem.DataType;
                                            }
                                        }
                                        tablesValue["columns"] = columnsArray;
                                    }
                                }
                                
                                if (tablesItem.QuotedName != null)
                                {
                                    tablesValue["quotedName"] = tablesItem.QuotedName;
                                }
                            }
                            schemaValue["tables"] = tablesArray;
                        }
                    }
                    
                    if (parameters.Properties.Schema.MasterSyncMemberName != null)
                    {
                        schemaValue["masterSyncMemberName"] = parameters.Properties.Schema.MasterSyncMemberName;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncGroupCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncGroupCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            SyncGroup syncGroupInstance = new SyncGroup();
                            result.SyncGroup = syncGroupInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                SyncGroupProperties propertiesInstance = new SyncGroupProperties();
                                syncGroupInstance.Properties = propertiesInstance;
                                
                                JToken intervalValue = propertiesValue2["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    int intervalInstance = ((int)intervalValue);
                                    propertiesInstance.Interval = intervalInstance;
                                }
                                
                                JToken syncDatabaseIdValue = propertiesValue2["syncDatabaseId"];
                                if (syncDatabaseIdValue != null && syncDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string syncDatabaseIdInstance = ((string)syncDatabaseIdValue);
                                    propertiesInstance.SyncDatabaseId = syncDatabaseIdInstance;
                                }
                                
                                JToken conflictResolutionPolicyValue = propertiesValue2["conflictResolutionPolicy"];
                                if (conflictResolutionPolicyValue != null && conflictResolutionPolicyValue.Type != JTokenType.Null)
                                {
                                    ConflictResolutionPolicyType conflictResolutionPolicyInstance = ((ConflictResolutionPolicyType)Enum.Parse(typeof(ConflictResolutionPolicyType), ((string)conflictResolutionPolicyValue), true));
                                    propertiesInstance.ConflictResolutionPolicy = conflictResolutionPolicyInstance;
                                }
                                
                                JToken hubDatabaseUserNameValue = propertiesValue2["hubDatabaseUserName"];
                                if (hubDatabaseUserNameValue != null && hubDatabaseUserNameValue.Type != JTokenType.Null)
                                {
                                    string hubDatabaseUserNameInstance = ((string)hubDatabaseUserNameValue);
                                    propertiesInstance.HubDatabaseUserName = hubDatabaseUserNameInstance;
                                }
                                
                                JToken syncStateValue = propertiesValue2["syncState"];
                                if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                {
                                    string syncStateInstance = ((string)syncStateValue);
                                    propertiesInstance.SyncState = syncStateInstance;
                                }
                                
                                JToken lastSyncTimeValue = propertiesValue2["lastSyncTime"];
                                if (lastSyncTimeValue != null && lastSyncTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSyncTimeInstance = ((DateTime)lastSyncTimeValue);
                                    propertiesInstance.LastSyncTime = lastSyncTimeInstance;
                                }
                                
                                JToken schemaValue2 = propertiesValue2["schema"];
                                if (schemaValue2 != null && schemaValue2.Type != JTokenType.Null)
                                {
                                    SyncGroupSchema schemaInstance = new SyncGroupSchema();
                                    propertiesInstance.Schema = schemaInstance;
                                    
                                    JToken tablesArray2 = schemaValue2["tables"];
                                    if (tablesArray2 != null && tablesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tablesValue2 in ((JArray)tablesArray2))
                                        {
                                            SyncGroupSchemaTable tablesInstance = new SyncGroupSchemaTable();
                                            schemaInstance.Tables.Add(tablesInstance);
                                            
                                            JToken columnsArray2 = tablesValue2["columns"];
                                            if (columnsArray2 != null && columnsArray2.Type != JTokenType.Null)
                                            {
                                                foreach (JToken columnsValue2 in ((JArray)columnsArray2))
                                                {
                                                    SyncGroupSchemaColumn columnsInstance = new SyncGroupSchemaColumn();
                                                    tablesInstance.Columns.Add(columnsInstance);
                                                    
                                                    JToken quotedNameValue = columnsValue2["quotedName"];
                                                    if (quotedNameValue != null && quotedNameValue.Type != JTokenType.Null)
                                                    {
                                                        string quotedNameInstance = ((string)quotedNameValue);
                                                        columnsInstance.QuotedName = quotedNameInstance;
                                                    }
                                                    
                                                    JToken dataSizeValue = columnsValue2["dataSize"];
                                                    if (dataSizeValue != null && dataSizeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataSizeInstance = ((string)dataSizeValue);
                                                        columnsInstance.DataSize = dataSizeInstance;
                                                    }
                                                    
                                                    JToken dataTypeValue = columnsValue2["dataType"];
                                                    if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataTypeInstance = ((string)dataTypeValue);
                                                        columnsInstance.DataType = dataTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken quotedNameValue2 = tablesValue2["quotedName"];
                                            if (quotedNameValue2 != null && quotedNameValue2.Type != JTokenType.Null)
                                            {
                                                string quotedNameInstance2 = ((string)quotedNameValue2);
                                                tablesInstance.QuotedName = quotedNameInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken masterSyncMemberNameValue = schemaValue2["masterSyncMemberName"];
                                    if (masterSyncMemberNameValue != null && masterSyncMemberNameValue.Type != JTokenType.Null)
                                    {
                                        string masterSyncMemberNameInstance = ((string)masterSyncMemberNameValue);
                                        schemaInstance.MasterSyncMemberName = masterSyncMemberNameInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncGroupInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncGroupInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncGroupInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncGroupInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncGroupInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begin updating a existing sync member. To determine the status of
        /// the operation, call GetUpdateSyncMemberOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public async Task<SyncMemberCreateOrUpdateResponse> BeginUpdateSyncMemberAsync(string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.SyncGroupName == null)
            {
                throw new ArgumentNullException("parameters.SyncGroupName");
            }
            if (parameters.SyncMemberName == null)
            {
                throw new ArgumentNullException("parameters.SyncMemberName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginUpdateSyncMemberAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(parameters.SyncGroupName);
            url = url + "/syncMembers/";
            url = url + Uri.EscapeDataString(parameters.SyncMemberName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject syncMemberCreateOrUpdateParametersValue = new JObject();
                requestDoc = syncMemberCreateOrUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                syncMemberCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.SyncDirection != null)
                {
                    propertiesValue["syncDirection"] = parameters.Properties.SyncDirection.Value.ToString();
                }
                
                if (parameters.Properties.SyncAgentId != null)
                {
                    propertiesValue["syncAgentId"] = parameters.Properties.SyncAgentId;
                }
                
                if (parameters.Properties.SqlServerDatabaseId != null)
                {
                    propertiesValue["sqlServerDatabaseId"] = parameters.Properties.SqlServerDatabaseId;
                }
                
                if (parameters.Properties.ServerName != null)
                {
                    propertiesValue["serverName"] = parameters.Properties.ServerName;
                }
                
                if (parameters.Properties.DatabaseName != null)
                {
                    propertiesValue["databaseName"] = parameters.Properties.DatabaseName;
                }
                
                if (parameters.Properties.UserName != null)
                {
                    propertiesValue["userName"] = parameters.Properties.UserName;
                }
                
                if (parameters.Properties.Password != null)
                {
                    propertiesValue["password"] = parameters.Properties.Password;
                }
                
                if (parameters.Properties.DatabaseType != null)
                {
                    propertiesValue["databaseType"] = parameters.Properties.DatabaseType.Value.ToString();
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncMemberCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncMemberCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            SyncMember syncMemberInstance = new SyncMember();
                            result.SyncMember = syncMemberInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                SyncMemberProperties propertiesInstance = new SyncMemberProperties();
                                syncMemberInstance.Properties = propertiesInstance;
                                
                                JToken syncDirectionValue = propertiesValue2["syncDirection"];
                                if (syncDirectionValue != null && syncDirectionValue.Type != JTokenType.Null)
                                {
                                    SyncDirectionEnum syncDirectionInstance = ((SyncDirectionEnum)Enum.Parse(typeof(SyncDirectionEnum), ((string)syncDirectionValue), true));
                                    propertiesInstance.SyncDirection = syncDirectionInstance;
                                }
                                
                                JToken syncAgentIdValue = propertiesValue2["syncAgentId"];
                                if (syncAgentIdValue != null && syncAgentIdValue.Type != JTokenType.Null)
                                {
                                    string syncAgentIdInstance = ((string)syncAgentIdValue);
                                    propertiesInstance.SyncAgentId = syncAgentIdInstance;
                                }
                                
                                JToken sqlServerDatabaseIdValue = propertiesValue2["sqlServerDatabaseId"];
                                if (sqlServerDatabaseIdValue != null && sqlServerDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string sqlServerDatabaseIdInstance = ((string)sqlServerDatabaseIdValue);
                                    propertiesInstance.SqlServerDatabaseId = sqlServerDatabaseIdInstance;
                                }
                                
                                JToken serverNameValue = propertiesValue2["serverName"];
                                if (serverNameValue != null && serverNameValue.Type != JTokenType.Null)
                                {
                                    string serverNameInstance = ((string)serverNameValue);
                                    propertiesInstance.ServerName = serverNameInstance;
                                }
                                
                                JToken databaseNameValue = propertiesValue2["databaseName"];
                                if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                {
                                    string databaseNameInstance = ((string)databaseNameValue);
                                    propertiesInstance.DatabaseName = databaseNameInstance;
                                }
                                
                                JToken userNameValue = propertiesValue2["userName"];
                                if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                {
                                    string userNameInstance = ((string)userNameValue);
                                    propertiesInstance.UserName = userNameInstance;
                                }
                                
                                JToken databaseTypeValue = propertiesValue2["databaseType"];
                                if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                {
                                    DatabaseTypeEnum databaseTypeInstance = ((DatabaseTypeEnum)Enum.Parse(typeof(DatabaseTypeEnum), ((string)databaseTypeValue), true));
                                    propertiesInstance.DatabaseType = databaseTypeInstance;
                                }
                                
                                JToken syncStateValue = propertiesValue2["syncState"];
                                if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                {
                                    string syncStateInstance = ((string)syncStateValue);
                                    propertiesInstance.SyncState = syncStateInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncMemberInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncMemberInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncMemberInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncMemberInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncMemberInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Create a new sync agent with the specified parameters.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating the sync agent.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync agent.
        /// </returns>
        public async Task<SyncAgentCreateOrUpdateResponse> CreateOrUpdateSyncAgentAsync(string resourceGroupName, string serverName, string syncAgentName, SyncAgentCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("syncAgentName", syncAgentName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateSyncAgentAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            SyncAgentCreateOrUpdateResponse response = await client.DataSync.BeginCreateOrUpdateSyncAgentAsync(resourceGroupName, serverName, syncAgentName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            SyncAgentCreateOrUpdateResponse result = await client.DataSync.GetCreateOrUpdateSyncAgentOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DataSync.GetCreateOrUpdateSyncAgentOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Create a new sync group with the specified parameters.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a data sync group
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public async Task<SyncGroupCreateOrUpdateResponse> CreateOrUpdateSyncGroupAsync(string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateSyncGroupAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            SyncGroupCreateOrUpdateResponse response = await client.DataSync.BeginCreateOrUpdateSyncGroupAsync(resourceGroupName, serverName, databaseName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            SyncGroupCreateOrUpdateResponse result = await client.DataSync.GetCreateOrUpdateSyncGroupOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DataSync.GetCreateOrUpdateSyncGroupOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Create a new sync member under a specified sync group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public async Task<SyncMemberCreateOrUpdateResponse> CreateOrUpdateSyncMemberAsync(string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateSyncMemberAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            SyncMemberCreateOrUpdateResponse response = await client.DataSync.BeginCreateOrUpdateSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            SyncMemberCreateOrUpdateResponse result = await client.DataSync.GetCreateOrUpdateSyncMemberOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DataSync.GetCreateOrUpdateSyncMemberOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Generate a sync agent registration key for a specified sync agent.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a sync agent key generate request.
        /// </returns>
        public async Task<SyncAgentKeyResponse> CreateSyncAgentKeyAsync(string resourceGroupName, string serverName, string syncAgentName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (syncAgentName == null)
            {
                throw new ArgumentNullException("syncAgentName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("syncAgentName", syncAgentName);
                TracingAdapter.Enter(invocationId, this, "CreateSyncAgentKeyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/syncAgents/";
            url = url + Uri.EscapeDataString(syncAgentName);
            url = url + "/generateKey";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncAgentKeyResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncAgentKeyResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken syncAgentKeyValue = responseDoc["syncAgentKey"];
                            if (syncAgentKeyValue != null && syncAgentKeyValue.Type != JTokenType.Null)
                            {
                                string syncAgentKeyInstance = ((string)syncAgentKeyValue);
                                result.SyncAgentKey = syncAgentKeyInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete an existing sync group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> DeleteSyncAgentAsync(string resourceGroupName, string serverName, string syncAgentName, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("syncAgentName", syncAgentName);
                TracingAdapter.Enter(invocationId, this, "DeleteSyncAgentAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DataSyncOperationResponse response = await client.DataSync.BeginDeleteSyncAgentAsync(resourceGroupName, serverName, syncAgentName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DataSyncOperationResponse result = await client.DataSync.GetDeleteSyncAgentOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DataSync.GetDeleteSyncAgentOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Delete an existing sync group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> DeleteSyncGroupAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("syncGroupName", syncGroupName);
                TracingAdapter.Enter(invocationId, this, "DeleteSyncGroupAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DataSyncOperationResponse response = await client.DataSync.BeginDeleteSyncGroupAsync(resourceGroupName, serverName, databaseName, syncGroupName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DataSyncOperationResponse result = await client.DataSync.GetDeleteSyncGroupOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DataSync.GetDeleteSyncGroupOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Delete an existing sync member.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of deleting a sync member.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> DeleteSyncMemberAsync(string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "DeleteSyncMemberAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DataSyncOperationResponse response = await client.DataSync.BeginDeleteSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DataSyncOperationResponse result = await client.DataSync.GetDeleteSyncMemberOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DataSync.GetDeleteSyncMemberOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get the status of a sync agent create operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync agent.
        /// </returns>
        public async Task<SyncAgentCreateOrUpdateResponse> GetCreateOrUpdateSyncAgentOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateOrUpdateSyncAgentOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncAgentCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncAgentCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            SyncAgent syncAgentInstance = new SyncAgent();
                            result.SyncAgent = syncAgentInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                SyncAgentProperties propertiesInstance = new SyncAgentProperties();
                                syncAgentInstance.Properties = propertiesInstance;
                                
                                JToken syncDatabaseIdValue = propertiesValue["syncDatabaseId"];
                                if (syncDatabaseIdValue != null && syncDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string syncDatabaseIdInstance = ((string)syncDatabaseIdValue);
                                    propertiesInstance.SyncDatabaseId = syncDatabaseIdInstance;
                                }
                                
                                JToken lastAliveTimeValue = propertiesValue["lastAliveTime"];
                                if (lastAliveTimeValue != null && lastAliveTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastAliveTimeInstance = ((DateTime)lastAliveTimeValue);
                                    propertiesInstance.LastAliveTime = lastAliveTimeInstance;
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    SyncAgentState stateInstance = ((SyncAgentState)Enum.Parse(typeof(SyncAgentState), ((string)stateValue), true));
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken isUpToDateValue = propertiesValue["isUpToDate"];
                                if (isUpToDateValue != null && isUpToDateValue.Type != JTokenType.Null)
                                {
                                    bool isUpToDateInstance = ((bool)isUpToDateValue);
                                    propertiesInstance.IsUpToDate = isUpToDateInstance;
                                }
                                
                                JToken expiryTimeValue = propertiesValue["expiryTime"];
                                if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                    propertiesInstance.ExpiryTime = expiryTimeInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncAgentInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncAgentInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncAgentInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncAgentInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncAgentInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Created)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of a sync group create operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public async Task<SyncGroupCreateOrUpdateResponse> GetCreateOrUpdateSyncGroupOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateOrUpdateSyncGroupOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncGroupCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncGroupCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            SyncGroup syncGroupInstance = new SyncGroup();
                            result.SyncGroup = syncGroupInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                SyncGroupProperties propertiesInstance = new SyncGroupProperties();
                                syncGroupInstance.Properties = propertiesInstance;
                                
                                JToken intervalValue = propertiesValue["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    int intervalInstance = ((int)intervalValue);
                                    propertiesInstance.Interval = intervalInstance;
                                }
                                
                                JToken syncDatabaseIdValue = propertiesValue["syncDatabaseId"];
                                if (syncDatabaseIdValue != null && syncDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string syncDatabaseIdInstance = ((string)syncDatabaseIdValue);
                                    propertiesInstance.SyncDatabaseId = syncDatabaseIdInstance;
                                }
                                
                                JToken conflictResolutionPolicyValue = propertiesValue["conflictResolutionPolicy"];
                                if (conflictResolutionPolicyValue != null && conflictResolutionPolicyValue.Type != JTokenType.Null)
                                {
                                    ConflictResolutionPolicyType conflictResolutionPolicyInstance = ((ConflictResolutionPolicyType)Enum.Parse(typeof(ConflictResolutionPolicyType), ((string)conflictResolutionPolicyValue), true));
                                    propertiesInstance.ConflictResolutionPolicy = conflictResolutionPolicyInstance;
                                }
                                
                                JToken hubDatabaseUserNameValue = propertiesValue["hubDatabaseUserName"];
                                if (hubDatabaseUserNameValue != null && hubDatabaseUserNameValue.Type != JTokenType.Null)
                                {
                                    string hubDatabaseUserNameInstance = ((string)hubDatabaseUserNameValue);
                                    propertiesInstance.HubDatabaseUserName = hubDatabaseUserNameInstance;
                                }
                                
                                JToken syncStateValue = propertiesValue["syncState"];
                                if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                {
                                    string syncStateInstance = ((string)syncStateValue);
                                    propertiesInstance.SyncState = syncStateInstance;
                                }
                                
                                JToken lastSyncTimeValue = propertiesValue["lastSyncTime"];
                                if (lastSyncTimeValue != null && lastSyncTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSyncTimeInstance = ((DateTime)lastSyncTimeValue);
                                    propertiesInstance.LastSyncTime = lastSyncTimeInstance;
                                }
                                
                                JToken schemaValue = propertiesValue["schema"];
                                if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                {
                                    SyncGroupSchema schemaInstance = new SyncGroupSchema();
                                    propertiesInstance.Schema = schemaInstance;
                                    
                                    JToken tablesArray = schemaValue["tables"];
                                    if (tablesArray != null && tablesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tablesValue in ((JArray)tablesArray))
                                        {
                                            SyncGroupSchemaTable tablesInstance = new SyncGroupSchemaTable();
                                            schemaInstance.Tables.Add(tablesInstance);
                                            
                                            JToken columnsArray = tablesValue["columns"];
                                            if (columnsArray != null && columnsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken columnsValue in ((JArray)columnsArray))
                                                {
                                                    SyncGroupSchemaColumn columnsInstance = new SyncGroupSchemaColumn();
                                                    tablesInstance.Columns.Add(columnsInstance);
                                                    
                                                    JToken quotedNameValue = columnsValue["quotedName"];
                                                    if (quotedNameValue != null && quotedNameValue.Type != JTokenType.Null)
                                                    {
                                                        string quotedNameInstance = ((string)quotedNameValue);
                                                        columnsInstance.QuotedName = quotedNameInstance;
                                                    }
                                                    
                                                    JToken dataSizeValue = columnsValue["dataSize"];
                                                    if (dataSizeValue != null && dataSizeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataSizeInstance = ((string)dataSizeValue);
                                                        columnsInstance.DataSize = dataSizeInstance;
                                                    }
                                                    
                                                    JToken dataTypeValue = columnsValue["dataType"];
                                                    if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataTypeInstance = ((string)dataTypeValue);
                                                        columnsInstance.DataType = dataTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken quotedNameValue2 = tablesValue["quotedName"];
                                            if (quotedNameValue2 != null && quotedNameValue2.Type != JTokenType.Null)
                                            {
                                                string quotedNameInstance2 = ((string)quotedNameValue2);
                                                tablesInstance.QuotedName = quotedNameInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken masterSyncMemberNameValue = schemaValue["masterSyncMemberName"];
                                    if (masterSyncMemberNameValue != null && masterSyncMemberNameValue.Type != JTokenType.Null)
                                    {
                                        string masterSyncMemberNameInstance = ((string)masterSyncMemberNameValue);
                                        schemaInstance.MasterSyncMemberName = masterSyncMemberNameInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncGroupInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncGroupInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncGroupInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncGroupInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncGroupInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.Created)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of a sync member create operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public async Task<SyncMemberCreateOrUpdateResponse> GetCreateOrUpdateSyncMemberOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetCreateOrUpdateSyncMemberOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncMemberCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncMemberCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            SyncMember syncMemberInstance = new SyncMember();
                            result.SyncMember = syncMemberInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                SyncMemberProperties propertiesInstance = new SyncMemberProperties();
                                syncMemberInstance.Properties = propertiesInstance;
                                
                                JToken syncDirectionValue = propertiesValue["syncDirection"];
                                if (syncDirectionValue != null && syncDirectionValue.Type != JTokenType.Null)
                                {
                                    SyncDirectionEnum syncDirectionInstance = ((SyncDirectionEnum)Enum.Parse(typeof(SyncDirectionEnum), ((string)syncDirectionValue), true));
                                    propertiesInstance.SyncDirection = syncDirectionInstance;
                                }
                                
                                JToken syncAgentIdValue = propertiesValue["syncAgentId"];
                                if (syncAgentIdValue != null && syncAgentIdValue.Type != JTokenType.Null)
                                {
                                    string syncAgentIdInstance = ((string)syncAgentIdValue);
                                    propertiesInstance.SyncAgentId = syncAgentIdInstance;
                                }
                                
                                JToken sqlServerDatabaseIdValue = propertiesValue["sqlServerDatabaseId"];
                                if (sqlServerDatabaseIdValue != null && sqlServerDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string sqlServerDatabaseIdInstance = ((string)sqlServerDatabaseIdValue);
                                    propertiesInstance.SqlServerDatabaseId = sqlServerDatabaseIdInstance;
                                }
                                
                                JToken serverNameValue = propertiesValue["serverName"];
                                if (serverNameValue != null && serverNameValue.Type != JTokenType.Null)
                                {
                                    string serverNameInstance = ((string)serverNameValue);
                                    propertiesInstance.ServerName = serverNameInstance;
                                }
                                
                                JToken databaseNameValue = propertiesValue["databaseName"];
                                if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                {
                                    string databaseNameInstance = ((string)databaseNameValue);
                                    propertiesInstance.DatabaseName = databaseNameInstance;
                                }
                                
                                JToken userNameValue = propertiesValue["userName"];
                                if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                {
                                    string userNameInstance = ((string)userNameValue);
                                    propertiesInstance.UserName = userNameInstance;
                                }
                                
                                JToken databaseTypeValue = propertiesValue["databaseType"];
                                if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                {
                                    DatabaseTypeEnum databaseTypeInstance = ((DatabaseTypeEnum)Enum.Parse(typeof(DatabaseTypeEnum), ((string)databaseTypeValue), true));
                                    propertiesInstance.DatabaseType = databaseTypeInstance;
                                }
                                
                                JToken syncStateValue = propertiesValue["syncState"];
                                if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                {
                                    string syncStateInstance = ((string)syncStateValue);
                                    propertiesInstance.SyncState = syncStateInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncMemberInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncMemberInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncMemberInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncMemberInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncMemberInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Created)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of a sync agent delete operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> GetDeleteSyncAgentOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeleteSyncAgentOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSyncOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSyncOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of a sync group delete operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> GetDeleteSyncGroupOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeleteSyncGroupOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSyncOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSyncOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of a sync member delete operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> GetDeleteSyncMemberOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetDeleteSyncMemberOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSyncOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted || statusCode == HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSyncOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.NoContent)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of refreshing the sync schema of a hub database
        /// operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> GetInvokeSyncHubSchemaRefreshOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetInvokeSyncHubSchemaRefreshOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSyncOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSyncOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of refreshing member database schema operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> GetInvokeSyncMemberSchemaRefreshOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetInvokeSyncMemberSchemaRefreshOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DataSyncOperationResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DataSyncOperationResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the information about a specified sync agent.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents a sync agent object.
        /// </returns>
        public async Task<SyncAgentGetResponse> GetSyncAgentAsync(string resourceGroupName, string serverName, string syncAgentName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (syncAgentName == null)
            {
                throw new ArgumentNullException("syncAgentName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("syncAgentName", syncAgentName);
                TracingAdapter.Enter(invocationId, this, "GetSyncAgentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/syncAgents/";
            url = url + Uri.EscapeDataString(syncAgentName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncAgentGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncAgentGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            SyncAgent syncAgentInstance = new SyncAgent();
                            result.SyncAgent = syncAgentInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                SyncAgentProperties propertiesInstance = new SyncAgentProperties();
                                syncAgentInstance.Properties = propertiesInstance;
                                
                                JToken syncDatabaseIdValue = propertiesValue["syncDatabaseId"];
                                if (syncDatabaseIdValue != null && syncDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string syncDatabaseIdInstance = ((string)syncDatabaseIdValue);
                                    propertiesInstance.SyncDatabaseId = syncDatabaseIdInstance;
                                }
                                
                                JToken lastAliveTimeValue = propertiesValue["lastAliveTime"];
                                if (lastAliveTimeValue != null && lastAliveTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastAliveTimeInstance = ((DateTime)lastAliveTimeValue);
                                    propertiesInstance.LastAliveTime = lastAliveTimeInstance;
                                }
                                
                                JToken versionValue = propertiesValue["version"];
                                if (versionValue != null && versionValue.Type != JTokenType.Null)
                                {
                                    string versionInstance = ((string)versionValue);
                                    propertiesInstance.Version = versionInstance;
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    SyncAgentState stateInstance = ((SyncAgentState)Enum.Parse(typeof(SyncAgentState), ((string)stateValue), true));
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken isUpToDateValue = propertiesValue["isUpToDate"];
                                if (isUpToDateValue != null && isUpToDateValue.Type != JTokenType.Null)
                                {
                                    bool isUpToDateInstance = ((bool)isUpToDateValue);
                                    propertiesInstance.IsUpToDate = isUpToDateInstance;
                                }
                                
                                JToken expiryTimeValue = propertiesValue["expiryTime"];
                                if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                    propertiesInstance.ExpiryTime = expiryTimeInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncAgentInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncAgentInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncAgentInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncAgentInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncAgentInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the information about a specified sync group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for getting sync group operations.
        /// </returns>
        public async Task<SyncGroupGetResponse> GetSyncGroupAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException("syncGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("syncGroupName", syncGroupName);
                TracingAdapter.Enter(invocationId, this, "GetSyncGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(syncGroupName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncGroupGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncGroupGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            SyncGroup syncGroupInstance = new SyncGroup();
                            result.SyncGroup = syncGroupInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                SyncGroupProperties propertiesInstance = new SyncGroupProperties();
                                syncGroupInstance.Properties = propertiesInstance;
                                
                                JToken intervalValue = propertiesValue["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    int intervalInstance = ((int)intervalValue);
                                    propertiesInstance.Interval = intervalInstance;
                                }
                                
                                JToken syncDatabaseIdValue = propertiesValue["syncDatabaseId"];
                                if (syncDatabaseIdValue != null && syncDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string syncDatabaseIdInstance = ((string)syncDatabaseIdValue);
                                    propertiesInstance.SyncDatabaseId = syncDatabaseIdInstance;
                                }
                                
                                JToken conflictResolutionPolicyValue = propertiesValue["conflictResolutionPolicy"];
                                if (conflictResolutionPolicyValue != null && conflictResolutionPolicyValue.Type != JTokenType.Null)
                                {
                                    ConflictResolutionPolicyType conflictResolutionPolicyInstance = ((ConflictResolutionPolicyType)Enum.Parse(typeof(ConflictResolutionPolicyType), ((string)conflictResolutionPolicyValue), true));
                                    propertiesInstance.ConflictResolutionPolicy = conflictResolutionPolicyInstance;
                                }
                                
                                JToken hubDatabaseUserNameValue = propertiesValue["hubDatabaseUserName"];
                                if (hubDatabaseUserNameValue != null && hubDatabaseUserNameValue.Type != JTokenType.Null)
                                {
                                    string hubDatabaseUserNameInstance = ((string)hubDatabaseUserNameValue);
                                    propertiesInstance.HubDatabaseUserName = hubDatabaseUserNameInstance;
                                }
                                
                                JToken syncStateValue = propertiesValue["syncState"];
                                if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                {
                                    string syncStateInstance = ((string)syncStateValue);
                                    propertiesInstance.SyncState = syncStateInstance;
                                }
                                
                                JToken lastSyncTimeValue = propertiesValue["lastSyncTime"];
                                if (lastSyncTimeValue != null && lastSyncTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSyncTimeInstance = ((DateTime)lastSyncTimeValue);
                                    propertiesInstance.LastSyncTime = lastSyncTimeInstance;
                                }
                                
                                JToken schemaValue = propertiesValue["schema"];
                                if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                {
                                    SyncGroupSchema schemaInstance = new SyncGroupSchema();
                                    propertiesInstance.Schema = schemaInstance;
                                    
                                    JToken tablesArray = schemaValue["tables"];
                                    if (tablesArray != null && tablesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tablesValue in ((JArray)tablesArray))
                                        {
                                            SyncGroupSchemaTable tablesInstance = new SyncGroupSchemaTable();
                                            schemaInstance.Tables.Add(tablesInstance);
                                            
                                            JToken columnsArray = tablesValue["columns"];
                                            if (columnsArray != null && columnsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken columnsValue in ((JArray)columnsArray))
                                                {
                                                    SyncGroupSchemaColumn columnsInstance = new SyncGroupSchemaColumn();
                                                    tablesInstance.Columns.Add(columnsInstance);
                                                    
                                                    JToken quotedNameValue = columnsValue["quotedName"];
                                                    if (quotedNameValue != null && quotedNameValue.Type != JTokenType.Null)
                                                    {
                                                        string quotedNameInstance = ((string)quotedNameValue);
                                                        columnsInstance.QuotedName = quotedNameInstance;
                                                    }
                                                    
                                                    JToken dataSizeValue = columnsValue["dataSize"];
                                                    if (dataSizeValue != null && dataSizeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataSizeInstance = ((string)dataSizeValue);
                                                        columnsInstance.DataSize = dataSizeInstance;
                                                    }
                                                    
                                                    JToken dataTypeValue = columnsValue["dataType"];
                                                    if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataTypeInstance = ((string)dataTypeValue);
                                                        columnsInstance.DataType = dataTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken quotedNameValue2 = tablesValue["quotedName"];
                                            if (quotedNameValue2 != null && quotedNameValue2.Type != JTokenType.Null)
                                            {
                                                string quotedNameInstance2 = ((string)quotedNameValue2);
                                                tablesInstance.QuotedName = quotedNameInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken masterSyncMemberNameValue = schemaValue["masterSyncMemberName"];
                                    if (masterSyncMemberNameValue != null && masterSyncMemberNameValue.Type != JTokenType.Null)
                                    {
                                        string masterSyncMemberNameInstance = ((string)masterSyncMemberNameValue);
                                        schemaInstance.MasterSyncMemberName = masterSyncMemberNameInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncGroupInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncGroupInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncGroupInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncGroupInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncGroupInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the full sync schema of a hub database.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies sync group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for getting the full sync schema of a member or hub
        /// database.
        /// </returns>
        public async Task<SyncFullSchemaGetResponse> GetSyncHubSchemaAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException("syncGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("syncGroupName", syncGroupName);
                TracingAdapter.Enter(invocationId, this, "GetSyncHubSchemaAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(syncGroupName);
            url = url + "/hubSchemas";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncFullSchemaGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncFullSchemaGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SyncFullSchema syncFullSchemaInstance = new SyncFullSchema();
                                    result.FullSchema.Add(syncFullSchemaInstance);
                                    
                                    JToken tablesArray = valueValue["tables"];
                                    if (tablesArray != null && tablesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tablesValue in ((JArray)tablesArray))
                                        {
                                            SyncFullSchemaTable tablesInstance = new SyncFullSchemaTable();
                                            syncFullSchemaInstance.Tables.Add(tablesInstance);
                                            
                                            JToken columnsArray = tablesValue["columns"];
                                            if (columnsArray != null && columnsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken columnsValue in ((JArray)columnsArray))
                                                {
                                                    SyncFullSchemaColumn columnsInstance = new SyncFullSchemaColumn();
                                                    tablesInstance.Columns.Add(columnsInstance);
                                                    
                                                    JToken quotedNameValue = columnsValue["quotedName"];
                                                    if (quotedNameValue != null && quotedNameValue.Type != JTokenType.Null)
                                                    {
                                                        string quotedNameInstance = ((string)quotedNameValue);
                                                        columnsInstance.QuotedName = quotedNameInstance;
                                                    }
                                                    
                                                    JToken nameValue = columnsValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        columnsInstance.Name = nameInstance;
                                                    }
                                                    
                                                    JToken errorIdValue = columnsValue["errorId"];
                                                    if (errorIdValue != null && errorIdValue.Type != JTokenType.Null)
                                                    {
                                                        string errorIdInstance = ((string)errorIdValue);
                                                        columnsInstance.ErrorId = errorIdInstance;
                                                    }
                                                    
                                                    JToken hasErrorValue = columnsValue["hasError"];
                                                    if (hasErrorValue != null && hasErrorValue.Type != JTokenType.Null)
                                                    {
                                                        bool hasErrorInstance = ((bool)hasErrorValue);
                                                        columnsInstance.HasError = hasErrorInstance;
                                                    }
                                                    
                                                    JToken dataSizeValue = columnsValue["dataSize"];
                                                    if (dataSizeValue != null && dataSizeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataSizeInstance = ((string)dataSizeValue);
                                                        columnsInstance.DataSize = dataSizeInstance;
                                                    }
                                                    
                                                    JToken dataTypeValue = columnsValue["dataType"];
                                                    if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataTypeInstance = ((string)dataTypeValue);
                                                        columnsInstance.DataType = dataTypeInstance;
                                                    }
                                                    
                                                    JToken isPrimaryKeyValue = columnsValue["isPrimaryKey"];
                                                    if (isPrimaryKeyValue != null && isPrimaryKeyValue.Type != JTokenType.Null)
                                                    {
                                                        bool isPrimaryKeyInstance = ((bool)isPrimaryKeyValue);
                                                        columnsInstance.IsPrimaryKey = isPrimaryKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken quotedNameValue2 = tablesValue["quotedName"];
                                            if (quotedNameValue2 != null && quotedNameValue2.Type != JTokenType.Null)
                                            {
                                                string quotedNameInstance2 = ((string)quotedNameValue2);
                                                tablesInstance.QuotedName = quotedNameInstance2;
                                            }
                                            
                                            JToken nameValue2 = tablesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                tablesInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken errorIdValue2 = tablesValue["errorId"];
                                            if (errorIdValue2 != null && errorIdValue2.Type != JTokenType.Null)
                                            {
                                                string errorIdInstance2 = ((string)errorIdValue2);
                                                tablesInstance.ErrorId = errorIdInstance2;
                                            }
                                            
                                            JToken hasErrorValue2 = tablesValue["hasError"];
                                            if (hasErrorValue2 != null && hasErrorValue2.Type != JTokenType.Null)
                                            {
                                                bool hasErrorInstance2 = ((bool)hasErrorValue2);
                                                tablesInstance.HasError = hasErrorInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken lastUpdateTimeValue = valueValue["lastUpdateTime"];
                                    if (lastUpdateTimeValue != null && lastUpdateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastUpdateTimeInstance = ((DateTime)lastUpdateTimeValue);
                                        syncFullSchemaInstance.LastUpdateTime = lastUpdateTimeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the information about a specified sync member.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of getting a sync member.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for getting sync member operations.
        /// </returns>
        public async Task<SyncMemberGetResponse> GetSyncMemberAsync(string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.SyncGroupName == null)
            {
                throw new ArgumentNullException("parameters.SyncGroupName");
            }
            if (parameters.SyncMemberName == null)
            {
                throw new ArgumentNullException("parameters.SyncMemberName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "GetSyncMemberAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(parameters.SyncGroupName);
            url = url + "/syncMembers/";
            url = url + Uri.EscapeDataString(parameters.SyncMemberName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncMemberGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncMemberGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            SyncMember syncMemberInstance = new SyncMember();
                            result.SyncMember = syncMemberInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                SyncMemberProperties propertiesInstance = new SyncMemberProperties();
                                syncMemberInstance.Properties = propertiesInstance;
                                
                                JToken syncDirectionValue = propertiesValue["syncDirection"];
                                if (syncDirectionValue != null && syncDirectionValue.Type != JTokenType.Null)
                                {
                                    SyncDirectionEnum syncDirectionInstance = ((SyncDirectionEnum)Enum.Parse(typeof(SyncDirectionEnum), ((string)syncDirectionValue), true));
                                    propertiesInstance.SyncDirection = syncDirectionInstance;
                                }
                                
                                JToken syncAgentIdValue = propertiesValue["syncAgentId"];
                                if (syncAgentIdValue != null && syncAgentIdValue.Type != JTokenType.Null)
                                {
                                    string syncAgentIdInstance = ((string)syncAgentIdValue);
                                    propertiesInstance.SyncAgentId = syncAgentIdInstance;
                                }
                                
                                JToken sqlServerDatabaseIdValue = propertiesValue["sqlServerDatabaseId"];
                                if (sqlServerDatabaseIdValue != null && sqlServerDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string sqlServerDatabaseIdInstance = ((string)sqlServerDatabaseIdValue);
                                    propertiesInstance.SqlServerDatabaseId = sqlServerDatabaseIdInstance;
                                }
                                
                                JToken serverNameValue = propertiesValue["serverName"];
                                if (serverNameValue != null && serverNameValue.Type != JTokenType.Null)
                                {
                                    string serverNameInstance = ((string)serverNameValue);
                                    propertiesInstance.ServerName = serverNameInstance;
                                }
                                
                                JToken databaseNameValue = propertiesValue["databaseName"];
                                if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                {
                                    string databaseNameInstance = ((string)databaseNameValue);
                                    propertiesInstance.DatabaseName = databaseNameInstance;
                                }
                                
                                JToken userNameValue = propertiesValue["userName"];
                                if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                {
                                    string userNameInstance = ((string)userNameValue);
                                    propertiesInstance.UserName = userNameInstance;
                                }
                                
                                JToken databaseTypeValue = propertiesValue["databaseType"];
                                if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                {
                                    DatabaseTypeEnum databaseTypeInstance = ((DatabaseTypeEnum)Enum.Parse(typeof(DatabaseTypeEnum), ((string)databaseTypeValue), true));
                                    propertiesInstance.DatabaseType = databaseTypeInstance;
                                }
                                
                                JToken syncStateValue = propertiesValue["syncState"];
                                if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                {
                                    string syncStateInstance = ((string)syncStateValue);
                                    propertiesInstance.SyncState = syncStateInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncMemberInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncMemberInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncMemberInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncMemberInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncMemberInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the full schema of member database of a sync member.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies sync group name and sync member name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for getting the full sync schema of a member or hub
        /// database.
        /// </returns>
        public async Task<SyncFullSchemaGetResponse> GetSyncMemberSchemaAsync(string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.SyncGroupName == null)
            {
                throw new ArgumentNullException("parameters.SyncGroupName");
            }
            if (parameters.SyncMemberName == null)
            {
                throw new ArgumentNullException("parameters.SyncMemberName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "GetSyncMemberSchemaAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(parameters.SyncGroupName);
            url = url + "/syncMembers/";
            url = url + Uri.EscapeDataString(parameters.SyncMemberName);
            url = url + "/schemas";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncFullSchemaGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncFullSchemaGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SyncFullSchema syncFullSchemaInstance = new SyncFullSchema();
                                    result.FullSchema.Add(syncFullSchemaInstance);
                                    
                                    JToken tablesArray = valueValue["tables"];
                                    if (tablesArray != null && tablesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tablesValue in ((JArray)tablesArray))
                                        {
                                            SyncFullSchemaTable tablesInstance = new SyncFullSchemaTable();
                                            syncFullSchemaInstance.Tables.Add(tablesInstance);
                                            
                                            JToken columnsArray = tablesValue["columns"];
                                            if (columnsArray != null && columnsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken columnsValue in ((JArray)columnsArray))
                                                {
                                                    SyncFullSchemaColumn columnsInstance = new SyncFullSchemaColumn();
                                                    tablesInstance.Columns.Add(columnsInstance);
                                                    
                                                    JToken quotedNameValue = columnsValue["quotedName"];
                                                    if (quotedNameValue != null && quotedNameValue.Type != JTokenType.Null)
                                                    {
                                                        string quotedNameInstance = ((string)quotedNameValue);
                                                        columnsInstance.QuotedName = quotedNameInstance;
                                                    }
                                                    
                                                    JToken nameValue = columnsValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        columnsInstance.Name = nameInstance;
                                                    }
                                                    
                                                    JToken errorIdValue = columnsValue["errorId"];
                                                    if (errorIdValue != null && errorIdValue.Type != JTokenType.Null)
                                                    {
                                                        string errorIdInstance = ((string)errorIdValue);
                                                        columnsInstance.ErrorId = errorIdInstance;
                                                    }
                                                    
                                                    JToken hasErrorValue = columnsValue["hasError"];
                                                    if (hasErrorValue != null && hasErrorValue.Type != JTokenType.Null)
                                                    {
                                                        bool hasErrorInstance = ((bool)hasErrorValue);
                                                        columnsInstance.HasError = hasErrorInstance;
                                                    }
                                                    
                                                    JToken dataSizeValue = columnsValue["dataSize"];
                                                    if (dataSizeValue != null && dataSizeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataSizeInstance = ((string)dataSizeValue);
                                                        columnsInstance.DataSize = dataSizeInstance;
                                                    }
                                                    
                                                    JToken dataTypeValue = columnsValue["dataType"];
                                                    if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataTypeInstance = ((string)dataTypeValue);
                                                        columnsInstance.DataType = dataTypeInstance;
                                                    }
                                                    
                                                    JToken isPrimaryKeyValue = columnsValue["isPrimaryKey"];
                                                    if (isPrimaryKeyValue != null && isPrimaryKeyValue.Type != JTokenType.Null)
                                                    {
                                                        bool isPrimaryKeyInstance = ((bool)isPrimaryKeyValue);
                                                        columnsInstance.IsPrimaryKey = isPrimaryKeyInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken quotedNameValue2 = tablesValue["quotedName"];
                                            if (quotedNameValue2 != null && quotedNameValue2.Type != JTokenType.Null)
                                            {
                                                string quotedNameInstance2 = ((string)quotedNameValue2);
                                                tablesInstance.QuotedName = quotedNameInstance2;
                                            }
                                            
                                            JToken nameValue2 = tablesValue["name"];
                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                            {
                                                string nameInstance2 = ((string)nameValue2);
                                                tablesInstance.Name = nameInstance2;
                                            }
                                            
                                            JToken errorIdValue2 = tablesValue["errorId"];
                                            if (errorIdValue2 != null && errorIdValue2.Type != JTokenType.Null)
                                            {
                                                string errorIdInstance2 = ((string)errorIdValue2);
                                                tablesInstance.ErrorId = errorIdInstance2;
                                            }
                                            
                                            JToken hasErrorValue2 = tablesValue["hasError"];
                                            if (hasErrorValue2 != null && hasErrorValue2.Type != JTokenType.Null)
                                            {
                                                bool hasErrorInstance2 = ((bool)hasErrorValue2);
                                                tablesInstance.HasError = hasErrorInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken lastUpdateTimeValue = valueValue["lastUpdateTime"];
                                    if (lastUpdateTimeValue != null && lastUpdateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastUpdateTimeInstance = ((DateTime)lastUpdateTimeValue);
                                        syncFullSchemaInstance.LastUpdateTime = lastUpdateTimeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of a sync group update operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public async Task<SyncGroupCreateOrUpdateResponse> GetUpdateSyncGroupOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUpdateSyncGroupOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncGroupCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncGroupCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            SyncGroup syncGroupInstance = new SyncGroup();
                            result.SyncGroup = syncGroupInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                SyncGroupProperties propertiesInstance = new SyncGroupProperties();
                                syncGroupInstance.Properties = propertiesInstance;
                                
                                JToken intervalValue = propertiesValue["interval"];
                                if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                {
                                    int intervalInstance = ((int)intervalValue);
                                    propertiesInstance.Interval = intervalInstance;
                                }
                                
                                JToken syncDatabaseIdValue = propertiesValue["syncDatabaseId"];
                                if (syncDatabaseIdValue != null && syncDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string syncDatabaseIdInstance = ((string)syncDatabaseIdValue);
                                    propertiesInstance.SyncDatabaseId = syncDatabaseIdInstance;
                                }
                                
                                JToken conflictResolutionPolicyValue = propertiesValue["conflictResolutionPolicy"];
                                if (conflictResolutionPolicyValue != null && conflictResolutionPolicyValue.Type != JTokenType.Null)
                                {
                                    ConflictResolutionPolicyType conflictResolutionPolicyInstance = ((ConflictResolutionPolicyType)Enum.Parse(typeof(ConflictResolutionPolicyType), ((string)conflictResolutionPolicyValue), true));
                                    propertiesInstance.ConflictResolutionPolicy = conflictResolutionPolicyInstance;
                                }
                                
                                JToken hubDatabaseUserNameValue = propertiesValue["hubDatabaseUserName"];
                                if (hubDatabaseUserNameValue != null && hubDatabaseUserNameValue.Type != JTokenType.Null)
                                {
                                    string hubDatabaseUserNameInstance = ((string)hubDatabaseUserNameValue);
                                    propertiesInstance.HubDatabaseUserName = hubDatabaseUserNameInstance;
                                }
                                
                                JToken syncStateValue = propertiesValue["syncState"];
                                if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                {
                                    string syncStateInstance = ((string)syncStateValue);
                                    propertiesInstance.SyncState = syncStateInstance;
                                }
                                
                                JToken lastSyncTimeValue = propertiesValue["lastSyncTime"];
                                if (lastSyncTimeValue != null && lastSyncTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime lastSyncTimeInstance = ((DateTime)lastSyncTimeValue);
                                    propertiesInstance.LastSyncTime = lastSyncTimeInstance;
                                }
                                
                                JToken schemaValue = propertiesValue["schema"];
                                if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                {
                                    SyncGroupSchema schemaInstance = new SyncGroupSchema();
                                    propertiesInstance.Schema = schemaInstance;
                                    
                                    JToken tablesArray = schemaValue["tables"];
                                    if (tablesArray != null && tablesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken tablesValue in ((JArray)tablesArray))
                                        {
                                            SyncGroupSchemaTable tablesInstance = new SyncGroupSchemaTable();
                                            schemaInstance.Tables.Add(tablesInstance);
                                            
                                            JToken columnsArray = tablesValue["columns"];
                                            if (columnsArray != null && columnsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken columnsValue in ((JArray)columnsArray))
                                                {
                                                    SyncGroupSchemaColumn columnsInstance = new SyncGroupSchemaColumn();
                                                    tablesInstance.Columns.Add(columnsInstance);
                                                    
                                                    JToken quotedNameValue = columnsValue["quotedName"];
                                                    if (quotedNameValue != null && quotedNameValue.Type != JTokenType.Null)
                                                    {
                                                        string quotedNameInstance = ((string)quotedNameValue);
                                                        columnsInstance.QuotedName = quotedNameInstance;
                                                    }
                                                    
                                                    JToken dataSizeValue = columnsValue["dataSize"];
                                                    if (dataSizeValue != null && dataSizeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataSizeInstance = ((string)dataSizeValue);
                                                        columnsInstance.DataSize = dataSizeInstance;
                                                    }
                                                    
                                                    JToken dataTypeValue = columnsValue["dataType"];
                                                    if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                    {
                                                        string dataTypeInstance = ((string)dataTypeValue);
                                                        columnsInstance.DataType = dataTypeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken quotedNameValue2 = tablesValue["quotedName"];
                                            if (quotedNameValue2 != null && quotedNameValue2.Type != JTokenType.Null)
                                            {
                                                string quotedNameInstance2 = ((string)quotedNameValue2);
                                                tablesInstance.QuotedName = quotedNameInstance2;
                                            }
                                        }
                                    }
                                    
                                    JToken masterSyncMemberNameValue = schemaValue["masterSyncMemberName"];
                                    if (masterSyncMemberNameValue != null && masterSyncMemberNameValue.Type != JTokenType.Null)
                                    {
                                        string masterSyncMemberNameInstance = ((string)masterSyncMemberNameValue);
                                        schemaInstance.MasterSyncMemberName = masterSyncMemberNameInstance;
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncGroupInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncGroupInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncGroupInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncGroupInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncGroupInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the status of a sync member create operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public async Task<SyncMemberCreateOrUpdateResponse> GetUpdateSyncMemberOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetUpdateSyncMemberOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncMemberCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncMemberCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            SyncMember syncMemberInstance = new SyncMember();
                            result.SyncMember = syncMemberInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                SyncMemberProperties propertiesInstance = new SyncMemberProperties();
                                syncMemberInstance.Properties = propertiesInstance;
                                
                                JToken syncDirectionValue = propertiesValue["syncDirection"];
                                if (syncDirectionValue != null && syncDirectionValue.Type != JTokenType.Null)
                                {
                                    SyncDirectionEnum syncDirectionInstance = ((SyncDirectionEnum)Enum.Parse(typeof(SyncDirectionEnum), ((string)syncDirectionValue), true));
                                    propertiesInstance.SyncDirection = syncDirectionInstance;
                                }
                                
                                JToken syncAgentIdValue = propertiesValue["syncAgentId"];
                                if (syncAgentIdValue != null && syncAgentIdValue.Type != JTokenType.Null)
                                {
                                    string syncAgentIdInstance = ((string)syncAgentIdValue);
                                    propertiesInstance.SyncAgentId = syncAgentIdInstance;
                                }
                                
                                JToken sqlServerDatabaseIdValue = propertiesValue["sqlServerDatabaseId"];
                                if (sqlServerDatabaseIdValue != null && sqlServerDatabaseIdValue.Type != JTokenType.Null)
                                {
                                    string sqlServerDatabaseIdInstance = ((string)sqlServerDatabaseIdValue);
                                    propertiesInstance.SqlServerDatabaseId = sqlServerDatabaseIdInstance;
                                }
                                
                                JToken serverNameValue = propertiesValue["serverName"];
                                if (serverNameValue != null && serverNameValue.Type != JTokenType.Null)
                                {
                                    string serverNameInstance = ((string)serverNameValue);
                                    propertiesInstance.ServerName = serverNameInstance;
                                }
                                
                                JToken databaseNameValue = propertiesValue["databaseName"];
                                if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                {
                                    string databaseNameInstance = ((string)databaseNameValue);
                                    propertiesInstance.DatabaseName = databaseNameInstance;
                                }
                                
                                JToken userNameValue = propertiesValue["userName"];
                                if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                {
                                    string userNameInstance = ((string)userNameValue);
                                    propertiesInstance.UserName = userNameInstance;
                                }
                                
                                JToken databaseTypeValue = propertiesValue["databaseType"];
                                if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                {
                                    DatabaseTypeEnum databaseTypeInstance = ((DatabaseTypeEnum)Enum.Parse(typeof(DatabaseTypeEnum), ((string)databaseTypeValue), true));
                                    propertiesInstance.DatabaseType = databaseTypeInstance;
                                }
                                
                                JToken syncStateValue = propertiesValue["syncState"];
                                if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                {
                                    string syncStateInstance = ((string)syncStateValue);
                                    propertiesInstance.SyncState = syncStateInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                syncMemberInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                syncMemberInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                syncMemberInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                syncMemberInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    syncMemberInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Invoke the sync schema of a hub database refreshing.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies sync group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> InvokeSyncHubSchemaRefreshAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("syncGroupName", syncGroupName);
                TracingAdapter.Enter(invocationId, this, "InvokeSyncHubSchemaRefreshAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DataSyncOperationResponse response = await client.DataSync.BeginInvokeSyncHubSchemaRefreshAsync(resourceGroupName, serverName, databaseName, syncGroupName, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DataSyncOperationResponse result = await client.DataSync.GetInvokeSyncHubSchemaRefreshOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DataSync.GetInvokeSyncHubSchemaRefreshOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Trigger the refreshing of member database schema of a sync member.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies sync group name and sync member name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public async Task<DataSyncOperationResponse> InvokeSyncMemberSchemaRefreshAsync(string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "InvokeSyncMemberSchemaRefreshAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            DataSyncOperationResponse response = await client.DataSync.BeginInvokeSyncMemberSchemaRefreshAsync(resourceGroupName, serverName, databaseName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            DataSyncOperationResponse result = await client.DataSync.GetInvokeSyncMemberSchemaRefreshOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DataSync.GetInvokeSyncMemberSchemaRefreshOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Get the synchronization logs of a sync group from next link.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the Azure SQL sync group name.
        /// </param>
        /// <param name='nextLink'>
        /// Required. Specifies the nextLink which is from the previous call.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for listing sync group log operations.
        /// </returns>
        public async Task<SyncGroupLogListResponse> ListNextSyncGroupLogAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException("syncGroupName");
            }
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("syncGroupName", syncGroupName);
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextSyncGroupLogAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(syncGroupName);
            url = url + nextLink;
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncGroupLogListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncGroupLogListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SyncGroupLog syncGroupLogInstance = new SyncGroupLog();
                                    result.SyncGroupLogs.Add(syncGroupLogInstance);
                                    
                                    JToken timestampValue = valueValue["timestamp"];
                                    if (timestampValue != null && timestampValue.Type != JTokenType.Null)
                                    {
                                        DateTime timestampInstance = ((DateTime)timestampValue);
                                        syncGroupLogInstance.TimeStamp = timestampInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        LogType typeInstance = ((LogType)Enum.Parse(typeof(LogType), ((string)typeValue), true));
                                        syncGroupLogInstance.Type = typeInstance;
                                    }
                                    
                                    JToken detailsValue = valueValue["details"];
                                    if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                    {
                                        string detailsInstance = ((string)detailsValue);
                                        syncGroupLogInstance.Details = detailsInstance;
                                    }
                                    
                                    JToken sourceValue = valueValue["source"];
                                    if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                    {
                                        string sourceInstance = ((string)sourceValue);
                                        syncGroupLogInstance.Source = sourceInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all the sync agents under a specified resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for listing sync agent operations.
        /// </returns>
        public async Task<SyncAgentListResponse> ListSyncAgentAsync(string resourceGroupName, string serverName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                TracingAdapter.Enter(invocationId, this, "ListSyncAgentAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/syncAgents";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncAgentListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncAgentListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SyncAgent syncAgentInstance = new SyncAgent();
                                    result.SyncAgents.Add(syncAgentInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        SyncAgentProperties propertiesInstance = new SyncAgentProperties();
                                        syncAgentInstance.Properties = propertiesInstance;
                                        
                                        JToken syncDatabaseIdValue = propertiesValue["syncDatabaseId"];
                                        if (syncDatabaseIdValue != null && syncDatabaseIdValue.Type != JTokenType.Null)
                                        {
                                            string syncDatabaseIdInstance = ((string)syncDatabaseIdValue);
                                            propertiesInstance.SyncDatabaseId = syncDatabaseIdInstance;
                                        }
                                        
                                        JToken lastAliveTimeValue = propertiesValue["lastAliveTime"];
                                        if (lastAliveTimeValue != null && lastAliveTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastAliveTimeInstance = ((DateTime)lastAliveTimeValue);
                                            propertiesInstance.LastAliveTime = lastAliveTimeInstance;
                                        }
                                        
                                        JToken versionValue = propertiesValue["version"];
                                        if (versionValue != null && versionValue.Type != JTokenType.Null)
                                        {
                                            string versionInstance = ((string)versionValue);
                                            propertiesInstance.Version = versionInstance;
                                        }
                                        
                                        JToken stateValue = propertiesValue["state"];
                                        if (stateValue != null && stateValue.Type != JTokenType.Null)
                                        {
                                            SyncAgentState stateInstance = ((SyncAgentState)Enum.Parse(typeof(SyncAgentState), ((string)stateValue), true));
                                            propertiesInstance.State = stateInstance;
                                        }
                                        
                                        JToken isUpToDateValue = propertiesValue["isUpToDate"];
                                        if (isUpToDateValue != null && isUpToDateValue.Type != JTokenType.Null)
                                        {
                                            bool isUpToDateInstance = ((bool)isUpToDateValue);
                                            propertiesInstance.IsUpToDate = isUpToDateInstance;
                                        }
                                        
                                        JToken expiryTimeValue = propertiesValue["expiryTime"];
                                        if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime expiryTimeInstance = ((DateTime)expiryTimeValue);
                                            propertiesInstance.ExpiryTime = expiryTimeInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        syncAgentInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        syncAgentInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        syncAgentInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        syncAgentInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            syncAgentInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all the databases connected by the specified sync agent.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for listing databases connected by a given sync agent
        /// operations.
        /// </returns>
        public async Task<SyncAgentLinkedDatabaseListResponse> ListSyncAgentLinkedDatabaseAsync(string resourceGroupName, string serverName, string syncAgentName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (syncAgentName == null)
            {
                throw new ArgumentNullException("syncAgentName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("syncAgentName", syncAgentName);
                TracingAdapter.Enter(invocationId, this, "ListSyncAgentLinkedDatabaseAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/syncAgents/";
            url = url + Uri.EscapeDataString(syncAgentName);
            url = url + "/linkedDatabases";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncAgentLinkedDatabaseListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncAgentLinkedDatabaseListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SyncAgentLinkedDatabase syncAgentLinkedDatabaseInstance = new SyncAgentLinkedDatabase();
                                    result.LinkedDatabases.Add(syncAgentLinkedDatabaseInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        SyncAgentLinkedDatabaseProperties propertiesInstance = new SyncAgentLinkedDatabaseProperties();
                                        syncAgentLinkedDatabaseInstance.Properties = propertiesInstance;
                                        
                                        JToken databaseIdValue = propertiesValue["databaseId"];
                                        if (databaseIdValue != null && databaseIdValue.Type != JTokenType.Null)
                                        {
                                            string databaseIdInstance = ((string)databaseIdValue);
                                            propertiesInstance.DatabaseId = databaseIdInstance;
                                        }
                                        
                                        JToken serverNameValue = propertiesValue["serverName"];
                                        if (serverNameValue != null && serverNameValue.Type != JTokenType.Null)
                                        {
                                            string serverNameInstance = ((string)serverNameValue);
                                            propertiesInstance.SeverName = serverNameInstance;
                                        }
                                        
                                        JToken databaseNameValue = propertiesValue["databaseName"];
                                        if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                        {
                                            string databaseNameInstance = ((string)databaseNameValue);
                                            propertiesInstance.DatabaseName = databaseNameInstance;
                                        }
                                        
                                        JToken userNameValue = propertiesValue["userName"];
                                        if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                        {
                                            string userNameInstance = ((string)userNameValue);
                                            propertiesInstance.UserName = userNameInstance;
                                        }
                                        
                                        JToken databaseTypeValue = propertiesValue["databaseType"];
                                        if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                        {
                                            string databaseTypeInstance = ((string)databaseTypeValue);
                                            propertiesInstance.DatabaseType = databaseTypeInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        syncAgentLinkedDatabaseInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        syncAgentLinkedDatabaseInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        syncAgentLinkedDatabaseInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        syncAgentLinkedDatabaseInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            syncAgentLinkedDatabaseInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all the sync groups available under a given Azure SQL database.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for listing sync group operations.
        /// </returns>
        public async Task<SyncGroupListResponse> ListSyncGroupAsync(string resourceGroupName, string serverName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "ListSyncGroupAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncGroupListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncGroupListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SyncGroup syncGroupInstance = new SyncGroup();
                                    result.SyncGroups.Add(syncGroupInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        SyncGroupProperties propertiesInstance = new SyncGroupProperties();
                                        syncGroupInstance.Properties = propertiesInstance;
                                        
                                        JToken intervalValue = propertiesValue["interval"];
                                        if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                        {
                                            int intervalInstance = ((int)intervalValue);
                                            propertiesInstance.Interval = intervalInstance;
                                        }
                                        
                                        JToken syncDatabaseIdValue = propertiesValue["syncDatabaseId"];
                                        if (syncDatabaseIdValue != null && syncDatabaseIdValue.Type != JTokenType.Null)
                                        {
                                            string syncDatabaseIdInstance = ((string)syncDatabaseIdValue);
                                            propertiesInstance.SyncDatabaseId = syncDatabaseIdInstance;
                                        }
                                        
                                        JToken conflictResolutionPolicyValue = propertiesValue["conflictResolutionPolicy"];
                                        if (conflictResolutionPolicyValue != null && conflictResolutionPolicyValue.Type != JTokenType.Null)
                                        {
                                            ConflictResolutionPolicyType conflictResolutionPolicyInstance = ((ConflictResolutionPolicyType)Enum.Parse(typeof(ConflictResolutionPolicyType), ((string)conflictResolutionPolicyValue), true));
                                            propertiesInstance.ConflictResolutionPolicy = conflictResolutionPolicyInstance;
                                        }
                                        
                                        JToken hubDatabaseUserNameValue = propertiesValue["hubDatabaseUserName"];
                                        if (hubDatabaseUserNameValue != null && hubDatabaseUserNameValue.Type != JTokenType.Null)
                                        {
                                            string hubDatabaseUserNameInstance = ((string)hubDatabaseUserNameValue);
                                            propertiesInstance.HubDatabaseUserName = hubDatabaseUserNameInstance;
                                        }
                                        
                                        JToken syncStateValue = propertiesValue["syncState"];
                                        if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                        {
                                            string syncStateInstance = ((string)syncStateValue);
                                            propertiesInstance.SyncState = syncStateInstance;
                                        }
                                        
                                        JToken lastSyncTimeValue = propertiesValue["lastSyncTime"];
                                        if (lastSyncTimeValue != null && lastSyncTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastSyncTimeInstance = ((DateTime)lastSyncTimeValue);
                                            propertiesInstance.LastSyncTime = lastSyncTimeInstance;
                                        }
                                        
                                        JToken schemaValue = propertiesValue["schema"];
                                        if (schemaValue != null && schemaValue.Type != JTokenType.Null)
                                        {
                                            SyncGroupSchema schemaInstance = new SyncGroupSchema();
                                            propertiesInstance.Schema = schemaInstance;
                                            
                                            JToken tablesArray = schemaValue["tables"];
                                            if (tablesArray != null && tablesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken tablesValue in ((JArray)tablesArray))
                                                {
                                                    SyncGroupSchemaTable tablesInstance = new SyncGroupSchemaTable();
                                                    schemaInstance.Tables.Add(tablesInstance);
                                                    
                                                    JToken columnsArray = tablesValue["columns"];
                                                    if (columnsArray != null && columnsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken columnsValue in ((JArray)columnsArray))
                                                        {
                                                            SyncGroupSchemaColumn columnsInstance = new SyncGroupSchemaColumn();
                                                            tablesInstance.Columns.Add(columnsInstance);
                                                            
                                                            JToken quotedNameValue = columnsValue["quotedName"];
                                                            if (quotedNameValue != null && quotedNameValue.Type != JTokenType.Null)
                                                            {
                                                                string quotedNameInstance = ((string)quotedNameValue);
                                                                columnsInstance.QuotedName = quotedNameInstance;
                                                            }
                                                            
                                                            JToken dataSizeValue = columnsValue["dataSize"];
                                                            if (dataSizeValue != null && dataSizeValue.Type != JTokenType.Null)
                                                            {
                                                                string dataSizeInstance = ((string)dataSizeValue);
                                                                columnsInstance.DataSize = dataSizeInstance;
                                                            }
                                                            
                                                            JToken dataTypeValue = columnsValue["dataType"];
                                                            if (dataTypeValue != null && dataTypeValue.Type != JTokenType.Null)
                                                            {
                                                                string dataTypeInstance = ((string)dataTypeValue);
                                                                columnsInstance.DataType = dataTypeInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken quotedNameValue2 = tablesValue["quotedName"];
                                                    if (quotedNameValue2 != null && quotedNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string quotedNameInstance2 = ((string)quotedNameValue2);
                                                        tablesInstance.QuotedName = quotedNameInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken masterSyncMemberNameValue = schemaValue["masterSyncMemberName"];
                                            if (masterSyncMemberNameValue != null && masterSyncMemberNameValue.Type != JTokenType.Null)
                                            {
                                                string masterSyncMemberNameInstance = ((string)masterSyncMemberNameValue);
                                                schemaInstance.MasterSyncMemberName = masterSyncMemberNameInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        syncGroupInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        syncGroupInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        syncGroupInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        syncGroupInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            syncGroupInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the synchronization logs of a sync group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters for getting logs of a sync
        /// group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for listing sync group log operations.
        /// </returns>
        public async Task<SyncGroupLogListResponse> ListSyncGroupLogAsync(string resourceGroupName, string serverName, string databaseName, SyncGroupLogGetParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.StartTime == null)
            {
                throw new ArgumentNullException("parameters.StartTime");
            }
            if (parameters.SyncGroupName == null)
            {
                throw new ArgumentNullException("parameters.SyncGroupName");
            }
            if (parameters.Type == null)
            {
                throw new ArgumentNullException("parameters.Type");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListSyncGroupLogAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(parameters.SyncGroupName);
            url = url + "/logs";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("startTime=" + Uri.EscapeDataString(parameters.StartTime));
            if (parameters.EndTime != null)
            {
                queryParameters.Add("endTime=" + Uri.EscapeDataString(parameters.EndTime));
            }
            queryParameters.Add("type=" + Uri.EscapeDataString(parameters.Type));
            if (parameters.ContinuationToken != null)
            {
                queryParameters.Add("continuationToken=" + Uri.EscapeDataString(parameters.ContinuationToken));
            }
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncGroupLogListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncGroupLogListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SyncGroupLog syncGroupLogInstance = new SyncGroupLog();
                                    result.SyncGroupLogs.Add(syncGroupLogInstance);
                                    
                                    JToken timestampValue = valueValue["timestamp"];
                                    if (timestampValue != null && timestampValue.Type != JTokenType.Null)
                                    {
                                        DateTime timestampInstance = ((DateTime)timestampValue);
                                        syncGroupLogInstance.TimeStamp = timestampInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        LogType typeInstance = ((LogType)Enum.Parse(typeof(LogType), ((string)typeValue), true));
                                        syncGroupLogInstance.Type = typeInstance;
                                    }
                                    
                                    JToken detailsValue = valueValue["details"];
                                    if (detailsValue != null && detailsValue.Type != JTokenType.Null)
                                    {
                                        string detailsInstance = ((string)detailsValue);
                                        syncGroupLogInstance.Details = detailsInstance;
                                    }
                                    
                                    JToken sourceValue = valueValue["source"];
                                    if (sourceValue != null && sourceValue.Type != JTokenType.Null)
                                    {
                                        string sourceInstance = ((string)sourceValue);
                                        syncGroupLogInstance.Source = sourceInstance;
                                    }
                                }
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// List all the sync members under a specified sync group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for listing sync member operations.
        /// </returns>
        public async Task<SyncMemberListResponse> ListSyncMemberAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException("syncGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("syncGroupName", syncGroupName);
                TracingAdapter.Enter(invocationId, this, "ListSyncMemberAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(syncGroupName);
            url = url + "/syncMembers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SyncMemberListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SyncMemberListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SyncMember syncMemberInstance = new SyncMember();
                                    result.SyncMembers.Add(syncMemberInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        SyncMemberProperties propertiesInstance = new SyncMemberProperties();
                                        syncMemberInstance.Properties = propertiesInstance;
                                        
                                        JToken syncDirectionValue = propertiesValue["syncDirection"];
                                        if (syncDirectionValue != null && syncDirectionValue.Type != JTokenType.Null)
                                        {
                                            SyncDirectionEnum syncDirectionInstance = ((SyncDirectionEnum)Enum.Parse(typeof(SyncDirectionEnum), ((string)syncDirectionValue), true));
                                            propertiesInstance.SyncDirection = syncDirectionInstance;
                                        }
                                        
                                        JToken syncAgentIdValue = propertiesValue["syncAgentId"];
                                        if (syncAgentIdValue != null && syncAgentIdValue.Type != JTokenType.Null)
                                        {
                                            string syncAgentIdInstance = ((string)syncAgentIdValue);
                                            propertiesInstance.SyncAgentId = syncAgentIdInstance;
                                        }
                                        
                                        JToken sqlServerDatabaseIdValue = propertiesValue["sqlServerDatabaseId"];
                                        if (sqlServerDatabaseIdValue != null && sqlServerDatabaseIdValue.Type != JTokenType.Null)
                                        {
                                            string sqlServerDatabaseIdInstance = ((string)sqlServerDatabaseIdValue);
                                            propertiesInstance.SqlServerDatabaseId = sqlServerDatabaseIdInstance;
                                        }
                                        
                                        JToken serverNameValue = propertiesValue["serverName"];
                                        if (serverNameValue != null && serverNameValue.Type != JTokenType.Null)
                                        {
                                            string serverNameInstance = ((string)serverNameValue);
                                            propertiesInstance.ServerName = serverNameInstance;
                                        }
                                        
                                        JToken databaseNameValue = propertiesValue["databaseName"];
                                        if (databaseNameValue != null && databaseNameValue.Type != JTokenType.Null)
                                        {
                                            string databaseNameInstance = ((string)databaseNameValue);
                                            propertiesInstance.DatabaseName = databaseNameInstance;
                                        }
                                        
                                        JToken userNameValue = propertiesValue["userName"];
                                        if (userNameValue != null && userNameValue.Type != JTokenType.Null)
                                        {
                                            string userNameInstance = ((string)userNameValue);
                                            propertiesInstance.UserName = userNameInstance;
                                        }
                                        
                                        JToken databaseTypeValue = propertiesValue["databaseType"];
                                        if (databaseTypeValue != null && databaseTypeValue.Type != JTokenType.Null)
                                        {
                                            DatabaseTypeEnum databaseTypeInstance = ((DatabaseTypeEnum)Enum.Parse(typeof(DatabaseTypeEnum), ((string)databaseTypeValue), true));
                                            propertiesInstance.DatabaseType = databaseTypeInstance;
                                        }
                                        
                                        JToken syncStateValue = propertiesValue["syncState"];
                                        if (syncStateValue != null && syncStateValue.Type != JTokenType.Null)
                                        {
                                            string syncStateInstance = ((string)syncStateValue);
                                            propertiesInstance.SyncState = syncStateInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        syncMemberInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        syncMemberInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        syncMemberInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        syncMemberInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            syncMemberInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Trigger synchronization of a sync group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> StartSyncGroupSynchronizationAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException("syncGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("syncGroupName", syncGroupName);
                TracingAdapter.Enter(invocationId, this, "StartSyncGroupSynchronizationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(syncGroupName);
            url = url + "/triggerSync";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Cancel synchronization of a sync group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> StopSyncGroupSynchronizationAsync(string resourceGroupName, string serverName, string databaseName, string syncGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (syncGroupName == null)
            {
                throw new ArgumentNullException("syncGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("syncGroupName", syncGroupName);
                TracingAdapter.Enter(invocationId, this, "StopSyncGroupSynchronizationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/syncGroups/";
            url = url + Uri.EscapeDataString(syncGroupName);
            url = url + "/cancelSync";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Update an existing sync group with the specified parameters.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of updating sync group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public async Task<SyncGroupCreateOrUpdateResponse> UpdateSyncGroupAsync(string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateSyncGroupAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            SyncGroupCreateOrUpdateResponse response = await client.DataSync.BeginUpdateSyncGroupAsync(resourceGroupName, serverName, databaseName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            SyncGroupCreateOrUpdateResponse result = await client.DataSync.GetUpdateSyncGroupOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DataSync.GetUpdateSyncGroupOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Update an exsting sync member under a specified sync group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public async Task<SyncMemberCreateOrUpdateResponse> UpdateSyncMemberAsync(string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateSyncMemberAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            SyncMemberCreateOrUpdateResponse response = await client.DataSync.BeginUpdateSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            SyncMemberCreateOrUpdateResponse result = await client.DataSync.GetUpdateSyncMemberOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.DataSync.GetUpdateSyncMemberOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
