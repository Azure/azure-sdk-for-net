// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Sql
{
    /// <summary>
    /// Represents all the operations for managing recommended actions on Azure
    /// SQL Server. Contains operations to retrieve recommended action and
    /// update its state.
    /// </summary>
    internal partial class ServerRecommendedActionOperations : IServiceOperations<SqlManagementClient>, IServerRecommendedActionOperations
    {
        /// <summary>
        /// Initializes a new instance of the ServerRecommendedActionOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ServerRecommendedActionOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Returns details of a recommended action.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL server.
        /// </param>
        /// <param name='advisorName'>
        /// Required. The name of the Azure SQL Server advisor.
        /// </param>
        /// <param name='recommendedActionName'>
        /// Required. The name of the Azure SQL Server recommended action.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a get recommended action request.
        /// </returns>
        public async Task<RecommendedActionGetResponse> GetAsync(string resourceGroupName, string serverName, string advisorName, string recommendedActionName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (advisorName == null)
            {
                throw new ArgumentNullException("advisorName");
            }
            if (recommendedActionName == null)
            {
                throw new ArgumentNullException("recommendedActionName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("advisorName", advisorName);
                tracingParameters.Add("recommendedActionName", recommendedActionName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/advisors/";
            url = url + Uri.EscapeDataString(advisorName);
            url = url + "/recommendedActions/";
            url = url + Uri.EscapeDataString(recommendedActionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecommendedActionGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecommendedActionGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecommendedAction recommendedActionInstance = new RecommendedAction();
                            result.RecommendedAction = recommendedActionInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecommendedActionProperties propertiesInstance = new RecommendedActionProperties();
                                recommendedActionInstance.Properties = propertiesInstance;
                                
                                JToken recommendationReasonValue = propertiesValue["recommendationReason"];
                                if (recommendationReasonValue != null && recommendationReasonValue.Type != JTokenType.Null)
                                {
                                    string recommendationReasonInstance = ((string)recommendationReasonValue);
                                    propertiesInstance.RecommendationReason = recommendationReasonInstance;
                                }
                                
                                JToken validSinceValue = propertiesValue["validSince"];
                                if (validSinceValue != null && validSinceValue.Type != JTokenType.Null)
                                {
                                    DateTime validSinceInstance = ((DateTime)validSinceValue);
                                    propertiesInstance.ValidSince = validSinceInstance;
                                }
                                
                                JToken lastRefreshValue = propertiesValue["lastRefresh"];
                                if (lastRefreshValue != null && lastRefreshValue.Type != JTokenType.Null)
                                {
                                    DateTime lastRefreshInstance = ((DateTime)lastRefreshValue);
                                    propertiesInstance.LastRefresh = lastRefreshInstance;
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    RecommendedActionStateInfo stateInstance = new RecommendedActionStateInfo();
                                    propertiesInstance.State = stateInstance;
                                    
                                    JToken currentValueValue = stateValue["currentValue"];
                                    if (currentValueValue != null && currentValueValue.Type != JTokenType.Null)
                                    {
                                        string currentValueInstance = ((string)currentValueValue);
                                        stateInstance.CurrentValue = currentValueInstance;
                                    }
                                    
                                    JToken actionInitiatedByValue = stateValue["actionInitiatedBy"];
                                    if (actionInitiatedByValue != null && actionInitiatedByValue.Type != JTokenType.Null)
                                    {
                                        string actionInitiatedByInstance = ((string)actionInitiatedByValue);
                                        stateInstance.ActionInitiatedBy = actionInitiatedByInstance;
                                    }
                                    
                                    JToken lastModifiedValue = stateValue["lastModified"];
                                    if (lastModifiedValue != null && lastModifiedValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastModifiedInstance = ((DateTime)lastModifiedValue);
                                        stateInstance.LastModified = lastModifiedInstance;
                                    }
                                }
                                
                                JToken isExecutableActionValue = propertiesValue["isExecutableAction"];
                                if (isExecutableActionValue != null && isExecutableActionValue.Type != JTokenType.Null)
                                {
                                    bool isExecutableActionInstance = ((bool)isExecutableActionValue);
                                    propertiesInstance.IsExecutableAction = isExecutableActionInstance;
                                }
                                
                                JToken isRevertableActionValue = propertiesValue["isRevertableAction"];
                                if (isRevertableActionValue != null && isRevertableActionValue.Type != JTokenType.Null)
                                {
                                    bool isRevertableActionInstance = ((bool)isRevertableActionValue);
                                    propertiesInstance.IsRevertableAction = isRevertableActionInstance;
                                }
                                
                                JToken isArchivedActionValue = propertiesValue["isArchivedAction"];
                                if (isArchivedActionValue != null && isArchivedActionValue.Type != JTokenType.Null)
                                {
                                    bool isArchivedActionInstance = ((bool)isArchivedActionValue);
                                    propertiesInstance.IsArchivedAction = isArchivedActionInstance;
                                }
                                
                                JToken executeActionStartTimeValue = propertiesValue["executeActionStartTime"];
                                if (executeActionStartTimeValue != null && executeActionStartTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime executeActionStartTimeInstance = ((DateTime)executeActionStartTimeValue);
                                    propertiesInstance.ExecuteActionStartTime = executeActionStartTimeInstance;
                                }
                                
                                JToken executeActionDurationValue = propertiesValue["executeActionDuration"];
                                if (executeActionDurationValue != null && executeActionDurationValue.Type != JTokenType.Null)
                                {
                                    string executeActionDurationInstance = ((string)executeActionDurationValue);
                                    propertiesInstance.ExecuteActionDuration = executeActionDurationInstance;
                                }
                                
                                JToken revertActionStartTimeValue = propertiesValue["revertActionStartTime"];
                                if (revertActionStartTimeValue != null && revertActionStartTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime revertActionStartTimeInstance = ((DateTime)revertActionStartTimeValue);
                                    propertiesInstance.RevertActionStartTime = revertActionStartTimeInstance;
                                }
                                
                                JToken revertActionDurationValue = propertiesValue["revertActionDuration"];
                                if (revertActionDurationValue != null && revertActionDurationValue.Type != JTokenType.Null)
                                {
                                    string revertActionDurationInstance = ((string)revertActionDurationValue);
                                    propertiesInstance.RevertActionDuration = revertActionDurationInstance;
                                }
                                
                                JToken executeActionInitiatedByValue = propertiesValue["executeActionInitiatedBy"];
                                if (executeActionInitiatedByValue != null && executeActionInitiatedByValue.Type != JTokenType.Null)
                                {
                                    string executeActionInitiatedByInstance = ((string)executeActionInitiatedByValue);
                                    propertiesInstance.ExecuteActionInitiatedBy = executeActionInitiatedByInstance;
                                }
                                
                                JToken executeActionInitiatedTimeValue = propertiesValue["executeActionInitiatedTime"];
                                if (executeActionInitiatedTimeValue != null && executeActionInitiatedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime executeActionInitiatedTimeInstance = ((DateTime)executeActionInitiatedTimeValue);
                                    propertiesInstance.ExecuteActionInitiatedTime = executeActionInitiatedTimeInstance;
                                }
                                
                                JToken revertActionInitiatedByValue = propertiesValue["revertActionInitiatedBy"];
                                if (revertActionInitiatedByValue != null && revertActionInitiatedByValue.Type != JTokenType.Null)
                                {
                                    string revertActionInitiatedByInstance = ((string)revertActionInitiatedByValue);
                                    propertiesInstance.RevertActionInitiatedBy = revertActionInitiatedByInstance;
                                }
                                
                                JToken revertActionInitiatedTimeValue = propertiesValue["revertActionInitiatedTime"];
                                if (revertActionInitiatedTimeValue != null && revertActionInitiatedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime revertActionInitiatedTimeInstance = ((DateTime)revertActionInitiatedTimeValue);
                                    propertiesInstance.RevertActionInitiatedTime = revertActionInitiatedTimeInstance;
                                }
                                
                                JToken scoreValue = propertiesValue["score"];
                                if (scoreValue != null && scoreValue.Type != JTokenType.Null)
                                {
                                    int scoreInstance = ((int)scoreValue);
                                    propertiesInstance.Score = scoreInstance;
                                }
                                
                                JToken implementationDetailsValue = propertiesValue["implementationDetails"];
                                if (implementationDetailsValue != null && implementationDetailsValue.Type != JTokenType.Null)
                                {
                                    RecommendedActionImplementationInfo implementationDetailsInstance = new RecommendedActionImplementationInfo();
                                    propertiesInstance.ImplementationDetails = implementationDetailsInstance;
                                    
                                    JToken methodValue = implementationDetailsValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        implementationDetailsInstance.Method = methodInstance;
                                    }
                                    
                                    JToken scriptValue = implementationDetailsValue["script"];
                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                    {
                                        string scriptInstance = ((string)scriptValue);
                                        implementationDetailsInstance.Script = scriptInstance;
                                    }
                                }
                                
                                JToken errorDetailsValue = propertiesValue["errorDetails"];
                                if (errorDetailsValue != null && errorDetailsValue.Type != JTokenType.Null)
                                {
                                    RecommendedActionErrorInfo errorDetailsInstance = new RecommendedActionErrorInfo();
                                    propertiesInstance.ErrorDetails = errorDetailsInstance;
                                    
                                    JToken errorCodeValue = errorDetailsValue["errorCode"];
                                    if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                    {
                                        string errorCodeInstance = ((string)errorCodeValue);
                                        errorDetailsInstance.ErrorCode = errorCodeInstance;
                                    }
                                    
                                    JToken isRetryableValue = errorDetailsValue["isRetryable"];
                                    if (isRetryableValue != null && isRetryableValue.Type != JTokenType.Null)
                                    {
                                        string isRetryableInstance = ((string)isRetryableValue);
                                        errorDetailsInstance.IsRetryable = isRetryableInstance;
                                    }
                                }
                                
                                JToken estimatedImpactArray = propertiesValue["estimatedImpact"];
                                if (estimatedImpactArray != null && estimatedImpactArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken estimatedImpactValue in ((JArray)estimatedImpactArray))
                                    {
                                        RecommendedActionImpactInfo recommendedActionImpactInfoInstance = new RecommendedActionImpactInfo();
                                        propertiesInstance.EstimatedImpact.Add(recommendedActionImpactInfoInstance);
                                        
                                        JToken dimensionNameValue = estimatedImpactValue["dimensionName"];
                                        if (dimensionNameValue != null && dimensionNameValue.Type != JTokenType.Null)
                                        {
                                            string dimensionNameInstance = ((string)dimensionNameValue);
                                            recommendedActionImpactInfoInstance.DimensionName = dimensionNameInstance;
                                        }
                                        
                                        JToken unitValue = estimatedImpactValue["unit"];
                                        if (unitValue != null && unitValue.Type != JTokenType.Null)
                                        {
                                            string unitInstance = ((string)unitValue);
                                            recommendedActionImpactInfoInstance.Unit = unitInstance;
                                        }
                                        
                                        JToken absoluteValueValue = estimatedImpactValue["absoluteValue"];
                                        if (absoluteValueValue != null && absoluteValueValue.Type != JTokenType.Null)
                                        {
                                            double absoluteValueInstance = ((double)absoluteValueValue);
                                            recommendedActionImpactInfoInstance.AbsoluteValue = absoluteValueInstance;
                                        }
                                        
                                        JToken changeValueAbsoluteValue = estimatedImpactValue["changeValueAbsolute"];
                                        if (changeValueAbsoluteValue != null && changeValueAbsoluteValue.Type != JTokenType.Null)
                                        {
                                            double changeValueAbsoluteInstance = ((double)changeValueAbsoluteValue);
                                            recommendedActionImpactInfoInstance.ChangeValueAbsolute = changeValueAbsoluteInstance;
                                        }
                                        
                                        JToken changeValueRelativeValue = estimatedImpactValue["changeValueRelative"];
                                        if (changeValueRelativeValue != null && changeValueRelativeValue.Type != JTokenType.Null)
                                        {
                                            double changeValueRelativeInstance = ((double)changeValueRelativeValue);
                                            recommendedActionImpactInfoInstance.ChangeValueRelative = changeValueRelativeInstance;
                                        }
                                    }
                                }
                                
                                JToken observedImpactArray = propertiesValue["observedImpact"];
                                if (observedImpactArray != null && observedImpactArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken observedImpactValue in ((JArray)observedImpactArray))
                                    {
                                        RecommendedActionImpactInfo recommendedActionImpactInfoInstance2 = new RecommendedActionImpactInfo();
                                        propertiesInstance.ObservedImpact.Add(recommendedActionImpactInfoInstance2);
                                        
                                        JToken dimensionNameValue2 = observedImpactValue["dimensionName"];
                                        if (dimensionNameValue2 != null && dimensionNameValue2.Type != JTokenType.Null)
                                        {
                                            string dimensionNameInstance2 = ((string)dimensionNameValue2);
                                            recommendedActionImpactInfoInstance2.DimensionName = dimensionNameInstance2;
                                        }
                                        
                                        JToken unitValue2 = observedImpactValue["unit"];
                                        if (unitValue2 != null && unitValue2.Type != JTokenType.Null)
                                        {
                                            string unitInstance2 = ((string)unitValue2);
                                            recommendedActionImpactInfoInstance2.Unit = unitInstance2;
                                        }
                                        
                                        JToken absoluteValueValue2 = observedImpactValue["absoluteValue"];
                                        if (absoluteValueValue2 != null && absoluteValueValue2.Type != JTokenType.Null)
                                        {
                                            double absoluteValueInstance2 = ((double)absoluteValueValue2);
                                            recommendedActionImpactInfoInstance2.AbsoluteValue = absoluteValueInstance2;
                                        }
                                        
                                        JToken changeValueAbsoluteValue2 = observedImpactValue["changeValueAbsolute"];
                                        if (changeValueAbsoluteValue2 != null && changeValueAbsoluteValue2.Type != JTokenType.Null)
                                        {
                                            double changeValueAbsoluteInstance2 = ((double)changeValueAbsoluteValue2);
                                            recommendedActionImpactInfoInstance2.ChangeValueAbsolute = changeValueAbsoluteInstance2;
                                        }
                                        
                                        JToken changeValueRelativeValue2 = observedImpactValue["changeValueRelative"];
                                        if (changeValueRelativeValue2 != null && changeValueRelativeValue2.Type != JTokenType.Null)
                                        {
                                            double changeValueRelativeInstance2 = ((double)changeValueRelativeValue2);
                                            recommendedActionImpactInfoInstance2.ChangeValueRelative = changeValueRelativeInstance2;
                                        }
                                    }
                                }
                                
                                JToken timeSeriesArray = propertiesValue["timeSeries"];
                                if (timeSeriesArray != null && timeSeriesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken timeSeriesValue in ((JArray)timeSeriesArray))
                                    {
                                        RecommendedActionMetricInfo recommendedActionMetricInfoInstance = new RecommendedActionMetricInfo();
                                        propertiesInstance.TimeSeries.Add(recommendedActionMetricInfoInstance);
                                        
                                        JToken metricNameValue = timeSeriesValue["metricName"];
                                        if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                        {
                                            string metricNameInstance = ((string)metricNameValue);
                                            recommendedActionMetricInfoInstance.MetricName = metricNameInstance;
                                        }
                                        
                                        JToken unitValue3 = timeSeriesValue["unit"];
                                        if (unitValue3 != null && unitValue3.Type != JTokenType.Null)
                                        {
                                            string unitInstance3 = ((string)unitValue3);
                                            recommendedActionMetricInfoInstance.Unit = unitInstance3;
                                        }
                                        
                                        JToken absoluteValueValue3 = timeSeriesValue["absoluteValue"];
                                        if (absoluteValueValue3 != null && absoluteValueValue3.Type != JTokenType.Null)
                                        {
                                            string absoluteValueInstance3 = ((string)absoluteValueValue3);
                                            recommendedActionMetricInfoInstance.TimeGrain = absoluteValueInstance3;
                                        }
                                        
                                        JToken startTimeValue = timeSeriesValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            recommendedActionMetricInfoInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken valueValue = timeSeriesValue["value"];
                                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                                        {
                                            double valueInstance = ((double)valueValue);
                                            recommendedActionMetricInfoInstance.Value = valueInstance;
                                        }
                                    }
                                }
                                
                                JToken linkedObjectsArray = propertiesValue["linkedObjects"];
                                if (linkedObjectsArray != null && linkedObjectsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken linkedObjectsValue in ((JArray)linkedObjectsArray))
                                    {
                                        propertiesInstance.LinkedObjects.Add(((string)linkedObjectsValue));
                                    }
                                }
                                
                                JToken detailsSequenceElement = ((JToken)propertiesValue["details"]);
                                if (detailsSequenceElement != null && detailsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in detailsSequenceElement)
                                    {
                                        string detailsKey = ((string)property.Name);
                                        object detailsValue = ((string)property.Value);
                                        propertiesInstance.Details.Add(detailsKey, detailsValue);
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                recommendedActionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recommendedActionInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recommendedActionInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recommendedActionInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property2.Name);
                                    string tagsValue = ((string)property2.Value);
                                    recommendedActionInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns list of recommended actions for this advisor.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL server.
        /// </param>
        /// <param name='advisorName'>
        /// Required. The name of the Azure SQL Server advisor.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a list recommended actions request.
        /// </returns>
        public async Task<RecommendedActionListResponse> ListAsync(string resourceGroupName, string serverName, string advisorName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (advisorName == null)
            {
                throw new ArgumentNullException("advisorName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("advisorName", advisorName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/advisors/";
            url = url + Uri.EscapeDataString(advisorName);
            url = url + "/recommendedActions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecommendedActionListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecommendedActionListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken recommendedActionsArray = responseDoc;
                            if (recommendedActionsArray != null && recommendedActionsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken recommendedActionsValue in ((JArray)recommendedActionsArray))
                                {
                                    RecommendedAction recommendedActionInstance = new RecommendedAction();
                                    result.RecommendedActions.Add(recommendedActionInstance);
                                    
                                    JToken propertiesValue = recommendedActionsValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        RecommendedActionProperties propertiesInstance = new RecommendedActionProperties();
                                        recommendedActionInstance.Properties = propertiesInstance;
                                        
                                        JToken recommendationReasonValue = propertiesValue["recommendationReason"];
                                        if (recommendationReasonValue != null && recommendationReasonValue.Type != JTokenType.Null)
                                        {
                                            string recommendationReasonInstance = ((string)recommendationReasonValue);
                                            propertiesInstance.RecommendationReason = recommendationReasonInstance;
                                        }
                                        
                                        JToken validSinceValue = propertiesValue["validSince"];
                                        if (validSinceValue != null && validSinceValue.Type != JTokenType.Null)
                                        {
                                            DateTime validSinceInstance = ((DateTime)validSinceValue);
                                            propertiesInstance.ValidSince = validSinceInstance;
                                        }
                                        
                                        JToken lastRefreshValue = propertiesValue["lastRefresh"];
                                        if (lastRefreshValue != null && lastRefreshValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastRefreshInstance = ((DateTime)lastRefreshValue);
                                            propertiesInstance.LastRefresh = lastRefreshInstance;
                                        }
                                        
                                        JToken stateValue = propertiesValue["state"];
                                        if (stateValue != null && stateValue.Type != JTokenType.Null)
                                        {
                                            RecommendedActionStateInfo stateInstance = new RecommendedActionStateInfo();
                                            propertiesInstance.State = stateInstance;
                                            
                                            JToken currentValueValue = stateValue["currentValue"];
                                            if (currentValueValue != null && currentValueValue.Type != JTokenType.Null)
                                            {
                                                string currentValueInstance = ((string)currentValueValue);
                                                stateInstance.CurrentValue = currentValueInstance;
                                            }
                                            
                                            JToken actionInitiatedByValue = stateValue["actionInitiatedBy"];
                                            if (actionInitiatedByValue != null && actionInitiatedByValue.Type != JTokenType.Null)
                                            {
                                                string actionInitiatedByInstance = ((string)actionInitiatedByValue);
                                                stateInstance.ActionInitiatedBy = actionInitiatedByInstance;
                                            }
                                            
                                            JToken lastModifiedValue = stateValue["lastModified"];
                                            if (lastModifiedValue != null && lastModifiedValue.Type != JTokenType.Null)
                                            {
                                                DateTime lastModifiedInstance = ((DateTime)lastModifiedValue);
                                                stateInstance.LastModified = lastModifiedInstance;
                                            }
                                        }
                                        
                                        JToken isExecutableActionValue = propertiesValue["isExecutableAction"];
                                        if (isExecutableActionValue != null && isExecutableActionValue.Type != JTokenType.Null)
                                        {
                                            bool isExecutableActionInstance = ((bool)isExecutableActionValue);
                                            propertiesInstance.IsExecutableAction = isExecutableActionInstance;
                                        }
                                        
                                        JToken isRevertableActionValue = propertiesValue["isRevertableAction"];
                                        if (isRevertableActionValue != null && isRevertableActionValue.Type != JTokenType.Null)
                                        {
                                            bool isRevertableActionInstance = ((bool)isRevertableActionValue);
                                            propertiesInstance.IsRevertableAction = isRevertableActionInstance;
                                        }
                                        
                                        JToken isArchivedActionValue = propertiesValue["isArchivedAction"];
                                        if (isArchivedActionValue != null && isArchivedActionValue.Type != JTokenType.Null)
                                        {
                                            bool isArchivedActionInstance = ((bool)isArchivedActionValue);
                                            propertiesInstance.IsArchivedAction = isArchivedActionInstance;
                                        }
                                        
                                        JToken executeActionStartTimeValue = propertiesValue["executeActionStartTime"];
                                        if (executeActionStartTimeValue != null && executeActionStartTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime executeActionStartTimeInstance = ((DateTime)executeActionStartTimeValue);
                                            propertiesInstance.ExecuteActionStartTime = executeActionStartTimeInstance;
                                        }
                                        
                                        JToken executeActionDurationValue = propertiesValue["executeActionDuration"];
                                        if (executeActionDurationValue != null && executeActionDurationValue.Type != JTokenType.Null)
                                        {
                                            string executeActionDurationInstance = ((string)executeActionDurationValue);
                                            propertiesInstance.ExecuteActionDuration = executeActionDurationInstance;
                                        }
                                        
                                        JToken revertActionStartTimeValue = propertiesValue["revertActionStartTime"];
                                        if (revertActionStartTimeValue != null && revertActionStartTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime revertActionStartTimeInstance = ((DateTime)revertActionStartTimeValue);
                                            propertiesInstance.RevertActionStartTime = revertActionStartTimeInstance;
                                        }
                                        
                                        JToken revertActionDurationValue = propertiesValue["revertActionDuration"];
                                        if (revertActionDurationValue != null && revertActionDurationValue.Type != JTokenType.Null)
                                        {
                                            string revertActionDurationInstance = ((string)revertActionDurationValue);
                                            propertiesInstance.RevertActionDuration = revertActionDurationInstance;
                                        }
                                        
                                        JToken executeActionInitiatedByValue = propertiesValue["executeActionInitiatedBy"];
                                        if (executeActionInitiatedByValue != null && executeActionInitiatedByValue.Type != JTokenType.Null)
                                        {
                                            string executeActionInitiatedByInstance = ((string)executeActionInitiatedByValue);
                                            propertiesInstance.ExecuteActionInitiatedBy = executeActionInitiatedByInstance;
                                        }
                                        
                                        JToken executeActionInitiatedTimeValue = propertiesValue["executeActionInitiatedTime"];
                                        if (executeActionInitiatedTimeValue != null && executeActionInitiatedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime executeActionInitiatedTimeInstance = ((DateTime)executeActionInitiatedTimeValue);
                                            propertiesInstance.ExecuteActionInitiatedTime = executeActionInitiatedTimeInstance;
                                        }
                                        
                                        JToken revertActionInitiatedByValue = propertiesValue["revertActionInitiatedBy"];
                                        if (revertActionInitiatedByValue != null && revertActionInitiatedByValue.Type != JTokenType.Null)
                                        {
                                            string revertActionInitiatedByInstance = ((string)revertActionInitiatedByValue);
                                            propertiesInstance.RevertActionInitiatedBy = revertActionInitiatedByInstance;
                                        }
                                        
                                        JToken revertActionInitiatedTimeValue = propertiesValue["revertActionInitiatedTime"];
                                        if (revertActionInitiatedTimeValue != null && revertActionInitiatedTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime revertActionInitiatedTimeInstance = ((DateTime)revertActionInitiatedTimeValue);
                                            propertiesInstance.RevertActionInitiatedTime = revertActionInitiatedTimeInstance;
                                        }
                                        
                                        JToken scoreValue = propertiesValue["score"];
                                        if (scoreValue != null && scoreValue.Type != JTokenType.Null)
                                        {
                                            int scoreInstance = ((int)scoreValue);
                                            propertiesInstance.Score = scoreInstance;
                                        }
                                        
                                        JToken implementationDetailsValue = propertiesValue["implementationDetails"];
                                        if (implementationDetailsValue != null && implementationDetailsValue.Type != JTokenType.Null)
                                        {
                                            RecommendedActionImplementationInfo implementationDetailsInstance = new RecommendedActionImplementationInfo();
                                            propertiesInstance.ImplementationDetails = implementationDetailsInstance;
                                            
                                            JToken methodValue = implementationDetailsValue["method"];
                                            if (methodValue != null && methodValue.Type != JTokenType.Null)
                                            {
                                                string methodInstance = ((string)methodValue);
                                                implementationDetailsInstance.Method = methodInstance;
                                            }
                                            
                                            JToken scriptValue = implementationDetailsValue["script"];
                                            if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                            {
                                                string scriptInstance = ((string)scriptValue);
                                                implementationDetailsInstance.Script = scriptInstance;
                                            }
                                        }
                                        
                                        JToken errorDetailsValue = propertiesValue["errorDetails"];
                                        if (errorDetailsValue != null && errorDetailsValue.Type != JTokenType.Null)
                                        {
                                            RecommendedActionErrorInfo errorDetailsInstance = new RecommendedActionErrorInfo();
                                            propertiesInstance.ErrorDetails = errorDetailsInstance;
                                            
                                            JToken errorCodeValue = errorDetailsValue["errorCode"];
                                            if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                            {
                                                string errorCodeInstance = ((string)errorCodeValue);
                                                errorDetailsInstance.ErrorCode = errorCodeInstance;
                                            }
                                            
                                            JToken isRetryableValue = errorDetailsValue["isRetryable"];
                                            if (isRetryableValue != null && isRetryableValue.Type != JTokenType.Null)
                                            {
                                                string isRetryableInstance = ((string)isRetryableValue);
                                                errorDetailsInstance.IsRetryable = isRetryableInstance;
                                            }
                                        }
                                        
                                        JToken estimatedImpactArray = propertiesValue["estimatedImpact"];
                                        if (estimatedImpactArray != null && estimatedImpactArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken estimatedImpactValue in ((JArray)estimatedImpactArray))
                                            {
                                                RecommendedActionImpactInfo recommendedActionImpactInfoInstance = new RecommendedActionImpactInfo();
                                                propertiesInstance.EstimatedImpact.Add(recommendedActionImpactInfoInstance);
                                                
                                                JToken dimensionNameValue = estimatedImpactValue["dimensionName"];
                                                if (dimensionNameValue != null && dimensionNameValue.Type != JTokenType.Null)
                                                {
                                                    string dimensionNameInstance = ((string)dimensionNameValue);
                                                    recommendedActionImpactInfoInstance.DimensionName = dimensionNameInstance;
                                                }
                                                
                                                JToken unitValue = estimatedImpactValue["unit"];
                                                if (unitValue != null && unitValue.Type != JTokenType.Null)
                                                {
                                                    string unitInstance = ((string)unitValue);
                                                    recommendedActionImpactInfoInstance.Unit = unitInstance;
                                                }
                                                
                                                JToken absoluteValueValue = estimatedImpactValue["absoluteValue"];
                                                if (absoluteValueValue != null && absoluteValueValue.Type != JTokenType.Null)
                                                {
                                                    double absoluteValueInstance = ((double)absoluteValueValue);
                                                    recommendedActionImpactInfoInstance.AbsoluteValue = absoluteValueInstance;
                                                }
                                                
                                                JToken changeValueAbsoluteValue = estimatedImpactValue["changeValueAbsolute"];
                                                if (changeValueAbsoluteValue != null && changeValueAbsoluteValue.Type != JTokenType.Null)
                                                {
                                                    double changeValueAbsoluteInstance = ((double)changeValueAbsoluteValue);
                                                    recommendedActionImpactInfoInstance.ChangeValueAbsolute = changeValueAbsoluteInstance;
                                                }
                                                
                                                JToken changeValueRelativeValue = estimatedImpactValue["changeValueRelative"];
                                                if (changeValueRelativeValue != null && changeValueRelativeValue.Type != JTokenType.Null)
                                                {
                                                    double changeValueRelativeInstance = ((double)changeValueRelativeValue);
                                                    recommendedActionImpactInfoInstance.ChangeValueRelative = changeValueRelativeInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken observedImpactArray = propertiesValue["observedImpact"];
                                        if (observedImpactArray != null && observedImpactArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken observedImpactValue in ((JArray)observedImpactArray))
                                            {
                                                RecommendedActionImpactInfo recommendedActionImpactInfoInstance2 = new RecommendedActionImpactInfo();
                                                propertiesInstance.ObservedImpact.Add(recommendedActionImpactInfoInstance2);
                                                
                                                JToken dimensionNameValue2 = observedImpactValue["dimensionName"];
                                                if (dimensionNameValue2 != null && dimensionNameValue2.Type != JTokenType.Null)
                                                {
                                                    string dimensionNameInstance2 = ((string)dimensionNameValue2);
                                                    recommendedActionImpactInfoInstance2.DimensionName = dimensionNameInstance2;
                                                }
                                                
                                                JToken unitValue2 = observedImpactValue["unit"];
                                                if (unitValue2 != null && unitValue2.Type != JTokenType.Null)
                                                {
                                                    string unitInstance2 = ((string)unitValue2);
                                                    recommendedActionImpactInfoInstance2.Unit = unitInstance2;
                                                }
                                                
                                                JToken absoluteValueValue2 = observedImpactValue["absoluteValue"];
                                                if (absoluteValueValue2 != null && absoluteValueValue2.Type != JTokenType.Null)
                                                {
                                                    double absoluteValueInstance2 = ((double)absoluteValueValue2);
                                                    recommendedActionImpactInfoInstance2.AbsoluteValue = absoluteValueInstance2;
                                                }
                                                
                                                JToken changeValueAbsoluteValue2 = observedImpactValue["changeValueAbsolute"];
                                                if (changeValueAbsoluteValue2 != null && changeValueAbsoluteValue2.Type != JTokenType.Null)
                                                {
                                                    double changeValueAbsoluteInstance2 = ((double)changeValueAbsoluteValue2);
                                                    recommendedActionImpactInfoInstance2.ChangeValueAbsolute = changeValueAbsoluteInstance2;
                                                }
                                                
                                                JToken changeValueRelativeValue2 = observedImpactValue["changeValueRelative"];
                                                if (changeValueRelativeValue2 != null && changeValueRelativeValue2.Type != JTokenType.Null)
                                                {
                                                    double changeValueRelativeInstance2 = ((double)changeValueRelativeValue2);
                                                    recommendedActionImpactInfoInstance2.ChangeValueRelative = changeValueRelativeInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken timeSeriesArray = propertiesValue["timeSeries"];
                                        if (timeSeriesArray != null && timeSeriesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken timeSeriesValue in ((JArray)timeSeriesArray))
                                            {
                                                RecommendedActionMetricInfo recommendedActionMetricInfoInstance = new RecommendedActionMetricInfo();
                                                propertiesInstance.TimeSeries.Add(recommendedActionMetricInfoInstance);
                                                
                                                JToken metricNameValue = timeSeriesValue["metricName"];
                                                if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                {
                                                    string metricNameInstance = ((string)metricNameValue);
                                                    recommendedActionMetricInfoInstance.MetricName = metricNameInstance;
                                                }
                                                
                                                JToken unitValue3 = timeSeriesValue["unit"];
                                                if (unitValue3 != null && unitValue3.Type != JTokenType.Null)
                                                {
                                                    string unitInstance3 = ((string)unitValue3);
                                                    recommendedActionMetricInfoInstance.Unit = unitInstance3;
                                                }
                                                
                                                JToken absoluteValueValue3 = timeSeriesValue["absoluteValue"];
                                                if (absoluteValueValue3 != null && absoluteValueValue3.Type != JTokenType.Null)
                                                {
                                                    string absoluteValueInstance3 = ((string)absoluteValueValue3);
                                                    recommendedActionMetricInfoInstance.TimeGrain = absoluteValueInstance3;
                                                }
                                                
                                                JToken startTimeValue = timeSeriesValue["startTime"];
                                                if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                    recommendedActionMetricInfoInstance.StartTime = startTimeInstance;
                                                }
                                                
                                                JToken valueValue = timeSeriesValue["value"];
                                                if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                {
                                                    double valueInstance = ((double)valueValue);
                                                    recommendedActionMetricInfoInstance.Value = valueInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken linkedObjectsArray = propertiesValue["linkedObjects"];
                                        if (linkedObjectsArray != null && linkedObjectsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken linkedObjectsValue in ((JArray)linkedObjectsArray))
                                            {
                                                propertiesInstance.LinkedObjects.Add(((string)linkedObjectsValue));
                                            }
                                        }
                                        
                                        JToken detailsSequenceElement = ((JToken)propertiesValue["details"]);
                                        if (detailsSequenceElement != null && detailsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property in detailsSequenceElement)
                                            {
                                                string detailsKey = ((string)property.Name);
                                                object detailsValue = ((string)property.Value);
                                                propertiesInstance.Details.Add(detailsKey, detailsValue);
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = recommendedActionsValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        recommendedActionInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = recommendedActionsValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        recommendedActionInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = recommendedActionsValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        recommendedActionInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = recommendedActionsValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        recommendedActionInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)recommendedActionsValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property2 in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property2.Name);
                                            string tagsValue = ((string)property2.Value);
                                            recommendedActionInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates recommended action state.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL server.
        /// </param>
        /// <param name='advisorName'>
        /// Required. The name of the Azure SQL Server advisor.
        /// </param>
        /// <param name='recommendedActionName'>
        /// Required. The name of the Azure SQL Server recommended action.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for updating recommended action
        /// state.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to an update recommended action request.
        /// </returns>
        public async Task<RecommendedActionUpdateResponse> UpdateAsync(string resourceGroupName, string serverName, string advisorName, string recommendedActionName, RecommendedActionUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (advisorName == null)
            {
                throw new ArgumentNullException("advisorName");
            }
            if (recommendedActionName == null)
            {
                throw new ArgumentNullException("recommendedActionName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            if (parameters.Properties.State == null)
            {
                throw new ArgumentNullException("parameters.Properties.State");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("advisorName", advisorName);
                tracingParameters.Add("recommendedActionName", recommendedActionName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/advisors/";
            url = url + Uri.EscapeDataString(advisorName);
            url = url + "/recommendedActions/";
            url = url + Uri.EscapeDataString(recommendedActionName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject recommendedActionUpdateParametersValue = new JObject();
                requestDoc = recommendedActionUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                recommendedActionUpdateParametersValue["properties"] = propertiesValue;
                
                JObject stateValue = new JObject();
                propertiesValue["state"] = stateValue;
                
                if (parameters.Properties.State.CurrentValue != null)
                {
                    stateValue["currentValue"] = parameters.Properties.State.CurrentValue;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecommendedActionUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecommendedActionUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            RecommendedAction recommendedActionInstance = new RecommendedAction();
                            result.RecommendedAction = recommendedActionInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                RecommendedActionProperties propertiesInstance = new RecommendedActionProperties();
                                recommendedActionInstance.Properties = propertiesInstance;
                                
                                JToken recommendationReasonValue = propertiesValue2["recommendationReason"];
                                if (recommendationReasonValue != null && recommendationReasonValue.Type != JTokenType.Null)
                                {
                                    string recommendationReasonInstance = ((string)recommendationReasonValue);
                                    propertiesInstance.RecommendationReason = recommendationReasonInstance;
                                }
                                
                                JToken validSinceValue = propertiesValue2["validSince"];
                                if (validSinceValue != null && validSinceValue.Type != JTokenType.Null)
                                {
                                    DateTime validSinceInstance = ((DateTime)validSinceValue);
                                    propertiesInstance.ValidSince = validSinceInstance;
                                }
                                
                                JToken lastRefreshValue = propertiesValue2["lastRefresh"];
                                if (lastRefreshValue != null && lastRefreshValue.Type != JTokenType.Null)
                                {
                                    DateTime lastRefreshInstance = ((DateTime)lastRefreshValue);
                                    propertiesInstance.LastRefresh = lastRefreshInstance;
                                }
                                
                                JToken stateValue2 = propertiesValue2["state"];
                                if (stateValue2 != null && stateValue2.Type != JTokenType.Null)
                                {
                                    RecommendedActionStateInfo stateInstance = new RecommendedActionStateInfo();
                                    propertiesInstance.State = stateInstance;
                                    
                                    JToken currentValueValue = stateValue2["currentValue"];
                                    if (currentValueValue != null && currentValueValue.Type != JTokenType.Null)
                                    {
                                        string currentValueInstance = ((string)currentValueValue);
                                        stateInstance.CurrentValue = currentValueInstance;
                                    }
                                    
                                    JToken actionInitiatedByValue = stateValue2["actionInitiatedBy"];
                                    if (actionInitiatedByValue != null && actionInitiatedByValue.Type != JTokenType.Null)
                                    {
                                        string actionInitiatedByInstance = ((string)actionInitiatedByValue);
                                        stateInstance.ActionInitiatedBy = actionInitiatedByInstance;
                                    }
                                    
                                    JToken lastModifiedValue = stateValue2["lastModified"];
                                    if (lastModifiedValue != null && lastModifiedValue.Type != JTokenType.Null)
                                    {
                                        DateTime lastModifiedInstance = ((DateTime)lastModifiedValue);
                                        stateInstance.LastModified = lastModifiedInstance;
                                    }
                                }
                                
                                JToken isExecutableActionValue = propertiesValue2["isExecutableAction"];
                                if (isExecutableActionValue != null && isExecutableActionValue.Type != JTokenType.Null)
                                {
                                    bool isExecutableActionInstance = ((bool)isExecutableActionValue);
                                    propertiesInstance.IsExecutableAction = isExecutableActionInstance;
                                }
                                
                                JToken isRevertableActionValue = propertiesValue2["isRevertableAction"];
                                if (isRevertableActionValue != null && isRevertableActionValue.Type != JTokenType.Null)
                                {
                                    bool isRevertableActionInstance = ((bool)isRevertableActionValue);
                                    propertiesInstance.IsRevertableAction = isRevertableActionInstance;
                                }
                                
                                JToken isArchivedActionValue = propertiesValue2["isArchivedAction"];
                                if (isArchivedActionValue != null && isArchivedActionValue.Type != JTokenType.Null)
                                {
                                    bool isArchivedActionInstance = ((bool)isArchivedActionValue);
                                    propertiesInstance.IsArchivedAction = isArchivedActionInstance;
                                }
                                
                                JToken executeActionStartTimeValue = propertiesValue2["executeActionStartTime"];
                                if (executeActionStartTimeValue != null && executeActionStartTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime executeActionStartTimeInstance = ((DateTime)executeActionStartTimeValue);
                                    propertiesInstance.ExecuteActionStartTime = executeActionStartTimeInstance;
                                }
                                
                                JToken executeActionDurationValue = propertiesValue2["executeActionDuration"];
                                if (executeActionDurationValue != null && executeActionDurationValue.Type != JTokenType.Null)
                                {
                                    string executeActionDurationInstance = ((string)executeActionDurationValue);
                                    propertiesInstance.ExecuteActionDuration = executeActionDurationInstance;
                                }
                                
                                JToken revertActionStartTimeValue = propertiesValue2["revertActionStartTime"];
                                if (revertActionStartTimeValue != null && revertActionStartTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime revertActionStartTimeInstance = ((DateTime)revertActionStartTimeValue);
                                    propertiesInstance.RevertActionStartTime = revertActionStartTimeInstance;
                                }
                                
                                JToken revertActionDurationValue = propertiesValue2["revertActionDuration"];
                                if (revertActionDurationValue != null && revertActionDurationValue.Type != JTokenType.Null)
                                {
                                    string revertActionDurationInstance = ((string)revertActionDurationValue);
                                    propertiesInstance.RevertActionDuration = revertActionDurationInstance;
                                }
                                
                                JToken executeActionInitiatedByValue = propertiesValue2["executeActionInitiatedBy"];
                                if (executeActionInitiatedByValue != null && executeActionInitiatedByValue.Type != JTokenType.Null)
                                {
                                    string executeActionInitiatedByInstance = ((string)executeActionInitiatedByValue);
                                    propertiesInstance.ExecuteActionInitiatedBy = executeActionInitiatedByInstance;
                                }
                                
                                JToken executeActionInitiatedTimeValue = propertiesValue2["executeActionInitiatedTime"];
                                if (executeActionInitiatedTimeValue != null && executeActionInitiatedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime executeActionInitiatedTimeInstance = ((DateTime)executeActionInitiatedTimeValue);
                                    propertiesInstance.ExecuteActionInitiatedTime = executeActionInitiatedTimeInstance;
                                }
                                
                                JToken revertActionInitiatedByValue = propertiesValue2["revertActionInitiatedBy"];
                                if (revertActionInitiatedByValue != null && revertActionInitiatedByValue.Type != JTokenType.Null)
                                {
                                    string revertActionInitiatedByInstance = ((string)revertActionInitiatedByValue);
                                    propertiesInstance.RevertActionInitiatedBy = revertActionInitiatedByInstance;
                                }
                                
                                JToken revertActionInitiatedTimeValue = propertiesValue2["revertActionInitiatedTime"];
                                if (revertActionInitiatedTimeValue != null && revertActionInitiatedTimeValue.Type != JTokenType.Null)
                                {
                                    DateTime revertActionInitiatedTimeInstance = ((DateTime)revertActionInitiatedTimeValue);
                                    propertiesInstance.RevertActionInitiatedTime = revertActionInitiatedTimeInstance;
                                }
                                
                                JToken scoreValue = propertiesValue2["score"];
                                if (scoreValue != null && scoreValue.Type != JTokenType.Null)
                                {
                                    int scoreInstance = ((int)scoreValue);
                                    propertiesInstance.Score = scoreInstance;
                                }
                                
                                JToken implementationDetailsValue = propertiesValue2["implementationDetails"];
                                if (implementationDetailsValue != null && implementationDetailsValue.Type != JTokenType.Null)
                                {
                                    RecommendedActionImplementationInfo implementationDetailsInstance = new RecommendedActionImplementationInfo();
                                    propertiesInstance.ImplementationDetails = implementationDetailsInstance;
                                    
                                    JToken methodValue = implementationDetailsValue["method"];
                                    if (methodValue != null && methodValue.Type != JTokenType.Null)
                                    {
                                        string methodInstance = ((string)methodValue);
                                        implementationDetailsInstance.Method = methodInstance;
                                    }
                                    
                                    JToken scriptValue = implementationDetailsValue["script"];
                                    if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                    {
                                        string scriptInstance = ((string)scriptValue);
                                        implementationDetailsInstance.Script = scriptInstance;
                                    }
                                }
                                
                                JToken errorDetailsValue = propertiesValue2["errorDetails"];
                                if (errorDetailsValue != null && errorDetailsValue.Type != JTokenType.Null)
                                {
                                    RecommendedActionErrorInfo errorDetailsInstance = new RecommendedActionErrorInfo();
                                    propertiesInstance.ErrorDetails = errorDetailsInstance;
                                    
                                    JToken errorCodeValue = errorDetailsValue["errorCode"];
                                    if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                    {
                                        string errorCodeInstance = ((string)errorCodeValue);
                                        errorDetailsInstance.ErrorCode = errorCodeInstance;
                                    }
                                    
                                    JToken isRetryableValue = errorDetailsValue["isRetryable"];
                                    if (isRetryableValue != null && isRetryableValue.Type != JTokenType.Null)
                                    {
                                        string isRetryableInstance = ((string)isRetryableValue);
                                        errorDetailsInstance.IsRetryable = isRetryableInstance;
                                    }
                                }
                                
                                JToken estimatedImpactArray = propertiesValue2["estimatedImpact"];
                                if (estimatedImpactArray != null && estimatedImpactArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken estimatedImpactValue in ((JArray)estimatedImpactArray))
                                    {
                                        RecommendedActionImpactInfo recommendedActionImpactInfoInstance = new RecommendedActionImpactInfo();
                                        propertiesInstance.EstimatedImpact.Add(recommendedActionImpactInfoInstance);
                                        
                                        JToken dimensionNameValue = estimatedImpactValue["dimensionName"];
                                        if (dimensionNameValue != null && dimensionNameValue.Type != JTokenType.Null)
                                        {
                                            string dimensionNameInstance = ((string)dimensionNameValue);
                                            recommendedActionImpactInfoInstance.DimensionName = dimensionNameInstance;
                                        }
                                        
                                        JToken unitValue = estimatedImpactValue["unit"];
                                        if (unitValue != null && unitValue.Type != JTokenType.Null)
                                        {
                                            string unitInstance = ((string)unitValue);
                                            recommendedActionImpactInfoInstance.Unit = unitInstance;
                                        }
                                        
                                        JToken absoluteValueValue = estimatedImpactValue["absoluteValue"];
                                        if (absoluteValueValue != null && absoluteValueValue.Type != JTokenType.Null)
                                        {
                                            double absoluteValueInstance = ((double)absoluteValueValue);
                                            recommendedActionImpactInfoInstance.AbsoluteValue = absoluteValueInstance;
                                        }
                                        
                                        JToken changeValueAbsoluteValue = estimatedImpactValue["changeValueAbsolute"];
                                        if (changeValueAbsoluteValue != null && changeValueAbsoluteValue.Type != JTokenType.Null)
                                        {
                                            double changeValueAbsoluteInstance = ((double)changeValueAbsoluteValue);
                                            recommendedActionImpactInfoInstance.ChangeValueAbsolute = changeValueAbsoluteInstance;
                                        }
                                        
                                        JToken changeValueRelativeValue = estimatedImpactValue["changeValueRelative"];
                                        if (changeValueRelativeValue != null && changeValueRelativeValue.Type != JTokenType.Null)
                                        {
                                            double changeValueRelativeInstance = ((double)changeValueRelativeValue);
                                            recommendedActionImpactInfoInstance.ChangeValueRelative = changeValueRelativeInstance;
                                        }
                                    }
                                }
                                
                                JToken observedImpactArray = propertiesValue2["observedImpact"];
                                if (observedImpactArray != null && observedImpactArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken observedImpactValue in ((JArray)observedImpactArray))
                                    {
                                        RecommendedActionImpactInfo recommendedActionImpactInfoInstance2 = new RecommendedActionImpactInfo();
                                        propertiesInstance.ObservedImpact.Add(recommendedActionImpactInfoInstance2);
                                        
                                        JToken dimensionNameValue2 = observedImpactValue["dimensionName"];
                                        if (dimensionNameValue2 != null && dimensionNameValue2.Type != JTokenType.Null)
                                        {
                                            string dimensionNameInstance2 = ((string)dimensionNameValue2);
                                            recommendedActionImpactInfoInstance2.DimensionName = dimensionNameInstance2;
                                        }
                                        
                                        JToken unitValue2 = observedImpactValue["unit"];
                                        if (unitValue2 != null && unitValue2.Type != JTokenType.Null)
                                        {
                                            string unitInstance2 = ((string)unitValue2);
                                            recommendedActionImpactInfoInstance2.Unit = unitInstance2;
                                        }
                                        
                                        JToken absoluteValueValue2 = observedImpactValue["absoluteValue"];
                                        if (absoluteValueValue2 != null && absoluteValueValue2.Type != JTokenType.Null)
                                        {
                                            double absoluteValueInstance2 = ((double)absoluteValueValue2);
                                            recommendedActionImpactInfoInstance2.AbsoluteValue = absoluteValueInstance2;
                                        }
                                        
                                        JToken changeValueAbsoluteValue2 = observedImpactValue["changeValueAbsolute"];
                                        if (changeValueAbsoluteValue2 != null && changeValueAbsoluteValue2.Type != JTokenType.Null)
                                        {
                                            double changeValueAbsoluteInstance2 = ((double)changeValueAbsoluteValue2);
                                            recommendedActionImpactInfoInstance2.ChangeValueAbsolute = changeValueAbsoluteInstance2;
                                        }
                                        
                                        JToken changeValueRelativeValue2 = observedImpactValue["changeValueRelative"];
                                        if (changeValueRelativeValue2 != null && changeValueRelativeValue2.Type != JTokenType.Null)
                                        {
                                            double changeValueRelativeInstance2 = ((double)changeValueRelativeValue2);
                                            recommendedActionImpactInfoInstance2.ChangeValueRelative = changeValueRelativeInstance2;
                                        }
                                    }
                                }
                                
                                JToken timeSeriesArray = propertiesValue2["timeSeries"];
                                if (timeSeriesArray != null && timeSeriesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken timeSeriesValue in ((JArray)timeSeriesArray))
                                    {
                                        RecommendedActionMetricInfo recommendedActionMetricInfoInstance = new RecommendedActionMetricInfo();
                                        propertiesInstance.TimeSeries.Add(recommendedActionMetricInfoInstance);
                                        
                                        JToken metricNameValue = timeSeriesValue["metricName"];
                                        if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                        {
                                            string metricNameInstance = ((string)metricNameValue);
                                            recommendedActionMetricInfoInstance.MetricName = metricNameInstance;
                                        }
                                        
                                        JToken unitValue3 = timeSeriesValue["unit"];
                                        if (unitValue3 != null && unitValue3.Type != JTokenType.Null)
                                        {
                                            string unitInstance3 = ((string)unitValue3);
                                            recommendedActionMetricInfoInstance.Unit = unitInstance3;
                                        }
                                        
                                        JToken absoluteValueValue3 = timeSeriesValue["absoluteValue"];
                                        if (absoluteValueValue3 != null && absoluteValueValue3.Type != JTokenType.Null)
                                        {
                                            string absoluteValueInstance3 = ((string)absoluteValueValue3);
                                            recommendedActionMetricInfoInstance.TimeGrain = absoluteValueInstance3;
                                        }
                                        
                                        JToken startTimeValue = timeSeriesValue["startTime"];
                                        if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime startTimeInstance = ((DateTime)startTimeValue);
                                            recommendedActionMetricInfoInstance.StartTime = startTimeInstance;
                                        }
                                        
                                        JToken valueValue = timeSeriesValue["value"];
                                        if (valueValue != null && valueValue.Type != JTokenType.Null)
                                        {
                                            double valueInstance = ((double)valueValue);
                                            recommendedActionMetricInfoInstance.Value = valueInstance;
                                        }
                                    }
                                }
                                
                                JToken linkedObjectsArray = propertiesValue2["linkedObjects"];
                                if (linkedObjectsArray != null && linkedObjectsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken linkedObjectsValue in ((JArray)linkedObjectsArray))
                                    {
                                        propertiesInstance.LinkedObjects.Add(((string)linkedObjectsValue));
                                    }
                                }
                                
                                JToken detailsSequenceElement = ((JToken)propertiesValue2["details"]);
                                if (detailsSequenceElement != null && detailsSequenceElement.Type != JTokenType.Null)
                                {
                                    foreach (JProperty property in detailsSequenceElement)
                                    {
                                        string detailsKey = ((string)property.Name);
                                        object detailsValue = ((string)property.Value);
                                        propertiesInstance.Details.Add(detailsKey, detailsValue);
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                recommendedActionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                recommendedActionInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                recommendedActionInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                recommendedActionInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property2 in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property2.Name);
                                    string tagsValue = ((string)property2.Value);
                                    recommendedActionInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
