// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Sql
{
    /// <summary>
    /// Represents all the operations for operating on Azure SQL Recommended
    /// Elastic Pools.  Contains operations to: Retrieve.
    /// </summary>
    internal partial class RecommendedElasticPoolOperations : IServiceOperations<SqlManagementClient>, IRecommendedElasticPoolOperations
    {
        /// <summary>
        /// Initializes a new instance of the RecommendedElasticPoolOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal RecommendedElasticPoolOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Returns information about an Azure SQL Recommended Elastic Pool.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Recommended Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server for which the
        /// Azure SQL Recommended Elastic Pool is.
        /// </param>
        /// <param name='recommendedElasticPoolName'>
        /// Required. The name of the Azure SQL Recommended Elastic Pool to be
        /// retrieved.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a Get Azure Sql Recommended Resource
        /// pool request.
        /// </returns>
        public async Task<RecommendedElasticPoolGetResponse> GetAsync(string resourceGroupName, string serverName, string recommendedElasticPoolName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (recommendedElasticPoolName == null)
            {
                throw new ArgumentNullException("recommendedElasticPoolName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("recommendedElasticPoolName", recommendedElasticPoolName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/recommendedElasticPools/";
            url = url + Uri.EscapeDataString(recommendedElasticPoolName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecommendedElasticPoolGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecommendedElasticPoolGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            RecommendedElasticPool recommendedElasticPoolInstance = new RecommendedElasticPool();
                            result.RecommendedElasticPool = recommendedElasticPoolInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                RecommendedElasticPoolProperties propertiesInstance = new RecommendedElasticPoolProperties();
                                recommendedElasticPoolInstance.Properties = propertiesInstance;
                                
                                JToken databaseEditionValue = propertiesValue["databaseEdition"];
                                if (databaseEditionValue != null && databaseEditionValue.Type != JTokenType.Null)
                                {
                                    string databaseEditionInstance = ((string)databaseEditionValue);
                                    propertiesInstance.DatabaseEdition = databaseEditionInstance;
                                }
                                
                                JToken dtuValue = propertiesValue["dtu"];
                                if (dtuValue != null && dtuValue.Type != JTokenType.Null)
                                {
                                    double dtuInstance = ((double)dtuValue);
                                    propertiesInstance.Dtu = dtuInstance;
                                }
                                
                                JToken databaseDtuMinValue = propertiesValue["databaseDtuMin"];
                                if (databaseDtuMinValue != null && databaseDtuMinValue.Type != JTokenType.Null)
                                {
                                    double databaseDtuMinInstance = ((double)databaseDtuMinValue);
                                    propertiesInstance.DatabaseDtuMin = databaseDtuMinInstance;
                                }
                                
                                JToken databaseDtuMaxValue = propertiesValue["databaseDtuMax"];
                                if (databaseDtuMaxValue != null && databaseDtuMaxValue.Type != JTokenType.Null)
                                {
                                    double databaseDtuMaxInstance = ((double)databaseDtuMaxValue);
                                    propertiesInstance.DatabaseDtuMax = databaseDtuMaxInstance;
                                }
                                
                                JToken storageMBValue = propertiesValue["storageMB"];
                                if (storageMBValue != null && storageMBValue.Type != JTokenType.Null)
                                {
                                    double storageMBInstance = ((double)storageMBValue);
                                    propertiesInstance.StorageMB = storageMBInstance;
                                }
                                
                                JToken observationPeriodStartValue = propertiesValue["observationPeriodStart"];
                                if (observationPeriodStartValue != null && observationPeriodStartValue.Type != JTokenType.Null)
                                {
                                    DateTime observationPeriodStartInstance = ((DateTime)observationPeriodStartValue);
                                    propertiesInstance.ObservationPeriodStart = observationPeriodStartInstance;
                                }
                                
                                JToken observationPeriodEndValue = propertiesValue["observationPeriodEnd"];
                                if (observationPeriodEndValue != null && observationPeriodEndValue.Type != JTokenType.Null)
                                {
                                    DateTime observationPeriodEndInstance = ((DateTime)observationPeriodEndValue);
                                    propertiesInstance.ObservationPeriodEnd = observationPeriodEndInstance;
                                }
                                
                                JToken maxObservedDtuValue = propertiesValue["maxObservedDtu"];
                                if (maxObservedDtuValue != null && maxObservedDtuValue.Type != JTokenType.Null)
                                {
                                    double maxObservedDtuInstance = ((double)maxObservedDtuValue);
                                    propertiesInstance.MaxObservedDtu = maxObservedDtuInstance;
                                }
                                
                                JToken maxObservedStorageMBValue = propertiesValue["maxObservedStorageMB"];
                                if (maxObservedStorageMBValue != null && maxObservedStorageMBValue.Type != JTokenType.Null)
                                {
                                    double maxObservedStorageMBInstance = ((double)maxObservedStorageMBValue);
                                    propertiesInstance.MaxObservedStorageMB = maxObservedStorageMBInstance;
                                }
                                
                                JToken databasesArray = propertiesValue["databases"];
                                if (databasesArray != null && databasesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken databasesValue in ((JArray)databasesArray))
                                    {
                                        Database databaseInstance = new Database();
                                        propertiesInstance.Databases.Add(databaseInstance);
                                        
                                        JToken propertiesValue2 = databasesValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            DatabaseProperties propertiesInstance2 = new DatabaseProperties();
                                            databaseInstance.Properties = propertiesInstance2;
                                            
                                            JToken collationValue = propertiesValue2["collation"];
                                            if (collationValue != null && collationValue.Type != JTokenType.Null)
                                            {
                                                string collationInstance = ((string)collationValue);
                                                propertiesInstance2.Collation = collationInstance;
                                            }
                                            
                                            JToken creationDateValue = propertiesValue2["creationDate"];
                                            if (creationDateValue != null && creationDateValue.Type != JTokenType.Null)
                                            {
                                                DateTime creationDateInstance = ((DateTime)creationDateValue);
                                                propertiesInstance2.CreationDate = creationDateInstance;
                                            }
                                            
                                            JToken currentServiceObjectiveIdValue = propertiesValue2["currentServiceObjectiveId"];
                                            if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                string currentServiceObjectiveIdInstance = ((string)currentServiceObjectiveIdValue);
                                                propertiesInstance2.CurrentServiceObjectiveId = currentServiceObjectiveIdInstance;
                                            }
                                            
                                            JToken databaseIdValue = propertiesValue2["databaseId"];
                                            if (databaseIdValue != null && databaseIdValue.Type != JTokenType.Null)
                                            {
                                                string databaseIdInstance = ((string)databaseIdValue);
                                                propertiesInstance2.DatabaseId = databaseIdInstance;
                                            }
                                            
                                            JToken earliestRestoreDateValue = propertiesValue2["earliestRestoreDate"];
                                            if (earliestRestoreDateValue != null && earliestRestoreDateValue.Type != JTokenType.Null)
                                            {
                                                DateTime earliestRestoreDateInstance = ((DateTime)earliestRestoreDateValue);
                                                propertiesInstance2.EarliestRestoreDate = earliestRestoreDateInstance;
                                            }
                                            
                                            JToken editionValue = propertiesValue2["edition"];
                                            if (editionValue != null && editionValue.Type != JTokenType.Null)
                                            {
                                                string editionInstance = ((string)editionValue);
                                                propertiesInstance2.Edition = editionInstance;
                                            }
                                            
                                            JToken maxSizeBytesValue = propertiesValue2["maxSizeBytes"];
                                            if (maxSizeBytesValue != null && maxSizeBytesValue.Type != JTokenType.Null)
                                            {
                                                long maxSizeBytesInstance = ((long)maxSizeBytesValue);
                                                propertiesInstance2.MaxSizeBytes = maxSizeBytesInstance;
                                            }
                                            
                                            JToken requestedServiceObjectiveIdValue = propertiesValue2["requestedServiceObjectiveId"];
                                            if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                string requestedServiceObjectiveIdInstance = ((string)requestedServiceObjectiveIdValue);
                                                propertiesInstance2.RequestedServiceObjectiveId = requestedServiceObjectiveIdInstance;
                                            }
                                            
                                            JToken requestedServiceObjectiveNameValue = propertiesValue2["requestedServiceObjectiveName"];
                                            if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue.Type != JTokenType.Null)
                                            {
                                                string requestedServiceObjectiveNameInstance = ((string)requestedServiceObjectiveNameValue);
                                                propertiesInstance2.RequestedServiceObjectiveName = requestedServiceObjectiveNameInstance;
                                            }
                                            
                                            JToken serviceLevelObjectiveValue = propertiesValue2["serviceLevelObjective"];
                                            if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string serviceLevelObjectiveInstance = ((string)serviceLevelObjectiveValue);
                                                propertiesInstance2.ServiceObjective = serviceLevelObjectiveInstance;
                                            }
                                            
                                            JToken statusValue = propertiesValue2["status"];
                                            if (statusValue != null && statusValue.Type != JTokenType.Null)
                                            {
                                                string statusInstance = ((string)statusValue);
                                                propertiesInstance2.Status = statusInstance;
                                            }
                                            
                                            JToken elasticPoolNameValue = propertiesValue2["elasticPoolName"];
                                            if (elasticPoolNameValue != null && elasticPoolNameValue.Type != JTokenType.Null)
                                            {
                                                string elasticPoolNameInstance = ((string)elasticPoolNameValue);
                                                propertiesInstance2.ElasticPoolName = elasticPoolNameInstance;
                                            }
                                            
                                            JToken serviceTierAdvisorsArray = propertiesValue2["serviceTierAdvisors"];
                                            if (serviceTierAdvisorsArray != null && serviceTierAdvisorsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken serviceTierAdvisorsValue in ((JArray)serviceTierAdvisorsArray))
                                                {
                                                    ServiceTierAdvisor serviceTierAdvisorInstance = new ServiceTierAdvisor();
                                                    propertiesInstance2.ServiceTierAdvisors.Add(serviceTierAdvisorInstance);
                                                    
                                                    JToken propertiesValue3 = serviceTierAdvisorsValue["properties"];
                                                    if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                    {
                                                        ServiceTierAdvisorProperties propertiesInstance3 = new ServiceTierAdvisorProperties();
                                                        serviceTierAdvisorInstance.Properties = propertiesInstance3;
                                                        
                                                        JToken observationPeriodStartValue2 = propertiesValue3["observationPeriodStart"];
                                                        if (observationPeriodStartValue2 != null && observationPeriodStartValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime observationPeriodStartInstance2 = ((DateTime)observationPeriodStartValue2);
                                                            propertiesInstance3.ObservationPeriodStart = observationPeriodStartInstance2;
                                                        }
                                                        
                                                        JToken observationPeriodEndValue2 = propertiesValue3["observationPeriodEnd"];
                                                        if (observationPeriodEndValue2 != null && observationPeriodEndValue2.Type != JTokenType.Null)
                                                        {
                                                            DateTime observationPeriodEndInstance2 = ((DateTime)observationPeriodEndValue2);
                                                            propertiesInstance3.ObservationPeriodEnd = observationPeriodEndInstance2;
                                                        }
                                                        
                                                        JToken activeTimeRatioValue = propertiesValue3["activeTimeRatio"];
                                                        if (activeTimeRatioValue != null && activeTimeRatioValue.Type != JTokenType.Null)
                                                        {
                                                            double activeTimeRatioInstance = ((double)activeTimeRatioValue);
                                                            propertiesInstance3.ActiveTimeRatio = activeTimeRatioInstance;
                                                        }
                                                        
                                                        JToken minDtuValue = propertiesValue3["minDtu"];
                                                        if (minDtuValue != null && minDtuValue.Type != JTokenType.Null)
                                                        {
                                                            double minDtuInstance = ((double)minDtuValue);
                                                            propertiesInstance3.MinDtu = minDtuInstance;
                                                        }
                                                        
                                                        JToken avgDtuValue = propertiesValue3["avgDtu"];
                                                        if (avgDtuValue != null && avgDtuValue.Type != JTokenType.Null)
                                                        {
                                                            double avgDtuInstance = ((double)avgDtuValue);
                                                            propertiesInstance3.AvgDtu = avgDtuInstance;
                                                        }
                                                        
                                                        JToken maxDtuValue = propertiesValue3["maxDtu"];
                                                        if (maxDtuValue != null && maxDtuValue.Type != JTokenType.Null)
                                                        {
                                                            double maxDtuInstance = ((double)maxDtuValue);
                                                            propertiesInstance3.MaxDtu = maxDtuInstance;
                                                        }
                                                        
                                                        JToken maxSizeInGBValue = propertiesValue3["maxSizeInGB"];
                                                        if (maxSizeInGBValue != null && maxSizeInGBValue.Type != JTokenType.Null)
                                                        {
                                                            double maxSizeInGBInstance = ((double)maxSizeInGBValue);
                                                            propertiesInstance3.MaxSizeInGB = maxSizeInGBInstance;
                                                        }
                                                        
                                                        JToken serviceLevelObjectiveUsageMetricsArray = propertiesValue3["serviceLevelObjectiveUsageMetrics"];
                                                        if (serviceLevelObjectiveUsageMetricsArray != null && serviceLevelObjectiveUsageMetricsArray.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken serviceLevelObjectiveUsageMetricsValue in ((JArray)serviceLevelObjectiveUsageMetricsArray))
                                                            {
                                                                SloUsageMetric sloUsageMetricInstance = new SloUsageMetric();
                                                                propertiesInstance3.ServiceLevelObjectiveUsageMetrics.Add(sloUsageMetricInstance);
                                                                
                                                                JToken serviceLevelObjectiveValue2 = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjective"];
                                                                if (serviceLevelObjectiveValue2 != null && serviceLevelObjectiveValue2.Type != JTokenType.Null)
                                                                {
                                                                    string serviceLevelObjectiveInstance2 = ((string)serviceLevelObjectiveValue2);
                                                                    sloUsageMetricInstance.ServiceLevelObjective = serviceLevelObjectiveInstance2;
                                                                }
                                                                
                                                                JToken serviceLevelObjectiveIdValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjectiveId"];
                                                                if (serviceLevelObjectiveIdValue != null && serviceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid serviceLevelObjectiveIdInstance = Guid.Parse(((string)serviceLevelObjectiveIdValue));
                                                                    sloUsageMetricInstance.ServiceLevelObjectiveId = serviceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken inRangeTimeRatioValue = serviceLevelObjectiveUsageMetricsValue["inRangeTimeRatio"];
                                                                if (inRangeTimeRatioValue != null && inRangeTimeRatioValue.Type != JTokenType.Null)
                                                                {
                                                                    double inRangeTimeRatioInstance = ((double)inRangeTimeRatioValue);
                                                                    sloUsageMetricInstance.InRangeTimeRatio = inRangeTimeRatioInstance;
                                                                }
                                                                
                                                                JToken idValue = serviceLevelObjectiveUsageMetricsValue["id"];
                                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                                {
                                                                    string idInstance = ((string)idValue);
                                                                    sloUsageMetricInstance.Id = idInstance;
                                                                }
                                                                
                                                                JToken nameValue = serviceLevelObjectiveUsageMetricsValue["name"];
                                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                                {
                                                                    string nameInstance = ((string)nameValue);
                                                                    sloUsageMetricInstance.Name = nameInstance;
                                                                }
                                                                
                                                                JToken typeValue = serviceLevelObjectiveUsageMetricsValue["type"];
                                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                                {
                                                                    string typeInstance = ((string)typeValue);
                                                                    sloUsageMetricInstance.Type = typeInstance;
                                                                }
                                                                
                                                                JToken locationValue = serviceLevelObjectiveUsageMetricsValue["location"];
                                                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                                {
                                                                    string locationInstance = ((string)locationValue);
                                                                    sloUsageMetricInstance.Location = locationInstance;
                                                                }
                                                                
                                                                JToken tagsSequenceElement = ((JToken)serviceLevelObjectiveUsageMetricsValue["tags"]);
                                                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JProperty property in tagsSequenceElement)
                                                                    {
                                                                        string tagsKey = ((string)property.Name);
                                                                        string tagsValue = ((string)property.Value);
                                                                        sloUsageMetricInstance.Tags.Add(tagsKey, tagsValue);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        
                                                        JToken currentServiceLevelObjectiveValue = propertiesValue3["currentServiceLevelObjective"];
                                                        if (currentServiceLevelObjectiveValue != null && currentServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                        {
                                                            string currentServiceLevelObjectiveInstance = ((string)currentServiceLevelObjectiveValue);
                                                            propertiesInstance3.CurrentServiceLevelObjective = currentServiceLevelObjectiveInstance;
                                                        }
                                                        
                                                        JToken currentServiceLevelObjectiveIdValue = propertiesValue3["currentServiceLevelObjectiveId"];
                                                        if (currentServiceLevelObjectiveIdValue != null && currentServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                        {
                                                            Guid currentServiceLevelObjectiveIdInstance = Guid.Parse(((string)currentServiceLevelObjectiveIdValue));
                                                            propertiesInstance3.CurrentServiceLevelObjectiveId = currentServiceLevelObjectiveIdInstance;
                                                        }
                                                        
                                                        JToken usageBasedRecommendationServiceLevelObjectiveValue = propertiesValue3["usageBasedRecommendationServiceLevelObjective"];
                                                        if (usageBasedRecommendationServiceLevelObjectiveValue != null && usageBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                        {
                                                            string usageBasedRecommendationServiceLevelObjectiveInstance = ((string)usageBasedRecommendationServiceLevelObjectiveValue);
                                                            propertiesInstance3.UsageBasedRecommendationServiceLevelObjective = usageBasedRecommendationServiceLevelObjectiveInstance;
                                                        }
                                                        
                                                        JToken usageBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue3["usageBasedRecommendationServiceLevelObjectiveId"];
                                                        if (usageBasedRecommendationServiceLevelObjectiveIdValue != null && usageBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                        {
                                                            Guid usageBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)usageBasedRecommendationServiceLevelObjectiveIdValue));
                                                            propertiesInstance3.UsageBasedRecommendationServiceLevelObjectiveId = usageBasedRecommendationServiceLevelObjectiveIdInstance;
                                                        }
                                                        
                                                        JToken databaseSizeBasedRecommendationServiceLevelObjectiveValue = propertiesValue3["databaseSizeBasedRecommendationServiceLevelObjective"];
                                                        if (databaseSizeBasedRecommendationServiceLevelObjectiveValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                        {
                                                            string databaseSizeBasedRecommendationServiceLevelObjectiveInstance = ((string)databaseSizeBasedRecommendationServiceLevelObjectiveValue);
                                                            propertiesInstance3.DatabaseSizeBasedRecommendationServiceLevelObjective = databaseSizeBasedRecommendationServiceLevelObjectiveInstance;
                                                        }
                                                        
                                                        JToken databaseSizeBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue3["databaseSizeBasedRecommendationServiceLevelObjectiveId"];
                                                        if (databaseSizeBasedRecommendationServiceLevelObjectiveIdValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                        {
                                                            Guid databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)databaseSizeBasedRecommendationServiceLevelObjectiveIdValue));
                                                            propertiesInstance3.DatabaseSizeBasedRecommendationServiceLevelObjectiveId = databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance;
                                                        }
                                                        
                                                        JToken disasterPlanBasedRecommendationServiceLevelObjectiveValue = propertiesValue3["disasterPlanBasedRecommendationServiceLevelObjective"];
                                                        if (disasterPlanBasedRecommendationServiceLevelObjectiveValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                        {
                                                            string disasterPlanBasedRecommendationServiceLevelObjectiveInstance = ((string)disasterPlanBasedRecommendationServiceLevelObjectiveValue);
                                                            propertiesInstance3.DisasterPlanBasedRecommendationServiceLevelObjective = disasterPlanBasedRecommendationServiceLevelObjectiveInstance;
                                                        }
                                                        
                                                        JToken disasterPlanBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue3["disasterPlanBasedRecommendationServiceLevelObjectiveId"];
                                                        if (disasterPlanBasedRecommendationServiceLevelObjectiveIdValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                        {
                                                            Guid disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)disasterPlanBasedRecommendationServiceLevelObjectiveIdValue));
                                                            propertiesInstance3.DisasterPlanBasedRecommendationServiceLevelObjectiveId = disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance;
                                                        }
                                                        
                                                        JToken overallRecommendationServiceLevelObjectiveValue = propertiesValue3["overallRecommendationServiceLevelObjective"];
                                                        if (overallRecommendationServiceLevelObjectiveValue != null && overallRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                        {
                                                            string overallRecommendationServiceLevelObjectiveInstance = ((string)overallRecommendationServiceLevelObjectiveValue);
                                                            propertiesInstance3.OverallRecommendationServiceLevelObjective = overallRecommendationServiceLevelObjectiveInstance;
                                                        }
                                                        
                                                        JToken overallRecommendationServiceLevelObjectiveIdValue = propertiesValue3["overallRecommendationServiceLevelObjectiveId"];
                                                        if (overallRecommendationServiceLevelObjectiveIdValue != null && overallRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                        {
                                                            Guid overallRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)overallRecommendationServiceLevelObjectiveIdValue));
                                                            propertiesInstance3.OverallRecommendationServiceLevelObjectiveId = overallRecommendationServiceLevelObjectiveIdInstance;
                                                        }
                                                        
                                                        JToken confidenceValue = propertiesValue3["confidence"];
                                                        if (confidenceValue != null && confidenceValue.Type != JTokenType.Null)
                                                        {
                                                            double confidenceInstance = ((double)confidenceValue);
                                                            propertiesInstance3.Confidence = confidenceInstance;
                                                        }
                                                    }
                                                    
                                                    JToken idValue2 = serviceTierAdvisorsValue["id"];
                                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                    {
                                                        string idInstance2 = ((string)idValue2);
                                                        serviceTierAdvisorInstance.Id = idInstance2;
                                                    }
                                                    
                                                    JToken nameValue2 = serviceTierAdvisorsValue["name"];
                                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance2 = ((string)nameValue2);
                                                        serviceTierAdvisorInstance.Name = nameInstance2;
                                                    }
                                                    
                                                    JToken typeValue2 = serviceTierAdvisorsValue["type"];
                                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance2 = ((string)typeValue2);
                                                        serviceTierAdvisorInstance.Type = typeInstance2;
                                                    }
                                                    
                                                    JToken locationValue2 = serviceTierAdvisorsValue["location"];
                                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                                    {
                                                        string locationInstance2 = ((string)locationValue2);
                                                        serviceTierAdvisorInstance.Location = locationInstance2;
                                                    }
                                                    
                                                    JToken tagsSequenceElement2 = ((JToken)serviceTierAdvisorsValue["tags"]);
                                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property2 in tagsSequenceElement2)
                                                        {
                                                            string tagsKey2 = ((string)property2.Name);
                                                            string tagsValue2 = ((string)property2.Value);
                                                            serviceTierAdvisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken upgradeHintValue = propertiesValue2["upgradeHint"];
                                            if (upgradeHintValue != null && upgradeHintValue.Type != JTokenType.Null)
                                            {
                                                UpgradeHint upgradeHintInstance = new UpgradeHint();
                                                propertiesInstance2.UpgradeHint = upgradeHintInstance;
                                                
                                                JToken targetServiceLevelObjectiveValue = upgradeHintValue["targetServiceLevelObjective"];
                                                if (targetServiceLevelObjectiveValue != null && targetServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                {
                                                    string targetServiceLevelObjectiveInstance = ((string)targetServiceLevelObjectiveValue);
                                                    upgradeHintInstance.TargetServiceLevelObjective = targetServiceLevelObjectiveInstance;
                                                }
                                                
                                                JToken targetServiceLevelObjectiveIdValue = upgradeHintValue["targetServiceLevelObjectiveId"];
                                                if (targetServiceLevelObjectiveIdValue != null && targetServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                {
                                                    Guid targetServiceLevelObjectiveIdInstance = Guid.Parse(((string)targetServiceLevelObjectiveIdValue));
                                                    upgradeHintInstance.TargetServiceLevelObjectiveId = targetServiceLevelObjectiveIdInstance;
                                                }
                                                
                                                JToken idValue3 = upgradeHintValue["id"];
                                                if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                {
                                                    string idInstance3 = ((string)idValue3);
                                                    upgradeHintInstance.Id = idInstance3;
                                                }
                                                
                                                JToken nameValue3 = upgradeHintValue["name"];
                                                if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                {
                                                    string nameInstance3 = ((string)nameValue3);
                                                    upgradeHintInstance.Name = nameInstance3;
                                                }
                                                
                                                JToken typeValue3 = upgradeHintValue["type"];
                                                if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                {
                                                    string typeInstance3 = ((string)typeValue3);
                                                    upgradeHintInstance.Type = typeInstance3;
                                                }
                                                
                                                JToken locationValue3 = upgradeHintValue["location"];
                                                if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                                {
                                                    string locationInstance3 = ((string)locationValue3);
                                                    upgradeHintInstance.Location = locationInstance3;
                                                }
                                                
                                                JToken tagsSequenceElement3 = ((JToken)upgradeHintValue["tags"]);
                                                if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property3 in tagsSequenceElement3)
                                                    {
                                                        string tagsKey3 = ((string)property3.Name);
                                                        string tagsValue3 = ((string)property3.Value);
                                                        upgradeHintInstance.Tags.Add(tagsKey3, tagsValue3);
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken idValue4 = databasesValue["id"];
                                        if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                        {
                                            string idInstance4 = ((string)idValue4);
                                            databaseInstance.Id = idInstance4;
                                        }
                                        
                                        JToken nameValue4 = databasesValue["name"];
                                        if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                        {
                                            string nameInstance4 = ((string)nameValue4);
                                            databaseInstance.Name = nameInstance4;
                                        }
                                        
                                        JToken typeValue4 = databasesValue["type"];
                                        if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                        {
                                            string typeInstance4 = ((string)typeValue4);
                                            databaseInstance.Type = typeInstance4;
                                        }
                                        
                                        JToken locationValue4 = databasesValue["location"];
                                        if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                                        {
                                            string locationInstance4 = ((string)locationValue4);
                                            databaseInstance.Location = locationInstance4;
                                        }
                                        
                                        JToken tagsSequenceElement4 = ((JToken)databasesValue["tags"]);
                                        if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property4 in tagsSequenceElement4)
                                            {
                                                string tagsKey4 = ((string)property4.Name);
                                                string tagsValue4 = ((string)property4.Value);
                                                databaseInstance.Tags.Add(tagsKey4, tagsValue4);
                                            }
                                        }
                                    }
                                }
                                
                                JToken metricsArray = propertiesValue["metrics"];
                                if (metricsArray != null && metricsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken metricsValue in ((JArray)metricsArray))
                                    {
                                        RecommendedElasticPoolMetric recommendedElasticPoolMetricInstance = new RecommendedElasticPoolMetric();
                                        propertiesInstance.Metrics.Add(recommendedElasticPoolMetricInstance);
                                        
                                        JToken dateTimeValue = metricsValue["dateTime"];
                                        if (dateTimeValue != null && dateTimeValue.Type != JTokenType.Null)
                                        {
                                            DateTime dateTimeInstance = ((DateTime)dateTimeValue);
                                            recommendedElasticPoolMetricInstance.DateTime = dateTimeInstance;
                                        }
                                        
                                        JToken dtuValue2 = metricsValue["dtu"];
                                        if (dtuValue2 != null && dtuValue2.Type != JTokenType.Null)
                                        {
                                            double dtuInstance2 = ((double)dtuValue2);
                                            recommendedElasticPoolMetricInstance.Dtu = dtuInstance2;
                                        }
                                        
                                        JToken sizeGBValue = metricsValue["sizeGB"];
                                        if (sizeGBValue != null && sizeGBValue.Type != JTokenType.Null)
                                        {
                                            double sizeGBInstance = ((double)sizeGBValue);
                                            recommendedElasticPoolMetricInstance.SizeGB = sizeGBInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue5 = responseDoc["id"];
                            if (idValue5 != null && idValue5.Type != JTokenType.Null)
                            {
                                string idInstance5 = ((string)idValue5);
                                recommendedElasticPoolInstance.Id = idInstance5;
                            }
                            
                            JToken nameValue5 = responseDoc["name"];
                            if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                            {
                                string nameInstance5 = ((string)nameValue5);
                                recommendedElasticPoolInstance.Name = nameInstance5;
                            }
                            
                            JToken typeValue5 = responseDoc["type"];
                            if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                            {
                                string typeInstance5 = ((string)typeValue5);
                                recommendedElasticPoolInstance.Type = typeInstance5;
                            }
                            
                            JToken locationValue5 = responseDoc["location"];
                            if (locationValue5 != null && locationValue5.Type != JTokenType.Null)
                            {
                                string locationInstance5 = ((string)locationValue5);
                                recommendedElasticPoolInstance.Location = locationInstance5;
                            }
                            
                            JToken tagsSequenceElement5 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement5 != null && tagsSequenceElement5.Type != JTokenType.Null)
                            {
                                foreach (JProperty property5 in tagsSequenceElement5)
                                {
                                    string tagsKey5 = ((string)property5.Name);
                                    string tagsValue5 = ((string)property5.Value);
                                    recommendedElasticPoolInstance.Tags.Add(tagsKey5, tagsValue5);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns information about an Azure SQL Database inside of an Azure
        /// Sql Recommended Elastic Pool.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='recommendedElasticPoolName'>
        /// Required. The name of the Azure SQL Database Elastic Pool to be
        /// retrieved.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Database to be retrieved.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a Get Azure Sql Database request.
        /// </returns>
        public async Task<DatabaseGetResponse> GetDatabasesAsync(string resourceGroupName, string serverName, string recommendedElasticPoolName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (recommendedElasticPoolName == null)
            {
                throw new ArgumentNullException("recommendedElasticPoolName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("recommendedElasticPoolName", recommendedElasticPoolName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "GetDatabasesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/recommendedElasticPools/";
            url = url + Uri.EscapeDataString(recommendedElasticPoolName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatabaseGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Database databaseInstance = new Database();
                            result.Database = databaseInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DatabaseProperties propertiesInstance = new DatabaseProperties();
                                databaseInstance.Properties = propertiesInstance;
                                
                                JToken collationValue = propertiesValue["collation"];
                                if (collationValue != null && collationValue.Type != JTokenType.Null)
                                {
                                    string collationInstance = ((string)collationValue);
                                    propertiesInstance.Collation = collationInstance;
                                }
                                
                                JToken creationDateValue = propertiesValue["creationDate"];
                                if (creationDateValue != null && creationDateValue.Type != JTokenType.Null)
                                {
                                    DateTime creationDateInstance = ((DateTime)creationDateValue);
                                    propertiesInstance.CreationDate = creationDateInstance;
                                }
                                
                                JToken currentServiceObjectiveIdValue = propertiesValue["currentServiceObjectiveId"];
                                if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    string currentServiceObjectiveIdInstance = ((string)currentServiceObjectiveIdValue);
                                    propertiesInstance.CurrentServiceObjectiveId = currentServiceObjectiveIdInstance;
                                }
                                
                                JToken databaseIdValue = propertiesValue["databaseId"];
                                if (databaseIdValue != null && databaseIdValue.Type != JTokenType.Null)
                                {
                                    string databaseIdInstance = ((string)databaseIdValue);
                                    propertiesInstance.DatabaseId = databaseIdInstance;
                                }
                                
                                JToken earliestRestoreDateValue = propertiesValue["earliestRestoreDate"];
                                if (earliestRestoreDateValue != null && earliestRestoreDateValue.Type != JTokenType.Null)
                                {
                                    DateTime earliestRestoreDateInstance = ((DateTime)earliestRestoreDateValue);
                                    propertiesInstance.EarliestRestoreDate = earliestRestoreDateInstance;
                                }
                                
                                JToken editionValue = propertiesValue["edition"];
                                if (editionValue != null && editionValue.Type != JTokenType.Null)
                                {
                                    string editionInstance = ((string)editionValue);
                                    propertiesInstance.Edition = editionInstance;
                                }
                                
                                JToken maxSizeBytesValue = propertiesValue["maxSizeBytes"];
                                if (maxSizeBytesValue != null && maxSizeBytesValue.Type != JTokenType.Null)
                                {
                                    long maxSizeBytesInstance = ((long)maxSizeBytesValue);
                                    propertiesInstance.MaxSizeBytes = maxSizeBytesInstance;
                                }
                                
                                JToken requestedServiceObjectiveIdValue = propertiesValue["requestedServiceObjectiveId"];
                                if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue.Type != JTokenType.Null)
                                {
                                    string requestedServiceObjectiveIdInstance = ((string)requestedServiceObjectiveIdValue);
                                    propertiesInstance.RequestedServiceObjectiveId = requestedServiceObjectiveIdInstance;
                                }
                                
                                JToken requestedServiceObjectiveNameValue = propertiesValue["requestedServiceObjectiveName"];
                                if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue.Type != JTokenType.Null)
                                {
                                    string requestedServiceObjectiveNameInstance = ((string)requestedServiceObjectiveNameValue);
                                    propertiesInstance.RequestedServiceObjectiveName = requestedServiceObjectiveNameInstance;
                                }
                                
                                JToken serviceLevelObjectiveValue = propertiesValue["serviceLevelObjective"];
                                if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue.Type != JTokenType.Null)
                                {
                                    string serviceLevelObjectiveInstance = ((string)serviceLevelObjectiveValue);
                                    propertiesInstance.ServiceObjective = serviceLevelObjectiveInstance;
                                }
                                
                                JToken statusValue = propertiesValue["status"];
                                if (statusValue != null && statusValue.Type != JTokenType.Null)
                                {
                                    string statusInstance = ((string)statusValue);
                                    propertiesInstance.Status = statusInstance;
                                }
                                
                                JToken elasticPoolNameValue = propertiesValue["elasticPoolName"];
                                if (elasticPoolNameValue != null && elasticPoolNameValue.Type != JTokenType.Null)
                                {
                                    string elasticPoolNameInstance = ((string)elasticPoolNameValue);
                                    propertiesInstance.ElasticPoolName = elasticPoolNameInstance;
                                }
                                
                                JToken serviceTierAdvisorsArray = propertiesValue["serviceTierAdvisors"];
                                if (serviceTierAdvisorsArray != null && serviceTierAdvisorsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken serviceTierAdvisorsValue in ((JArray)serviceTierAdvisorsArray))
                                    {
                                        ServiceTierAdvisor serviceTierAdvisorInstance = new ServiceTierAdvisor();
                                        propertiesInstance.ServiceTierAdvisors.Add(serviceTierAdvisorInstance);
                                        
                                        JToken propertiesValue2 = serviceTierAdvisorsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            ServiceTierAdvisorProperties propertiesInstance2 = new ServiceTierAdvisorProperties();
                                            serviceTierAdvisorInstance.Properties = propertiesInstance2;
                                            
                                            JToken observationPeriodStartValue = propertiesValue2["observationPeriodStart"];
                                            if (observationPeriodStartValue != null && observationPeriodStartValue.Type != JTokenType.Null)
                                            {
                                                DateTime observationPeriodStartInstance = ((DateTime)observationPeriodStartValue);
                                                propertiesInstance2.ObservationPeriodStart = observationPeriodStartInstance;
                                            }
                                            
                                            JToken observationPeriodEndValue = propertiesValue2["observationPeriodEnd"];
                                            if (observationPeriodEndValue != null && observationPeriodEndValue.Type != JTokenType.Null)
                                            {
                                                DateTime observationPeriodEndInstance = ((DateTime)observationPeriodEndValue);
                                                propertiesInstance2.ObservationPeriodEnd = observationPeriodEndInstance;
                                            }
                                            
                                            JToken activeTimeRatioValue = propertiesValue2["activeTimeRatio"];
                                            if (activeTimeRatioValue != null && activeTimeRatioValue.Type != JTokenType.Null)
                                            {
                                                double activeTimeRatioInstance = ((double)activeTimeRatioValue);
                                                propertiesInstance2.ActiveTimeRatio = activeTimeRatioInstance;
                                            }
                                            
                                            JToken minDtuValue = propertiesValue2["minDtu"];
                                            if (minDtuValue != null && minDtuValue.Type != JTokenType.Null)
                                            {
                                                double minDtuInstance = ((double)minDtuValue);
                                                propertiesInstance2.MinDtu = minDtuInstance;
                                            }
                                            
                                            JToken avgDtuValue = propertiesValue2["avgDtu"];
                                            if (avgDtuValue != null && avgDtuValue.Type != JTokenType.Null)
                                            {
                                                double avgDtuInstance = ((double)avgDtuValue);
                                                propertiesInstance2.AvgDtu = avgDtuInstance;
                                            }
                                            
                                            JToken maxDtuValue = propertiesValue2["maxDtu"];
                                            if (maxDtuValue != null && maxDtuValue.Type != JTokenType.Null)
                                            {
                                                double maxDtuInstance = ((double)maxDtuValue);
                                                propertiesInstance2.MaxDtu = maxDtuInstance;
                                            }
                                            
                                            JToken maxSizeInGBValue = propertiesValue2["maxSizeInGB"];
                                            if (maxSizeInGBValue != null && maxSizeInGBValue.Type != JTokenType.Null)
                                            {
                                                double maxSizeInGBInstance = ((double)maxSizeInGBValue);
                                                propertiesInstance2.MaxSizeInGB = maxSizeInGBInstance;
                                            }
                                            
                                            JToken serviceLevelObjectiveUsageMetricsArray = propertiesValue2["serviceLevelObjectiveUsageMetrics"];
                                            if (serviceLevelObjectiveUsageMetricsArray != null && serviceLevelObjectiveUsageMetricsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken serviceLevelObjectiveUsageMetricsValue in ((JArray)serviceLevelObjectiveUsageMetricsArray))
                                                {
                                                    SloUsageMetric sloUsageMetricInstance = new SloUsageMetric();
                                                    propertiesInstance2.ServiceLevelObjectiveUsageMetrics.Add(sloUsageMetricInstance);
                                                    
                                                    JToken serviceLevelObjectiveValue2 = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjective"];
                                                    if (serviceLevelObjectiveValue2 != null && serviceLevelObjectiveValue2.Type != JTokenType.Null)
                                                    {
                                                        string serviceLevelObjectiveInstance2 = ((string)serviceLevelObjectiveValue2);
                                                        sloUsageMetricInstance.ServiceLevelObjective = serviceLevelObjectiveInstance2;
                                                    }
                                                    
                                                    JToken serviceLevelObjectiveIdValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjectiveId"];
                                                    if (serviceLevelObjectiveIdValue != null && serviceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        Guid serviceLevelObjectiveIdInstance = Guid.Parse(((string)serviceLevelObjectiveIdValue));
                                                        sloUsageMetricInstance.ServiceLevelObjectiveId = serviceLevelObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken inRangeTimeRatioValue = serviceLevelObjectiveUsageMetricsValue["inRangeTimeRatio"];
                                                    if (inRangeTimeRatioValue != null && inRangeTimeRatioValue.Type != JTokenType.Null)
                                                    {
                                                        double inRangeTimeRatioInstance = ((double)inRangeTimeRatioValue);
                                                        sloUsageMetricInstance.InRangeTimeRatio = inRangeTimeRatioInstance;
                                                    }
                                                    
                                                    JToken idValue = serviceLevelObjectiveUsageMetricsValue["id"];
                                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                                    {
                                                        string idInstance = ((string)idValue);
                                                        sloUsageMetricInstance.Id = idInstance;
                                                    }
                                                    
                                                    JToken nameValue = serviceLevelObjectiveUsageMetricsValue["name"];
                                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                    {
                                                        string nameInstance = ((string)nameValue);
                                                        sloUsageMetricInstance.Name = nameInstance;
                                                    }
                                                    
                                                    JToken typeValue = serviceLevelObjectiveUsageMetricsValue["type"];
                                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                    {
                                                        string typeInstance = ((string)typeValue);
                                                        sloUsageMetricInstance.Type = typeInstance;
                                                    }
                                                    
                                                    JToken locationValue = serviceLevelObjectiveUsageMetricsValue["location"];
                                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                    {
                                                        string locationInstance = ((string)locationValue);
                                                        sloUsageMetricInstance.Location = locationInstance;
                                                    }
                                                    
                                                    JToken tagsSequenceElement = ((JToken)serviceLevelObjectiveUsageMetricsValue["tags"]);
                                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property in tagsSequenceElement)
                                                        {
                                                            string tagsKey = ((string)property.Name);
                                                            string tagsValue = ((string)property.Value);
                                                            sloUsageMetricInstance.Tags.Add(tagsKey, tagsValue);
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken currentServiceLevelObjectiveValue = propertiesValue2["currentServiceLevelObjective"];
                                            if (currentServiceLevelObjectiveValue != null && currentServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string currentServiceLevelObjectiveInstance = ((string)currentServiceLevelObjectiveValue);
                                                propertiesInstance2.CurrentServiceLevelObjective = currentServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken currentServiceLevelObjectiveIdValue = propertiesValue2["currentServiceLevelObjectiveId"];
                                            if (currentServiceLevelObjectiveIdValue != null && currentServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid currentServiceLevelObjectiveIdInstance = Guid.Parse(((string)currentServiceLevelObjectiveIdValue));
                                                propertiesInstance2.CurrentServiceLevelObjectiveId = currentServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken usageBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["usageBasedRecommendationServiceLevelObjective"];
                                            if (usageBasedRecommendationServiceLevelObjectiveValue != null && usageBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string usageBasedRecommendationServiceLevelObjectiveInstance = ((string)usageBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.UsageBasedRecommendationServiceLevelObjective = usageBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken usageBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["usageBasedRecommendationServiceLevelObjectiveId"];
                                            if (usageBasedRecommendationServiceLevelObjectiveIdValue != null && usageBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid usageBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)usageBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.UsageBasedRecommendationServiceLevelObjectiveId = usageBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken databaseSizeBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["databaseSizeBasedRecommendationServiceLevelObjective"];
                                            if (databaseSizeBasedRecommendationServiceLevelObjectiveValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string databaseSizeBasedRecommendationServiceLevelObjectiveInstance = ((string)databaseSizeBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.DatabaseSizeBasedRecommendationServiceLevelObjective = databaseSizeBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken databaseSizeBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["databaseSizeBasedRecommendationServiceLevelObjectiveId"];
                                            if (databaseSizeBasedRecommendationServiceLevelObjectiveIdValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)databaseSizeBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.DatabaseSizeBasedRecommendationServiceLevelObjectiveId = databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken disasterPlanBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["disasterPlanBasedRecommendationServiceLevelObjective"];
                                            if (disasterPlanBasedRecommendationServiceLevelObjectiveValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string disasterPlanBasedRecommendationServiceLevelObjectiveInstance = ((string)disasterPlanBasedRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.DisasterPlanBasedRecommendationServiceLevelObjective = disasterPlanBasedRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken disasterPlanBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["disasterPlanBasedRecommendationServiceLevelObjectiveId"];
                                            if (disasterPlanBasedRecommendationServiceLevelObjectiveIdValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)disasterPlanBasedRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.DisasterPlanBasedRecommendationServiceLevelObjectiveId = disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken overallRecommendationServiceLevelObjectiveValue = propertiesValue2["overallRecommendationServiceLevelObjective"];
                                            if (overallRecommendationServiceLevelObjectiveValue != null && overallRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string overallRecommendationServiceLevelObjectiveInstance = ((string)overallRecommendationServiceLevelObjectiveValue);
                                                propertiesInstance2.OverallRecommendationServiceLevelObjective = overallRecommendationServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken overallRecommendationServiceLevelObjectiveIdValue = propertiesValue2["overallRecommendationServiceLevelObjectiveId"];
                                            if (overallRecommendationServiceLevelObjectiveIdValue != null && overallRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid overallRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)overallRecommendationServiceLevelObjectiveIdValue));
                                                propertiesInstance2.OverallRecommendationServiceLevelObjectiveId = overallRecommendationServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken confidenceValue = propertiesValue2["confidence"];
                                            if (confidenceValue != null && confidenceValue.Type != JTokenType.Null)
                                            {
                                                double confidenceInstance = ((double)confidenceValue);
                                                propertiesInstance2.Confidence = confidenceInstance;
                                            }
                                        }
                                        
                                        JToken idValue2 = serviceTierAdvisorsValue["id"];
                                        if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                        {
                                            string idInstance2 = ((string)idValue2);
                                            serviceTierAdvisorInstance.Id = idInstance2;
                                        }
                                        
                                        JToken nameValue2 = serviceTierAdvisorsValue["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            serviceTierAdvisorInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken typeValue2 = serviceTierAdvisorsValue["type"];
                                        if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                        {
                                            string typeInstance2 = ((string)typeValue2);
                                            serviceTierAdvisorInstance.Type = typeInstance2;
                                        }
                                        
                                        JToken locationValue2 = serviceTierAdvisorsValue["location"];
                                        if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                        {
                                            string locationInstance2 = ((string)locationValue2);
                                            serviceTierAdvisorInstance.Location = locationInstance2;
                                        }
                                        
                                        JToken tagsSequenceElement2 = ((JToken)serviceTierAdvisorsValue["tags"]);
                                        if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in tagsSequenceElement2)
                                            {
                                                string tagsKey2 = ((string)property2.Name);
                                                string tagsValue2 = ((string)property2.Value);
                                                serviceTierAdvisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                            }
                                        }
                                    }
                                }
                                
                                JToken upgradeHintValue = propertiesValue["upgradeHint"];
                                if (upgradeHintValue != null && upgradeHintValue.Type != JTokenType.Null)
                                {
                                    UpgradeHint upgradeHintInstance = new UpgradeHint();
                                    propertiesInstance.UpgradeHint = upgradeHintInstance;
                                    
                                    JToken targetServiceLevelObjectiveValue = upgradeHintValue["targetServiceLevelObjective"];
                                    if (targetServiceLevelObjectiveValue != null && targetServiceLevelObjectiveValue.Type != JTokenType.Null)
                                    {
                                        string targetServiceLevelObjectiveInstance = ((string)targetServiceLevelObjectiveValue);
                                        upgradeHintInstance.TargetServiceLevelObjective = targetServiceLevelObjectiveInstance;
                                    }
                                    
                                    JToken targetServiceLevelObjectiveIdValue = upgradeHintValue["targetServiceLevelObjectiveId"];
                                    if (targetServiceLevelObjectiveIdValue != null && targetServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                    {
                                        Guid targetServiceLevelObjectiveIdInstance = Guid.Parse(((string)targetServiceLevelObjectiveIdValue));
                                        upgradeHintInstance.TargetServiceLevelObjectiveId = targetServiceLevelObjectiveIdInstance;
                                    }
                                    
                                    JToken idValue3 = upgradeHintValue["id"];
                                    if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                    {
                                        string idInstance3 = ((string)idValue3);
                                        upgradeHintInstance.Id = idInstance3;
                                    }
                                    
                                    JToken nameValue3 = upgradeHintValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        upgradeHintInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken typeValue3 = upgradeHintValue["type"];
                                    if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                    {
                                        string typeInstance3 = ((string)typeValue3);
                                        upgradeHintInstance.Type = typeInstance3;
                                    }
                                    
                                    JToken locationValue3 = upgradeHintValue["location"];
                                    if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                    {
                                        string locationInstance3 = ((string)locationValue3);
                                        upgradeHintInstance.Location = locationInstance3;
                                    }
                                    
                                    JToken tagsSequenceElement3 = ((JToken)upgradeHintValue["tags"]);
                                    if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in tagsSequenceElement3)
                                        {
                                            string tagsKey3 = ((string)property3.Name);
                                            string tagsValue3 = ((string)property3.Value);
                                            upgradeHintInstance.Tags.Add(tagsKey3, tagsValue3);
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue4 = responseDoc["id"];
                            if (idValue4 != null && idValue4.Type != JTokenType.Null)
                            {
                                string idInstance4 = ((string)idValue4);
                                databaseInstance.Id = idInstance4;
                            }
                            
                            JToken nameValue4 = responseDoc["name"];
                            if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                            {
                                string nameInstance4 = ((string)nameValue4);
                                databaseInstance.Name = nameInstance4;
                            }
                            
                            JToken typeValue4 = responseDoc["type"];
                            if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                            {
                                string typeInstance4 = ((string)typeValue4);
                                databaseInstance.Type = typeInstance4;
                            }
                            
                            JToken locationValue4 = responseDoc["location"];
                            if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                            {
                                string locationInstance4 = ((string)locationValue4);
                                databaseInstance.Location = locationInstance4;
                            }
                            
                            JToken tagsSequenceElement4 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                            {
                                foreach (JProperty property4 in tagsSequenceElement4)
                                {
                                    string tagsKey4 = ((string)property4.Name);
                                    string tagsValue4 = ((string)property4.Value);
                                    databaseInstance.Tags.Add(tagsKey4, tagsValue4);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns information about Azure SQL Recommended Elastic Pools.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Recommended Serve belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server in which Azure
        /// SQL Recommended Elastic Pools are hosted.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a List Azure Sql Recommended Elastic
        /// Pool request.
        /// </returns>
        public async Task<RecommendedElasticPoolListResponse> ListAsync(string resourceGroupName, string serverName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/recommendedElasticPools";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecommendedElasticPoolListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecommendedElasticPoolListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RecommendedElasticPool recommendedElasticPoolInstance = new RecommendedElasticPool();
                                    result.RecommendedElasticPools.Add(recommendedElasticPoolInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        RecommendedElasticPoolProperties propertiesInstance = new RecommendedElasticPoolProperties();
                                        recommendedElasticPoolInstance.Properties = propertiesInstance;
                                        
                                        JToken databaseEditionValue = propertiesValue["databaseEdition"];
                                        if (databaseEditionValue != null && databaseEditionValue.Type != JTokenType.Null)
                                        {
                                            string databaseEditionInstance = ((string)databaseEditionValue);
                                            propertiesInstance.DatabaseEdition = databaseEditionInstance;
                                        }
                                        
                                        JToken dtuValue = propertiesValue["dtu"];
                                        if (dtuValue != null && dtuValue.Type != JTokenType.Null)
                                        {
                                            double dtuInstance = ((double)dtuValue);
                                            propertiesInstance.Dtu = dtuInstance;
                                        }
                                        
                                        JToken databaseDtuMinValue = propertiesValue["databaseDtuMin"];
                                        if (databaseDtuMinValue != null && databaseDtuMinValue.Type != JTokenType.Null)
                                        {
                                            double databaseDtuMinInstance = ((double)databaseDtuMinValue);
                                            propertiesInstance.DatabaseDtuMin = databaseDtuMinInstance;
                                        }
                                        
                                        JToken databaseDtuMaxValue = propertiesValue["databaseDtuMax"];
                                        if (databaseDtuMaxValue != null && databaseDtuMaxValue.Type != JTokenType.Null)
                                        {
                                            double databaseDtuMaxInstance = ((double)databaseDtuMaxValue);
                                            propertiesInstance.DatabaseDtuMax = databaseDtuMaxInstance;
                                        }
                                        
                                        JToken storageMBValue = propertiesValue["storageMB"];
                                        if (storageMBValue != null && storageMBValue.Type != JTokenType.Null)
                                        {
                                            double storageMBInstance = ((double)storageMBValue);
                                            propertiesInstance.StorageMB = storageMBInstance;
                                        }
                                        
                                        JToken observationPeriodStartValue = propertiesValue["observationPeriodStart"];
                                        if (observationPeriodStartValue != null && observationPeriodStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime observationPeriodStartInstance = ((DateTime)observationPeriodStartValue);
                                            propertiesInstance.ObservationPeriodStart = observationPeriodStartInstance;
                                        }
                                        
                                        JToken observationPeriodEndValue = propertiesValue["observationPeriodEnd"];
                                        if (observationPeriodEndValue != null && observationPeriodEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime observationPeriodEndInstance = ((DateTime)observationPeriodEndValue);
                                            propertiesInstance.ObservationPeriodEnd = observationPeriodEndInstance;
                                        }
                                        
                                        JToken maxObservedDtuValue = propertiesValue["maxObservedDtu"];
                                        if (maxObservedDtuValue != null && maxObservedDtuValue.Type != JTokenType.Null)
                                        {
                                            double maxObservedDtuInstance = ((double)maxObservedDtuValue);
                                            propertiesInstance.MaxObservedDtu = maxObservedDtuInstance;
                                        }
                                        
                                        JToken maxObservedStorageMBValue = propertiesValue["maxObservedStorageMB"];
                                        if (maxObservedStorageMBValue != null && maxObservedStorageMBValue.Type != JTokenType.Null)
                                        {
                                            double maxObservedStorageMBInstance = ((double)maxObservedStorageMBValue);
                                            propertiesInstance.MaxObservedStorageMB = maxObservedStorageMBInstance;
                                        }
                                        
                                        JToken databasesArray = propertiesValue["databases"];
                                        if (databasesArray != null && databasesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken databasesValue in ((JArray)databasesArray))
                                            {
                                                Database databaseInstance = new Database();
                                                propertiesInstance.Databases.Add(databaseInstance);
                                                
                                                JToken propertiesValue2 = databasesValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    DatabaseProperties propertiesInstance2 = new DatabaseProperties();
                                                    databaseInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken collationValue = propertiesValue2["collation"];
                                                    if (collationValue != null && collationValue.Type != JTokenType.Null)
                                                    {
                                                        string collationInstance = ((string)collationValue);
                                                        propertiesInstance2.Collation = collationInstance;
                                                    }
                                                    
                                                    JToken creationDateValue = propertiesValue2["creationDate"];
                                                    if (creationDateValue != null && creationDateValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime creationDateInstance = ((DateTime)creationDateValue);
                                                        propertiesInstance2.CreationDate = creationDateInstance;
                                                    }
                                                    
                                                    JToken currentServiceObjectiveIdValue = propertiesValue2["currentServiceObjectiveId"];
                                                    if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        string currentServiceObjectiveIdInstance = ((string)currentServiceObjectiveIdValue);
                                                        propertiesInstance2.CurrentServiceObjectiveId = currentServiceObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken databaseIdValue = propertiesValue2["databaseId"];
                                                    if (databaseIdValue != null && databaseIdValue.Type != JTokenType.Null)
                                                    {
                                                        string databaseIdInstance = ((string)databaseIdValue);
                                                        propertiesInstance2.DatabaseId = databaseIdInstance;
                                                    }
                                                    
                                                    JToken earliestRestoreDateValue = propertiesValue2["earliestRestoreDate"];
                                                    if (earliestRestoreDateValue != null && earliestRestoreDateValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime earliestRestoreDateInstance = ((DateTime)earliestRestoreDateValue);
                                                        propertiesInstance2.EarliestRestoreDate = earliestRestoreDateInstance;
                                                    }
                                                    
                                                    JToken editionValue = propertiesValue2["edition"];
                                                    if (editionValue != null && editionValue.Type != JTokenType.Null)
                                                    {
                                                        string editionInstance = ((string)editionValue);
                                                        propertiesInstance2.Edition = editionInstance;
                                                    }
                                                    
                                                    JToken maxSizeBytesValue = propertiesValue2["maxSizeBytes"];
                                                    if (maxSizeBytesValue != null && maxSizeBytesValue.Type != JTokenType.Null)
                                                    {
                                                        long maxSizeBytesInstance = ((long)maxSizeBytesValue);
                                                        propertiesInstance2.MaxSizeBytes = maxSizeBytesInstance;
                                                    }
                                                    
                                                    JToken requestedServiceObjectiveIdValue = propertiesValue2["requestedServiceObjectiveId"];
                                                    if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        string requestedServiceObjectiveIdInstance = ((string)requestedServiceObjectiveIdValue);
                                                        propertiesInstance2.RequestedServiceObjectiveId = requestedServiceObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken requestedServiceObjectiveNameValue = propertiesValue2["requestedServiceObjectiveName"];
                                                    if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue.Type != JTokenType.Null)
                                                    {
                                                        string requestedServiceObjectiveNameInstance = ((string)requestedServiceObjectiveNameValue);
                                                        propertiesInstance2.RequestedServiceObjectiveName = requestedServiceObjectiveNameInstance;
                                                    }
                                                    
                                                    JToken serviceLevelObjectiveValue = propertiesValue2["serviceLevelObjective"];
                                                    if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue.Type != JTokenType.Null)
                                                    {
                                                        string serviceLevelObjectiveInstance = ((string)serviceLevelObjectiveValue);
                                                        propertiesInstance2.ServiceObjective = serviceLevelObjectiveInstance;
                                                    }
                                                    
                                                    JToken statusValue = propertiesValue2["status"];
                                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                    {
                                                        string statusInstance = ((string)statusValue);
                                                        propertiesInstance2.Status = statusInstance;
                                                    }
                                                    
                                                    JToken elasticPoolNameValue = propertiesValue2["elasticPoolName"];
                                                    if (elasticPoolNameValue != null && elasticPoolNameValue.Type != JTokenType.Null)
                                                    {
                                                        string elasticPoolNameInstance = ((string)elasticPoolNameValue);
                                                        propertiesInstance2.ElasticPoolName = elasticPoolNameInstance;
                                                    }
                                                    
                                                    JToken serviceTierAdvisorsArray = propertiesValue2["serviceTierAdvisors"];
                                                    if (serviceTierAdvisorsArray != null && serviceTierAdvisorsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken serviceTierAdvisorsValue in ((JArray)serviceTierAdvisorsArray))
                                                        {
                                                            ServiceTierAdvisor serviceTierAdvisorInstance = new ServiceTierAdvisor();
                                                            propertiesInstance2.ServiceTierAdvisors.Add(serviceTierAdvisorInstance);
                                                            
                                                            JToken propertiesValue3 = serviceTierAdvisorsValue["properties"];
                                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                            {
                                                                ServiceTierAdvisorProperties propertiesInstance3 = new ServiceTierAdvisorProperties();
                                                                serviceTierAdvisorInstance.Properties = propertiesInstance3;
                                                                
                                                                JToken observationPeriodStartValue2 = propertiesValue3["observationPeriodStart"];
                                                                if (observationPeriodStartValue2 != null && observationPeriodStartValue2.Type != JTokenType.Null)
                                                                {
                                                                    DateTime observationPeriodStartInstance2 = ((DateTime)observationPeriodStartValue2);
                                                                    propertiesInstance3.ObservationPeriodStart = observationPeriodStartInstance2;
                                                                }
                                                                
                                                                JToken observationPeriodEndValue2 = propertiesValue3["observationPeriodEnd"];
                                                                if (observationPeriodEndValue2 != null && observationPeriodEndValue2.Type != JTokenType.Null)
                                                                {
                                                                    DateTime observationPeriodEndInstance2 = ((DateTime)observationPeriodEndValue2);
                                                                    propertiesInstance3.ObservationPeriodEnd = observationPeriodEndInstance2;
                                                                }
                                                                
                                                                JToken activeTimeRatioValue = propertiesValue3["activeTimeRatio"];
                                                                if (activeTimeRatioValue != null && activeTimeRatioValue.Type != JTokenType.Null)
                                                                {
                                                                    double activeTimeRatioInstance = ((double)activeTimeRatioValue);
                                                                    propertiesInstance3.ActiveTimeRatio = activeTimeRatioInstance;
                                                                }
                                                                
                                                                JToken minDtuValue = propertiesValue3["minDtu"];
                                                                if (minDtuValue != null && minDtuValue.Type != JTokenType.Null)
                                                                {
                                                                    double minDtuInstance = ((double)minDtuValue);
                                                                    propertiesInstance3.MinDtu = minDtuInstance;
                                                                }
                                                                
                                                                JToken avgDtuValue = propertiesValue3["avgDtu"];
                                                                if (avgDtuValue != null && avgDtuValue.Type != JTokenType.Null)
                                                                {
                                                                    double avgDtuInstance = ((double)avgDtuValue);
                                                                    propertiesInstance3.AvgDtu = avgDtuInstance;
                                                                }
                                                                
                                                                JToken maxDtuValue = propertiesValue3["maxDtu"];
                                                                if (maxDtuValue != null && maxDtuValue.Type != JTokenType.Null)
                                                                {
                                                                    double maxDtuInstance = ((double)maxDtuValue);
                                                                    propertiesInstance3.MaxDtu = maxDtuInstance;
                                                                }
                                                                
                                                                JToken maxSizeInGBValue = propertiesValue3["maxSizeInGB"];
                                                                if (maxSizeInGBValue != null && maxSizeInGBValue.Type != JTokenType.Null)
                                                                {
                                                                    double maxSizeInGBInstance = ((double)maxSizeInGBValue);
                                                                    propertiesInstance3.MaxSizeInGB = maxSizeInGBInstance;
                                                                }
                                                                
                                                                JToken serviceLevelObjectiveUsageMetricsArray = propertiesValue3["serviceLevelObjectiveUsageMetrics"];
                                                                if (serviceLevelObjectiveUsageMetricsArray != null && serviceLevelObjectiveUsageMetricsArray.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken serviceLevelObjectiveUsageMetricsValue in ((JArray)serviceLevelObjectiveUsageMetricsArray))
                                                                    {
                                                                        SloUsageMetric sloUsageMetricInstance = new SloUsageMetric();
                                                                        propertiesInstance3.ServiceLevelObjectiveUsageMetrics.Add(sloUsageMetricInstance);
                                                                        
                                                                        JToken serviceLevelObjectiveValue2 = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjective"];
                                                                        if (serviceLevelObjectiveValue2 != null && serviceLevelObjectiveValue2.Type != JTokenType.Null)
                                                                        {
                                                                            string serviceLevelObjectiveInstance2 = ((string)serviceLevelObjectiveValue2);
                                                                            sloUsageMetricInstance.ServiceLevelObjective = serviceLevelObjectiveInstance2;
                                                                        }
                                                                        
                                                                        JToken serviceLevelObjectiveIdValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjectiveId"];
                                                                        if (serviceLevelObjectiveIdValue != null && serviceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                        {
                                                                            Guid serviceLevelObjectiveIdInstance = Guid.Parse(((string)serviceLevelObjectiveIdValue));
                                                                            sloUsageMetricInstance.ServiceLevelObjectiveId = serviceLevelObjectiveIdInstance;
                                                                        }
                                                                        
                                                                        JToken inRangeTimeRatioValue = serviceLevelObjectiveUsageMetricsValue["inRangeTimeRatio"];
                                                                        if (inRangeTimeRatioValue != null && inRangeTimeRatioValue.Type != JTokenType.Null)
                                                                        {
                                                                            double inRangeTimeRatioInstance = ((double)inRangeTimeRatioValue);
                                                                            sloUsageMetricInstance.InRangeTimeRatio = inRangeTimeRatioInstance;
                                                                        }
                                                                        
                                                                        JToken idValue = serviceLevelObjectiveUsageMetricsValue["id"];
                                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                                        {
                                                                            string idInstance = ((string)idValue);
                                                                            sloUsageMetricInstance.Id = idInstance;
                                                                        }
                                                                        
                                                                        JToken nameValue = serviceLevelObjectiveUsageMetricsValue["name"];
                                                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                                        {
                                                                            string nameInstance = ((string)nameValue);
                                                                            sloUsageMetricInstance.Name = nameInstance;
                                                                        }
                                                                        
                                                                        JToken typeValue = serviceLevelObjectiveUsageMetricsValue["type"];
                                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                                        {
                                                                            string typeInstance = ((string)typeValue);
                                                                            sloUsageMetricInstance.Type = typeInstance;
                                                                        }
                                                                        
                                                                        JToken locationValue = serviceLevelObjectiveUsageMetricsValue["location"];
                                                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                                        {
                                                                            string locationInstance = ((string)locationValue);
                                                                            sloUsageMetricInstance.Location = locationInstance;
                                                                        }
                                                                        
                                                                        JToken tagsSequenceElement = ((JToken)serviceLevelObjectiveUsageMetricsValue["tags"]);
                                                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                                        {
                                                                            foreach (JProperty property in tagsSequenceElement)
                                                                            {
                                                                                string tagsKey = ((string)property.Name);
                                                                                string tagsValue = ((string)property.Value);
                                                                                sloUsageMetricInstance.Tags.Add(tagsKey, tagsValue);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                JToken currentServiceLevelObjectiveValue = propertiesValue3["currentServiceLevelObjective"];
                                                                if (currentServiceLevelObjectiveValue != null && currentServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                                {
                                                                    string currentServiceLevelObjectiveInstance = ((string)currentServiceLevelObjectiveValue);
                                                                    propertiesInstance3.CurrentServiceLevelObjective = currentServiceLevelObjectiveInstance;
                                                                }
                                                                
                                                                JToken currentServiceLevelObjectiveIdValue = propertiesValue3["currentServiceLevelObjectiveId"];
                                                                if (currentServiceLevelObjectiveIdValue != null && currentServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid currentServiceLevelObjectiveIdInstance = Guid.Parse(((string)currentServiceLevelObjectiveIdValue));
                                                                    propertiesInstance3.CurrentServiceLevelObjectiveId = currentServiceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken usageBasedRecommendationServiceLevelObjectiveValue = propertiesValue3["usageBasedRecommendationServiceLevelObjective"];
                                                                if (usageBasedRecommendationServiceLevelObjectiveValue != null && usageBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                                {
                                                                    string usageBasedRecommendationServiceLevelObjectiveInstance = ((string)usageBasedRecommendationServiceLevelObjectiveValue);
                                                                    propertiesInstance3.UsageBasedRecommendationServiceLevelObjective = usageBasedRecommendationServiceLevelObjectiveInstance;
                                                                }
                                                                
                                                                JToken usageBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue3["usageBasedRecommendationServiceLevelObjectiveId"];
                                                                if (usageBasedRecommendationServiceLevelObjectiveIdValue != null && usageBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid usageBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)usageBasedRecommendationServiceLevelObjectiveIdValue));
                                                                    propertiesInstance3.UsageBasedRecommendationServiceLevelObjectiveId = usageBasedRecommendationServiceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken databaseSizeBasedRecommendationServiceLevelObjectiveValue = propertiesValue3["databaseSizeBasedRecommendationServiceLevelObjective"];
                                                                if (databaseSizeBasedRecommendationServiceLevelObjectiveValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                                {
                                                                    string databaseSizeBasedRecommendationServiceLevelObjectiveInstance = ((string)databaseSizeBasedRecommendationServiceLevelObjectiveValue);
                                                                    propertiesInstance3.DatabaseSizeBasedRecommendationServiceLevelObjective = databaseSizeBasedRecommendationServiceLevelObjectiveInstance;
                                                                }
                                                                
                                                                JToken databaseSizeBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue3["databaseSizeBasedRecommendationServiceLevelObjectiveId"];
                                                                if (databaseSizeBasedRecommendationServiceLevelObjectiveIdValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)databaseSizeBasedRecommendationServiceLevelObjectiveIdValue));
                                                                    propertiesInstance3.DatabaseSizeBasedRecommendationServiceLevelObjectiveId = databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken disasterPlanBasedRecommendationServiceLevelObjectiveValue = propertiesValue3["disasterPlanBasedRecommendationServiceLevelObjective"];
                                                                if (disasterPlanBasedRecommendationServiceLevelObjectiveValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                                {
                                                                    string disasterPlanBasedRecommendationServiceLevelObjectiveInstance = ((string)disasterPlanBasedRecommendationServiceLevelObjectiveValue);
                                                                    propertiesInstance3.DisasterPlanBasedRecommendationServiceLevelObjective = disasterPlanBasedRecommendationServiceLevelObjectiveInstance;
                                                                }
                                                                
                                                                JToken disasterPlanBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue3["disasterPlanBasedRecommendationServiceLevelObjectiveId"];
                                                                if (disasterPlanBasedRecommendationServiceLevelObjectiveIdValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)disasterPlanBasedRecommendationServiceLevelObjectiveIdValue));
                                                                    propertiesInstance3.DisasterPlanBasedRecommendationServiceLevelObjectiveId = disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken overallRecommendationServiceLevelObjectiveValue = propertiesValue3["overallRecommendationServiceLevelObjective"];
                                                                if (overallRecommendationServiceLevelObjectiveValue != null && overallRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                                {
                                                                    string overallRecommendationServiceLevelObjectiveInstance = ((string)overallRecommendationServiceLevelObjectiveValue);
                                                                    propertiesInstance3.OverallRecommendationServiceLevelObjective = overallRecommendationServiceLevelObjectiveInstance;
                                                                }
                                                                
                                                                JToken overallRecommendationServiceLevelObjectiveIdValue = propertiesValue3["overallRecommendationServiceLevelObjectiveId"];
                                                                if (overallRecommendationServiceLevelObjectiveIdValue != null && overallRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid overallRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)overallRecommendationServiceLevelObjectiveIdValue));
                                                                    propertiesInstance3.OverallRecommendationServiceLevelObjectiveId = overallRecommendationServiceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken confidenceValue = propertiesValue3["confidence"];
                                                                if (confidenceValue != null && confidenceValue.Type != JTokenType.Null)
                                                                {
                                                                    double confidenceInstance = ((double)confidenceValue);
                                                                    propertiesInstance3.Confidence = confidenceInstance;
                                                                }
                                                            }
                                                            
                                                            JToken idValue2 = serviceTierAdvisorsValue["id"];
                                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                            {
                                                                string idInstance2 = ((string)idValue2);
                                                                serviceTierAdvisorInstance.Id = idInstance2;
                                                            }
                                                            
                                                            JToken nameValue2 = serviceTierAdvisorsValue["name"];
                                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance2 = ((string)nameValue2);
                                                                serviceTierAdvisorInstance.Name = nameInstance2;
                                                            }
                                                            
                                                            JToken typeValue2 = serviceTierAdvisorsValue["type"];
                                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                            {
                                                                string typeInstance2 = ((string)typeValue2);
                                                                serviceTierAdvisorInstance.Type = typeInstance2;
                                                            }
                                                            
                                                            JToken locationValue2 = serviceTierAdvisorsValue["location"];
                                                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                                            {
                                                                string locationInstance2 = ((string)locationValue2);
                                                                serviceTierAdvisorInstance.Location = locationInstance2;
                                                            }
                                                            
                                                            JToken tagsSequenceElement2 = ((JToken)serviceTierAdvisorsValue["tags"]);
                                                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property2 in tagsSequenceElement2)
                                                                {
                                                                    string tagsKey2 = ((string)property2.Name);
                                                                    string tagsValue2 = ((string)property2.Value);
                                                                    serviceTierAdvisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken upgradeHintValue = propertiesValue2["upgradeHint"];
                                                    if (upgradeHintValue != null && upgradeHintValue.Type != JTokenType.Null)
                                                    {
                                                        UpgradeHint upgradeHintInstance = new UpgradeHint();
                                                        propertiesInstance2.UpgradeHint = upgradeHintInstance;
                                                        
                                                        JToken targetServiceLevelObjectiveValue = upgradeHintValue["targetServiceLevelObjective"];
                                                        if (targetServiceLevelObjectiveValue != null && targetServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                        {
                                                            string targetServiceLevelObjectiveInstance = ((string)targetServiceLevelObjectiveValue);
                                                            upgradeHintInstance.TargetServiceLevelObjective = targetServiceLevelObjectiveInstance;
                                                        }
                                                        
                                                        JToken targetServiceLevelObjectiveIdValue = upgradeHintValue["targetServiceLevelObjectiveId"];
                                                        if (targetServiceLevelObjectiveIdValue != null && targetServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                        {
                                                            Guid targetServiceLevelObjectiveIdInstance = Guid.Parse(((string)targetServiceLevelObjectiveIdValue));
                                                            upgradeHintInstance.TargetServiceLevelObjectiveId = targetServiceLevelObjectiveIdInstance;
                                                        }
                                                        
                                                        JToken idValue3 = upgradeHintValue["id"];
                                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                        {
                                                            string idInstance3 = ((string)idValue3);
                                                            upgradeHintInstance.Id = idInstance3;
                                                        }
                                                        
                                                        JToken nameValue3 = upgradeHintValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            upgradeHintInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        JToken typeValue3 = upgradeHintValue["type"];
                                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance3 = ((string)typeValue3);
                                                            upgradeHintInstance.Type = typeInstance3;
                                                        }
                                                        
                                                        JToken locationValue3 = upgradeHintValue["location"];
                                                        if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                                        {
                                                            string locationInstance3 = ((string)locationValue3);
                                                            upgradeHintInstance.Location = locationInstance3;
                                                        }
                                                        
                                                        JToken tagsSequenceElement3 = ((JToken)upgradeHintValue["tags"]);
                                                        if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property3 in tagsSequenceElement3)
                                                            {
                                                                string tagsKey3 = ((string)property3.Name);
                                                                string tagsValue3 = ((string)property3.Value);
                                                                upgradeHintInstance.Tags.Add(tagsKey3, tagsValue3);
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken idValue4 = databasesValue["id"];
                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                {
                                                    string idInstance4 = ((string)idValue4);
                                                    databaseInstance.Id = idInstance4;
                                                }
                                                
                                                JToken nameValue4 = databasesValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    databaseInstance.Name = nameInstance4;
                                                }
                                                
                                                JToken typeValue4 = databasesValue["type"];
                                                if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                                {
                                                    string typeInstance4 = ((string)typeValue4);
                                                    databaseInstance.Type = typeInstance4;
                                                }
                                                
                                                JToken locationValue4 = databasesValue["location"];
                                                if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                                                {
                                                    string locationInstance4 = ((string)locationValue4);
                                                    databaseInstance.Location = locationInstance4;
                                                }
                                                
                                                JToken tagsSequenceElement4 = ((JToken)databasesValue["tags"]);
                                                if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property4 in tagsSequenceElement4)
                                                    {
                                                        string tagsKey4 = ((string)property4.Name);
                                                        string tagsValue4 = ((string)property4.Value);
                                                        databaseInstance.Tags.Add(tagsKey4, tagsValue4);
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken metricsArray = propertiesValue["metrics"];
                                        if (metricsArray != null && metricsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken metricsValue in ((JArray)metricsArray))
                                            {
                                                RecommendedElasticPoolMetric recommendedElasticPoolMetricInstance = new RecommendedElasticPoolMetric();
                                                propertiesInstance.Metrics.Add(recommendedElasticPoolMetricInstance);
                                                
                                                JToken dateTimeValue = metricsValue["dateTime"];
                                                if (dateTimeValue != null && dateTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime dateTimeInstance = ((DateTime)dateTimeValue);
                                                    recommendedElasticPoolMetricInstance.DateTime = dateTimeInstance;
                                                }
                                                
                                                JToken dtuValue2 = metricsValue["dtu"];
                                                if (dtuValue2 != null && dtuValue2.Type != JTokenType.Null)
                                                {
                                                    double dtuInstance2 = ((double)dtuValue2);
                                                    recommendedElasticPoolMetricInstance.Dtu = dtuInstance2;
                                                }
                                                
                                                JToken sizeGBValue = metricsValue["sizeGB"];
                                                if (sizeGBValue != null && sizeGBValue.Type != JTokenType.Null)
                                                {
                                                    double sizeGBInstance = ((double)sizeGBValue);
                                                    recommendedElasticPoolMetricInstance.SizeGB = sizeGBInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue5 = valueValue["id"];
                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                    {
                                        string idInstance5 = ((string)idValue5);
                                        recommendedElasticPoolInstance.Id = idInstance5;
                                    }
                                    
                                    JToken nameValue5 = valueValue["name"];
                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                    {
                                        string nameInstance5 = ((string)nameValue5);
                                        recommendedElasticPoolInstance.Name = nameInstance5;
                                    }
                                    
                                    JToken typeValue5 = valueValue["type"];
                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                    {
                                        string typeInstance5 = ((string)typeValue5);
                                        recommendedElasticPoolInstance.Type = typeInstance5;
                                    }
                                    
                                    JToken locationValue5 = valueValue["location"];
                                    if (locationValue5 != null && locationValue5.Type != JTokenType.Null)
                                    {
                                        string locationInstance5 = ((string)locationValue5);
                                        recommendedElasticPoolInstance.Location = locationInstance5;
                                    }
                                    
                                    JToken tagsSequenceElement5 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement5 != null && tagsSequenceElement5.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property5 in tagsSequenceElement5)
                                        {
                                            string tagsKey5 = ((string)property5.Name);
                                            string tagsValue5 = ((string)property5.Value);
                                            recommendedElasticPoolInstance.Tags.Add(tagsKey5, tagsValue5);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns information about an Azure SQL Database inside of an Azure
        /// Sql Recommended Elastic Pool.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='recommendedElasticPoolName'>
        /// Required. The name of the Azure SQL Recommended Elastic Pool to be
        /// retrieved.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a List Azure Sql Database request.
        /// </returns>
        public async Task<DatabaseListResponse> ListDatabasesAsync(string resourceGroupName, string serverName, string recommendedElasticPoolName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (recommendedElasticPoolName == null)
            {
                throw new ArgumentNullException("recommendedElasticPoolName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("recommendedElasticPoolName", recommendedElasticPoolName);
                TracingAdapter.Enter(invocationId, this, "ListDatabasesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/recommendedElasticPools/";
            url = url + Uri.EscapeDataString(recommendedElasticPoolName);
            url = url + "/databases";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatabaseListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    Database databaseInstance = new Database();
                                    result.Databases.Add(databaseInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        DatabaseProperties propertiesInstance = new DatabaseProperties();
                                        databaseInstance.Properties = propertiesInstance;
                                        
                                        JToken collationValue = propertiesValue["collation"];
                                        if (collationValue != null && collationValue.Type != JTokenType.Null)
                                        {
                                            string collationInstance = ((string)collationValue);
                                            propertiesInstance.Collation = collationInstance;
                                        }
                                        
                                        JToken creationDateValue = propertiesValue["creationDate"];
                                        if (creationDateValue != null && creationDateValue.Type != JTokenType.Null)
                                        {
                                            DateTime creationDateInstance = ((DateTime)creationDateValue);
                                            propertiesInstance.CreationDate = creationDateInstance;
                                        }
                                        
                                        JToken currentServiceObjectiveIdValue = propertiesValue["currentServiceObjectiveId"];
                                        if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue.Type != JTokenType.Null)
                                        {
                                            string currentServiceObjectiveIdInstance = ((string)currentServiceObjectiveIdValue);
                                            propertiesInstance.CurrentServiceObjectiveId = currentServiceObjectiveIdInstance;
                                        }
                                        
                                        JToken databaseIdValue = propertiesValue["databaseId"];
                                        if (databaseIdValue != null && databaseIdValue.Type != JTokenType.Null)
                                        {
                                            string databaseIdInstance = ((string)databaseIdValue);
                                            propertiesInstance.DatabaseId = databaseIdInstance;
                                        }
                                        
                                        JToken earliestRestoreDateValue = propertiesValue["earliestRestoreDate"];
                                        if (earliestRestoreDateValue != null && earliestRestoreDateValue.Type != JTokenType.Null)
                                        {
                                            DateTime earliestRestoreDateInstance = ((DateTime)earliestRestoreDateValue);
                                            propertiesInstance.EarliestRestoreDate = earliestRestoreDateInstance;
                                        }
                                        
                                        JToken editionValue = propertiesValue["edition"];
                                        if (editionValue != null && editionValue.Type != JTokenType.Null)
                                        {
                                            string editionInstance = ((string)editionValue);
                                            propertiesInstance.Edition = editionInstance;
                                        }
                                        
                                        JToken maxSizeBytesValue = propertiesValue["maxSizeBytes"];
                                        if (maxSizeBytesValue != null && maxSizeBytesValue.Type != JTokenType.Null)
                                        {
                                            long maxSizeBytesInstance = ((long)maxSizeBytesValue);
                                            propertiesInstance.MaxSizeBytes = maxSizeBytesInstance;
                                        }
                                        
                                        JToken requestedServiceObjectiveIdValue = propertiesValue["requestedServiceObjectiveId"];
                                        if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue.Type != JTokenType.Null)
                                        {
                                            string requestedServiceObjectiveIdInstance = ((string)requestedServiceObjectiveIdValue);
                                            propertiesInstance.RequestedServiceObjectiveId = requestedServiceObjectiveIdInstance;
                                        }
                                        
                                        JToken requestedServiceObjectiveNameValue = propertiesValue["requestedServiceObjectiveName"];
                                        if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue.Type != JTokenType.Null)
                                        {
                                            string requestedServiceObjectiveNameInstance = ((string)requestedServiceObjectiveNameValue);
                                            propertiesInstance.RequestedServiceObjectiveName = requestedServiceObjectiveNameInstance;
                                        }
                                        
                                        JToken serviceLevelObjectiveValue = propertiesValue["serviceLevelObjective"];
                                        if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue.Type != JTokenType.Null)
                                        {
                                            string serviceLevelObjectiveInstance = ((string)serviceLevelObjectiveValue);
                                            propertiesInstance.ServiceObjective = serviceLevelObjectiveInstance;
                                        }
                                        
                                        JToken statusValue = propertiesValue["status"];
                                        if (statusValue != null && statusValue.Type != JTokenType.Null)
                                        {
                                            string statusInstance = ((string)statusValue);
                                            propertiesInstance.Status = statusInstance;
                                        }
                                        
                                        JToken elasticPoolNameValue = propertiesValue["elasticPoolName"];
                                        if (elasticPoolNameValue != null && elasticPoolNameValue.Type != JTokenType.Null)
                                        {
                                            string elasticPoolNameInstance = ((string)elasticPoolNameValue);
                                            propertiesInstance.ElasticPoolName = elasticPoolNameInstance;
                                        }
                                        
                                        JToken serviceTierAdvisorsArray = propertiesValue["serviceTierAdvisors"];
                                        if (serviceTierAdvisorsArray != null && serviceTierAdvisorsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken serviceTierAdvisorsValue in ((JArray)serviceTierAdvisorsArray))
                                            {
                                                ServiceTierAdvisor serviceTierAdvisorInstance = new ServiceTierAdvisor();
                                                propertiesInstance.ServiceTierAdvisors.Add(serviceTierAdvisorInstance);
                                                
                                                JToken propertiesValue2 = serviceTierAdvisorsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    ServiceTierAdvisorProperties propertiesInstance2 = new ServiceTierAdvisorProperties();
                                                    serviceTierAdvisorInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken observationPeriodStartValue = propertiesValue2["observationPeriodStart"];
                                                    if (observationPeriodStartValue != null && observationPeriodStartValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime observationPeriodStartInstance = ((DateTime)observationPeriodStartValue);
                                                        propertiesInstance2.ObservationPeriodStart = observationPeriodStartInstance;
                                                    }
                                                    
                                                    JToken observationPeriodEndValue = propertiesValue2["observationPeriodEnd"];
                                                    if (observationPeriodEndValue != null && observationPeriodEndValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime observationPeriodEndInstance = ((DateTime)observationPeriodEndValue);
                                                        propertiesInstance2.ObservationPeriodEnd = observationPeriodEndInstance;
                                                    }
                                                    
                                                    JToken activeTimeRatioValue = propertiesValue2["activeTimeRatio"];
                                                    if (activeTimeRatioValue != null && activeTimeRatioValue.Type != JTokenType.Null)
                                                    {
                                                        double activeTimeRatioInstance = ((double)activeTimeRatioValue);
                                                        propertiesInstance2.ActiveTimeRatio = activeTimeRatioInstance;
                                                    }
                                                    
                                                    JToken minDtuValue = propertiesValue2["minDtu"];
                                                    if (minDtuValue != null && minDtuValue.Type != JTokenType.Null)
                                                    {
                                                        double minDtuInstance = ((double)minDtuValue);
                                                        propertiesInstance2.MinDtu = minDtuInstance;
                                                    }
                                                    
                                                    JToken avgDtuValue = propertiesValue2["avgDtu"];
                                                    if (avgDtuValue != null && avgDtuValue.Type != JTokenType.Null)
                                                    {
                                                        double avgDtuInstance = ((double)avgDtuValue);
                                                        propertiesInstance2.AvgDtu = avgDtuInstance;
                                                    }
                                                    
                                                    JToken maxDtuValue = propertiesValue2["maxDtu"];
                                                    if (maxDtuValue != null && maxDtuValue.Type != JTokenType.Null)
                                                    {
                                                        double maxDtuInstance = ((double)maxDtuValue);
                                                        propertiesInstance2.MaxDtu = maxDtuInstance;
                                                    }
                                                    
                                                    JToken maxSizeInGBValue = propertiesValue2["maxSizeInGB"];
                                                    if (maxSizeInGBValue != null && maxSizeInGBValue.Type != JTokenType.Null)
                                                    {
                                                        double maxSizeInGBInstance = ((double)maxSizeInGBValue);
                                                        propertiesInstance2.MaxSizeInGB = maxSizeInGBInstance;
                                                    }
                                                    
                                                    JToken serviceLevelObjectiveUsageMetricsArray = propertiesValue2["serviceLevelObjectiveUsageMetrics"];
                                                    if (serviceLevelObjectiveUsageMetricsArray != null && serviceLevelObjectiveUsageMetricsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken serviceLevelObjectiveUsageMetricsValue in ((JArray)serviceLevelObjectiveUsageMetricsArray))
                                                        {
                                                            SloUsageMetric sloUsageMetricInstance = new SloUsageMetric();
                                                            propertiesInstance2.ServiceLevelObjectiveUsageMetrics.Add(sloUsageMetricInstance);
                                                            
                                                            JToken serviceLevelObjectiveValue2 = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjective"];
                                                            if (serviceLevelObjectiveValue2 != null && serviceLevelObjectiveValue2.Type != JTokenType.Null)
                                                            {
                                                                string serviceLevelObjectiveInstance2 = ((string)serviceLevelObjectiveValue2);
                                                                sloUsageMetricInstance.ServiceLevelObjective = serviceLevelObjectiveInstance2;
                                                            }
                                                            
                                                            JToken serviceLevelObjectiveIdValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjectiveId"];
                                                            if (serviceLevelObjectiveIdValue != null && serviceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                            {
                                                                Guid serviceLevelObjectiveIdInstance = Guid.Parse(((string)serviceLevelObjectiveIdValue));
                                                                sloUsageMetricInstance.ServiceLevelObjectiveId = serviceLevelObjectiveIdInstance;
                                                            }
                                                            
                                                            JToken inRangeTimeRatioValue = serviceLevelObjectiveUsageMetricsValue["inRangeTimeRatio"];
                                                            if (inRangeTimeRatioValue != null && inRangeTimeRatioValue.Type != JTokenType.Null)
                                                            {
                                                                double inRangeTimeRatioInstance = ((double)inRangeTimeRatioValue);
                                                                sloUsageMetricInstance.InRangeTimeRatio = inRangeTimeRatioInstance;
                                                            }
                                                            
                                                            JToken idValue = serviceLevelObjectiveUsageMetricsValue["id"];
                                                            if (idValue != null && idValue.Type != JTokenType.Null)
                                                            {
                                                                string idInstance = ((string)idValue);
                                                                sloUsageMetricInstance.Id = idInstance;
                                                            }
                                                            
                                                            JToken nameValue = serviceLevelObjectiveUsageMetricsValue["name"];
                                                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance = ((string)nameValue);
                                                                sloUsageMetricInstance.Name = nameInstance;
                                                            }
                                                            
                                                            JToken typeValue = serviceLevelObjectiveUsageMetricsValue["type"];
                                                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                            {
                                                                string typeInstance = ((string)typeValue);
                                                                sloUsageMetricInstance.Type = typeInstance;
                                                            }
                                                            
                                                            JToken locationValue = serviceLevelObjectiveUsageMetricsValue["location"];
                                                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                            {
                                                                string locationInstance = ((string)locationValue);
                                                                sloUsageMetricInstance.Location = locationInstance;
                                                            }
                                                            
                                                            JToken tagsSequenceElement = ((JToken)serviceLevelObjectiveUsageMetricsValue["tags"]);
                                                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property in tagsSequenceElement)
                                                                {
                                                                    string tagsKey = ((string)property.Name);
                                                                    string tagsValue = ((string)property.Value);
                                                                    sloUsageMetricInstance.Tags.Add(tagsKey, tagsValue);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken currentServiceLevelObjectiveValue = propertiesValue2["currentServiceLevelObjective"];
                                                    if (currentServiceLevelObjectiveValue != null && currentServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                    {
                                                        string currentServiceLevelObjectiveInstance = ((string)currentServiceLevelObjectiveValue);
                                                        propertiesInstance2.CurrentServiceLevelObjective = currentServiceLevelObjectiveInstance;
                                                    }
                                                    
                                                    JToken currentServiceLevelObjectiveIdValue = propertiesValue2["currentServiceLevelObjectiveId"];
                                                    if (currentServiceLevelObjectiveIdValue != null && currentServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        Guid currentServiceLevelObjectiveIdInstance = Guid.Parse(((string)currentServiceLevelObjectiveIdValue));
                                                        propertiesInstance2.CurrentServiceLevelObjectiveId = currentServiceLevelObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken usageBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["usageBasedRecommendationServiceLevelObjective"];
                                                    if (usageBasedRecommendationServiceLevelObjectiveValue != null && usageBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                    {
                                                        string usageBasedRecommendationServiceLevelObjectiveInstance = ((string)usageBasedRecommendationServiceLevelObjectiveValue);
                                                        propertiesInstance2.UsageBasedRecommendationServiceLevelObjective = usageBasedRecommendationServiceLevelObjectiveInstance;
                                                    }
                                                    
                                                    JToken usageBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["usageBasedRecommendationServiceLevelObjectiveId"];
                                                    if (usageBasedRecommendationServiceLevelObjectiveIdValue != null && usageBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        Guid usageBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)usageBasedRecommendationServiceLevelObjectiveIdValue));
                                                        propertiesInstance2.UsageBasedRecommendationServiceLevelObjectiveId = usageBasedRecommendationServiceLevelObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken databaseSizeBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["databaseSizeBasedRecommendationServiceLevelObjective"];
                                                    if (databaseSizeBasedRecommendationServiceLevelObjectiveValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                    {
                                                        string databaseSizeBasedRecommendationServiceLevelObjectiveInstance = ((string)databaseSizeBasedRecommendationServiceLevelObjectiveValue);
                                                        propertiesInstance2.DatabaseSizeBasedRecommendationServiceLevelObjective = databaseSizeBasedRecommendationServiceLevelObjectiveInstance;
                                                    }
                                                    
                                                    JToken databaseSizeBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["databaseSizeBasedRecommendationServiceLevelObjectiveId"];
                                                    if (databaseSizeBasedRecommendationServiceLevelObjectiveIdValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        Guid databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)databaseSizeBasedRecommendationServiceLevelObjectiveIdValue));
                                                        propertiesInstance2.DatabaseSizeBasedRecommendationServiceLevelObjectiveId = databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken disasterPlanBasedRecommendationServiceLevelObjectiveValue = propertiesValue2["disasterPlanBasedRecommendationServiceLevelObjective"];
                                                    if (disasterPlanBasedRecommendationServiceLevelObjectiveValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                    {
                                                        string disasterPlanBasedRecommendationServiceLevelObjectiveInstance = ((string)disasterPlanBasedRecommendationServiceLevelObjectiveValue);
                                                        propertiesInstance2.DisasterPlanBasedRecommendationServiceLevelObjective = disasterPlanBasedRecommendationServiceLevelObjectiveInstance;
                                                    }
                                                    
                                                    JToken disasterPlanBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue2["disasterPlanBasedRecommendationServiceLevelObjectiveId"];
                                                    if (disasterPlanBasedRecommendationServiceLevelObjectiveIdValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        Guid disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)disasterPlanBasedRecommendationServiceLevelObjectiveIdValue));
                                                        propertiesInstance2.DisasterPlanBasedRecommendationServiceLevelObjectiveId = disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken overallRecommendationServiceLevelObjectiveValue = propertiesValue2["overallRecommendationServiceLevelObjective"];
                                                    if (overallRecommendationServiceLevelObjectiveValue != null && overallRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                    {
                                                        string overallRecommendationServiceLevelObjectiveInstance = ((string)overallRecommendationServiceLevelObjectiveValue);
                                                        propertiesInstance2.OverallRecommendationServiceLevelObjective = overallRecommendationServiceLevelObjectiveInstance;
                                                    }
                                                    
                                                    JToken overallRecommendationServiceLevelObjectiveIdValue = propertiesValue2["overallRecommendationServiceLevelObjectiveId"];
                                                    if (overallRecommendationServiceLevelObjectiveIdValue != null && overallRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        Guid overallRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)overallRecommendationServiceLevelObjectiveIdValue));
                                                        propertiesInstance2.OverallRecommendationServiceLevelObjectiveId = overallRecommendationServiceLevelObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken confidenceValue = propertiesValue2["confidence"];
                                                    if (confidenceValue != null && confidenceValue.Type != JTokenType.Null)
                                                    {
                                                        double confidenceInstance = ((double)confidenceValue);
                                                        propertiesInstance2.Confidence = confidenceInstance;
                                                    }
                                                }
                                                
                                                JToken idValue2 = serviceTierAdvisorsValue["id"];
                                                if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                {
                                                    string idInstance2 = ((string)idValue2);
                                                    serviceTierAdvisorInstance.Id = idInstance2;
                                                }
                                                
                                                JToken nameValue2 = serviceTierAdvisorsValue["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    serviceTierAdvisorInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken typeValue2 = serviceTierAdvisorsValue["type"];
                                                if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                {
                                                    string typeInstance2 = ((string)typeValue2);
                                                    serviceTierAdvisorInstance.Type = typeInstance2;
                                                }
                                                
                                                JToken locationValue2 = serviceTierAdvisorsValue["location"];
                                                if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                                {
                                                    string locationInstance2 = ((string)locationValue2);
                                                    serviceTierAdvisorInstance.Location = locationInstance2;
                                                }
                                                
                                                JToken tagsSequenceElement2 = ((JToken)serviceTierAdvisorsValue["tags"]);
                                                if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property2 in tagsSequenceElement2)
                                                    {
                                                        string tagsKey2 = ((string)property2.Name);
                                                        string tagsValue2 = ((string)property2.Value);
                                                        serviceTierAdvisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken upgradeHintValue = propertiesValue["upgradeHint"];
                                        if (upgradeHintValue != null && upgradeHintValue.Type != JTokenType.Null)
                                        {
                                            UpgradeHint upgradeHintInstance = new UpgradeHint();
                                            propertiesInstance.UpgradeHint = upgradeHintInstance;
                                            
                                            JToken targetServiceLevelObjectiveValue = upgradeHintValue["targetServiceLevelObjective"];
                                            if (targetServiceLevelObjectiveValue != null && targetServiceLevelObjectiveValue.Type != JTokenType.Null)
                                            {
                                                string targetServiceLevelObjectiveInstance = ((string)targetServiceLevelObjectiveValue);
                                                upgradeHintInstance.TargetServiceLevelObjective = targetServiceLevelObjectiveInstance;
                                            }
                                            
                                            JToken targetServiceLevelObjectiveIdValue = upgradeHintValue["targetServiceLevelObjectiveId"];
                                            if (targetServiceLevelObjectiveIdValue != null && targetServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                            {
                                                Guid targetServiceLevelObjectiveIdInstance = Guid.Parse(((string)targetServiceLevelObjectiveIdValue));
                                                upgradeHintInstance.TargetServiceLevelObjectiveId = targetServiceLevelObjectiveIdInstance;
                                            }
                                            
                                            JToken idValue3 = upgradeHintValue["id"];
                                            if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                            {
                                                string idInstance3 = ((string)idValue3);
                                                upgradeHintInstance.Id = idInstance3;
                                            }
                                            
                                            JToken nameValue3 = upgradeHintValue["name"];
                                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                            {
                                                string nameInstance3 = ((string)nameValue3);
                                                upgradeHintInstance.Name = nameInstance3;
                                            }
                                            
                                            JToken typeValue3 = upgradeHintValue["type"];
                                            if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                            {
                                                string typeInstance3 = ((string)typeValue3);
                                                upgradeHintInstance.Type = typeInstance3;
                                            }
                                            
                                            JToken locationValue3 = upgradeHintValue["location"];
                                            if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                            {
                                                string locationInstance3 = ((string)locationValue3);
                                                upgradeHintInstance.Location = locationInstance3;
                                            }
                                            
                                            JToken tagsSequenceElement3 = ((JToken)upgradeHintValue["tags"]);
                                            if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property3 in tagsSequenceElement3)
                                                {
                                                    string tagsKey3 = ((string)property3.Name);
                                                    string tagsValue3 = ((string)property3.Value);
                                                    upgradeHintInstance.Tags.Add(tagsKey3, tagsValue3);
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue4 = valueValue["id"];
                                    if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                    {
                                        string idInstance4 = ((string)idValue4);
                                        databaseInstance.Id = idInstance4;
                                    }
                                    
                                    JToken nameValue4 = valueValue["name"];
                                    if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                    {
                                        string nameInstance4 = ((string)nameValue4);
                                        databaseInstance.Name = nameInstance4;
                                    }
                                    
                                    JToken typeValue4 = valueValue["type"];
                                    if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                    {
                                        string typeInstance4 = ((string)typeValue4);
                                        databaseInstance.Type = typeInstance4;
                                    }
                                    
                                    JToken locationValue4 = valueValue["location"];
                                    if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                                    {
                                        string locationInstance4 = ((string)locationValue4);
                                        databaseInstance.Location = locationInstance4;
                                    }
                                    
                                    JToken tagsSequenceElement4 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property4 in tagsSequenceElement4)
                                        {
                                            string tagsKey4 = ((string)property4.Name);
                                            string tagsValue4 = ((string)property4.Value);
                                            databaseInstance.Tags.Add(tagsKey4, tagsValue4);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns information about Azure SQL Recommended Elastic Pools.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Recommended Serve belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server in which Azure
        /// SQL Recommended Elastic Pools are hosted.
        /// </param>
        /// <param name='expand'>
        /// Required. The comma separated list of child objects that we want to
        /// expand on in response.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a List Azure Sql Recommended Elastic
        /// Pool request.
        /// </returns>
        public async Task<RecommendedElasticPoolListResponse> ListExpandedAsync(string resourceGroupName, string serverName, string expand, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (expand == null)
            {
                throw new ArgumentNullException("expand");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("expand", expand);
                TracingAdapter.Enter(invocationId, this, "ListExpandedAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/recommendedElasticPools";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            queryParameters.Add("$expand=" + Uri.EscapeDataString(expand));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecommendedElasticPoolListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecommendedElasticPoolListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RecommendedElasticPool recommendedElasticPoolInstance = new RecommendedElasticPool();
                                    result.RecommendedElasticPools.Add(recommendedElasticPoolInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        RecommendedElasticPoolProperties propertiesInstance = new RecommendedElasticPoolProperties();
                                        recommendedElasticPoolInstance.Properties = propertiesInstance;
                                        
                                        JToken databaseEditionValue = propertiesValue["databaseEdition"];
                                        if (databaseEditionValue != null && databaseEditionValue.Type != JTokenType.Null)
                                        {
                                            string databaseEditionInstance = ((string)databaseEditionValue);
                                            propertiesInstance.DatabaseEdition = databaseEditionInstance;
                                        }
                                        
                                        JToken dtuValue = propertiesValue["dtu"];
                                        if (dtuValue != null && dtuValue.Type != JTokenType.Null)
                                        {
                                            double dtuInstance = ((double)dtuValue);
                                            propertiesInstance.Dtu = dtuInstance;
                                        }
                                        
                                        JToken databaseDtuMinValue = propertiesValue["databaseDtuMin"];
                                        if (databaseDtuMinValue != null && databaseDtuMinValue.Type != JTokenType.Null)
                                        {
                                            double databaseDtuMinInstance = ((double)databaseDtuMinValue);
                                            propertiesInstance.DatabaseDtuMin = databaseDtuMinInstance;
                                        }
                                        
                                        JToken databaseDtuMaxValue = propertiesValue["databaseDtuMax"];
                                        if (databaseDtuMaxValue != null && databaseDtuMaxValue.Type != JTokenType.Null)
                                        {
                                            double databaseDtuMaxInstance = ((double)databaseDtuMaxValue);
                                            propertiesInstance.DatabaseDtuMax = databaseDtuMaxInstance;
                                        }
                                        
                                        JToken storageMBValue = propertiesValue["storageMB"];
                                        if (storageMBValue != null && storageMBValue.Type != JTokenType.Null)
                                        {
                                            double storageMBInstance = ((double)storageMBValue);
                                            propertiesInstance.StorageMB = storageMBInstance;
                                        }
                                        
                                        JToken observationPeriodStartValue = propertiesValue["observationPeriodStart"];
                                        if (observationPeriodStartValue != null && observationPeriodStartValue.Type != JTokenType.Null)
                                        {
                                            DateTime observationPeriodStartInstance = ((DateTime)observationPeriodStartValue);
                                            propertiesInstance.ObservationPeriodStart = observationPeriodStartInstance;
                                        }
                                        
                                        JToken observationPeriodEndValue = propertiesValue["observationPeriodEnd"];
                                        if (observationPeriodEndValue != null && observationPeriodEndValue.Type != JTokenType.Null)
                                        {
                                            DateTime observationPeriodEndInstance = ((DateTime)observationPeriodEndValue);
                                            propertiesInstance.ObservationPeriodEnd = observationPeriodEndInstance;
                                        }
                                        
                                        JToken maxObservedDtuValue = propertiesValue["maxObservedDtu"];
                                        if (maxObservedDtuValue != null && maxObservedDtuValue.Type != JTokenType.Null)
                                        {
                                            double maxObservedDtuInstance = ((double)maxObservedDtuValue);
                                            propertiesInstance.MaxObservedDtu = maxObservedDtuInstance;
                                        }
                                        
                                        JToken maxObservedStorageMBValue = propertiesValue["maxObservedStorageMB"];
                                        if (maxObservedStorageMBValue != null && maxObservedStorageMBValue.Type != JTokenType.Null)
                                        {
                                            double maxObservedStorageMBInstance = ((double)maxObservedStorageMBValue);
                                            propertiesInstance.MaxObservedStorageMB = maxObservedStorageMBInstance;
                                        }
                                        
                                        JToken databasesArray = propertiesValue["databases"];
                                        if (databasesArray != null && databasesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken databasesValue in ((JArray)databasesArray))
                                            {
                                                Database databaseInstance = new Database();
                                                propertiesInstance.Databases.Add(databaseInstance);
                                                
                                                JToken propertiesValue2 = databasesValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    DatabaseProperties propertiesInstance2 = new DatabaseProperties();
                                                    databaseInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken collationValue = propertiesValue2["collation"];
                                                    if (collationValue != null && collationValue.Type != JTokenType.Null)
                                                    {
                                                        string collationInstance = ((string)collationValue);
                                                        propertiesInstance2.Collation = collationInstance;
                                                    }
                                                    
                                                    JToken creationDateValue = propertiesValue2["creationDate"];
                                                    if (creationDateValue != null && creationDateValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime creationDateInstance = ((DateTime)creationDateValue);
                                                        propertiesInstance2.CreationDate = creationDateInstance;
                                                    }
                                                    
                                                    JToken currentServiceObjectiveIdValue = propertiesValue2["currentServiceObjectiveId"];
                                                    if (currentServiceObjectiveIdValue != null && currentServiceObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        string currentServiceObjectiveIdInstance = ((string)currentServiceObjectiveIdValue);
                                                        propertiesInstance2.CurrentServiceObjectiveId = currentServiceObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken databaseIdValue = propertiesValue2["databaseId"];
                                                    if (databaseIdValue != null && databaseIdValue.Type != JTokenType.Null)
                                                    {
                                                        string databaseIdInstance = ((string)databaseIdValue);
                                                        propertiesInstance2.DatabaseId = databaseIdInstance;
                                                    }
                                                    
                                                    JToken earliestRestoreDateValue = propertiesValue2["earliestRestoreDate"];
                                                    if (earliestRestoreDateValue != null && earliestRestoreDateValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime earliestRestoreDateInstance = ((DateTime)earliestRestoreDateValue);
                                                        propertiesInstance2.EarliestRestoreDate = earliestRestoreDateInstance;
                                                    }
                                                    
                                                    JToken editionValue = propertiesValue2["edition"];
                                                    if (editionValue != null && editionValue.Type != JTokenType.Null)
                                                    {
                                                        string editionInstance = ((string)editionValue);
                                                        propertiesInstance2.Edition = editionInstance;
                                                    }
                                                    
                                                    JToken maxSizeBytesValue = propertiesValue2["maxSizeBytes"];
                                                    if (maxSizeBytesValue != null && maxSizeBytesValue.Type != JTokenType.Null)
                                                    {
                                                        long maxSizeBytesInstance = ((long)maxSizeBytesValue);
                                                        propertiesInstance2.MaxSizeBytes = maxSizeBytesInstance;
                                                    }
                                                    
                                                    JToken requestedServiceObjectiveIdValue = propertiesValue2["requestedServiceObjectiveId"];
                                                    if (requestedServiceObjectiveIdValue != null && requestedServiceObjectiveIdValue.Type != JTokenType.Null)
                                                    {
                                                        string requestedServiceObjectiveIdInstance = ((string)requestedServiceObjectiveIdValue);
                                                        propertiesInstance2.RequestedServiceObjectiveId = requestedServiceObjectiveIdInstance;
                                                    }
                                                    
                                                    JToken requestedServiceObjectiveNameValue = propertiesValue2["requestedServiceObjectiveName"];
                                                    if (requestedServiceObjectiveNameValue != null && requestedServiceObjectiveNameValue.Type != JTokenType.Null)
                                                    {
                                                        string requestedServiceObjectiveNameInstance = ((string)requestedServiceObjectiveNameValue);
                                                        propertiesInstance2.RequestedServiceObjectiveName = requestedServiceObjectiveNameInstance;
                                                    }
                                                    
                                                    JToken serviceLevelObjectiveValue = propertiesValue2["serviceLevelObjective"];
                                                    if (serviceLevelObjectiveValue != null && serviceLevelObjectiveValue.Type != JTokenType.Null)
                                                    {
                                                        string serviceLevelObjectiveInstance = ((string)serviceLevelObjectiveValue);
                                                        propertiesInstance2.ServiceObjective = serviceLevelObjectiveInstance;
                                                    }
                                                    
                                                    JToken statusValue = propertiesValue2["status"];
                                                    if (statusValue != null && statusValue.Type != JTokenType.Null)
                                                    {
                                                        string statusInstance = ((string)statusValue);
                                                        propertiesInstance2.Status = statusInstance;
                                                    }
                                                    
                                                    JToken elasticPoolNameValue = propertiesValue2["elasticPoolName"];
                                                    if (elasticPoolNameValue != null && elasticPoolNameValue.Type != JTokenType.Null)
                                                    {
                                                        string elasticPoolNameInstance = ((string)elasticPoolNameValue);
                                                        propertiesInstance2.ElasticPoolName = elasticPoolNameInstance;
                                                    }
                                                    
                                                    JToken serviceTierAdvisorsArray = propertiesValue2["serviceTierAdvisors"];
                                                    if (serviceTierAdvisorsArray != null && serviceTierAdvisorsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken serviceTierAdvisorsValue in ((JArray)serviceTierAdvisorsArray))
                                                        {
                                                            ServiceTierAdvisor serviceTierAdvisorInstance = new ServiceTierAdvisor();
                                                            propertiesInstance2.ServiceTierAdvisors.Add(serviceTierAdvisorInstance);
                                                            
                                                            JToken propertiesValue3 = serviceTierAdvisorsValue["properties"];
                                                            if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                                            {
                                                                ServiceTierAdvisorProperties propertiesInstance3 = new ServiceTierAdvisorProperties();
                                                                serviceTierAdvisorInstance.Properties = propertiesInstance3;
                                                                
                                                                JToken observationPeriodStartValue2 = propertiesValue3["observationPeriodStart"];
                                                                if (observationPeriodStartValue2 != null && observationPeriodStartValue2.Type != JTokenType.Null)
                                                                {
                                                                    DateTime observationPeriodStartInstance2 = ((DateTime)observationPeriodStartValue2);
                                                                    propertiesInstance3.ObservationPeriodStart = observationPeriodStartInstance2;
                                                                }
                                                                
                                                                JToken observationPeriodEndValue2 = propertiesValue3["observationPeriodEnd"];
                                                                if (observationPeriodEndValue2 != null && observationPeriodEndValue2.Type != JTokenType.Null)
                                                                {
                                                                    DateTime observationPeriodEndInstance2 = ((DateTime)observationPeriodEndValue2);
                                                                    propertiesInstance3.ObservationPeriodEnd = observationPeriodEndInstance2;
                                                                }
                                                                
                                                                JToken activeTimeRatioValue = propertiesValue3["activeTimeRatio"];
                                                                if (activeTimeRatioValue != null && activeTimeRatioValue.Type != JTokenType.Null)
                                                                {
                                                                    double activeTimeRatioInstance = ((double)activeTimeRatioValue);
                                                                    propertiesInstance3.ActiveTimeRatio = activeTimeRatioInstance;
                                                                }
                                                                
                                                                JToken minDtuValue = propertiesValue3["minDtu"];
                                                                if (minDtuValue != null && minDtuValue.Type != JTokenType.Null)
                                                                {
                                                                    double minDtuInstance = ((double)minDtuValue);
                                                                    propertiesInstance3.MinDtu = minDtuInstance;
                                                                }
                                                                
                                                                JToken avgDtuValue = propertiesValue3["avgDtu"];
                                                                if (avgDtuValue != null && avgDtuValue.Type != JTokenType.Null)
                                                                {
                                                                    double avgDtuInstance = ((double)avgDtuValue);
                                                                    propertiesInstance3.AvgDtu = avgDtuInstance;
                                                                }
                                                                
                                                                JToken maxDtuValue = propertiesValue3["maxDtu"];
                                                                if (maxDtuValue != null && maxDtuValue.Type != JTokenType.Null)
                                                                {
                                                                    double maxDtuInstance = ((double)maxDtuValue);
                                                                    propertiesInstance3.MaxDtu = maxDtuInstance;
                                                                }
                                                                
                                                                JToken maxSizeInGBValue = propertiesValue3["maxSizeInGB"];
                                                                if (maxSizeInGBValue != null && maxSizeInGBValue.Type != JTokenType.Null)
                                                                {
                                                                    double maxSizeInGBInstance = ((double)maxSizeInGBValue);
                                                                    propertiesInstance3.MaxSizeInGB = maxSizeInGBInstance;
                                                                }
                                                                
                                                                JToken serviceLevelObjectiveUsageMetricsArray = propertiesValue3["serviceLevelObjectiveUsageMetrics"];
                                                                if (serviceLevelObjectiveUsageMetricsArray != null && serviceLevelObjectiveUsageMetricsArray.Type != JTokenType.Null)
                                                                {
                                                                    foreach (JToken serviceLevelObjectiveUsageMetricsValue in ((JArray)serviceLevelObjectiveUsageMetricsArray))
                                                                    {
                                                                        SloUsageMetric sloUsageMetricInstance = new SloUsageMetric();
                                                                        propertiesInstance3.ServiceLevelObjectiveUsageMetrics.Add(sloUsageMetricInstance);
                                                                        
                                                                        JToken serviceLevelObjectiveValue2 = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjective"];
                                                                        if (serviceLevelObjectiveValue2 != null && serviceLevelObjectiveValue2.Type != JTokenType.Null)
                                                                        {
                                                                            string serviceLevelObjectiveInstance2 = ((string)serviceLevelObjectiveValue2);
                                                                            sloUsageMetricInstance.ServiceLevelObjective = serviceLevelObjectiveInstance2;
                                                                        }
                                                                        
                                                                        JToken serviceLevelObjectiveIdValue = serviceLevelObjectiveUsageMetricsValue["serviceLevelObjectiveId"];
                                                                        if (serviceLevelObjectiveIdValue != null && serviceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                        {
                                                                            Guid serviceLevelObjectiveIdInstance = Guid.Parse(((string)serviceLevelObjectiveIdValue));
                                                                            sloUsageMetricInstance.ServiceLevelObjectiveId = serviceLevelObjectiveIdInstance;
                                                                        }
                                                                        
                                                                        JToken inRangeTimeRatioValue = serviceLevelObjectiveUsageMetricsValue["inRangeTimeRatio"];
                                                                        if (inRangeTimeRatioValue != null && inRangeTimeRatioValue.Type != JTokenType.Null)
                                                                        {
                                                                            double inRangeTimeRatioInstance = ((double)inRangeTimeRatioValue);
                                                                            sloUsageMetricInstance.InRangeTimeRatio = inRangeTimeRatioInstance;
                                                                        }
                                                                        
                                                                        JToken idValue = serviceLevelObjectiveUsageMetricsValue["id"];
                                                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                                                        {
                                                                            string idInstance = ((string)idValue);
                                                                            sloUsageMetricInstance.Id = idInstance;
                                                                        }
                                                                        
                                                                        JToken nameValue = serviceLevelObjectiveUsageMetricsValue["name"];
                                                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                                        {
                                                                            string nameInstance = ((string)nameValue);
                                                                            sloUsageMetricInstance.Name = nameInstance;
                                                                        }
                                                                        
                                                                        JToken typeValue = serviceLevelObjectiveUsageMetricsValue["type"];
                                                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                                        {
                                                                            string typeInstance = ((string)typeValue);
                                                                            sloUsageMetricInstance.Type = typeInstance;
                                                                        }
                                                                        
                                                                        JToken locationValue = serviceLevelObjectiveUsageMetricsValue["location"];
                                                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                                        {
                                                                            string locationInstance = ((string)locationValue);
                                                                            sloUsageMetricInstance.Location = locationInstance;
                                                                        }
                                                                        
                                                                        JToken tagsSequenceElement = ((JToken)serviceLevelObjectiveUsageMetricsValue["tags"]);
                                                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                                        {
                                                                            foreach (JProperty property in tagsSequenceElement)
                                                                            {
                                                                                string tagsKey = ((string)property.Name);
                                                                                string tagsValue = ((string)property.Value);
                                                                                sloUsageMetricInstance.Tags.Add(tagsKey, tagsValue);
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                
                                                                JToken currentServiceLevelObjectiveValue = propertiesValue3["currentServiceLevelObjective"];
                                                                if (currentServiceLevelObjectiveValue != null && currentServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                                {
                                                                    string currentServiceLevelObjectiveInstance = ((string)currentServiceLevelObjectiveValue);
                                                                    propertiesInstance3.CurrentServiceLevelObjective = currentServiceLevelObjectiveInstance;
                                                                }
                                                                
                                                                JToken currentServiceLevelObjectiveIdValue = propertiesValue3["currentServiceLevelObjectiveId"];
                                                                if (currentServiceLevelObjectiveIdValue != null && currentServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid currentServiceLevelObjectiveIdInstance = Guid.Parse(((string)currentServiceLevelObjectiveIdValue));
                                                                    propertiesInstance3.CurrentServiceLevelObjectiveId = currentServiceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken usageBasedRecommendationServiceLevelObjectiveValue = propertiesValue3["usageBasedRecommendationServiceLevelObjective"];
                                                                if (usageBasedRecommendationServiceLevelObjectiveValue != null && usageBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                                {
                                                                    string usageBasedRecommendationServiceLevelObjectiveInstance = ((string)usageBasedRecommendationServiceLevelObjectiveValue);
                                                                    propertiesInstance3.UsageBasedRecommendationServiceLevelObjective = usageBasedRecommendationServiceLevelObjectiveInstance;
                                                                }
                                                                
                                                                JToken usageBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue3["usageBasedRecommendationServiceLevelObjectiveId"];
                                                                if (usageBasedRecommendationServiceLevelObjectiveIdValue != null && usageBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid usageBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)usageBasedRecommendationServiceLevelObjectiveIdValue));
                                                                    propertiesInstance3.UsageBasedRecommendationServiceLevelObjectiveId = usageBasedRecommendationServiceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken databaseSizeBasedRecommendationServiceLevelObjectiveValue = propertiesValue3["databaseSizeBasedRecommendationServiceLevelObjective"];
                                                                if (databaseSizeBasedRecommendationServiceLevelObjectiveValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                                {
                                                                    string databaseSizeBasedRecommendationServiceLevelObjectiveInstance = ((string)databaseSizeBasedRecommendationServiceLevelObjectiveValue);
                                                                    propertiesInstance3.DatabaseSizeBasedRecommendationServiceLevelObjective = databaseSizeBasedRecommendationServiceLevelObjectiveInstance;
                                                                }
                                                                
                                                                JToken databaseSizeBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue3["databaseSizeBasedRecommendationServiceLevelObjectiveId"];
                                                                if (databaseSizeBasedRecommendationServiceLevelObjectiveIdValue != null && databaseSizeBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)databaseSizeBasedRecommendationServiceLevelObjectiveIdValue));
                                                                    propertiesInstance3.DatabaseSizeBasedRecommendationServiceLevelObjectiveId = databaseSizeBasedRecommendationServiceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken disasterPlanBasedRecommendationServiceLevelObjectiveValue = propertiesValue3["disasterPlanBasedRecommendationServiceLevelObjective"];
                                                                if (disasterPlanBasedRecommendationServiceLevelObjectiveValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                                {
                                                                    string disasterPlanBasedRecommendationServiceLevelObjectiveInstance = ((string)disasterPlanBasedRecommendationServiceLevelObjectiveValue);
                                                                    propertiesInstance3.DisasterPlanBasedRecommendationServiceLevelObjective = disasterPlanBasedRecommendationServiceLevelObjectiveInstance;
                                                                }
                                                                
                                                                JToken disasterPlanBasedRecommendationServiceLevelObjectiveIdValue = propertiesValue3["disasterPlanBasedRecommendationServiceLevelObjectiveId"];
                                                                if (disasterPlanBasedRecommendationServiceLevelObjectiveIdValue != null && disasterPlanBasedRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)disasterPlanBasedRecommendationServiceLevelObjectiveIdValue));
                                                                    propertiesInstance3.DisasterPlanBasedRecommendationServiceLevelObjectiveId = disasterPlanBasedRecommendationServiceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken overallRecommendationServiceLevelObjectiveValue = propertiesValue3["overallRecommendationServiceLevelObjective"];
                                                                if (overallRecommendationServiceLevelObjectiveValue != null && overallRecommendationServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                                {
                                                                    string overallRecommendationServiceLevelObjectiveInstance = ((string)overallRecommendationServiceLevelObjectiveValue);
                                                                    propertiesInstance3.OverallRecommendationServiceLevelObjective = overallRecommendationServiceLevelObjectiveInstance;
                                                                }
                                                                
                                                                JToken overallRecommendationServiceLevelObjectiveIdValue = propertiesValue3["overallRecommendationServiceLevelObjectiveId"];
                                                                if (overallRecommendationServiceLevelObjectiveIdValue != null && overallRecommendationServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                                {
                                                                    Guid overallRecommendationServiceLevelObjectiveIdInstance = Guid.Parse(((string)overallRecommendationServiceLevelObjectiveIdValue));
                                                                    propertiesInstance3.OverallRecommendationServiceLevelObjectiveId = overallRecommendationServiceLevelObjectiveIdInstance;
                                                                }
                                                                
                                                                JToken confidenceValue = propertiesValue3["confidence"];
                                                                if (confidenceValue != null && confidenceValue.Type != JTokenType.Null)
                                                                {
                                                                    double confidenceInstance = ((double)confidenceValue);
                                                                    propertiesInstance3.Confidence = confidenceInstance;
                                                                }
                                                            }
                                                            
                                                            JToken idValue2 = serviceTierAdvisorsValue["id"];
                                                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                                            {
                                                                string idInstance2 = ((string)idValue2);
                                                                serviceTierAdvisorInstance.Id = idInstance2;
                                                            }
                                                            
                                                            JToken nameValue2 = serviceTierAdvisorsValue["name"];
                                                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                            {
                                                                string nameInstance2 = ((string)nameValue2);
                                                                serviceTierAdvisorInstance.Name = nameInstance2;
                                                            }
                                                            
                                                            JToken typeValue2 = serviceTierAdvisorsValue["type"];
                                                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                                            {
                                                                string typeInstance2 = ((string)typeValue2);
                                                                serviceTierAdvisorInstance.Type = typeInstance2;
                                                            }
                                                            
                                                            JToken locationValue2 = serviceTierAdvisorsValue["location"];
                                                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                                            {
                                                                string locationInstance2 = ((string)locationValue2);
                                                                serviceTierAdvisorInstance.Location = locationInstance2;
                                                            }
                                                            
                                                            JToken tagsSequenceElement2 = ((JToken)serviceTierAdvisorsValue["tags"]);
                                                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                                            {
                                                                foreach (JProperty property2 in tagsSequenceElement2)
                                                                {
                                                                    string tagsKey2 = ((string)property2.Name);
                                                                    string tagsValue2 = ((string)property2.Value);
                                                                    serviceTierAdvisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken upgradeHintValue = propertiesValue2["upgradeHint"];
                                                    if (upgradeHintValue != null && upgradeHintValue.Type != JTokenType.Null)
                                                    {
                                                        UpgradeHint upgradeHintInstance = new UpgradeHint();
                                                        propertiesInstance2.UpgradeHint = upgradeHintInstance;
                                                        
                                                        JToken targetServiceLevelObjectiveValue = upgradeHintValue["targetServiceLevelObjective"];
                                                        if (targetServiceLevelObjectiveValue != null && targetServiceLevelObjectiveValue.Type != JTokenType.Null)
                                                        {
                                                            string targetServiceLevelObjectiveInstance = ((string)targetServiceLevelObjectiveValue);
                                                            upgradeHintInstance.TargetServiceLevelObjective = targetServiceLevelObjectiveInstance;
                                                        }
                                                        
                                                        JToken targetServiceLevelObjectiveIdValue = upgradeHintValue["targetServiceLevelObjectiveId"];
                                                        if (targetServiceLevelObjectiveIdValue != null && targetServiceLevelObjectiveIdValue.Type != JTokenType.Null)
                                                        {
                                                            Guid targetServiceLevelObjectiveIdInstance = Guid.Parse(((string)targetServiceLevelObjectiveIdValue));
                                                            upgradeHintInstance.TargetServiceLevelObjectiveId = targetServiceLevelObjectiveIdInstance;
                                                        }
                                                        
                                                        JToken idValue3 = upgradeHintValue["id"];
                                                        if (idValue3 != null && idValue3.Type != JTokenType.Null)
                                                        {
                                                            string idInstance3 = ((string)idValue3);
                                                            upgradeHintInstance.Id = idInstance3;
                                                        }
                                                        
                                                        JToken nameValue3 = upgradeHintValue["name"];
                                                        if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                                        {
                                                            string nameInstance3 = ((string)nameValue3);
                                                            upgradeHintInstance.Name = nameInstance3;
                                                        }
                                                        
                                                        JToken typeValue3 = upgradeHintValue["type"];
                                                        if (typeValue3 != null && typeValue3.Type != JTokenType.Null)
                                                        {
                                                            string typeInstance3 = ((string)typeValue3);
                                                            upgradeHintInstance.Type = typeInstance3;
                                                        }
                                                        
                                                        JToken locationValue3 = upgradeHintValue["location"];
                                                        if (locationValue3 != null && locationValue3.Type != JTokenType.Null)
                                                        {
                                                            string locationInstance3 = ((string)locationValue3);
                                                            upgradeHintInstance.Location = locationInstance3;
                                                        }
                                                        
                                                        JToken tagsSequenceElement3 = ((JToken)upgradeHintValue["tags"]);
                                                        if (tagsSequenceElement3 != null && tagsSequenceElement3.Type != JTokenType.Null)
                                                        {
                                                            foreach (JProperty property3 in tagsSequenceElement3)
                                                            {
                                                                string tagsKey3 = ((string)property3.Name);
                                                                string tagsValue3 = ((string)property3.Value);
                                                                upgradeHintInstance.Tags.Add(tagsKey3, tagsValue3);
                                                            }
                                                        }
                                                    }
                                                }
                                                
                                                JToken idValue4 = databasesValue["id"];
                                                if (idValue4 != null && idValue4.Type != JTokenType.Null)
                                                {
                                                    string idInstance4 = ((string)idValue4);
                                                    databaseInstance.Id = idInstance4;
                                                }
                                                
                                                JToken nameValue4 = databasesValue["name"];
                                                if (nameValue4 != null && nameValue4.Type != JTokenType.Null)
                                                {
                                                    string nameInstance4 = ((string)nameValue4);
                                                    databaseInstance.Name = nameInstance4;
                                                }
                                                
                                                JToken typeValue4 = databasesValue["type"];
                                                if (typeValue4 != null && typeValue4.Type != JTokenType.Null)
                                                {
                                                    string typeInstance4 = ((string)typeValue4);
                                                    databaseInstance.Type = typeInstance4;
                                                }
                                                
                                                JToken locationValue4 = databasesValue["location"];
                                                if (locationValue4 != null && locationValue4.Type != JTokenType.Null)
                                                {
                                                    string locationInstance4 = ((string)locationValue4);
                                                    databaseInstance.Location = locationInstance4;
                                                }
                                                
                                                JToken tagsSequenceElement4 = ((JToken)databasesValue["tags"]);
                                                if (tagsSequenceElement4 != null && tagsSequenceElement4.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property4 in tagsSequenceElement4)
                                                    {
                                                        string tagsKey4 = ((string)property4.Name);
                                                        string tagsValue4 = ((string)property4.Value);
                                                        databaseInstance.Tags.Add(tagsKey4, tagsValue4);
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken metricsArray = propertiesValue["metrics"];
                                        if (metricsArray != null && metricsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken metricsValue in ((JArray)metricsArray))
                                            {
                                                RecommendedElasticPoolMetric recommendedElasticPoolMetricInstance = new RecommendedElasticPoolMetric();
                                                propertiesInstance.Metrics.Add(recommendedElasticPoolMetricInstance);
                                                
                                                JToken dateTimeValue = metricsValue["dateTime"];
                                                if (dateTimeValue != null && dateTimeValue.Type != JTokenType.Null)
                                                {
                                                    DateTime dateTimeInstance = ((DateTime)dateTimeValue);
                                                    recommendedElasticPoolMetricInstance.DateTime = dateTimeInstance;
                                                }
                                                
                                                JToken dtuValue2 = metricsValue["dtu"];
                                                if (dtuValue2 != null && dtuValue2.Type != JTokenType.Null)
                                                {
                                                    double dtuInstance2 = ((double)dtuValue2);
                                                    recommendedElasticPoolMetricInstance.Dtu = dtuInstance2;
                                                }
                                                
                                                JToken sizeGBValue = metricsValue["sizeGB"];
                                                if (sizeGBValue != null && sizeGBValue.Type != JTokenType.Null)
                                                {
                                                    double sizeGBInstance = ((double)sizeGBValue);
                                                    recommendedElasticPoolMetricInstance.SizeGB = sizeGBInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue5 = valueValue["id"];
                                    if (idValue5 != null && idValue5.Type != JTokenType.Null)
                                    {
                                        string idInstance5 = ((string)idValue5);
                                        recommendedElasticPoolInstance.Id = idInstance5;
                                    }
                                    
                                    JToken nameValue5 = valueValue["name"];
                                    if (nameValue5 != null && nameValue5.Type != JTokenType.Null)
                                    {
                                        string nameInstance5 = ((string)nameValue5);
                                        recommendedElasticPoolInstance.Name = nameInstance5;
                                    }
                                    
                                    JToken typeValue5 = valueValue["type"];
                                    if (typeValue5 != null && typeValue5.Type != JTokenType.Null)
                                    {
                                        string typeInstance5 = ((string)typeValue5);
                                        recommendedElasticPoolInstance.Type = typeInstance5;
                                    }
                                    
                                    JToken locationValue5 = valueValue["location"];
                                    if (locationValue5 != null && locationValue5.Type != JTokenType.Null)
                                    {
                                        string locationInstance5 = ((string)locationValue5);
                                        recommendedElasticPoolInstance.Location = locationInstance5;
                                    }
                                    
                                    JToken tagsSequenceElement5 = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement5 != null && tagsSequenceElement5.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property5 in tagsSequenceElement5)
                                        {
                                            string tagsKey5 = ((string)property5.Name);
                                            string tagsValue5 = ((string)property5.Value);
                                            recommendedElasticPoolInstance.Tags.Add(tagsKey5, tagsValue5);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns information about an recommended elastic pool metrics.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server.
        /// </param>
        /// <param name='recommendedElasticPoolName'>
        /// Required. The name of the Azure SQL Recommended Elastic Pool to be
        /// retrieved.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a List Azure Sql Recommended Elastic
        /// Pool metrics request.
        /// </returns>
        public async Task<RecommendedElasticPoolListMetricsResponse> ListMetricsAsync(string resourceGroupName, string serverName, string recommendedElasticPoolName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (recommendedElasticPoolName == null)
            {
                throw new ArgumentNullException("recommendedElasticPoolName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("recommendedElasticPoolName", recommendedElasticPoolName);
                TracingAdapter.Enter(invocationId, this, "ListMetricsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/recommendedElasticPools/";
            url = url + Uri.EscapeDataString(recommendedElasticPoolName);
            url = url + "/metrics";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    RecommendedElasticPoolListMetricsResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new RecommendedElasticPoolListMetricsResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    RecommendedElasticPoolMetric recommendedElasticPoolMetricInstance = new RecommendedElasticPoolMetric();
                                    result.RecommendedElasticPoolsMetrics.Add(recommendedElasticPoolMetricInstance);
                                    
                                    JToken dateTimeValue = valueValue["dateTime"];
                                    if (dateTimeValue != null && dateTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime dateTimeInstance = ((DateTime)dateTimeValue);
                                        recommendedElasticPoolMetricInstance.DateTime = dateTimeInstance;
                                    }
                                    
                                    JToken dtuValue = valueValue["dtu"];
                                    if (dtuValue != null && dtuValue.Type != JTokenType.Null)
                                    {
                                        double dtuInstance = ((double)dtuValue);
                                        recommendedElasticPoolMetricInstance.Dtu = dtuInstance;
                                    }
                                    
                                    JToken sizeGBValue = valueValue["sizeGB"];
                                    if (sizeGBValue != null && sizeGBValue.Type != JTokenType.Null)
                                    {
                                        double sizeGBInstance = ((double)sizeGBValue);
                                        recommendedElasticPoolMetricInstance.SizeGB = sizeGBInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
