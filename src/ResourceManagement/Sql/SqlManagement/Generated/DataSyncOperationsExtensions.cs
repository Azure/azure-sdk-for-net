// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;

namespace Microsoft.Azure.Management.Sql
{
    /// <summary>
    /// The Windows Azure SQL Database management API provides a RESTful set of
    /// web services that interact with Windows Azure SQL Database services to
    /// manage your databases. The API enables users to create, retrieve,
    /// update, and delete databases and servers.
    /// </summary>
    public static partial class DataSyncOperationsExtensions
    {
        /// <summary>
        /// Begin creating a new sync group. To determine the status of the
        /// operation, call GetCreateOrUpdateSyncAgentOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating the sync agent.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync agent.
        /// </returns>
        public static SyncAgentCreateOrUpdateResponse BeginCreateOrUpdateSyncAgent(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName, SyncAgentCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).BeginCreateOrUpdateSyncAgentAsync(resourceGroupName, serverName, syncAgentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin creating a new sync group. To determine the status of the
        /// operation, call GetCreateOrUpdateSyncAgentOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating the sync agent.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync agent.
        /// </returns>
        public static Task<SyncAgentCreateOrUpdateResponse> BeginCreateOrUpdateSyncAgentAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName, SyncAgentCreateOrUpdateParameters parameters)
        {
            return operations.BeginCreateOrUpdateSyncAgentAsync(resourceGroupName, serverName, syncAgentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Begin creating a new sync group. To determine the status of the
        /// operation, call GetCreateOrUpdateSyncGroupOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a data sync group
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static SyncGroupCreateOrUpdateResponse BeginCreateOrUpdateSyncGroup(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).BeginCreateOrUpdateSyncGroupAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin creating a new sync group. To determine the status of the
        /// operation, call GetCreateOrUpdateSyncGroupOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a data sync group
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static Task<SyncGroupCreateOrUpdateResponse> BeginCreateOrUpdateSyncGroupAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters)
        {
            return operations.BeginCreateOrUpdateSyncGroupAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Begin creating a new sync member. To determine the status of the
        /// operation, call GetCreateOrUpdateSyncMemberOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static SyncMemberCreateOrUpdateResponse BeginCreateOrUpdateSyncMember(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).BeginCreateOrUpdateSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin creating a new sync member. To determine the status of the
        /// operation, call GetCreateOrUpdateSyncMemberOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static Task<SyncMemberCreateOrUpdateResponse> BeginCreateOrUpdateSyncMemberAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters)
        {
            return operations.BeginCreateOrUpdateSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Begin deleting an existing sync agent. To determine the status of
        /// the operation, call GetDeleteSyncAgentOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse BeginDeleteSyncAgent(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).BeginDeleteSyncAgentAsync(resourceGroupName, serverName, syncAgentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin deleting an existing sync agent. To determine the status of
        /// the operation, call GetDeleteSyncAgentOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> BeginDeleteSyncAgentAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName)
        {
            return operations.BeginDeleteSyncAgentAsync(resourceGroupName, serverName, syncAgentName, CancellationToken.None);
        }
        
        /// <summary>
        /// Begin deleting an existing sync group. To determine the status of
        /// the operation, call GetDeleteSyncGroupOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse BeginDeleteSyncGroup(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).BeginDeleteSyncGroupAsync(resourceGroupName, serverName, databaseName, syncGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin deleting an existing sync group. To determine the status of
        /// the operation, call GetDeleteSyncGroupOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> BeginDeleteSyncGroupAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return operations.BeginDeleteSyncGroupAsync(resourceGroupName, serverName, databaseName, syncGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Begin deleting an existing sync member. To determine the status of
        /// the operation, call GetDeleteSyncMemberOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of deleting a sync member.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse BeginDeleteSyncMember(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).BeginDeleteSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin deleting an existing sync member. To determine the status of
        /// the operation, call GetDeleteSyncMemberOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of deleting a sync member.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> BeginDeleteSyncMemberAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return operations.BeginDeleteSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Begin starting refreshing the sync schema of a hub database. To
        /// determine the status of the operation, call
        /// GetInvokeSyncHubSchemaRefreshOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies sync group name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse BeginInvokeSyncHubSchemaRefresh(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).BeginInvokeSyncHubSchemaRefreshAsync(resourceGroupName, serverName, databaseName, syncGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin starting refreshing the sync schema of a hub database. To
        /// determine the status of the operation, call
        /// GetInvokeSyncHubSchemaRefreshOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies sync group name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> BeginInvokeSyncHubSchemaRefreshAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return operations.BeginInvokeSyncHubSchemaRefreshAsync(resourceGroupName, serverName, databaseName, syncGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Begin starting refreshing the member database schema of sync
        /// member. To determine the status of the operation, call
        /// GetInvokeSyncMemberSchemaRefreshOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies sync group name and sync member name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse BeginInvokeSyncMemberSchemaRefresh(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).BeginInvokeSyncMemberSchemaRefreshAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin starting refreshing the member database schema of sync
        /// member. To determine the status of the operation, call
        /// GetInvokeSyncMemberSchemaRefreshOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies sync group name and sync member name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> BeginInvokeSyncMemberSchemaRefreshAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return operations.BeginInvokeSyncMemberSchemaRefreshAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Begin updating an existing sync group with the specified
        /// parameters. To get the status of this operation, call
        /// GetUpdateSyncGroupOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of updating a sync group.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static SyncGroupCreateOrUpdateResponse BeginUpdateSyncGroup(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).BeginUpdateSyncGroupAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin updating an existing sync group with the specified
        /// parameters. To get the status of this operation, call
        /// GetUpdateSyncGroupOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of updating a sync group.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static Task<SyncGroupCreateOrUpdateResponse> BeginUpdateSyncGroupAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters)
        {
            return operations.BeginUpdateSyncGroupAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Begin updating a existing sync member. To determine the status of
        /// the operation, call GetUpdateSyncMemberOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static SyncMemberCreateOrUpdateResponse BeginUpdateSyncMember(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).BeginUpdateSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begin updating a existing sync member. To determine the status of
        /// the operation, call GetUpdateSyncMemberOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static Task<SyncMemberCreateOrUpdateResponse> BeginUpdateSyncMemberAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters)
        {
            return operations.BeginUpdateSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Create a new sync agent with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating the sync agent.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync agent.
        /// </returns>
        public static SyncAgentCreateOrUpdateResponse CreateOrUpdateSyncAgent(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName, SyncAgentCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).CreateOrUpdateSyncAgentAsync(resourceGroupName, serverName, syncAgentName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a new sync agent with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating the sync agent.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync agent.
        /// </returns>
        public static Task<SyncAgentCreateOrUpdateResponse> CreateOrUpdateSyncAgentAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName, SyncAgentCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateSyncAgentAsync(resourceGroupName, serverName, syncAgentName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Create a new sync group with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a data sync group
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static SyncGroupCreateOrUpdateResponse CreateOrUpdateSyncGroup(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).CreateOrUpdateSyncGroupAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a new sync group with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a data sync group
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static Task<SyncGroupCreateOrUpdateResponse> CreateOrUpdateSyncGroupAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateSyncGroupAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Create a new sync member under a specified sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static SyncMemberCreateOrUpdateResponse CreateOrUpdateSyncMember(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).CreateOrUpdateSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create a new sync member under a specified sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static Task<SyncMemberCreateOrUpdateResponse> CreateOrUpdateSyncMemberAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Generate a sync agent registration key for a specified sync agent.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <returns>
        /// Represents the response to a sync agent key generate request.
        /// </returns>
        public static SyncAgentKeyResponse CreateSyncAgentKey(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).CreateSyncAgentKeyAsync(resourceGroupName, serverName, syncAgentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Generate a sync agent registration key for a specified sync agent.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <returns>
        /// Represents the response to a sync agent key generate request.
        /// </returns>
        public static Task<SyncAgentKeyResponse> CreateSyncAgentKeyAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName)
        {
            return operations.CreateSyncAgentKeyAsync(resourceGroupName, serverName, syncAgentName, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete an existing sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse DeleteSyncAgent(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).DeleteSyncAgentAsync(resourceGroupName, serverName, syncAgentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete an existing sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> DeleteSyncAgentAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName)
        {
            return operations.DeleteSyncAgentAsync(resourceGroupName, serverName, syncAgentName, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete an existing sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse DeleteSyncGroup(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).DeleteSyncGroupAsync(resourceGroupName, serverName, databaseName, syncGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete an existing sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> DeleteSyncGroupAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return operations.DeleteSyncGroupAsync(resourceGroupName, serverName, databaseName, syncGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete an existing sync member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of deleting a sync member.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse DeleteSyncMember(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).DeleteSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete an existing sync member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of deleting a sync member.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> DeleteSyncMemberAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return operations.DeleteSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the status of a sync agent create operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync agent.
        /// </returns>
        public static SyncAgentCreateOrUpdateResponse GetCreateOrUpdateSyncAgentOperationStatus(this IDataSyncOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetCreateOrUpdateSyncAgentOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the status of a sync agent create operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync agent.
        /// </returns>
        public static Task<SyncAgentCreateOrUpdateResponse> GetCreateOrUpdateSyncAgentOperationStatusAsync(this IDataSyncOperations operations, string operationStatusLink)
        {
            return operations.GetCreateOrUpdateSyncAgentOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the status of a sync group create operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static SyncGroupCreateOrUpdateResponse GetCreateOrUpdateSyncGroupOperationStatus(this IDataSyncOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetCreateOrUpdateSyncGroupOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the status of a sync group create operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static Task<SyncGroupCreateOrUpdateResponse> GetCreateOrUpdateSyncGroupOperationStatusAsync(this IDataSyncOperations operations, string operationStatusLink)
        {
            return operations.GetCreateOrUpdateSyncGroupOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the status of a sync member create operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static SyncMemberCreateOrUpdateResponse GetCreateOrUpdateSyncMemberOperationStatus(this IDataSyncOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetCreateOrUpdateSyncMemberOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the status of a sync member create operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static Task<SyncMemberCreateOrUpdateResponse> GetCreateOrUpdateSyncMemberOperationStatusAsync(this IDataSyncOperations operations, string operationStatusLink)
        {
            return operations.GetCreateOrUpdateSyncMemberOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the status of a sync agent delete operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse GetDeleteSyncAgentOperationStatus(this IDataSyncOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetDeleteSyncAgentOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the status of a sync agent delete operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> GetDeleteSyncAgentOperationStatusAsync(this IDataSyncOperations operations, string operationStatusLink)
        {
            return operations.GetDeleteSyncAgentOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the status of a sync group delete operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse GetDeleteSyncGroupOperationStatus(this IDataSyncOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetDeleteSyncGroupOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the status of a sync group delete operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> GetDeleteSyncGroupOperationStatusAsync(this IDataSyncOperations operations, string operationStatusLink)
        {
            return operations.GetDeleteSyncGroupOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the status of a sync member delete operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse GetDeleteSyncMemberOperationStatus(this IDataSyncOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetDeleteSyncMemberOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the status of a sync member delete operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> GetDeleteSyncMemberOperationStatusAsync(this IDataSyncOperations operations, string operationStatusLink)
        {
            return operations.GetDeleteSyncMemberOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the status of refreshing the sync schema of a hub database
        /// operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse GetInvokeSyncHubSchemaRefreshOperationStatus(this IDataSyncOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetInvokeSyncHubSchemaRefreshOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the status of refreshing the sync schema of a hub database
        /// operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> GetInvokeSyncHubSchemaRefreshOperationStatusAsync(this IDataSyncOperations operations, string operationStatusLink)
        {
            return operations.GetInvokeSyncHubSchemaRefreshOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the status of refreshing member database schema operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse GetInvokeSyncMemberSchemaRefreshOperationStatus(this IDataSyncOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetInvokeSyncMemberSchemaRefreshOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the status of refreshing member database schema operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> GetInvokeSyncMemberSchemaRefreshOperationStatusAsync(this IDataSyncOperations operations, string operationStatusLink)
        {
            return operations.GetInvokeSyncMemberSchemaRefreshOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the information about a specified sync agent.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <returns>
        /// Represents a sync agent object.
        /// </returns>
        public static SyncAgentGetResponse GetSyncAgent(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetSyncAgentAsync(resourceGroupName, serverName, syncAgentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the information about a specified sync agent.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <returns>
        /// Represents a sync agent object.
        /// </returns>
        public static Task<SyncAgentGetResponse> GetSyncAgentAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName)
        {
            return operations.GetSyncAgentAsync(resourceGroupName, serverName, syncAgentName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the information about a specified sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// Response for getting sync group operations.
        /// </returns>
        public static SyncGroupGetResponse GetSyncGroup(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetSyncGroupAsync(resourceGroupName, serverName, databaseName, syncGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the information about a specified sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// Response for getting sync group operations.
        /// </returns>
        public static Task<SyncGroupGetResponse> GetSyncGroupAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return operations.GetSyncGroupAsync(resourceGroupName, serverName, databaseName, syncGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the full sync schema of a hub database.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies sync group name.
        /// </param>
        /// <returns>
        /// Response for getting the full sync schema of a member or hub
        /// database.
        /// </returns>
        public static SyncFullSchemaGetResponse GetSyncHubSchema(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetSyncHubSchemaAsync(resourceGroupName, serverName, databaseName, syncGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the full sync schema of a hub database.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies sync group name.
        /// </param>
        /// <returns>
        /// Response for getting the full sync schema of a member or hub
        /// database.
        /// </returns>
        public static Task<SyncFullSchemaGetResponse> GetSyncHubSchemaAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return operations.GetSyncHubSchemaAsync(resourceGroupName, serverName, databaseName, syncGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the information about a specified sync member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of getting a sync member.
        /// </param>
        /// <returns>
        /// Response for getting sync member operations.
        /// </returns>
        public static SyncMemberGetResponse GetSyncMember(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the information about a specified sync member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of getting a sync member.
        /// </param>
        /// <returns>
        /// Response for getting sync member operations.
        /// </returns>
        public static Task<SyncMemberGetResponse> GetSyncMemberAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return operations.GetSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the full schema of member database of a sync member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies sync group name and sync member name.
        /// </param>
        /// <returns>
        /// Response for getting the full sync schema of a member or hub
        /// database.
        /// </returns>
        public static SyncFullSchemaGetResponse GetSyncMemberSchema(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetSyncMemberSchemaAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the full schema of member database of a sync member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies sync group name and sync member name.
        /// </param>
        /// <returns>
        /// Response for getting the full sync schema of a member or hub
        /// database.
        /// </returns>
        public static Task<SyncFullSchemaGetResponse> GetSyncMemberSchemaAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return operations.GetSyncMemberSchemaAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the status of a sync group update operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static SyncGroupCreateOrUpdateResponse GetUpdateSyncGroupOperationStatus(this IDataSyncOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetUpdateSyncGroupOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the status of a sync group update operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static Task<SyncGroupCreateOrUpdateResponse> GetUpdateSyncGroupOperationStatusAsync(this IDataSyncOperations operations, string operationStatusLink)
        {
            return operations.GetUpdateSyncGroupOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the status of a sync member create operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static SyncMemberCreateOrUpdateResponse GetUpdateSyncMemberOperationStatus(this IDataSyncOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).GetUpdateSyncMemberOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the status of a sync member create operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static Task<SyncMemberCreateOrUpdateResponse> GetUpdateSyncMemberOperationStatusAsync(this IDataSyncOperations operations, string operationStatusLink)
        {
            return operations.GetUpdateSyncMemberOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Invoke the sync schema of a hub database refreshing.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies sync group name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse InvokeSyncHubSchemaRefresh(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).InvokeSyncHubSchemaRefreshAsync(resourceGroupName, serverName, databaseName, syncGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Invoke the sync schema of a hub database refreshing.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies sync group name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> InvokeSyncHubSchemaRefreshAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return operations.InvokeSyncHubSchemaRefreshAsync(resourceGroupName, serverName, databaseName, syncGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Trigger the refreshing of member database schema of a sync member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies sync group name and sync member name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static DataSyncOperationResponse InvokeSyncMemberSchemaRefresh(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).InvokeSyncMemberSchemaRefreshAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Trigger the refreshing of member database schema of a sync member.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies sync group name and sync member name.
        /// </param>
        /// <returns>
        /// Response for long running operations.
        /// </returns>
        public static Task<DataSyncOperationResponse> InvokeSyncMemberSchemaRefreshAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberGeneralParameters parameters)
        {
            return operations.InvokeSyncMemberSchemaRefreshAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the synchronization logs of a sync group from next link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the Azure SQL sync group name.
        /// </param>
        /// <param name='nextLink'>
        /// Required. Specifies the nextLink which is from the previous call.
        /// </param>
        /// <returns>
        /// Response for listing sync group log operations.
        /// </returns>
        public static SyncGroupLogListResponse ListNextSyncGroupLog(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).ListNextSyncGroupLogAsync(resourceGroupName, serverName, databaseName, syncGroupName, nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the synchronization logs of a sync group from next link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the Azure SQL sync group name.
        /// </param>
        /// <param name='nextLink'>
        /// Required. Specifies the nextLink which is from the previous call.
        /// </param>
        /// <returns>
        /// Response for listing sync group log operations.
        /// </returns>
        public static Task<SyncGroupLogListResponse> ListNextSyncGroupLogAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName, string nextLink)
        {
            return operations.ListNextSyncGroupLogAsync(resourceGroupName, serverName, databaseName, syncGroupName, nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// List all the sync agents under a specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <returns>
        /// Response for listing sync agent operations.
        /// </returns>
        public static SyncAgentListResponse ListSyncAgent(this IDataSyncOperations operations, string resourceGroupName, string serverName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).ListSyncAgentAsync(resourceGroupName, serverName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List all the sync agents under a specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <returns>
        /// Response for listing sync agent operations.
        /// </returns>
        public static Task<SyncAgentListResponse> ListSyncAgentAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName)
        {
            return operations.ListSyncAgentAsync(resourceGroupName, serverName, CancellationToken.None);
        }
        
        /// <summary>
        /// List all the databases connected by the specified sync agent.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <returns>
        /// Response for listing databases connected by a given sync agent
        /// operations.
        /// </returns>
        public static SyncAgentLinkedDatabaseListResponse ListSyncAgentLinkedDatabase(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).ListSyncAgentLinkedDatabaseAsync(resourceGroupName, serverName, syncAgentName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List all the databases connected by the specified sync agent.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync agent
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name the sync agent
        /// belongs to.
        /// </param>
        /// <param name='syncAgentName'>
        /// Required. Specifies the sync agent name.
        /// </param>
        /// <returns>
        /// Response for listing databases connected by a given sync agent
        /// operations.
        /// </returns>
        public static Task<SyncAgentLinkedDatabaseListResponse> ListSyncAgentLinkedDatabaseAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string syncAgentName)
        {
            return operations.ListSyncAgentLinkedDatabaseAsync(resourceGroupName, serverName, syncAgentName, CancellationToken.None);
        }
        
        /// <summary>
        /// List all the sync groups available under a given Azure SQL database.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <returns>
        /// Response for listing sync group operations.
        /// </returns>
        public static SyncGroupListResponse ListSyncGroup(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).ListSyncGroupAsync(resourceGroupName, serverName, databaseName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List all the sync groups available under a given Azure SQL database.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <returns>
        /// Response for listing sync group operations.
        /// </returns>
        public static Task<SyncGroupListResponse> ListSyncGroupAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName)
        {
            return operations.ListSyncGroupAsync(resourceGroupName, serverName, databaseName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the synchronization logs of a sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters for getting logs of a sync
        /// group.
        /// </param>
        /// <returns>
        /// Response for listing sync group log operations.
        /// </returns>
        public static SyncGroupLogListResponse ListSyncGroupLog(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncGroupLogGetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).ListSyncGroupLogAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the synchronization logs of a sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters for getting logs of a sync
        /// group.
        /// </param>
        /// <returns>
        /// Response for listing sync group log operations.
        /// </returns>
        public static Task<SyncGroupLogListResponse> ListSyncGroupLogAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncGroupLogGetParameters parameters)
        {
            return operations.ListSyncGroupLogAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// List all the sync members under a specified sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// Response for listing sync member operations.
        /// </returns>
        public static SyncMemberListResponse ListSyncMember(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).ListSyncMemberAsync(resourceGroupName, serverName, databaseName, syncGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List all the sync members under a specified sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync member
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// Response for listing sync member operations.
        /// </returns>
        public static Task<SyncMemberListResponse> ListSyncMemberAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return operations.ListSyncMemberAsync(resourceGroupName, serverName, databaseName, syncGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Trigger synchronization of a sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse StartSyncGroupSynchronization(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).StartSyncGroupSynchronizationAsync(resourceGroupName, serverName, databaseName, syncGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Trigger synchronization of a sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> StartSyncGroupSynchronizationAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return operations.StartSyncGroupSynchronizationAsync(resourceGroupName, serverName, databaseName, syncGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Cancel synchronization of a sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse StopSyncGroupSynchronization(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).StopSyncGroupSynchronizationAsync(resourceGroupName, serverName, databaseName, syncGroupName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Cancel synchronization of a sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='syncGroupName'>
        /// Required. Specifies the sync group name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> StopSyncGroupSynchronizationAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, string syncGroupName)
        {
            return operations.StopSyncGroupSynchronizationAsync(resourceGroupName, serverName, databaseName, syncGroupName, CancellationToken.None);
        }
        
        /// <summary>
        /// Update an existing sync group with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of updating sync group.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static SyncGroupCreateOrUpdateResponse UpdateSyncGroup(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).UpdateSyncGroupAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update an existing sync group with the specified parameters.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of updating sync group.
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync group.
        /// </returns>
        public static Task<SyncGroupCreateOrUpdateResponse> UpdateSyncGroupAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncGroupCreateOrUpdateParameters parameters)
        {
            return operations.UpdateSyncGroupAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Update an exsting sync member under a specified sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static SyncMemberCreateOrUpdateResponse UpdateSyncMember(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDataSyncOperations)s).UpdateSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update an exsting sync member under a specified sync group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.Azure.Management.Sql.IDataSyncOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Specifies the name of the resource group the sync group
        /// belongs to.
        /// </param>
        /// <param name='serverName'>
        /// Required. Specifies the Azure SQL server name.
        /// </param>
        /// <param name='databaseName'>
        /// Required. Specifies the Azure SQL database name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Specifies other parameters of creating a sync member
        /// </param>
        /// <returns>
        /// Represent the response of create or update a sync member.
        /// </returns>
        public static Task<SyncMemberCreateOrUpdateResponse> UpdateSyncMemberAsync(this IDataSyncOperations operations, string resourceGroupName, string serverName, string databaseName, SyncMemberCreateOrUpdateParameters parameters)
        {
            return operations.UpdateSyncMemberAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
    }
}
