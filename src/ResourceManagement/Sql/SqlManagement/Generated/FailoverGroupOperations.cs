// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Sql
{
    /// <summary>
    /// Represents all the operations for operating on Azure SQL Database
    /// Failover Group.  Contains operations to: Create, Retrieve, Update, and
    /// Delete.
    /// </summary>
    internal partial class FailoverGroupOperations : IServiceOperations<SqlManagementClient>, IFailoverGroupOperations
    {
        /// <summary>
        /// Initializes a new instance of the FailoverGroupOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal FailoverGroupOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Begins creating a new Azure SQL Database Failover Group or updating
        /// an existing Azure SQL Database Failover Group. To determine the
        /// status of the operation call GetFailoverGroupOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Database Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='failoverGroupName'>
        /// Required. The name of the Azure SQL Database Failover Group to be
        /// operated on (Updated or created).
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for createing or updating an
        /// Failover Group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database Failover Group
        /// operation.
        /// </returns>
        public async Task<FailoverGroupCreateOrUpdateResponse> BeginCreateOrUpdateAsync(string resourceGroupName, string serverName, string failoverGroupName, FailoverGroupCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (failoverGroupName == null)
            {
                throw new ArgumentNullException("failoverGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("failoverGroupName", failoverGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/failoverGroups/";
            url = url + Uri.EscapeDataString(failoverGroupName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject failoverGroupCreateOrUpdateParametersValue = new JObject();
                requestDoc = failoverGroupCreateOrUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                failoverGroupCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.ReadOnlyEndpoint != null)
                {
                    JObject readOnlyEndpointValue = new JObject();
                    propertiesValue["readOnlyEndpoint"] = readOnlyEndpointValue;
                    
                    if (parameters.Properties.ReadOnlyEndpoint.FailoverPolicy != null)
                    {
                        readOnlyEndpointValue["failoverPolicy"] = parameters.Properties.ReadOnlyEndpoint.FailoverPolicy;
                    }
                }
                
                if (parameters.Properties.ReadWriteEndpoint != null)
                {
                    JObject readWriteEndpointValue = new JObject();
                    propertiesValue["readWriteEndpoint"] = readWriteEndpointValue;
                    
                    if (parameters.Properties.ReadWriteEndpoint.FailoverPolicy != null)
                    {
                        readWriteEndpointValue["failoverPolicy"] = parameters.Properties.ReadWriteEndpoint.FailoverPolicy;
                    }
                    
                    if (parameters.Properties.ReadWriteEndpoint.FailoverWithDataLossGracePeriodMinutes != null)
                    {
                        readWriteEndpointValue["failoverWithDataLossGracePeriodMinutes"] = parameters.Properties.ReadWriteEndpoint.FailoverWithDataLossGracePeriodMinutes.Value;
                    }
                }
                
                if (parameters.Properties.Databases != null)
                {
                    if (parameters.Properties.Databases is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Databases).IsInitialized)
                    {
                        JArray databasesArray = new JArray();
                        foreach (string databasesItem in parameters.Properties.Databases)
                        {
                            databasesArray.Add(databasesItem);
                        }
                        propertiesValue["databases"] = databasesArray;
                    }
                }
                
                if (parameters.Properties.PartnerServers != null)
                {
                    if (parameters.Properties.PartnerServers is ILazyCollection == false || ((ILazyCollection)parameters.Properties.PartnerServers).IsInitialized)
                    {
                        JArray partnerServersArray = new JArray();
                        foreach (FailoverGroupPartnerServer partnerServersItem in parameters.Properties.PartnerServers)
                        {
                            JObject failoverGroupPartnerServerValue = new JObject();
                            partnerServersArray.Add(failoverGroupPartnerServerValue);
                            
                            if (partnerServersItem.Id != null)
                            {
                                failoverGroupPartnerServerValue["id"] = partnerServersItem.Id;
                            }
                            
                            if (partnerServersItem.Location != null)
                            {
                                failoverGroupPartnerServerValue["location"] = partnerServersItem.Location;
                            }
                            
                            if (partnerServersItem.ReplicationRole != null)
                            {
                                failoverGroupPartnerServerValue["replicationRole"] = partnerServersItem.ReplicationRole;
                            }
                        }
                        propertiesValue["partnerServers"] = partnerServersArray;
                    }
                }
                
                if (parameters.Location != null)
                {
                    failoverGroupCreateOrUpdateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    failoverGroupCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FailoverGroupCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FailoverGroupCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            FailoverGroup failoverGroupInstance = new FailoverGroup();
                            result.FailoverGroup = failoverGroupInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                FailoverGroupProperties propertiesInstance = new FailoverGroupProperties();
                                failoverGroupInstance.Properties = propertiesInstance;
                                
                                JToken readOnlyEndpointValue2 = propertiesValue2["readOnlyEndpoint"];
                                if (readOnlyEndpointValue2 != null && readOnlyEndpointValue2.Type != JTokenType.Null)
                                {
                                    ReadOnlyEndpoint readOnlyEndpointInstance = new ReadOnlyEndpoint();
                                    propertiesInstance.ReadOnlyEndpoint = readOnlyEndpointInstance;
                                    
                                    JToken failoverPolicyValue = readOnlyEndpointValue2["failoverPolicy"];
                                    if (failoverPolicyValue != null && failoverPolicyValue.Type != JTokenType.Null)
                                    {
                                        string failoverPolicyInstance = ((string)failoverPolicyValue);
                                        readOnlyEndpointInstance.FailoverPolicy = failoverPolicyInstance;
                                    }
                                }
                                
                                JToken readWriteEndpointValue2 = propertiesValue2["readWriteEndpoint"];
                                if (readWriteEndpointValue2 != null && readWriteEndpointValue2.Type != JTokenType.Null)
                                {
                                    ReadWriteEndpoint readWriteEndpointInstance = new ReadWriteEndpoint();
                                    propertiesInstance.ReadWriteEndpoint = readWriteEndpointInstance;
                                    
                                    JToken failoverPolicyValue2 = readWriteEndpointValue2["failoverPolicy"];
                                    if (failoverPolicyValue2 != null && failoverPolicyValue2.Type != JTokenType.Null)
                                    {
                                        string failoverPolicyInstance2 = ((string)failoverPolicyValue2);
                                        readWriteEndpointInstance.FailoverPolicy = failoverPolicyInstance2;
                                    }
                                    
                                    JToken failoverWithDataLossGracePeriodMinutesValue = readWriteEndpointValue2["failoverWithDataLossGracePeriodMinutes"];
                                    if (failoverWithDataLossGracePeriodMinutesValue != null && failoverWithDataLossGracePeriodMinutesValue.Type != JTokenType.Null)
                                    {
                                        int failoverWithDataLossGracePeriodMinutesInstance = ((int)failoverWithDataLossGracePeriodMinutesValue);
                                        readWriteEndpointInstance.FailoverWithDataLossGracePeriodMinutes = failoverWithDataLossGracePeriodMinutesInstance;
                                    }
                                }
                                
                                JToken replicationRoleValue = propertiesValue2["replicationRole"];
                                if (replicationRoleValue != null && replicationRoleValue.Type != JTokenType.Null)
                                {
                                    string replicationRoleInstance = ((string)replicationRoleValue);
                                    propertiesInstance.ReplicationRole = replicationRoleInstance;
                                }
                                
                                JToken replicationStateValue = propertiesValue2["replicationState"];
                                if (replicationStateValue != null && replicationStateValue.Type != JTokenType.Null)
                                {
                                    string replicationStateInstance = ((string)replicationStateValue);
                                    propertiesInstance.ReplicationState = replicationStateInstance;
                                }
                                
                                JToken partnerServersArray2 = propertiesValue2["partnerServers"];
                                if (partnerServersArray2 != null && partnerServersArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken partnerServersValue in ((JArray)partnerServersArray2))
                                    {
                                        FailoverGroupPartnerServer failoverGroupPartnerServerInstance = new FailoverGroupPartnerServer();
                                        propertiesInstance.PartnerServers.Add(failoverGroupPartnerServerInstance);
                                        
                                        JToken idValue = partnerServersValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            failoverGroupPartnerServerInstance.Id = idInstance;
                                        }
                                        
                                        JToken locationValue = partnerServersValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            failoverGroupPartnerServerInstance.Location = locationInstance;
                                        }
                                        
                                        JToken replicationRoleValue2 = partnerServersValue["replicationRole"];
                                        if (replicationRoleValue2 != null && replicationRoleValue2.Type != JTokenType.Null)
                                        {
                                            string replicationRoleInstance2 = ((string)replicationRoleValue2);
                                            failoverGroupPartnerServerInstance.ReplicationRole = replicationRoleInstance2;
                                        }
                                    }
                                }
                                
                                JToken databasesArray2 = propertiesValue2["databases"];
                                if (databasesArray2 != null && databasesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken databasesValue in ((JArray)databasesArray2))
                                    {
                                        propertiesInstance.Databases.Add(((string)databasesValue));
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                failoverGroupInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                failoverGroupInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                failoverGroupInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                failoverGroupInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    failoverGroupInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Created)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Begins adding databases to an existing Azure SQL Database Failover
        /// Group. To determine the status of the operation call
        /// GetFailoverGroupOperationStatus.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Database Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='failoverGroupName'>
        /// Required. The name of the Azure SQL Database Failover Group to be
        /// updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for creating or updating an
        /// Failover Group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database Failover Group
        /// operation.
        /// </returns>
        public async Task<FailoverGroupPatchUpdateResponse> BeginPatchUpdateAsync(string resourceGroupName, string serverName, string failoverGroupName, FailoverGroupPatchUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (failoverGroupName == null)
            {
                throw new ArgumentNullException("failoverGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("failoverGroupName", failoverGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginPatchUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/failoverGroups/";
            url = url + Uri.EscapeDataString(failoverGroupName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject failoverGroupPatchUpdateParametersValue = new JObject();
                requestDoc = failoverGroupPatchUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                failoverGroupPatchUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.ReadOnlyEndpoint != null)
                {
                    JObject readOnlyEndpointValue = new JObject();
                    propertiesValue["readOnlyEndpoint"] = readOnlyEndpointValue;
                    
                    if (parameters.Properties.ReadOnlyEndpoint.FailoverPolicy != null)
                    {
                        readOnlyEndpointValue["failoverPolicy"] = parameters.Properties.ReadOnlyEndpoint.FailoverPolicy;
                    }
                }
                
                if (parameters.Properties.ReadWriteEndpoint != null)
                {
                    JObject readWriteEndpointValue = new JObject();
                    propertiesValue["readWriteEndpoint"] = readWriteEndpointValue;
                    
                    if (parameters.Properties.ReadWriteEndpoint.FailoverPolicy != null)
                    {
                        readWriteEndpointValue["failoverPolicy"] = parameters.Properties.ReadWriteEndpoint.FailoverPolicy;
                    }
                    
                    if (parameters.Properties.ReadWriteEndpoint.FailoverWithDataLossGracePeriodMinutes != null)
                    {
                        readWriteEndpointValue["failoverWithDataLossGracePeriodMinutes"] = parameters.Properties.ReadWriteEndpoint.FailoverWithDataLossGracePeriodMinutes.Value;
                    }
                }
                
                if (parameters.Properties.Databases != null)
                {
                    if (parameters.Properties.Databases is ILazyCollection == false || ((ILazyCollection)parameters.Properties.Databases).IsInitialized)
                    {
                        JArray databasesArray = new JArray();
                        foreach (string databasesItem in parameters.Properties.Databases)
                        {
                            databasesArray.Add(databasesItem);
                        }
                        propertiesValue["databases"] = databasesArray;
                    }
                }
                
                if (parameters.Location != null)
                {
                    failoverGroupPatchUpdateParametersValue["location"] = parameters.Location;
                }
                
                if (parameters.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    failoverGroupPatchUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FailoverGroupPatchUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FailoverGroupPatchUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            FailoverGroup failoverGroupInstance = new FailoverGroup();
                            result.FailoverGroup = failoverGroupInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                FailoverGroupProperties propertiesInstance = new FailoverGroupProperties();
                                failoverGroupInstance.Properties = propertiesInstance;
                                
                                JToken readOnlyEndpointValue2 = propertiesValue2["readOnlyEndpoint"];
                                if (readOnlyEndpointValue2 != null && readOnlyEndpointValue2.Type != JTokenType.Null)
                                {
                                    ReadOnlyEndpoint readOnlyEndpointInstance = new ReadOnlyEndpoint();
                                    propertiesInstance.ReadOnlyEndpoint = readOnlyEndpointInstance;
                                    
                                    JToken failoverPolicyValue = readOnlyEndpointValue2["failoverPolicy"];
                                    if (failoverPolicyValue != null && failoverPolicyValue.Type != JTokenType.Null)
                                    {
                                        string failoverPolicyInstance = ((string)failoverPolicyValue);
                                        readOnlyEndpointInstance.FailoverPolicy = failoverPolicyInstance;
                                    }
                                }
                                
                                JToken readWriteEndpointValue2 = propertiesValue2["readWriteEndpoint"];
                                if (readWriteEndpointValue2 != null && readWriteEndpointValue2.Type != JTokenType.Null)
                                {
                                    ReadWriteEndpoint readWriteEndpointInstance = new ReadWriteEndpoint();
                                    propertiesInstance.ReadWriteEndpoint = readWriteEndpointInstance;
                                    
                                    JToken failoverPolicyValue2 = readWriteEndpointValue2["failoverPolicy"];
                                    if (failoverPolicyValue2 != null && failoverPolicyValue2.Type != JTokenType.Null)
                                    {
                                        string failoverPolicyInstance2 = ((string)failoverPolicyValue2);
                                        readWriteEndpointInstance.FailoverPolicy = failoverPolicyInstance2;
                                    }
                                    
                                    JToken failoverWithDataLossGracePeriodMinutesValue = readWriteEndpointValue2["failoverWithDataLossGracePeriodMinutes"];
                                    if (failoverWithDataLossGracePeriodMinutesValue != null && failoverWithDataLossGracePeriodMinutesValue.Type != JTokenType.Null)
                                    {
                                        int failoverWithDataLossGracePeriodMinutesInstance = ((int)failoverWithDataLossGracePeriodMinutesValue);
                                        readWriteEndpointInstance.FailoverWithDataLossGracePeriodMinutes = failoverWithDataLossGracePeriodMinutesInstance;
                                    }
                                }
                                
                                JToken replicationRoleValue = propertiesValue2["replicationRole"];
                                if (replicationRoleValue != null && replicationRoleValue.Type != JTokenType.Null)
                                {
                                    string replicationRoleInstance = ((string)replicationRoleValue);
                                    propertiesInstance.ReplicationRole = replicationRoleInstance;
                                }
                                
                                JToken replicationStateValue = propertiesValue2["replicationState"];
                                if (replicationStateValue != null && replicationStateValue.Type != JTokenType.Null)
                                {
                                    string replicationStateInstance = ((string)replicationStateValue);
                                    propertiesInstance.ReplicationState = replicationStateInstance;
                                }
                                
                                JToken partnerServersArray = propertiesValue2["partnerServers"];
                                if (partnerServersArray != null && partnerServersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken partnerServersValue in ((JArray)partnerServersArray))
                                    {
                                        FailoverGroupPartnerServer failoverGroupPartnerServerInstance = new FailoverGroupPartnerServer();
                                        propertiesInstance.PartnerServers.Add(failoverGroupPartnerServerInstance);
                                        
                                        JToken idValue = partnerServersValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            failoverGroupPartnerServerInstance.Id = idInstance;
                                        }
                                        
                                        JToken locationValue = partnerServersValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            failoverGroupPartnerServerInstance.Location = locationInstance;
                                        }
                                        
                                        JToken replicationRoleValue2 = partnerServersValue["replicationRole"];
                                        if (replicationRoleValue2 != null && replicationRoleValue2.Type != JTokenType.Null)
                                        {
                                            string replicationRoleInstance2 = ((string)replicationRoleValue2);
                                            failoverGroupPartnerServerInstance.ReplicationRole = replicationRoleInstance2;
                                        }
                                    }
                                }
                                
                                JToken databasesArray2 = propertiesValue2["databases"];
                                if (databasesArray2 != null && databasesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken databasesValue in ((JArray)databasesArray2))
                                    {
                                        propertiesInstance.Databases.Add(((string)databasesValue));
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                failoverGroupInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                failoverGroupInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                failoverGroupInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                failoverGroupInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    failoverGroupInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Created)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a new Azure SQL Database Failover Group or updates an
        /// existing Azure SQL Database Failover Group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Database Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// Azure SQL Database Failover Group is hosted.
        /// </param>
        /// <param name='failoverGroupName'>
        /// Required. The name of the Azure SQL Database Failover Group to be
        /// operated on (updated or created).
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for creating or updating an Azure
        /// Sql Databaser Failover Group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database Failover Group
        /// operation.
        /// </returns>
        public async Task<FailoverGroupCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string serverName, string failoverGroupName, FailoverGroupCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("failoverGroupName", failoverGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            FailoverGroupCreateOrUpdateResponse response = await client.FailoverGroups.BeginCreateOrUpdateAsync(resourceGroupName, serverName, failoverGroupName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            FailoverGroupCreateOrUpdateResponse result = await client.FailoverGroups.GetFailoverGroupOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.FailoverGroups.GetFailoverGroupOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
        
        /// <summary>
        /// Deletes the Azure SQL Database Failover Group with the given name.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Database Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// Azure SQL Database Failover Group is hosted.
        /// </param>
        /// <param name='failoverGroupName'>
        /// Required. The name of the Azure SQL Database Failover Group to be
        /// deleted.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string serverName, string failoverGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (failoverGroupName == null)
            {
                throw new ArgumentNullException("failoverGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("failoverGroupName", failoverGroupName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/failoverGroups/";
            url = url + Uri.EscapeDataString(failoverGroupName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Issue the failover operation without data loss for the Azure SQL
        /// Database Failover Group with the given name.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Database Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// Azure SQL Database Failover Group is hosted.
        /// </param>
        /// <param name='failoverGroupName'>
        /// Required. The name of the Azure SQL Database Failover Group to be
        /// failovered.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> FailoverAsync(string resourceGroupName, string serverName, string failoverGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (failoverGroupName == null)
            {
                throw new ArgumentNullException("failoverGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("failoverGroupName", failoverGroupName);
                TracingAdapter.Enter(invocationId, this, "FailoverAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/failoverGroups/";
            url = url + Uri.EscapeDataString(failoverGroupName);
            url = url + "/failover";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Issue the forced failover operation with data loss for the Azure
        /// SQL Database Failover Group with the given name.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Database Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// Azure SQL Database Failover Group is hosted.
        /// </param>
        /// <param name='failoverGroupName'>
        /// Required. The name of the Azure SQL Database Failover Group to be
        /// force failovered.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> ForceFailoverAllowDataLossAsync(string resourceGroupName, string serverName, string failoverGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (failoverGroupName == null)
            {
                throw new ArgumentNullException("failoverGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("failoverGroupName", failoverGroupName);
                TracingAdapter.Enter(invocationId, this, "ForceFailoverAllowDataLossAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/failoverGroups/";
            url = url + Uri.EscapeDataString(failoverGroupName);
            url = url + "/forceFailoverAllowDataLoss";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.NoContent)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns information about an Azure SQL Database Failover Group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Database Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// Azure SQL Database Failover Group belongs.
        /// </param>
        /// <param name='failoverGroupName'>
        /// Required. The name of the Azure SQL Database Failover Group to be
        /// retrieved.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a Get Azure Sql Failover Group request.
        /// </returns>
        public async Task<FailoverGroupGetResponse> GetAsync(string resourceGroupName, string serverName, string failoverGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (failoverGroupName == null)
            {
                throw new ArgumentNullException("failoverGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("failoverGroupName", failoverGroupName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/failoverGroups/";
            url = url + Uri.EscapeDataString(failoverGroupName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FailoverGroupGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FailoverGroupGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            FailoverGroup failoverGroupInstance = new FailoverGroup();
                            result.FailoverGroup = failoverGroupInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                FailoverGroupProperties propertiesInstance = new FailoverGroupProperties();
                                failoverGroupInstance.Properties = propertiesInstance;
                                
                                JToken readOnlyEndpointValue = propertiesValue["readOnlyEndpoint"];
                                if (readOnlyEndpointValue != null && readOnlyEndpointValue.Type != JTokenType.Null)
                                {
                                    ReadOnlyEndpoint readOnlyEndpointInstance = new ReadOnlyEndpoint();
                                    propertiesInstance.ReadOnlyEndpoint = readOnlyEndpointInstance;
                                    
                                    JToken failoverPolicyValue = readOnlyEndpointValue["failoverPolicy"];
                                    if (failoverPolicyValue != null && failoverPolicyValue.Type != JTokenType.Null)
                                    {
                                        string failoverPolicyInstance = ((string)failoverPolicyValue);
                                        readOnlyEndpointInstance.FailoverPolicy = failoverPolicyInstance;
                                    }
                                }
                                
                                JToken readWriteEndpointValue = propertiesValue["readWriteEndpoint"];
                                if (readWriteEndpointValue != null && readWriteEndpointValue.Type != JTokenType.Null)
                                {
                                    ReadWriteEndpoint readWriteEndpointInstance = new ReadWriteEndpoint();
                                    propertiesInstance.ReadWriteEndpoint = readWriteEndpointInstance;
                                    
                                    JToken failoverPolicyValue2 = readWriteEndpointValue["failoverPolicy"];
                                    if (failoverPolicyValue2 != null && failoverPolicyValue2.Type != JTokenType.Null)
                                    {
                                        string failoverPolicyInstance2 = ((string)failoverPolicyValue2);
                                        readWriteEndpointInstance.FailoverPolicy = failoverPolicyInstance2;
                                    }
                                    
                                    JToken failoverWithDataLossGracePeriodMinutesValue = readWriteEndpointValue["failoverWithDataLossGracePeriodMinutes"];
                                    if (failoverWithDataLossGracePeriodMinutesValue != null && failoverWithDataLossGracePeriodMinutesValue.Type != JTokenType.Null)
                                    {
                                        int failoverWithDataLossGracePeriodMinutesInstance = ((int)failoverWithDataLossGracePeriodMinutesValue);
                                        readWriteEndpointInstance.FailoverWithDataLossGracePeriodMinutes = failoverWithDataLossGracePeriodMinutesInstance;
                                    }
                                }
                                
                                JToken replicationRoleValue = propertiesValue["replicationRole"];
                                if (replicationRoleValue != null && replicationRoleValue.Type != JTokenType.Null)
                                {
                                    string replicationRoleInstance = ((string)replicationRoleValue);
                                    propertiesInstance.ReplicationRole = replicationRoleInstance;
                                }
                                
                                JToken replicationStateValue = propertiesValue["replicationState"];
                                if (replicationStateValue != null && replicationStateValue.Type != JTokenType.Null)
                                {
                                    string replicationStateInstance = ((string)replicationStateValue);
                                    propertiesInstance.ReplicationState = replicationStateInstance;
                                }
                                
                                JToken partnerServersArray = propertiesValue["partnerServers"];
                                if (partnerServersArray != null && partnerServersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken partnerServersValue in ((JArray)partnerServersArray))
                                    {
                                        FailoverGroupPartnerServer failoverGroupPartnerServerInstance = new FailoverGroupPartnerServer();
                                        propertiesInstance.PartnerServers.Add(failoverGroupPartnerServerInstance);
                                        
                                        JToken idValue = partnerServersValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            failoverGroupPartnerServerInstance.Id = idInstance;
                                        }
                                        
                                        JToken locationValue = partnerServersValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            failoverGroupPartnerServerInstance.Location = locationInstance;
                                        }
                                        
                                        JToken replicationRoleValue2 = partnerServersValue["replicationRole"];
                                        if (replicationRoleValue2 != null && replicationRoleValue2.Type != JTokenType.Null)
                                        {
                                            string replicationRoleInstance2 = ((string)replicationRoleValue2);
                                            failoverGroupPartnerServerInstance.ReplicationRole = replicationRoleInstance2;
                                        }
                                    }
                                }
                                
                                JToken databasesArray = propertiesValue["databases"];
                                if (databasesArray != null && databasesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken databasesValue in ((JArray)databasesArray))
                                    {
                                        propertiesInstance.Databases.Add(((string)databasesValue));
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                failoverGroupInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                failoverGroupInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                failoverGroupInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                failoverGroupInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    failoverGroupInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the status of an Azure Sql Database Failover Group create or
        /// update operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database Failover Group
        /// operation.
        /// </returns>
        public async Task<FailoverGroupCreateOrUpdateResponse> GetFailoverGroupOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetFailoverGroupOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FailoverGroupCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FailoverGroupCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            FailoverGroup failoverGroupInstance = new FailoverGroup();
                            result.FailoverGroup = failoverGroupInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                FailoverGroupProperties propertiesInstance = new FailoverGroupProperties();
                                failoverGroupInstance.Properties = propertiesInstance;
                                
                                JToken readOnlyEndpointValue = propertiesValue["readOnlyEndpoint"];
                                if (readOnlyEndpointValue != null && readOnlyEndpointValue.Type != JTokenType.Null)
                                {
                                    ReadOnlyEndpoint readOnlyEndpointInstance = new ReadOnlyEndpoint();
                                    propertiesInstance.ReadOnlyEndpoint = readOnlyEndpointInstance;
                                    
                                    JToken failoverPolicyValue = readOnlyEndpointValue["failoverPolicy"];
                                    if (failoverPolicyValue != null && failoverPolicyValue.Type != JTokenType.Null)
                                    {
                                        string failoverPolicyInstance = ((string)failoverPolicyValue);
                                        readOnlyEndpointInstance.FailoverPolicy = failoverPolicyInstance;
                                    }
                                }
                                
                                JToken readWriteEndpointValue = propertiesValue["readWriteEndpoint"];
                                if (readWriteEndpointValue != null && readWriteEndpointValue.Type != JTokenType.Null)
                                {
                                    ReadWriteEndpoint readWriteEndpointInstance = new ReadWriteEndpoint();
                                    propertiesInstance.ReadWriteEndpoint = readWriteEndpointInstance;
                                    
                                    JToken failoverPolicyValue2 = readWriteEndpointValue["failoverPolicy"];
                                    if (failoverPolicyValue2 != null && failoverPolicyValue2.Type != JTokenType.Null)
                                    {
                                        string failoverPolicyInstance2 = ((string)failoverPolicyValue2);
                                        readWriteEndpointInstance.FailoverPolicy = failoverPolicyInstance2;
                                    }
                                    
                                    JToken failoverWithDataLossGracePeriodMinutesValue = readWriteEndpointValue["failoverWithDataLossGracePeriodMinutes"];
                                    if (failoverWithDataLossGracePeriodMinutesValue != null && failoverWithDataLossGracePeriodMinutesValue.Type != JTokenType.Null)
                                    {
                                        int failoverWithDataLossGracePeriodMinutesInstance = ((int)failoverWithDataLossGracePeriodMinutesValue);
                                        readWriteEndpointInstance.FailoverWithDataLossGracePeriodMinutes = failoverWithDataLossGracePeriodMinutesInstance;
                                    }
                                }
                                
                                JToken replicationRoleValue = propertiesValue["replicationRole"];
                                if (replicationRoleValue != null && replicationRoleValue.Type != JTokenType.Null)
                                {
                                    string replicationRoleInstance = ((string)replicationRoleValue);
                                    propertiesInstance.ReplicationRole = replicationRoleInstance;
                                }
                                
                                JToken replicationStateValue = propertiesValue["replicationState"];
                                if (replicationStateValue != null && replicationStateValue.Type != JTokenType.Null)
                                {
                                    string replicationStateInstance = ((string)replicationStateValue);
                                    propertiesInstance.ReplicationState = replicationStateInstance;
                                }
                                
                                JToken partnerServersArray = propertiesValue["partnerServers"];
                                if (partnerServersArray != null && partnerServersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken partnerServersValue in ((JArray)partnerServersArray))
                                    {
                                        FailoverGroupPartnerServer failoverGroupPartnerServerInstance = new FailoverGroupPartnerServer();
                                        propertiesInstance.PartnerServers.Add(failoverGroupPartnerServerInstance);
                                        
                                        JToken idValue = partnerServersValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            failoverGroupPartnerServerInstance.Id = idInstance;
                                        }
                                        
                                        JToken locationValue = partnerServersValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            failoverGroupPartnerServerInstance.Location = locationInstance;
                                        }
                                        
                                        JToken replicationRoleValue2 = partnerServersValue["replicationRole"];
                                        if (replicationRoleValue2 != null && replicationRoleValue2.Type != JTokenType.Null)
                                        {
                                            string replicationRoleInstance2 = ((string)replicationRoleValue2);
                                            failoverGroupPartnerServerInstance.ReplicationRole = replicationRoleInstance2;
                                        }
                                    }
                                }
                                
                                JToken databasesArray = propertiesValue["databases"];
                                if (databasesArray != null && databasesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken databasesValue in ((JArray)databasesArray))
                                    {
                                        propertiesInstance.Databases.Add(((string)databasesValue));
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                failoverGroupInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                failoverGroupInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                failoverGroupInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                failoverGroupInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    failoverGroupInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Created)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the status of an Azure Sql Database Failover Group Patch
        /// update operation.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database Failover Group
        /// operation.
        /// </returns>
        public async Task<FailoverGroupPatchUpdateResponse> GetFailoverGroupPatchUpdateOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken)
        {
            // Validate
            if (operationStatusLink == null)
            {
                throw new ArgumentNullException("operationStatusLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("operationStatusLink", operationStatusLink);
                TracingAdapter.Enter(invocationId, this, "GetFailoverGroupPatchUpdateOperationStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + operationStatusLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created && statusCode != HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FailoverGroupPatchUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created || statusCode == HttpStatusCode.Accepted)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FailoverGroupPatchUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            FailoverGroup failoverGroupInstance = new FailoverGroup();
                            result.FailoverGroup = failoverGroupInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                FailoverGroupProperties propertiesInstance = new FailoverGroupProperties();
                                failoverGroupInstance.Properties = propertiesInstance;
                                
                                JToken readOnlyEndpointValue = propertiesValue["readOnlyEndpoint"];
                                if (readOnlyEndpointValue != null && readOnlyEndpointValue.Type != JTokenType.Null)
                                {
                                    ReadOnlyEndpoint readOnlyEndpointInstance = new ReadOnlyEndpoint();
                                    propertiesInstance.ReadOnlyEndpoint = readOnlyEndpointInstance;
                                    
                                    JToken failoverPolicyValue = readOnlyEndpointValue["failoverPolicy"];
                                    if (failoverPolicyValue != null && failoverPolicyValue.Type != JTokenType.Null)
                                    {
                                        string failoverPolicyInstance = ((string)failoverPolicyValue);
                                        readOnlyEndpointInstance.FailoverPolicy = failoverPolicyInstance;
                                    }
                                }
                                
                                JToken readWriteEndpointValue = propertiesValue["readWriteEndpoint"];
                                if (readWriteEndpointValue != null && readWriteEndpointValue.Type != JTokenType.Null)
                                {
                                    ReadWriteEndpoint readWriteEndpointInstance = new ReadWriteEndpoint();
                                    propertiesInstance.ReadWriteEndpoint = readWriteEndpointInstance;
                                    
                                    JToken failoverPolicyValue2 = readWriteEndpointValue["failoverPolicy"];
                                    if (failoverPolicyValue2 != null && failoverPolicyValue2.Type != JTokenType.Null)
                                    {
                                        string failoverPolicyInstance2 = ((string)failoverPolicyValue2);
                                        readWriteEndpointInstance.FailoverPolicy = failoverPolicyInstance2;
                                    }
                                    
                                    JToken failoverWithDataLossGracePeriodMinutesValue = readWriteEndpointValue["failoverWithDataLossGracePeriodMinutes"];
                                    if (failoverWithDataLossGracePeriodMinutesValue != null && failoverWithDataLossGracePeriodMinutesValue.Type != JTokenType.Null)
                                    {
                                        int failoverWithDataLossGracePeriodMinutesInstance = ((int)failoverWithDataLossGracePeriodMinutesValue);
                                        readWriteEndpointInstance.FailoverWithDataLossGracePeriodMinutes = failoverWithDataLossGracePeriodMinutesInstance;
                                    }
                                }
                                
                                JToken replicationRoleValue = propertiesValue["replicationRole"];
                                if (replicationRoleValue != null && replicationRoleValue.Type != JTokenType.Null)
                                {
                                    string replicationRoleInstance = ((string)replicationRoleValue);
                                    propertiesInstance.ReplicationRole = replicationRoleInstance;
                                }
                                
                                JToken replicationStateValue = propertiesValue["replicationState"];
                                if (replicationStateValue != null && replicationStateValue.Type != JTokenType.Null)
                                {
                                    string replicationStateInstance = ((string)replicationStateValue);
                                    propertiesInstance.ReplicationState = replicationStateInstance;
                                }
                                
                                JToken partnerServersArray = propertiesValue["partnerServers"];
                                if (partnerServersArray != null && partnerServersArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken partnerServersValue in ((JArray)partnerServersArray))
                                    {
                                        FailoverGroupPartnerServer failoverGroupPartnerServerInstance = new FailoverGroupPartnerServer();
                                        propertiesInstance.PartnerServers.Add(failoverGroupPartnerServerInstance);
                                        
                                        JToken idValue = partnerServersValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            failoverGroupPartnerServerInstance.Id = idInstance;
                                        }
                                        
                                        JToken locationValue = partnerServersValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            failoverGroupPartnerServerInstance.Location = locationInstance;
                                        }
                                        
                                        JToken replicationRoleValue2 = partnerServersValue["replicationRole"];
                                        if (replicationRoleValue2 != null && replicationRoleValue2.Type != JTokenType.Null)
                                        {
                                            string replicationRoleInstance2 = ((string)replicationRoleValue2);
                                            failoverGroupPartnerServerInstance.ReplicationRole = replicationRoleInstance2;
                                        }
                                    }
                                }
                                
                                JToken databasesArray = propertiesValue["databases"];
                                if (databasesArray != null && databasesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken databasesValue in ((JArray)databasesArray))
                                    {
                                        propertiesInstance.Databases.Add(((string)databasesValue));
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                failoverGroupInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                failoverGroupInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                failoverGroupInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                failoverGroupInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    failoverGroupInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.Created)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns information about Azure SQL Database Failover Groups.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Database Serve belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server in which Azure
        /// SQL Database Failover Groups belong.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a List Azure Sql Failover Group request.
        /// </returns>
        public async Task<FailoverGroupListResponse> ListAsync(string resourceGroupName, string serverName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/failoverGroups";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FailoverGroupListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FailoverGroupListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    FailoverGroup failoverGroupInstance = new FailoverGroup();
                                    result.FailoverGroups.Add(failoverGroupInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        FailoverGroupProperties propertiesInstance = new FailoverGroupProperties();
                                        failoverGroupInstance.Properties = propertiesInstance;
                                        
                                        JToken readOnlyEndpointValue = propertiesValue["readOnlyEndpoint"];
                                        if (readOnlyEndpointValue != null && readOnlyEndpointValue.Type != JTokenType.Null)
                                        {
                                            ReadOnlyEndpoint readOnlyEndpointInstance = new ReadOnlyEndpoint();
                                            propertiesInstance.ReadOnlyEndpoint = readOnlyEndpointInstance;
                                            
                                            JToken failoverPolicyValue = readOnlyEndpointValue["failoverPolicy"];
                                            if (failoverPolicyValue != null && failoverPolicyValue.Type != JTokenType.Null)
                                            {
                                                string failoverPolicyInstance = ((string)failoverPolicyValue);
                                                readOnlyEndpointInstance.FailoverPolicy = failoverPolicyInstance;
                                            }
                                        }
                                        
                                        JToken readWriteEndpointValue = propertiesValue["readWriteEndpoint"];
                                        if (readWriteEndpointValue != null && readWriteEndpointValue.Type != JTokenType.Null)
                                        {
                                            ReadWriteEndpoint readWriteEndpointInstance = new ReadWriteEndpoint();
                                            propertiesInstance.ReadWriteEndpoint = readWriteEndpointInstance;
                                            
                                            JToken failoverPolicyValue2 = readWriteEndpointValue["failoverPolicy"];
                                            if (failoverPolicyValue2 != null && failoverPolicyValue2.Type != JTokenType.Null)
                                            {
                                                string failoverPolicyInstance2 = ((string)failoverPolicyValue2);
                                                readWriteEndpointInstance.FailoverPolicy = failoverPolicyInstance2;
                                            }
                                            
                                            JToken failoverWithDataLossGracePeriodMinutesValue = readWriteEndpointValue["failoverWithDataLossGracePeriodMinutes"];
                                            if (failoverWithDataLossGracePeriodMinutesValue != null && failoverWithDataLossGracePeriodMinutesValue.Type != JTokenType.Null)
                                            {
                                                int failoverWithDataLossGracePeriodMinutesInstance = ((int)failoverWithDataLossGracePeriodMinutesValue);
                                                readWriteEndpointInstance.FailoverWithDataLossGracePeriodMinutes = failoverWithDataLossGracePeriodMinutesInstance;
                                            }
                                        }
                                        
                                        JToken replicationRoleValue = propertiesValue["replicationRole"];
                                        if (replicationRoleValue != null && replicationRoleValue.Type != JTokenType.Null)
                                        {
                                            string replicationRoleInstance = ((string)replicationRoleValue);
                                            propertiesInstance.ReplicationRole = replicationRoleInstance;
                                        }
                                        
                                        JToken replicationStateValue = propertiesValue["replicationState"];
                                        if (replicationStateValue != null && replicationStateValue.Type != JTokenType.Null)
                                        {
                                            string replicationStateInstance = ((string)replicationStateValue);
                                            propertiesInstance.ReplicationState = replicationStateInstance;
                                        }
                                        
                                        JToken partnerServersArray = propertiesValue["partnerServers"];
                                        if (partnerServersArray != null && partnerServersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken partnerServersValue in ((JArray)partnerServersArray))
                                            {
                                                FailoverGroupPartnerServer failoverGroupPartnerServerInstance = new FailoverGroupPartnerServer();
                                                propertiesInstance.PartnerServers.Add(failoverGroupPartnerServerInstance);
                                                
                                                JToken idValue = partnerServersValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    failoverGroupPartnerServerInstance.Id = idInstance;
                                                }
                                                
                                                JToken locationValue = partnerServersValue["location"];
                                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                {
                                                    string locationInstance = ((string)locationValue);
                                                    failoverGroupPartnerServerInstance.Location = locationInstance;
                                                }
                                                
                                                JToken replicationRoleValue2 = partnerServersValue["replicationRole"];
                                                if (replicationRoleValue2 != null && replicationRoleValue2.Type != JTokenType.Null)
                                                {
                                                    string replicationRoleInstance2 = ((string)replicationRoleValue2);
                                                    failoverGroupPartnerServerInstance.ReplicationRole = replicationRoleInstance2;
                                                }
                                            }
                                        }
                                        
                                        JToken databasesArray = propertiesValue["databases"];
                                        if (databasesArray != null && databasesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken databasesValue in ((JArray)databasesArray))
                                            {
                                                propertiesInstance.Databases.Add(((string)databasesValue));
                                            }
                                        }
                                    }
                                    
                                    JToken idValue2 = valueValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        failoverGroupInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        failoverGroupInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        failoverGroupInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue2 = valueValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        failoverGroupInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            failoverGroupInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates an existing Azure SQL Database Failover Group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Database Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// Azure SQL Database Failover Group is hosted.
        /// </param>
        /// <param name='failoverGroupName'>
        /// Required. The name of the Azure SQL Database Failover Group to be
        /// updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for patch updating an Azure Sql
        /// Databaser Failover Group.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response for long running Azure Sql Database Failover Group
        /// operation.
        /// </returns>
        public async Task<FailoverGroupPatchUpdateResponse> PatchUpdateAsync(string resourceGroupName, string serverName, string failoverGroupName, FailoverGroupPatchUpdateParameters parameters, CancellationToken cancellationToken)
        {
            SqlManagementClient client = this.Client;
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("failoverGroupName", failoverGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "PatchUpdateAsync", tracingParameters);
            }
            
            cancellationToken.ThrowIfCancellationRequested();
            FailoverGroupPatchUpdateResponse response = await client.FailoverGroups.BeginPatchUpdateAsync(resourceGroupName, serverName, failoverGroupName, parameters, cancellationToken).ConfigureAwait(false);
            if (response.Status == OperationStatus.Succeeded)
            {
                return response;
            }
            cancellationToken.ThrowIfCancellationRequested();
            FailoverGroupPatchUpdateResponse result = await client.FailoverGroups.GetFailoverGroupPatchUpdateOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
            int delayInSeconds = response.RetryAfter;
            if (delayInSeconds == 0)
            {
                delayInSeconds = 30;
            }
            if (client.LongRunningOperationInitialTimeout >= 0)
            {
                delayInSeconds = client.LongRunningOperationInitialTimeout;
            }
            while (result.Status == OperationStatus.InProgress)
            {
                cancellationToken.ThrowIfCancellationRequested();
                await TaskEx.Delay(delayInSeconds * 1000, cancellationToken).ConfigureAwait(false);
                cancellationToken.ThrowIfCancellationRequested();
                result = await client.FailoverGroups.GetFailoverGroupPatchUpdateOperationStatusAsync(response.OperationStatusLink, cancellationToken).ConfigureAwait(false);
                delayInSeconds = result.RetryAfter;
                if (delayInSeconds == 0)
                {
                    delayInSeconds = 15;
                }
                if (client.LongRunningOperationRetryTimeout >= 0)
                {
                    delayInSeconds = client.LongRunningOperationRetryTimeout;
                }
            }
            
            if (shouldTrace)
            {
                TracingAdapter.Exit(invocationId, result);
            }
            
            return result;
        }
    }
}
