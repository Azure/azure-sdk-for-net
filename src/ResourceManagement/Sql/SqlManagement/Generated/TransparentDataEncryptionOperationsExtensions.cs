// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;

namespace Microsoft.Azure.Management.Sql
{
    /// <summary>
    /// The Windows Azure SQL Database management API provides a RESTful set of
    /// web services that interact with Windows Azure SQL Database services to
    /// manage your databases. The API enables users to create, retrieve,
    /// update, and delete databases and servers.
    /// </summary>
    public static partial class TransparentDataEncryptionOperationsExtensions
    {
        /// <summary>
        /// Begins creating a new or updating an existing Azure SQL Server
        /// Transparent Data Encryption Protector.To determine the status of
        /// the operation call GetCreateOrUpdateOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Server which will be updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for creating or updating an
        /// Encryption Protector.
        /// </param>
        /// <returns>
        /// Represents the response to a Azure Sql Database Transparent Data
        /// Encryption Protector create or update request.
        /// </returns>
        public static EncryptionProtectorCreateOrUpdateResponse BeginCreateOrUpdateEncryptionProtector(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName, EncryptionProtectorCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITransparentDataEncryptionOperations)s).BeginCreateOrUpdateEncryptionProtectorAsync(resourceGroupName, serverName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Begins creating a new or updating an existing Azure SQL Server
        /// Transparent Data Encryption Protector.To determine the status of
        /// the operation call GetCreateOrUpdateOperationStatus.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Server which will be updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for creating or updating an
        /// Encryption Protector.
        /// </param>
        /// <returns>
        /// Represents the response to a Azure Sql Database Transparent Data
        /// Encryption Protector create or update request.
        /// </returns>
        public static Task<EncryptionProtectorCreateOrUpdateResponse> BeginCreateOrUpdateEncryptionProtectorAsync(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName, EncryptionProtectorCreateOrUpdateParameters parameters)
        {
            return operations.BeginCreateOrUpdateEncryptionProtectorAsync(resourceGroupName, serverName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates or updates an Azure SQL Database Transparent Data
        /// Encryption Operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Database for which setting the
        /// Transparent Data Encryption applies.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for creating or updating
        /// transparent data encryption.
        /// </param>
        /// <returns>
        /// Represents the response to a Get for a Azure Sql Database
        /// Transparent Data Encryption request.
        /// </returns>
        public static TransparentDataEncryptionGetResponse CreateOrUpdate(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName, string databaseName, TransparentDataEncryptionCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITransparentDataEncryptionOperations)s).CreateOrUpdateAsync(resourceGroupName, serverName, databaseName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates or updates an Azure SQL Database Transparent Data
        /// Encryption Operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Database for which setting the
        /// Transparent Data Encryption applies.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for creating or updating
        /// transparent data encryption.
        /// </param>
        /// <returns>
        /// Represents the response to a Get for a Azure Sql Database
        /// Transparent Data Encryption request.
        /// </returns>
        public static Task<TransparentDataEncryptionGetResponse> CreateOrUpdateAsync(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName, string databaseName, TransparentDataEncryptionCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, serverName, databaseName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates a new or updates an existing Azure SQL Server Transparent
        /// Data Encryption Protector.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Server which will be updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for creating or updating an
        /// Encryption Protector.
        /// </param>
        /// <returns>
        /// Represents the response to a Azure Sql Database Transparent Data
        /// Encryption Protector create or update request.
        /// </returns>
        public static EncryptionProtectorCreateOrUpdateResponse CreateOrUpdateEncryptionProtector(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName, EncryptionProtectorCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITransparentDataEncryptionOperations)s).CreateOrUpdateEncryptionProtectorAsync(resourceGroupName, serverName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new or updates an existing Azure SQL Server Transparent
        /// Data Encryption Protector.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Server which will be updated.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for creating or updating an
        /// Encryption Protector.
        /// </param>
        /// <returns>
        /// Represents the response to a Azure Sql Database Transparent Data
        /// Encryption Protector create or update request.
        /// </returns>
        public static Task<EncryptionProtectorCreateOrUpdateResponse> CreateOrUpdateEncryptionProtectorAsync(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName, EncryptionProtectorCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateEncryptionProtectorAsync(resourceGroupName, serverName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns an Azure SQL Database Transparent Data Encryption Response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Database for which the
        /// Transparent Data Encryption applies.
        /// </param>
        /// <returns>
        /// Represents the response to a Get for a Azure Sql Database
        /// Transparent Data Encryption request.
        /// </returns>
        public static TransparentDataEncryptionGetResponse Get(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName, string databaseName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITransparentDataEncryptionOperations)s).GetAsync(resourceGroupName, serverName, databaseName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns an Azure SQL Database Transparent Data Encryption Response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Database for which the
        /// Transparent Data Encryption applies.
        /// </param>
        /// <returns>
        /// Represents the response to a Get for a Azure Sql Database
        /// Transparent Data Encryption request.
        /// </returns>
        public static Task<TransparentDataEncryptionGetResponse> GetAsync(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName, string databaseName)
        {
            return operations.GetAsync(resourceGroupName, serverName, databaseName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the status of an Azure SQL Server Transparent Data Encryption
        /// Protector create or update operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation
        /// </param>
        /// <returns>
        /// Represents the response to a Azure Sql Database Transparent Data
        /// Encryption Protector create or update request.
        /// </returns>
        public static EncryptionProtectorCreateOrUpdateResponse GetCreateOrUpdateEncryptionProtectorOperationStatus(this ITransparentDataEncryptionOperations operations, string operationStatusLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITransparentDataEncryptionOperations)s).GetCreateOrUpdateEncryptionProtectorOperationStatusAsync(operationStatusLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the status of an Azure SQL Server Transparent Data Encryption
        /// Protector create or update operation.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='operationStatusLink'>
        /// Required. Location value returned by the Begin operation
        /// </param>
        /// <returns>
        /// Represents the response to a Azure Sql Database Transparent Data
        /// Encryption Protector create or update request.
        /// </returns>
        public static Task<EncryptionProtectorCreateOrUpdateResponse> GetCreateOrUpdateEncryptionProtectorOperationStatusAsync(this ITransparentDataEncryptionOperations operations, string operationStatusLink)
        {
            return operations.GetCreateOrUpdateEncryptionProtectorOperationStatusAsync(operationStatusLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns an Azure SQL Database Transparent Data Encryption Protector
        /// Response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server.
        /// </param>
        /// <returns>
        /// Represents the response to a Get for a Azure Sql Database
        /// Transparent Data Encryption EncryptionProtector request.
        /// </returns>
        public static EncryptionProtectorGetResponse GetEncryptionProtector(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITransparentDataEncryptionOperations)s).GetEncryptionProtectorAsync(resourceGroupName, serverName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns an Azure SQL Database Transparent Data Encryption Protector
        /// Response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server.
        /// </param>
        /// <returns>
        /// Represents the response to a Get for a Azure Sql Database
        /// Transparent Data Encryption EncryptionProtector request.
        /// </returns>
        public static Task<EncryptionProtectorGetResponse> GetEncryptionProtectorAsync(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName)
        {
            return operations.GetEncryptionProtectorAsync(resourceGroupName, serverName, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns an Azure SQL Database Transparent Data Encryption Activity
        /// Response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Database for which the
        /// Transparent Data Encryption applies.
        /// </param>
        /// <returns>
        /// Represents the response to a List Azure Sql Database Transparent
        /// Data Encryption Activity request.
        /// </returns>
        public static TransparentDataEncryptionActivityListResponse ListActivity(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName, string databaseName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITransparentDataEncryptionOperations)s).ListActivityAsync(resourceGroupName, serverName, databaseName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns an Azure SQL Database Transparent Data Encryption Activity
        /// Response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Database for which the
        /// Transparent Data Encryption applies.
        /// </param>
        /// <returns>
        /// Represents the response to a List Azure Sql Database Transparent
        /// Data Encryption Activity request.
        /// </returns>
        public static Task<TransparentDataEncryptionActivityListResponse> ListActivityAsync(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName, string databaseName)
        {
            return operations.ListActivityAsync(resourceGroupName, serverName, databaseName, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns an Azure SQL Database Transparent Data Encryption
        /// Encryption Protector List Response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server.
        /// </param>
        /// <returns>
        /// Represents the response to an Azure Sql Database Transparent Data
        /// Encryption Encryption Protector List request.
        /// </returns>
        public static EncryptionProtectorListResponse ListEncryptionProtectors(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ITransparentDataEncryptionOperations)s).ListEncryptionProtectorsAsync(resourceGroupName, serverName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns an Azure SQL Database Transparent Data Encryption
        /// Encryption Protector List Response.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.Sql.ITransparentDataEncryptionOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server.
        /// </param>
        /// <returns>
        /// Represents the response to an Azure Sql Database Transparent Data
        /// Encryption Encryption Protector List request.
        /// </returns>
        public static Task<EncryptionProtectorListResponse> ListEncryptionProtectorsAsync(this ITransparentDataEncryptionOperations operations, string resourceGroupName, string serverName)
        {
            return operations.ListEncryptionProtectorsAsync(resourceGroupName, serverName, CancellationToken.None);
        }
    }
}
