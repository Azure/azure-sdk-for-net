// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Sql
{
    /// <summary>
    /// Represents all the operations for managing Advisors for Azure SQL
    /// Server. Contains operations to retrieve Advisors and update auto
    /// execute status of an Advisor.
    /// </summary>
    internal partial class ServerAdvisorOperations : IServiceOperations<SqlManagementClient>, IServerAdvisorOperations
    {
        /// <summary>
        /// Initializes a new instance of the ServerAdvisorOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ServerAdvisorOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Returns details of a Server Advisor.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL server.
        /// </param>
        /// <param name='advisorName'>
        /// Required. The name of the Azure SQL server advisor.
        /// </param>
        /// <param name='expand'>
        /// Optional. The comma separated list of child objects that we want to
        /// expand on in response. NULL if expand is not required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a get advisor request.
        /// </returns>
        public async Task<AdvisorGetResponse> GetAsync(string resourceGroupName, string serverName, string advisorName, string expand, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (advisorName == null)
            {
                throw new ArgumentNullException("advisorName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("advisorName", advisorName);
                tracingParameters.Add("expand", expand);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/advisors/";
            url = url + Uri.EscapeDataString(advisorName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (expand != null)
            {
                queryParameters.Add("$expand=" + Uri.EscapeDataString(expand));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AdvisorGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AdvisorGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            Advisor advisorInstance = new Advisor();
                            result.Advisor = advisorInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                AdvisorProperties propertiesInstance = new AdvisorProperties();
                                advisorInstance.Properties = propertiesInstance;
                                
                                JToken advisorStatusValue = propertiesValue["advisorStatus"];
                                if (advisorStatusValue != null && advisorStatusValue.Type != JTokenType.Null)
                                {
                                    string advisorStatusInstance = ((string)advisorStatusValue);
                                    propertiesInstance.AdvisorStatus = advisorStatusInstance;
                                }
                                
                                JToken autoExecuteStatusValue = propertiesValue["autoExecuteStatus"];
                                if (autoExecuteStatusValue != null && autoExecuteStatusValue.Type != JTokenType.Null)
                                {
                                    string autoExecuteStatusInstance = ((string)autoExecuteStatusValue);
                                    propertiesInstance.AutoExecuteStatus = autoExecuteStatusInstance;
                                }
                                
                                JToken autoExecuteStatusInheritedFromValue = propertiesValue["autoExecuteStatusInheritedFrom"];
                                if (autoExecuteStatusInheritedFromValue != null && autoExecuteStatusInheritedFromValue.Type != JTokenType.Null)
                                {
                                    string autoExecuteStatusInheritedFromInstance = ((string)autoExecuteStatusInheritedFromValue);
                                    propertiesInstance.AutoExecuteStatusInheritedFrom = autoExecuteStatusInheritedFromInstance;
                                }
                                
                                JToken recommendationsStatusValue = propertiesValue["recommendationsStatus"];
                                if (recommendationsStatusValue != null && recommendationsStatusValue.Type != JTokenType.Null)
                                {
                                    string recommendationsStatusInstance = ((string)recommendationsStatusValue);
                                    propertiesInstance.RecommendationsStatus = recommendationsStatusInstance;
                                }
                                
                                JToken lastCheckedValue = propertiesValue["lastChecked"];
                                if (lastCheckedValue != null && lastCheckedValue.Type != JTokenType.Null)
                                {
                                    DateTime lastCheckedInstance = ((DateTime)lastCheckedValue);
                                    propertiesInstance.LastChecked = lastCheckedInstance;
                                }
                                
                                JToken recommendedActionsArray = propertiesValue["recommendedActions"];
                                if (recommendedActionsArray != null && recommendedActionsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken recommendedActionsValue in ((JArray)recommendedActionsArray))
                                    {
                                        RecommendedAction recommendedActionInstance = new RecommendedAction();
                                        propertiesInstance.RecommendedActions.Add(recommendedActionInstance);
                                        
                                        JToken propertiesValue2 = recommendedActionsValue["properties"];
                                        if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                        {
                                            RecommendedActionProperties propertiesInstance2 = new RecommendedActionProperties();
                                            recommendedActionInstance.Properties = propertiesInstance2;
                                            
                                            JToken recommendationReasonValue = propertiesValue2["recommendationReason"];
                                            if (recommendationReasonValue != null && recommendationReasonValue.Type != JTokenType.Null)
                                            {
                                                string recommendationReasonInstance = ((string)recommendationReasonValue);
                                                propertiesInstance2.RecommendationReason = recommendationReasonInstance;
                                            }
                                            
                                            JToken validSinceValue = propertiesValue2["validSince"];
                                            if (validSinceValue != null && validSinceValue.Type != JTokenType.Null)
                                            {
                                                DateTime validSinceInstance = ((DateTime)validSinceValue);
                                                propertiesInstance2.ValidSince = validSinceInstance;
                                            }
                                            
                                            JToken lastRefreshValue = propertiesValue2["lastRefresh"];
                                            if (lastRefreshValue != null && lastRefreshValue.Type != JTokenType.Null)
                                            {
                                                DateTime lastRefreshInstance = ((DateTime)lastRefreshValue);
                                                propertiesInstance2.LastRefresh = lastRefreshInstance;
                                            }
                                            
                                            JToken stateValue = propertiesValue2["state"];
                                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                                            {
                                                RecommendedActionStateInfo stateInstance = new RecommendedActionStateInfo();
                                                propertiesInstance2.State = stateInstance;
                                                
                                                JToken currentValueValue = stateValue["currentValue"];
                                                if (currentValueValue != null && currentValueValue.Type != JTokenType.Null)
                                                {
                                                    string currentValueInstance = ((string)currentValueValue);
                                                    stateInstance.CurrentValue = currentValueInstance;
                                                }
                                                
                                                JToken actionInitiatedByValue = stateValue["actionInitiatedBy"];
                                                if (actionInitiatedByValue != null && actionInitiatedByValue.Type != JTokenType.Null)
                                                {
                                                    string actionInitiatedByInstance = ((string)actionInitiatedByValue);
                                                    stateInstance.ActionInitiatedBy = actionInitiatedByInstance;
                                                }
                                                
                                                JToken lastModifiedValue = stateValue["lastModified"];
                                                if (lastModifiedValue != null && lastModifiedValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastModifiedInstance = ((DateTime)lastModifiedValue);
                                                    stateInstance.LastModified = lastModifiedInstance;
                                                }
                                            }
                                            
                                            JToken isExecutableActionValue = propertiesValue2["isExecutableAction"];
                                            if (isExecutableActionValue != null && isExecutableActionValue.Type != JTokenType.Null)
                                            {
                                                bool isExecutableActionInstance = ((bool)isExecutableActionValue);
                                                propertiesInstance2.IsExecutableAction = isExecutableActionInstance;
                                            }
                                            
                                            JToken isRevertableActionValue = propertiesValue2["isRevertableAction"];
                                            if (isRevertableActionValue != null && isRevertableActionValue.Type != JTokenType.Null)
                                            {
                                                bool isRevertableActionInstance = ((bool)isRevertableActionValue);
                                                propertiesInstance2.IsRevertableAction = isRevertableActionInstance;
                                            }
                                            
                                            JToken isArchivedActionValue = propertiesValue2["isArchivedAction"];
                                            if (isArchivedActionValue != null && isArchivedActionValue.Type != JTokenType.Null)
                                            {
                                                bool isArchivedActionInstance = ((bool)isArchivedActionValue);
                                                propertiesInstance2.IsArchivedAction = isArchivedActionInstance;
                                            }
                                            
                                            JToken executeActionStartTimeValue = propertiesValue2["executeActionStartTime"];
                                            if (executeActionStartTimeValue != null && executeActionStartTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime executeActionStartTimeInstance = ((DateTime)executeActionStartTimeValue);
                                                propertiesInstance2.ExecuteActionStartTime = executeActionStartTimeInstance;
                                            }
                                            
                                            JToken executeActionDurationValue = propertiesValue2["executeActionDuration"];
                                            if (executeActionDurationValue != null && executeActionDurationValue.Type != JTokenType.Null)
                                            {
                                                string executeActionDurationInstance = ((string)executeActionDurationValue);
                                                propertiesInstance2.ExecuteActionDuration = executeActionDurationInstance;
                                            }
                                            
                                            JToken revertActionStartTimeValue = propertiesValue2["revertActionStartTime"];
                                            if (revertActionStartTimeValue != null && revertActionStartTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime revertActionStartTimeInstance = ((DateTime)revertActionStartTimeValue);
                                                propertiesInstance2.RevertActionStartTime = revertActionStartTimeInstance;
                                            }
                                            
                                            JToken revertActionDurationValue = propertiesValue2["revertActionDuration"];
                                            if (revertActionDurationValue != null && revertActionDurationValue.Type != JTokenType.Null)
                                            {
                                                string revertActionDurationInstance = ((string)revertActionDurationValue);
                                                propertiesInstance2.RevertActionDuration = revertActionDurationInstance;
                                            }
                                            
                                            JToken executeActionInitiatedByValue = propertiesValue2["executeActionInitiatedBy"];
                                            if (executeActionInitiatedByValue != null && executeActionInitiatedByValue.Type != JTokenType.Null)
                                            {
                                                string executeActionInitiatedByInstance = ((string)executeActionInitiatedByValue);
                                                propertiesInstance2.ExecuteActionInitiatedBy = executeActionInitiatedByInstance;
                                            }
                                            
                                            JToken executeActionInitiatedTimeValue = propertiesValue2["executeActionInitiatedTime"];
                                            if (executeActionInitiatedTimeValue != null && executeActionInitiatedTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime executeActionInitiatedTimeInstance = ((DateTime)executeActionInitiatedTimeValue);
                                                propertiesInstance2.ExecuteActionInitiatedTime = executeActionInitiatedTimeInstance;
                                            }
                                            
                                            JToken revertActionInitiatedByValue = propertiesValue2["revertActionInitiatedBy"];
                                            if (revertActionInitiatedByValue != null && revertActionInitiatedByValue.Type != JTokenType.Null)
                                            {
                                                string revertActionInitiatedByInstance = ((string)revertActionInitiatedByValue);
                                                propertiesInstance2.RevertActionInitiatedBy = revertActionInitiatedByInstance;
                                            }
                                            
                                            JToken revertActionInitiatedTimeValue = propertiesValue2["revertActionInitiatedTime"];
                                            if (revertActionInitiatedTimeValue != null && revertActionInitiatedTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime revertActionInitiatedTimeInstance = ((DateTime)revertActionInitiatedTimeValue);
                                                propertiesInstance2.RevertActionInitiatedTime = revertActionInitiatedTimeInstance;
                                            }
                                            
                                            JToken scoreValue = propertiesValue2["score"];
                                            if (scoreValue != null && scoreValue.Type != JTokenType.Null)
                                            {
                                                int scoreInstance = ((int)scoreValue);
                                                propertiesInstance2.Score = scoreInstance;
                                            }
                                            
                                            JToken implementationDetailsValue = propertiesValue2["implementationDetails"];
                                            if (implementationDetailsValue != null && implementationDetailsValue.Type != JTokenType.Null)
                                            {
                                                RecommendedActionImplementationInfo implementationDetailsInstance = new RecommendedActionImplementationInfo();
                                                propertiesInstance2.ImplementationDetails = implementationDetailsInstance;
                                                
                                                JToken methodValue = implementationDetailsValue["method"];
                                                if (methodValue != null && methodValue.Type != JTokenType.Null)
                                                {
                                                    string methodInstance = ((string)methodValue);
                                                    implementationDetailsInstance.Method = methodInstance;
                                                }
                                                
                                                JToken scriptValue = implementationDetailsValue["script"];
                                                if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                {
                                                    string scriptInstance = ((string)scriptValue);
                                                    implementationDetailsInstance.Script = scriptInstance;
                                                }
                                            }
                                            
                                            JToken errorDetailsValue = propertiesValue2["errorDetails"];
                                            if (errorDetailsValue != null && errorDetailsValue.Type != JTokenType.Null)
                                            {
                                                RecommendedActionErrorInfo errorDetailsInstance = new RecommendedActionErrorInfo();
                                                propertiesInstance2.ErrorDetails = errorDetailsInstance;
                                                
                                                JToken errorCodeValue = errorDetailsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    errorDetailsInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken isRetryableValue = errorDetailsValue["isRetryable"];
                                                if (isRetryableValue != null && isRetryableValue.Type != JTokenType.Null)
                                                {
                                                    string isRetryableInstance = ((string)isRetryableValue);
                                                    errorDetailsInstance.IsRetryable = isRetryableInstance;
                                                }
                                            }
                                            
                                            JToken estimatedImpactArray = propertiesValue2["estimatedImpact"];
                                            if (estimatedImpactArray != null && estimatedImpactArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken estimatedImpactValue in ((JArray)estimatedImpactArray))
                                                {
                                                    RecommendedActionImpactInfo recommendedActionImpactInfoInstance = new RecommendedActionImpactInfo();
                                                    propertiesInstance2.EstimatedImpact.Add(recommendedActionImpactInfoInstance);
                                                    
                                                    JToken dimensionNameValue = estimatedImpactValue["dimensionName"];
                                                    if (dimensionNameValue != null && dimensionNameValue.Type != JTokenType.Null)
                                                    {
                                                        string dimensionNameInstance = ((string)dimensionNameValue);
                                                        recommendedActionImpactInfoInstance.DimensionName = dimensionNameInstance;
                                                    }
                                                    
                                                    JToken unitValue = estimatedImpactValue["unit"];
                                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                                    {
                                                        string unitInstance = ((string)unitValue);
                                                        recommendedActionImpactInfoInstance.Unit = unitInstance;
                                                    }
                                                    
                                                    JToken absoluteValueValue = estimatedImpactValue["absoluteValue"];
                                                    if (absoluteValueValue != null && absoluteValueValue.Type != JTokenType.Null)
                                                    {
                                                        double absoluteValueInstance = ((double)absoluteValueValue);
                                                        recommendedActionImpactInfoInstance.AbsoluteValue = absoluteValueInstance;
                                                    }
                                                    
                                                    JToken changeValueAbsoluteValue = estimatedImpactValue["changeValueAbsolute"];
                                                    if (changeValueAbsoluteValue != null && changeValueAbsoluteValue.Type != JTokenType.Null)
                                                    {
                                                        double changeValueAbsoluteInstance = ((double)changeValueAbsoluteValue);
                                                        recommendedActionImpactInfoInstance.ChangeValueAbsolute = changeValueAbsoluteInstance;
                                                    }
                                                    
                                                    JToken changeValueRelativeValue = estimatedImpactValue["changeValueRelative"];
                                                    if (changeValueRelativeValue != null && changeValueRelativeValue.Type != JTokenType.Null)
                                                    {
                                                        double changeValueRelativeInstance = ((double)changeValueRelativeValue);
                                                        recommendedActionImpactInfoInstance.ChangeValueRelative = changeValueRelativeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken observedImpactArray = propertiesValue2["observedImpact"];
                                            if (observedImpactArray != null && observedImpactArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken observedImpactValue in ((JArray)observedImpactArray))
                                                {
                                                    RecommendedActionImpactInfo recommendedActionImpactInfoInstance2 = new RecommendedActionImpactInfo();
                                                    propertiesInstance2.ObservedImpact.Add(recommendedActionImpactInfoInstance2);
                                                    
                                                    JToken dimensionNameValue2 = observedImpactValue["dimensionName"];
                                                    if (dimensionNameValue2 != null && dimensionNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string dimensionNameInstance2 = ((string)dimensionNameValue2);
                                                        recommendedActionImpactInfoInstance2.DimensionName = dimensionNameInstance2;
                                                    }
                                                    
                                                    JToken unitValue2 = observedImpactValue["unit"];
                                                    if (unitValue2 != null && unitValue2.Type != JTokenType.Null)
                                                    {
                                                        string unitInstance2 = ((string)unitValue2);
                                                        recommendedActionImpactInfoInstance2.Unit = unitInstance2;
                                                    }
                                                    
                                                    JToken absoluteValueValue2 = observedImpactValue["absoluteValue"];
                                                    if (absoluteValueValue2 != null && absoluteValueValue2.Type != JTokenType.Null)
                                                    {
                                                        double absoluteValueInstance2 = ((double)absoluteValueValue2);
                                                        recommendedActionImpactInfoInstance2.AbsoluteValue = absoluteValueInstance2;
                                                    }
                                                    
                                                    JToken changeValueAbsoluteValue2 = observedImpactValue["changeValueAbsolute"];
                                                    if (changeValueAbsoluteValue2 != null && changeValueAbsoluteValue2.Type != JTokenType.Null)
                                                    {
                                                        double changeValueAbsoluteInstance2 = ((double)changeValueAbsoluteValue2);
                                                        recommendedActionImpactInfoInstance2.ChangeValueAbsolute = changeValueAbsoluteInstance2;
                                                    }
                                                    
                                                    JToken changeValueRelativeValue2 = observedImpactValue["changeValueRelative"];
                                                    if (changeValueRelativeValue2 != null && changeValueRelativeValue2.Type != JTokenType.Null)
                                                    {
                                                        double changeValueRelativeInstance2 = ((double)changeValueRelativeValue2);
                                                        recommendedActionImpactInfoInstance2.ChangeValueRelative = changeValueRelativeInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken timeSeriesArray = propertiesValue2["timeSeries"];
                                            if (timeSeriesArray != null && timeSeriesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken timeSeriesValue in ((JArray)timeSeriesArray))
                                                {
                                                    RecommendedActionMetricInfo recommendedActionMetricInfoInstance = new RecommendedActionMetricInfo();
                                                    propertiesInstance2.TimeSeries.Add(recommendedActionMetricInfoInstance);
                                                    
                                                    JToken metricNameValue = timeSeriesValue["metricName"];
                                                    if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                    {
                                                        string metricNameInstance = ((string)metricNameValue);
                                                        recommendedActionMetricInfoInstance.MetricName = metricNameInstance;
                                                    }
                                                    
                                                    JToken unitValue3 = timeSeriesValue["unit"];
                                                    if (unitValue3 != null && unitValue3.Type != JTokenType.Null)
                                                    {
                                                        string unitInstance3 = ((string)unitValue3);
                                                        recommendedActionMetricInfoInstance.Unit = unitInstance3;
                                                    }
                                                    
                                                    JToken absoluteValueValue3 = timeSeriesValue["absoluteValue"];
                                                    if (absoluteValueValue3 != null && absoluteValueValue3.Type != JTokenType.Null)
                                                    {
                                                        string absoluteValueInstance3 = ((string)absoluteValueValue3);
                                                        recommendedActionMetricInfoInstance.TimeGrain = absoluteValueInstance3;
                                                    }
                                                    
                                                    JToken startTimeValue = timeSeriesValue["startTime"];
                                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                        recommendedActionMetricInfoInstance.StartTime = startTimeInstance;
                                                    }
                                                    
                                                    JToken valueValue = timeSeriesValue["value"];
                                                    if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                    {
                                                        double valueInstance = ((double)valueValue);
                                                        recommendedActionMetricInfoInstance.Value = valueInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken linkedObjectsArray = propertiesValue2["linkedObjects"];
                                            if (linkedObjectsArray != null && linkedObjectsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken linkedObjectsValue in ((JArray)linkedObjectsArray))
                                                {
                                                    propertiesInstance2.LinkedObjects.Add(((string)linkedObjectsValue));
                                                }
                                            }
                                            
                                            JToken detailsSequenceElement = ((JToken)propertiesValue2["details"]);
                                            if (detailsSequenceElement != null && detailsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in detailsSequenceElement)
                                                {
                                                    string detailsKey = ((string)property.Name);
                                                    object detailsValue = ((string)property.Value);
                                                    propertiesInstance2.Details.Add(detailsKey, detailsValue);
                                                }
                                            }
                                        }
                                        
                                        JToken idValue = recommendedActionsValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            recommendedActionInstance.Id = idInstance;
                                        }
                                        
                                        JToken nameValue = recommendedActionsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            recommendedActionInstance.Name = nameInstance;
                                        }
                                        
                                        JToken typeValue = recommendedActionsValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            recommendedActionInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = recommendedActionsValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            recommendedActionInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)recommendedActionsValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property2.Name);
                                                string tagsValue = ((string)property2.Value);
                                                recommendedActionInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                advisorInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                advisorInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                advisorInstance.Type = typeInstance2;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                advisorInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property3 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property3.Name);
                                    string tagsValue2 = ((string)property3.Value);
                                    advisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns list of Advisors for the Azure SQL Server.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL server.
        /// </param>
        /// <param name='expand'>
        /// Optional. The comma separated list of child objects that we want to
        /// expand on in response. NULL if expand is not required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a list sql azure database advisors
        /// request.
        /// </returns>
        public async Task<AdvisorListResponse> ListAsync(string resourceGroupName, string serverName, string expand, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("expand", expand);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/advisors";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (expand != null)
            {
                queryParameters.Add("$expand=" + Uri.EscapeDataString(expand));
            }
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AdvisorListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AdvisorListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken advisorsArray = responseDoc;
                            if (advisorsArray != null && advisorsArray.Type != JTokenType.Null)
                            {
                                foreach (JToken advisorsValue in ((JArray)advisorsArray))
                                {
                                    Advisor advisorInstance = new Advisor();
                                    result.Advisors.Add(advisorInstance);
                                    
                                    JToken propertiesValue = advisorsValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        AdvisorProperties propertiesInstance = new AdvisorProperties();
                                        advisorInstance.Properties = propertiesInstance;
                                        
                                        JToken advisorStatusValue = propertiesValue["advisorStatus"];
                                        if (advisorStatusValue != null && advisorStatusValue.Type != JTokenType.Null)
                                        {
                                            string advisorStatusInstance = ((string)advisorStatusValue);
                                            propertiesInstance.AdvisorStatus = advisorStatusInstance;
                                        }
                                        
                                        JToken autoExecuteStatusValue = propertiesValue["autoExecuteStatus"];
                                        if (autoExecuteStatusValue != null && autoExecuteStatusValue.Type != JTokenType.Null)
                                        {
                                            string autoExecuteStatusInstance = ((string)autoExecuteStatusValue);
                                            propertiesInstance.AutoExecuteStatus = autoExecuteStatusInstance;
                                        }
                                        
                                        JToken autoExecuteStatusInheritedFromValue = propertiesValue["autoExecuteStatusInheritedFrom"];
                                        if (autoExecuteStatusInheritedFromValue != null && autoExecuteStatusInheritedFromValue.Type != JTokenType.Null)
                                        {
                                            string autoExecuteStatusInheritedFromInstance = ((string)autoExecuteStatusInheritedFromValue);
                                            propertiesInstance.AutoExecuteStatusInheritedFrom = autoExecuteStatusInheritedFromInstance;
                                        }
                                        
                                        JToken recommendationsStatusValue = propertiesValue["recommendationsStatus"];
                                        if (recommendationsStatusValue != null && recommendationsStatusValue.Type != JTokenType.Null)
                                        {
                                            string recommendationsStatusInstance = ((string)recommendationsStatusValue);
                                            propertiesInstance.RecommendationsStatus = recommendationsStatusInstance;
                                        }
                                        
                                        JToken lastCheckedValue = propertiesValue["lastChecked"];
                                        if (lastCheckedValue != null && lastCheckedValue.Type != JTokenType.Null)
                                        {
                                            DateTime lastCheckedInstance = ((DateTime)lastCheckedValue);
                                            propertiesInstance.LastChecked = lastCheckedInstance;
                                        }
                                        
                                        JToken recommendedActionsArray = propertiesValue["recommendedActions"];
                                        if (recommendedActionsArray != null && recommendedActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken recommendedActionsValue in ((JArray)recommendedActionsArray))
                                            {
                                                RecommendedAction recommendedActionInstance = new RecommendedAction();
                                                propertiesInstance.RecommendedActions.Add(recommendedActionInstance);
                                                
                                                JToken propertiesValue2 = recommendedActionsValue["properties"];
                                                if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                                                {
                                                    RecommendedActionProperties propertiesInstance2 = new RecommendedActionProperties();
                                                    recommendedActionInstance.Properties = propertiesInstance2;
                                                    
                                                    JToken recommendationReasonValue = propertiesValue2["recommendationReason"];
                                                    if (recommendationReasonValue != null && recommendationReasonValue.Type != JTokenType.Null)
                                                    {
                                                        string recommendationReasonInstance = ((string)recommendationReasonValue);
                                                        propertiesInstance2.RecommendationReason = recommendationReasonInstance;
                                                    }
                                                    
                                                    JToken validSinceValue = propertiesValue2["validSince"];
                                                    if (validSinceValue != null && validSinceValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime validSinceInstance = ((DateTime)validSinceValue);
                                                        propertiesInstance2.ValidSince = validSinceInstance;
                                                    }
                                                    
                                                    JToken lastRefreshValue = propertiesValue2["lastRefresh"];
                                                    if (lastRefreshValue != null && lastRefreshValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime lastRefreshInstance = ((DateTime)lastRefreshValue);
                                                        propertiesInstance2.LastRefresh = lastRefreshInstance;
                                                    }
                                                    
                                                    JToken stateValue = propertiesValue2["state"];
                                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                                    {
                                                        RecommendedActionStateInfo stateInstance = new RecommendedActionStateInfo();
                                                        propertiesInstance2.State = stateInstance;
                                                        
                                                        JToken currentValueValue = stateValue["currentValue"];
                                                        if (currentValueValue != null && currentValueValue.Type != JTokenType.Null)
                                                        {
                                                            string currentValueInstance = ((string)currentValueValue);
                                                            stateInstance.CurrentValue = currentValueInstance;
                                                        }
                                                        
                                                        JToken actionInitiatedByValue = stateValue["actionInitiatedBy"];
                                                        if (actionInitiatedByValue != null && actionInitiatedByValue.Type != JTokenType.Null)
                                                        {
                                                            string actionInitiatedByInstance = ((string)actionInitiatedByValue);
                                                            stateInstance.ActionInitiatedBy = actionInitiatedByInstance;
                                                        }
                                                        
                                                        JToken lastModifiedValue = stateValue["lastModified"];
                                                        if (lastModifiedValue != null && lastModifiedValue.Type != JTokenType.Null)
                                                        {
                                                            DateTime lastModifiedInstance = ((DateTime)lastModifiedValue);
                                                            stateInstance.LastModified = lastModifiedInstance;
                                                        }
                                                    }
                                                    
                                                    JToken isExecutableActionValue = propertiesValue2["isExecutableAction"];
                                                    if (isExecutableActionValue != null && isExecutableActionValue.Type != JTokenType.Null)
                                                    {
                                                        bool isExecutableActionInstance = ((bool)isExecutableActionValue);
                                                        propertiesInstance2.IsExecutableAction = isExecutableActionInstance;
                                                    }
                                                    
                                                    JToken isRevertableActionValue = propertiesValue2["isRevertableAction"];
                                                    if (isRevertableActionValue != null && isRevertableActionValue.Type != JTokenType.Null)
                                                    {
                                                        bool isRevertableActionInstance = ((bool)isRevertableActionValue);
                                                        propertiesInstance2.IsRevertableAction = isRevertableActionInstance;
                                                    }
                                                    
                                                    JToken isArchivedActionValue = propertiesValue2["isArchivedAction"];
                                                    if (isArchivedActionValue != null && isArchivedActionValue.Type != JTokenType.Null)
                                                    {
                                                        bool isArchivedActionInstance = ((bool)isArchivedActionValue);
                                                        propertiesInstance2.IsArchivedAction = isArchivedActionInstance;
                                                    }
                                                    
                                                    JToken executeActionStartTimeValue = propertiesValue2["executeActionStartTime"];
                                                    if (executeActionStartTimeValue != null && executeActionStartTimeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime executeActionStartTimeInstance = ((DateTime)executeActionStartTimeValue);
                                                        propertiesInstance2.ExecuteActionStartTime = executeActionStartTimeInstance;
                                                    }
                                                    
                                                    JToken executeActionDurationValue = propertiesValue2["executeActionDuration"];
                                                    if (executeActionDurationValue != null && executeActionDurationValue.Type != JTokenType.Null)
                                                    {
                                                        string executeActionDurationInstance = ((string)executeActionDurationValue);
                                                        propertiesInstance2.ExecuteActionDuration = executeActionDurationInstance;
                                                    }
                                                    
                                                    JToken revertActionStartTimeValue = propertiesValue2["revertActionStartTime"];
                                                    if (revertActionStartTimeValue != null && revertActionStartTimeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime revertActionStartTimeInstance = ((DateTime)revertActionStartTimeValue);
                                                        propertiesInstance2.RevertActionStartTime = revertActionStartTimeInstance;
                                                    }
                                                    
                                                    JToken revertActionDurationValue = propertiesValue2["revertActionDuration"];
                                                    if (revertActionDurationValue != null && revertActionDurationValue.Type != JTokenType.Null)
                                                    {
                                                        string revertActionDurationInstance = ((string)revertActionDurationValue);
                                                        propertiesInstance2.RevertActionDuration = revertActionDurationInstance;
                                                    }
                                                    
                                                    JToken executeActionInitiatedByValue = propertiesValue2["executeActionInitiatedBy"];
                                                    if (executeActionInitiatedByValue != null && executeActionInitiatedByValue.Type != JTokenType.Null)
                                                    {
                                                        string executeActionInitiatedByInstance = ((string)executeActionInitiatedByValue);
                                                        propertiesInstance2.ExecuteActionInitiatedBy = executeActionInitiatedByInstance;
                                                    }
                                                    
                                                    JToken executeActionInitiatedTimeValue = propertiesValue2["executeActionInitiatedTime"];
                                                    if (executeActionInitiatedTimeValue != null && executeActionInitiatedTimeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime executeActionInitiatedTimeInstance = ((DateTime)executeActionInitiatedTimeValue);
                                                        propertiesInstance2.ExecuteActionInitiatedTime = executeActionInitiatedTimeInstance;
                                                    }
                                                    
                                                    JToken revertActionInitiatedByValue = propertiesValue2["revertActionInitiatedBy"];
                                                    if (revertActionInitiatedByValue != null && revertActionInitiatedByValue.Type != JTokenType.Null)
                                                    {
                                                        string revertActionInitiatedByInstance = ((string)revertActionInitiatedByValue);
                                                        propertiesInstance2.RevertActionInitiatedBy = revertActionInitiatedByInstance;
                                                    }
                                                    
                                                    JToken revertActionInitiatedTimeValue = propertiesValue2["revertActionInitiatedTime"];
                                                    if (revertActionInitiatedTimeValue != null && revertActionInitiatedTimeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime revertActionInitiatedTimeInstance = ((DateTime)revertActionInitiatedTimeValue);
                                                        propertiesInstance2.RevertActionInitiatedTime = revertActionInitiatedTimeInstance;
                                                    }
                                                    
                                                    JToken scoreValue = propertiesValue2["score"];
                                                    if (scoreValue != null && scoreValue.Type != JTokenType.Null)
                                                    {
                                                        int scoreInstance = ((int)scoreValue);
                                                        propertiesInstance2.Score = scoreInstance;
                                                    }
                                                    
                                                    JToken implementationDetailsValue = propertiesValue2["implementationDetails"];
                                                    if (implementationDetailsValue != null && implementationDetailsValue.Type != JTokenType.Null)
                                                    {
                                                        RecommendedActionImplementationInfo implementationDetailsInstance = new RecommendedActionImplementationInfo();
                                                        propertiesInstance2.ImplementationDetails = implementationDetailsInstance;
                                                        
                                                        JToken methodValue = implementationDetailsValue["method"];
                                                        if (methodValue != null && methodValue.Type != JTokenType.Null)
                                                        {
                                                            string methodInstance = ((string)methodValue);
                                                            implementationDetailsInstance.Method = methodInstance;
                                                        }
                                                        
                                                        JToken scriptValue = implementationDetailsValue["script"];
                                                        if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                        {
                                                            string scriptInstance = ((string)scriptValue);
                                                            implementationDetailsInstance.Script = scriptInstance;
                                                        }
                                                    }
                                                    
                                                    JToken errorDetailsValue = propertiesValue2["errorDetails"];
                                                    if (errorDetailsValue != null && errorDetailsValue.Type != JTokenType.Null)
                                                    {
                                                        RecommendedActionErrorInfo errorDetailsInstance = new RecommendedActionErrorInfo();
                                                        propertiesInstance2.ErrorDetails = errorDetailsInstance;
                                                        
                                                        JToken errorCodeValue = errorDetailsValue["errorCode"];
                                                        if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                        {
                                                            string errorCodeInstance = ((string)errorCodeValue);
                                                            errorDetailsInstance.ErrorCode = errorCodeInstance;
                                                        }
                                                        
                                                        JToken isRetryableValue = errorDetailsValue["isRetryable"];
                                                        if (isRetryableValue != null && isRetryableValue.Type != JTokenType.Null)
                                                        {
                                                            string isRetryableInstance = ((string)isRetryableValue);
                                                            errorDetailsInstance.IsRetryable = isRetryableInstance;
                                                        }
                                                    }
                                                    
                                                    JToken estimatedImpactArray = propertiesValue2["estimatedImpact"];
                                                    if (estimatedImpactArray != null && estimatedImpactArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken estimatedImpactValue in ((JArray)estimatedImpactArray))
                                                        {
                                                            RecommendedActionImpactInfo recommendedActionImpactInfoInstance = new RecommendedActionImpactInfo();
                                                            propertiesInstance2.EstimatedImpact.Add(recommendedActionImpactInfoInstance);
                                                            
                                                            JToken dimensionNameValue = estimatedImpactValue["dimensionName"];
                                                            if (dimensionNameValue != null && dimensionNameValue.Type != JTokenType.Null)
                                                            {
                                                                string dimensionNameInstance = ((string)dimensionNameValue);
                                                                recommendedActionImpactInfoInstance.DimensionName = dimensionNameInstance;
                                                            }
                                                            
                                                            JToken unitValue = estimatedImpactValue["unit"];
                                                            if (unitValue != null && unitValue.Type != JTokenType.Null)
                                                            {
                                                                string unitInstance = ((string)unitValue);
                                                                recommendedActionImpactInfoInstance.Unit = unitInstance;
                                                            }
                                                            
                                                            JToken absoluteValueValue = estimatedImpactValue["absoluteValue"];
                                                            if (absoluteValueValue != null && absoluteValueValue.Type != JTokenType.Null)
                                                            {
                                                                double absoluteValueInstance = ((double)absoluteValueValue);
                                                                recommendedActionImpactInfoInstance.AbsoluteValue = absoluteValueInstance;
                                                            }
                                                            
                                                            JToken changeValueAbsoluteValue = estimatedImpactValue["changeValueAbsolute"];
                                                            if (changeValueAbsoluteValue != null && changeValueAbsoluteValue.Type != JTokenType.Null)
                                                            {
                                                                double changeValueAbsoluteInstance = ((double)changeValueAbsoluteValue);
                                                                recommendedActionImpactInfoInstance.ChangeValueAbsolute = changeValueAbsoluteInstance;
                                                            }
                                                            
                                                            JToken changeValueRelativeValue = estimatedImpactValue["changeValueRelative"];
                                                            if (changeValueRelativeValue != null && changeValueRelativeValue.Type != JTokenType.Null)
                                                            {
                                                                double changeValueRelativeInstance = ((double)changeValueRelativeValue);
                                                                recommendedActionImpactInfoInstance.ChangeValueRelative = changeValueRelativeInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken observedImpactArray = propertiesValue2["observedImpact"];
                                                    if (observedImpactArray != null && observedImpactArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken observedImpactValue in ((JArray)observedImpactArray))
                                                        {
                                                            RecommendedActionImpactInfo recommendedActionImpactInfoInstance2 = new RecommendedActionImpactInfo();
                                                            propertiesInstance2.ObservedImpact.Add(recommendedActionImpactInfoInstance2);
                                                            
                                                            JToken dimensionNameValue2 = observedImpactValue["dimensionName"];
                                                            if (dimensionNameValue2 != null && dimensionNameValue2.Type != JTokenType.Null)
                                                            {
                                                                string dimensionNameInstance2 = ((string)dimensionNameValue2);
                                                                recommendedActionImpactInfoInstance2.DimensionName = dimensionNameInstance2;
                                                            }
                                                            
                                                            JToken unitValue2 = observedImpactValue["unit"];
                                                            if (unitValue2 != null && unitValue2.Type != JTokenType.Null)
                                                            {
                                                                string unitInstance2 = ((string)unitValue2);
                                                                recommendedActionImpactInfoInstance2.Unit = unitInstance2;
                                                            }
                                                            
                                                            JToken absoluteValueValue2 = observedImpactValue["absoluteValue"];
                                                            if (absoluteValueValue2 != null && absoluteValueValue2.Type != JTokenType.Null)
                                                            {
                                                                double absoluteValueInstance2 = ((double)absoluteValueValue2);
                                                                recommendedActionImpactInfoInstance2.AbsoluteValue = absoluteValueInstance2;
                                                            }
                                                            
                                                            JToken changeValueAbsoluteValue2 = observedImpactValue["changeValueAbsolute"];
                                                            if (changeValueAbsoluteValue2 != null && changeValueAbsoluteValue2.Type != JTokenType.Null)
                                                            {
                                                                double changeValueAbsoluteInstance2 = ((double)changeValueAbsoluteValue2);
                                                                recommendedActionImpactInfoInstance2.ChangeValueAbsolute = changeValueAbsoluteInstance2;
                                                            }
                                                            
                                                            JToken changeValueRelativeValue2 = observedImpactValue["changeValueRelative"];
                                                            if (changeValueRelativeValue2 != null && changeValueRelativeValue2.Type != JTokenType.Null)
                                                            {
                                                                double changeValueRelativeInstance2 = ((double)changeValueRelativeValue2);
                                                                recommendedActionImpactInfoInstance2.ChangeValueRelative = changeValueRelativeInstance2;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken timeSeriesArray = propertiesValue2["timeSeries"];
                                                    if (timeSeriesArray != null && timeSeriesArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken timeSeriesValue in ((JArray)timeSeriesArray))
                                                        {
                                                            RecommendedActionMetricInfo recommendedActionMetricInfoInstance = new RecommendedActionMetricInfo();
                                                            propertiesInstance2.TimeSeries.Add(recommendedActionMetricInfoInstance);
                                                            
                                                            JToken metricNameValue = timeSeriesValue["metricName"];
                                                            if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                            {
                                                                string metricNameInstance = ((string)metricNameValue);
                                                                recommendedActionMetricInfoInstance.MetricName = metricNameInstance;
                                                            }
                                                            
                                                            JToken unitValue3 = timeSeriesValue["unit"];
                                                            if (unitValue3 != null && unitValue3.Type != JTokenType.Null)
                                                            {
                                                                string unitInstance3 = ((string)unitValue3);
                                                                recommendedActionMetricInfoInstance.Unit = unitInstance3;
                                                            }
                                                            
                                                            JToken absoluteValueValue3 = timeSeriesValue["absoluteValue"];
                                                            if (absoluteValueValue3 != null && absoluteValueValue3.Type != JTokenType.Null)
                                                            {
                                                                string absoluteValueInstance3 = ((string)absoluteValueValue3);
                                                                recommendedActionMetricInfoInstance.TimeGrain = absoluteValueInstance3;
                                                            }
                                                            
                                                            JToken startTimeValue = timeSeriesValue["startTime"];
                                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                            {
                                                                DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                                recommendedActionMetricInfoInstance.StartTime = startTimeInstance;
                                                            }
                                                            
                                                            JToken valueValue = timeSeriesValue["value"];
                                                            if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                            {
                                                                double valueInstance = ((double)valueValue);
                                                                recommendedActionMetricInfoInstance.Value = valueInstance;
                                                            }
                                                        }
                                                    }
                                                    
                                                    JToken linkedObjectsArray = propertiesValue2["linkedObjects"];
                                                    if (linkedObjectsArray != null && linkedObjectsArray.Type != JTokenType.Null)
                                                    {
                                                        foreach (JToken linkedObjectsValue in ((JArray)linkedObjectsArray))
                                                        {
                                                            propertiesInstance2.LinkedObjects.Add(((string)linkedObjectsValue));
                                                        }
                                                    }
                                                    
                                                    JToken detailsSequenceElement = ((JToken)propertiesValue2["details"]);
                                                    if (detailsSequenceElement != null && detailsSequenceElement.Type != JTokenType.Null)
                                                    {
                                                        foreach (JProperty property in detailsSequenceElement)
                                                        {
                                                            string detailsKey = ((string)property.Name);
                                                            object detailsValue = ((string)property.Value);
                                                            propertiesInstance2.Details.Add(detailsKey, detailsValue);
                                                        }
                                                    }
                                                }
                                                
                                                JToken idValue = recommendedActionsValue["id"];
                                                if (idValue != null && idValue.Type != JTokenType.Null)
                                                {
                                                    string idInstance = ((string)idValue);
                                                    recommendedActionInstance.Id = idInstance;
                                                }
                                                
                                                JToken nameValue = recommendedActionsValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    recommendedActionInstance.Name = nameInstance;
                                                }
                                                
                                                JToken typeValue = recommendedActionsValue["type"];
                                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                                {
                                                    string typeInstance = ((string)typeValue);
                                                    recommendedActionInstance.Type = typeInstance;
                                                }
                                                
                                                JToken locationValue = recommendedActionsValue["location"];
                                                if (locationValue != null && locationValue.Type != JTokenType.Null)
                                                {
                                                    string locationInstance = ((string)locationValue);
                                                    recommendedActionInstance.Location = locationInstance;
                                                }
                                                
                                                JToken tagsSequenceElement = ((JToken)recommendedActionsValue["tags"]);
                                                if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                                {
                                                    foreach (JProperty property2 in tagsSequenceElement)
                                                    {
                                                        string tagsKey = ((string)property2.Name);
                                                        string tagsValue = ((string)property2.Value);
                                                        recommendedActionInstance.Tags.Add(tagsKey, tagsValue);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue2 = advisorsValue["id"];
                                    if (idValue2 != null && idValue2.Type != JTokenType.Null)
                                    {
                                        string idInstance2 = ((string)idValue2);
                                        advisorInstance.Id = idInstance2;
                                    }
                                    
                                    JToken nameValue2 = advisorsValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        advisorInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue2 = advisorsValue["type"];
                                    if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                                    {
                                        string typeInstance2 = ((string)typeValue2);
                                        advisorInstance.Type = typeInstance2;
                                    }
                                    
                                    JToken locationValue2 = advisorsValue["location"];
                                    if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                                    {
                                        string locationInstance2 = ((string)locationValue2);
                                        advisorInstance.Location = locationInstance2;
                                    }
                                    
                                    JToken tagsSequenceElement2 = ((JToken)advisorsValue["tags"]);
                                    if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property3 in tagsSequenceElement2)
                                        {
                                            string tagsKey2 = ((string)property3.Name);
                                            string tagsValue2 = ((string)property3.Value);
                                            advisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Updates the auto-execute status for this Advisor.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the Azure SQL
        /// Server belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Server on which the database is
        /// hosted.
        /// </param>
        /// <param name='advisorName'>
        /// Required. The name of the Azure SQL Server advisor.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for updating auto-execute status
        /// of an Advisor
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a update advisor request.
        /// </returns>
        public async Task<AdvisorUpdateResponse> UpdateAsync(string resourceGroupName, string serverName, string advisorName, AdvisorUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (advisorName == null)
            {
                throw new ArgumentNullException("advisorName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("advisorName", advisorName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "UpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/advisors/";
            url = url + Uri.EscapeDataString(advisorName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2015-05-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = new HttpMethod("PATCH");
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject advisorUpdateParametersValue = new JObject();
                requestDoc = advisorUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                advisorUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.AutoExecuteStatus != null)
                {
                    propertiesValue["autoExecuteStatus"] = parameters.Properties.AutoExecuteStatus;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AdvisorUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AdvisorUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ErrorResponse errorInstance = new ErrorResponse();
                            result.Error = errorInstance;
                            
                            JToken codeValue = responseDoc["code"];
                            if (codeValue != null && codeValue.Type != JTokenType.Null)
                            {
                                string codeInstance = ((string)codeValue);
                                errorInstance.Code = codeInstance;
                            }
                            
                            JToken messageValue = responseDoc["message"];
                            if (messageValue != null && messageValue.Type != JTokenType.Null)
                            {
                                string messageInstance = ((string)messageValue);
                                errorInstance.Message = messageInstance;
                            }
                            
                            JToken targetValue = responseDoc["target"];
                            if (targetValue != null && targetValue.Type != JTokenType.Null)
                            {
                                string targetInstance = ((string)targetValue);
                                errorInstance.Target = targetInstance;
                            }
                            
                            Advisor advisorInstance = new Advisor();
                            result.Advisor = advisorInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                AdvisorProperties propertiesInstance = new AdvisorProperties();
                                advisorInstance.Properties = propertiesInstance;
                                
                                JToken advisorStatusValue = propertiesValue2["advisorStatus"];
                                if (advisorStatusValue != null && advisorStatusValue.Type != JTokenType.Null)
                                {
                                    string advisorStatusInstance = ((string)advisorStatusValue);
                                    propertiesInstance.AdvisorStatus = advisorStatusInstance;
                                }
                                
                                JToken autoExecuteStatusValue = propertiesValue2["autoExecuteStatus"];
                                if (autoExecuteStatusValue != null && autoExecuteStatusValue.Type != JTokenType.Null)
                                {
                                    string autoExecuteStatusInstance = ((string)autoExecuteStatusValue);
                                    propertiesInstance.AutoExecuteStatus = autoExecuteStatusInstance;
                                }
                                
                                JToken autoExecuteStatusInheritedFromValue = propertiesValue2["autoExecuteStatusInheritedFrom"];
                                if (autoExecuteStatusInheritedFromValue != null && autoExecuteStatusInheritedFromValue.Type != JTokenType.Null)
                                {
                                    string autoExecuteStatusInheritedFromInstance = ((string)autoExecuteStatusInheritedFromValue);
                                    propertiesInstance.AutoExecuteStatusInheritedFrom = autoExecuteStatusInheritedFromInstance;
                                }
                                
                                JToken recommendationsStatusValue = propertiesValue2["recommendationsStatus"];
                                if (recommendationsStatusValue != null && recommendationsStatusValue.Type != JTokenType.Null)
                                {
                                    string recommendationsStatusInstance = ((string)recommendationsStatusValue);
                                    propertiesInstance.RecommendationsStatus = recommendationsStatusInstance;
                                }
                                
                                JToken lastCheckedValue = propertiesValue2["lastChecked"];
                                if (lastCheckedValue != null && lastCheckedValue.Type != JTokenType.Null)
                                {
                                    DateTime lastCheckedInstance = ((DateTime)lastCheckedValue);
                                    propertiesInstance.LastChecked = lastCheckedInstance;
                                }
                                
                                JToken recommendedActionsArray = propertiesValue2["recommendedActions"];
                                if (recommendedActionsArray != null && recommendedActionsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken recommendedActionsValue in ((JArray)recommendedActionsArray))
                                    {
                                        RecommendedAction recommendedActionInstance = new RecommendedAction();
                                        propertiesInstance.RecommendedActions.Add(recommendedActionInstance);
                                        
                                        JToken propertiesValue3 = recommendedActionsValue["properties"];
                                        if (propertiesValue3 != null && propertiesValue3.Type != JTokenType.Null)
                                        {
                                            RecommendedActionProperties propertiesInstance2 = new RecommendedActionProperties();
                                            recommendedActionInstance.Properties = propertiesInstance2;
                                            
                                            JToken recommendationReasonValue = propertiesValue3["recommendationReason"];
                                            if (recommendationReasonValue != null && recommendationReasonValue.Type != JTokenType.Null)
                                            {
                                                string recommendationReasonInstance = ((string)recommendationReasonValue);
                                                propertiesInstance2.RecommendationReason = recommendationReasonInstance;
                                            }
                                            
                                            JToken validSinceValue = propertiesValue3["validSince"];
                                            if (validSinceValue != null && validSinceValue.Type != JTokenType.Null)
                                            {
                                                DateTime validSinceInstance = ((DateTime)validSinceValue);
                                                propertiesInstance2.ValidSince = validSinceInstance;
                                            }
                                            
                                            JToken lastRefreshValue = propertiesValue3["lastRefresh"];
                                            if (lastRefreshValue != null && lastRefreshValue.Type != JTokenType.Null)
                                            {
                                                DateTime lastRefreshInstance = ((DateTime)lastRefreshValue);
                                                propertiesInstance2.LastRefresh = lastRefreshInstance;
                                            }
                                            
                                            JToken stateValue = propertiesValue3["state"];
                                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                                            {
                                                RecommendedActionStateInfo stateInstance = new RecommendedActionStateInfo();
                                                propertiesInstance2.State = stateInstance;
                                                
                                                JToken currentValueValue = stateValue["currentValue"];
                                                if (currentValueValue != null && currentValueValue.Type != JTokenType.Null)
                                                {
                                                    string currentValueInstance = ((string)currentValueValue);
                                                    stateInstance.CurrentValue = currentValueInstance;
                                                }
                                                
                                                JToken actionInitiatedByValue = stateValue["actionInitiatedBy"];
                                                if (actionInitiatedByValue != null && actionInitiatedByValue.Type != JTokenType.Null)
                                                {
                                                    string actionInitiatedByInstance = ((string)actionInitiatedByValue);
                                                    stateInstance.ActionInitiatedBy = actionInitiatedByInstance;
                                                }
                                                
                                                JToken lastModifiedValue = stateValue["lastModified"];
                                                if (lastModifiedValue != null && lastModifiedValue.Type != JTokenType.Null)
                                                {
                                                    DateTime lastModifiedInstance = ((DateTime)lastModifiedValue);
                                                    stateInstance.LastModified = lastModifiedInstance;
                                                }
                                            }
                                            
                                            JToken isExecutableActionValue = propertiesValue3["isExecutableAction"];
                                            if (isExecutableActionValue != null && isExecutableActionValue.Type != JTokenType.Null)
                                            {
                                                bool isExecutableActionInstance = ((bool)isExecutableActionValue);
                                                propertiesInstance2.IsExecutableAction = isExecutableActionInstance;
                                            }
                                            
                                            JToken isRevertableActionValue = propertiesValue3["isRevertableAction"];
                                            if (isRevertableActionValue != null && isRevertableActionValue.Type != JTokenType.Null)
                                            {
                                                bool isRevertableActionInstance = ((bool)isRevertableActionValue);
                                                propertiesInstance2.IsRevertableAction = isRevertableActionInstance;
                                            }
                                            
                                            JToken isArchivedActionValue = propertiesValue3["isArchivedAction"];
                                            if (isArchivedActionValue != null && isArchivedActionValue.Type != JTokenType.Null)
                                            {
                                                bool isArchivedActionInstance = ((bool)isArchivedActionValue);
                                                propertiesInstance2.IsArchivedAction = isArchivedActionInstance;
                                            }
                                            
                                            JToken executeActionStartTimeValue = propertiesValue3["executeActionStartTime"];
                                            if (executeActionStartTimeValue != null && executeActionStartTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime executeActionStartTimeInstance = ((DateTime)executeActionStartTimeValue);
                                                propertiesInstance2.ExecuteActionStartTime = executeActionStartTimeInstance;
                                            }
                                            
                                            JToken executeActionDurationValue = propertiesValue3["executeActionDuration"];
                                            if (executeActionDurationValue != null && executeActionDurationValue.Type != JTokenType.Null)
                                            {
                                                string executeActionDurationInstance = ((string)executeActionDurationValue);
                                                propertiesInstance2.ExecuteActionDuration = executeActionDurationInstance;
                                            }
                                            
                                            JToken revertActionStartTimeValue = propertiesValue3["revertActionStartTime"];
                                            if (revertActionStartTimeValue != null && revertActionStartTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime revertActionStartTimeInstance = ((DateTime)revertActionStartTimeValue);
                                                propertiesInstance2.RevertActionStartTime = revertActionStartTimeInstance;
                                            }
                                            
                                            JToken revertActionDurationValue = propertiesValue3["revertActionDuration"];
                                            if (revertActionDurationValue != null && revertActionDurationValue.Type != JTokenType.Null)
                                            {
                                                string revertActionDurationInstance = ((string)revertActionDurationValue);
                                                propertiesInstance2.RevertActionDuration = revertActionDurationInstance;
                                            }
                                            
                                            JToken executeActionInitiatedByValue = propertiesValue3["executeActionInitiatedBy"];
                                            if (executeActionInitiatedByValue != null && executeActionInitiatedByValue.Type != JTokenType.Null)
                                            {
                                                string executeActionInitiatedByInstance = ((string)executeActionInitiatedByValue);
                                                propertiesInstance2.ExecuteActionInitiatedBy = executeActionInitiatedByInstance;
                                            }
                                            
                                            JToken executeActionInitiatedTimeValue = propertiesValue3["executeActionInitiatedTime"];
                                            if (executeActionInitiatedTimeValue != null && executeActionInitiatedTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime executeActionInitiatedTimeInstance = ((DateTime)executeActionInitiatedTimeValue);
                                                propertiesInstance2.ExecuteActionInitiatedTime = executeActionInitiatedTimeInstance;
                                            }
                                            
                                            JToken revertActionInitiatedByValue = propertiesValue3["revertActionInitiatedBy"];
                                            if (revertActionInitiatedByValue != null && revertActionInitiatedByValue.Type != JTokenType.Null)
                                            {
                                                string revertActionInitiatedByInstance = ((string)revertActionInitiatedByValue);
                                                propertiesInstance2.RevertActionInitiatedBy = revertActionInitiatedByInstance;
                                            }
                                            
                                            JToken revertActionInitiatedTimeValue = propertiesValue3["revertActionInitiatedTime"];
                                            if (revertActionInitiatedTimeValue != null && revertActionInitiatedTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime revertActionInitiatedTimeInstance = ((DateTime)revertActionInitiatedTimeValue);
                                                propertiesInstance2.RevertActionInitiatedTime = revertActionInitiatedTimeInstance;
                                            }
                                            
                                            JToken scoreValue = propertiesValue3["score"];
                                            if (scoreValue != null && scoreValue.Type != JTokenType.Null)
                                            {
                                                int scoreInstance = ((int)scoreValue);
                                                propertiesInstance2.Score = scoreInstance;
                                            }
                                            
                                            JToken implementationDetailsValue = propertiesValue3["implementationDetails"];
                                            if (implementationDetailsValue != null && implementationDetailsValue.Type != JTokenType.Null)
                                            {
                                                RecommendedActionImplementationInfo implementationDetailsInstance = new RecommendedActionImplementationInfo();
                                                propertiesInstance2.ImplementationDetails = implementationDetailsInstance;
                                                
                                                JToken methodValue = implementationDetailsValue["method"];
                                                if (methodValue != null && methodValue.Type != JTokenType.Null)
                                                {
                                                    string methodInstance = ((string)methodValue);
                                                    implementationDetailsInstance.Method = methodInstance;
                                                }
                                                
                                                JToken scriptValue = implementationDetailsValue["script"];
                                                if (scriptValue != null && scriptValue.Type != JTokenType.Null)
                                                {
                                                    string scriptInstance = ((string)scriptValue);
                                                    implementationDetailsInstance.Script = scriptInstance;
                                                }
                                            }
                                            
                                            JToken errorDetailsValue = propertiesValue3["errorDetails"];
                                            if (errorDetailsValue != null && errorDetailsValue.Type != JTokenType.Null)
                                            {
                                                RecommendedActionErrorInfo errorDetailsInstance = new RecommendedActionErrorInfo();
                                                propertiesInstance2.ErrorDetails = errorDetailsInstance;
                                                
                                                JToken errorCodeValue = errorDetailsValue["errorCode"];
                                                if (errorCodeValue != null && errorCodeValue.Type != JTokenType.Null)
                                                {
                                                    string errorCodeInstance = ((string)errorCodeValue);
                                                    errorDetailsInstance.ErrorCode = errorCodeInstance;
                                                }
                                                
                                                JToken isRetryableValue = errorDetailsValue["isRetryable"];
                                                if (isRetryableValue != null && isRetryableValue.Type != JTokenType.Null)
                                                {
                                                    string isRetryableInstance = ((string)isRetryableValue);
                                                    errorDetailsInstance.IsRetryable = isRetryableInstance;
                                                }
                                            }
                                            
                                            JToken estimatedImpactArray = propertiesValue3["estimatedImpact"];
                                            if (estimatedImpactArray != null && estimatedImpactArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken estimatedImpactValue in ((JArray)estimatedImpactArray))
                                                {
                                                    RecommendedActionImpactInfo recommendedActionImpactInfoInstance = new RecommendedActionImpactInfo();
                                                    propertiesInstance2.EstimatedImpact.Add(recommendedActionImpactInfoInstance);
                                                    
                                                    JToken dimensionNameValue = estimatedImpactValue["dimensionName"];
                                                    if (dimensionNameValue != null && dimensionNameValue.Type != JTokenType.Null)
                                                    {
                                                        string dimensionNameInstance = ((string)dimensionNameValue);
                                                        recommendedActionImpactInfoInstance.DimensionName = dimensionNameInstance;
                                                    }
                                                    
                                                    JToken unitValue = estimatedImpactValue["unit"];
                                                    if (unitValue != null && unitValue.Type != JTokenType.Null)
                                                    {
                                                        string unitInstance = ((string)unitValue);
                                                        recommendedActionImpactInfoInstance.Unit = unitInstance;
                                                    }
                                                    
                                                    JToken absoluteValueValue = estimatedImpactValue["absoluteValue"];
                                                    if (absoluteValueValue != null && absoluteValueValue.Type != JTokenType.Null)
                                                    {
                                                        double absoluteValueInstance = ((double)absoluteValueValue);
                                                        recommendedActionImpactInfoInstance.AbsoluteValue = absoluteValueInstance;
                                                    }
                                                    
                                                    JToken changeValueAbsoluteValue = estimatedImpactValue["changeValueAbsolute"];
                                                    if (changeValueAbsoluteValue != null && changeValueAbsoluteValue.Type != JTokenType.Null)
                                                    {
                                                        double changeValueAbsoluteInstance = ((double)changeValueAbsoluteValue);
                                                        recommendedActionImpactInfoInstance.ChangeValueAbsolute = changeValueAbsoluteInstance;
                                                    }
                                                    
                                                    JToken changeValueRelativeValue = estimatedImpactValue["changeValueRelative"];
                                                    if (changeValueRelativeValue != null && changeValueRelativeValue.Type != JTokenType.Null)
                                                    {
                                                        double changeValueRelativeInstance = ((double)changeValueRelativeValue);
                                                        recommendedActionImpactInfoInstance.ChangeValueRelative = changeValueRelativeInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken observedImpactArray = propertiesValue3["observedImpact"];
                                            if (observedImpactArray != null && observedImpactArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken observedImpactValue in ((JArray)observedImpactArray))
                                                {
                                                    RecommendedActionImpactInfo recommendedActionImpactInfoInstance2 = new RecommendedActionImpactInfo();
                                                    propertiesInstance2.ObservedImpact.Add(recommendedActionImpactInfoInstance2);
                                                    
                                                    JToken dimensionNameValue2 = observedImpactValue["dimensionName"];
                                                    if (dimensionNameValue2 != null && dimensionNameValue2.Type != JTokenType.Null)
                                                    {
                                                        string dimensionNameInstance2 = ((string)dimensionNameValue2);
                                                        recommendedActionImpactInfoInstance2.DimensionName = dimensionNameInstance2;
                                                    }
                                                    
                                                    JToken unitValue2 = observedImpactValue["unit"];
                                                    if (unitValue2 != null && unitValue2.Type != JTokenType.Null)
                                                    {
                                                        string unitInstance2 = ((string)unitValue2);
                                                        recommendedActionImpactInfoInstance2.Unit = unitInstance2;
                                                    }
                                                    
                                                    JToken absoluteValueValue2 = observedImpactValue["absoluteValue"];
                                                    if (absoluteValueValue2 != null && absoluteValueValue2.Type != JTokenType.Null)
                                                    {
                                                        double absoluteValueInstance2 = ((double)absoluteValueValue2);
                                                        recommendedActionImpactInfoInstance2.AbsoluteValue = absoluteValueInstance2;
                                                    }
                                                    
                                                    JToken changeValueAbsoluteValue2 = observedImpactValue["changeValueAbsolute"];
                                                    if (changeValueAbsoluteValue2 != null && changeValueAbsoluteValue2.Type != JTokenType.Null)
                                                    {
                                                        double changeValueAbsoluteInstance2 = ((double)changeValueAbsoluteValue2);
                                                        recommendedActionImpactInfoInstance2.ChangeValueAbsolute = changeValueAbsoluteInstance2;
                                                    }
                                                    
                                                    JToken changeValueRelativeValue2 = observedImpactValue["changeValueRelative"];
                                                    if (changeValueRelativeValue2 != null && changeValueRelativeValue2.Type != JTokenType.Null)
                                                    {
                                                        double changeValueRelativeInstance2 = ((double)changeValueRelativeValue2);
                                                        recommendedActionImpactInfoInstance2.ChangeValueRelative = changeValueRelativeInstance2;
                                                    }
                                                }
                                            }
                                            
                                            JToken timeSeriesArray = propertiesValue3["timeSeries"];
                                            if (timeSeriesArray != null && timeSeriesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken timeSeriesValue in ((JArray)timeSeriesArray))
                                                {
                                                    RecommendedActionMetricInfo recommendedActionMetricInfoInstance = new RecommendedActionMetricInfo();
                                                    propertiesInstance2.TimeSeries.Add(recommendedActionMetricInfoInstance);
                                                    
                                                    JToken metricNameValue = timeSeriesValue["metricName"];
                                                    if (metricNameValue != null && metricNameValue.Type != JTokenType.Null)
                                                    {
                                                        string metricNameInstance = ((string)metricNameValue);
                                                        recommendedActionMetricInfoInstance.MetricName = metricNameInstance;
                                                    }
                                                    
                                                    JToken unitValue3 = timeSeriesValue["unit"];
                                                    if (unitValue3 != null && unitValue3.Type != JTokenType.Null)
                                                    {
                                                        string unitInstance3 = ((string)unitValue3);
                                                        recommendedActionMetricInfoInstance.Unit = unitInstance3;
                                                    }
                                                    
                                                    JToken absoluteValueValue3 = timeSeriesValue["absoluteValue"];
                                                    if (absoluteValueValue3 != null && absoluteValueValue3.Type != JTokenType.Null)
                                                    {
                                                        string absoluteValueInstance3 = ((string)absoluteValueValue3);
                                                        recommendedActionMetricInfoInstance.TimeGrain = absoluteValueInstance3;
                                                    }
                                                    
                                                    JToken startTimeValue = timeSeriesValue["startTime"];
                                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                                    {
                                                        DateTime startTimeInstance = ((DateTime)startTimeValue);
                                                        recommendedActionMetricInfoInstance.StartTime = startTimeInstance;
                                                    }
                                                    
                                                    JToken valueValue = timeSeriesValue["value"];
                                                    if (valueValue != null && valueValue.Type != JTokenType.Null)
                                                    {
                                                        double valueInstance = ((double)valueValue);
                                                        recommendedActionMetricInfoInstance.Value = valueInstance;
                                                    }
                                                }
                                            }
                                            
                                            JToken linkedObjectsArray = propertiesValue3["linkedObjects"];
                                            if (linkedObjectsArray != null && linkedObjectsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken linkedObjectsValue in ((JArray)linkedObjectsArray))
                                                {
                                                    propertiesInstance2.LinkedObjects.Add(((string)linkedObjectsValue));
                                                }
                                            }
                                            
                                            JToken detailsSequenceElement = ((JToken)propertiesValue3["details"]);
                                            if (detailsSequenceElement != null && detailsSequenceElement.Type != JTokenType.Null)
                                            {
                                                foreach (JProperty property in detailsSequenceElement)
                                                {
                                                    string detailsKey = ((string)property.Name);
                                                    object detailsValue = ((string)property.Value);
                                                    propertiesInstance2.Details.Add(detailsKey, detailsValue);
                                                }
                                            }
                                        }
                                        
                                        JToken idValue = recommendedActionsValue["id"];
                                        if (idValue != null && idValue.Type != JTokenType.Null)
                                        {
                                            string idInstance = ((string)idValue);
                                            recommendedActionInstance.Id = idInstance;
                                        }
                                        
                                        JToken nameValue = recommendedActionsValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            recommendedActionInstance.Name = nameInstance;
                                        }
                                        
                                        JToken typeValue = recommendedActionsValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            string typeInstance = ((string)typeValue);
                                            recommendedActionInstance.Type = typeInstance;
                                        }
                                        
                                        JToken locationValue = recommendedActionsValue["location"];
                                        if (locationValue != null && locationValue.Type != JTokenType.Null)
                                        {
                                            string locationInstance = ((string)locationValue);
                                            recommendedActionInstance.Location = locationInstance;
                                        }
                                        
                                        JToken tagsSequenceElement = ((JToken)recommendedActionsValue["tags"]);
                                        if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                        {
                                            foreach (JProperty property2 in tagsSequenceElement)
                                            {
                                                string tagsKey = ((string)property2.Name);
                                                string tagsValue = ((string)property2.Value);
                                                recommendedActionInstance.Tags.Add(tagsKey, tagsValue);
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue2 = responseDoc["id"];
                            if (idValue2 != null && idValue2.Type != JTokenType.Null)
                            {
                                string idInstance2 = ((string)idValue2);
                                advisorInstance.Id = idInstance2;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                advisorInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue2 = responseDoc["type"];
                            if (typeValue2 != null && typeValue2.Type != JTokenType.Null)
                            {
                                string typeInstance2 = ((string)typeValue2);
                                advisorInstance.Type = typeInstance2;
                            }
                            
                            JToken locationValue2 = responseDoc["location"];
                            if (locationValue2 != null && locationValue2.Type != JTokenType.Null)
                            {
                                string locationInstance2 = ((string)locationValue2);
                                advisorInstance.Location = locationInstance2;
                            }
                            
                            JToken tagsSequenceElement2 = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement2 != null && tagsSequenceElement2.Type != JTokenType.Null)
                            {
                                foreach (JProperty property3 in tagsSequenceElement2)
                                {
                                    string tagsKey2 = ((string)property3.Name);
                                    string tagsValue2 = ((string)property3.Value);
                                    advisorInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.OperationStatusLink = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("Retry-After"))
                    {
                        result.RetryAfter = int.Parse(httpResponse.Headers.GetValues("Retry-After").FirstOrDefault(), CultureInfo.InvariantCulture);
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    if (statusCode == HttpStatusCode.OK)
                    {
                        result.Status = OperationStatus.Succeeded;
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
