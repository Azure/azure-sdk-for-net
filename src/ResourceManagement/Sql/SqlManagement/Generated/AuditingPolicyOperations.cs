// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.Sql;
using Microsoft.Azure.Management.Sql.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Sql
{
    /// <summary>
    /// Represents all the operations to manage Azure SQL Database and Database
    /// Server Audit policy.  Contains operations to: Create, Retrieve and
    /// Update audit policy.
    /// </summary>
    internal partial class AuditingPolicyOperations : IServiceOperations<SqlManagementClient>, IAuditingPolicyOperations
    {
        /// <summary>
        /// Initializes a new instance of the AuditingPolicyOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal AuditingPolicyOperations(SqlManagementClient client)
        {
            this._client = client;
        }
        
        private SqlManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Sql.SqlManagementClient.
        /// </summary>
        public SqlManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Creates or updates an Azure SQL Database auditing policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Database for which the auditing
        /// policy applies.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for createing or updating a Azure
        /// SQL Database auditing policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateOrUpdateDatebasePolicyAsync(string resourceGroupName, string serverName, string databaseName, DatabaseAuditingPolicyCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateDatebasePolicyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/auditingPolicies/Default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject databaseAuditingPolicyCreateOrUpdateParametersValue = new JObject();
                requestDoc = databaseAuditingPolicyCreateOrUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                databaseAuditingPolicyCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.AuditingState != null)
                {
                    propertiesValue["auditingState"] = parameters.Properties.AuditingState;
                }
                
                if (parameters.Properties.EventTypesToAudit != null)
                {
                    propertiesValue["eventTypesToAudit"] = parameters.Properties.EventTypesToAudit;
                }
                
                if (parameters.Properties.StorageAccountName != null)
                {
                    propertiesValue["storageAccountName"] = parameters.Properties.StorageAccountName;
                }
                
                if (parameters.Properties.StorageAccountKey != null)
                {
                    propertiesValue["storageAccountKey"] = parameters.Properties.StorageAccountKey;
                }
                
                if (parameters.Properties.StorageAccountSecondaryKey != null)
                {
                    propertiesValue["storageAccountSecondaryKey"] = parameters.Properties.StorageAccountSecondaryKey;
                }
                
                if (parameters.Properties.StorageTableEndpoint != null)
                {
                    propertiesValue["storageTableEndpoint"] = parameters.Properties.StorageTableEndpoint;
                }
                
                if (parameters.Properties.StorageAccountResourceGroupName != null)
                {
                    propertiesValue["storageAccountResourceGroupName"] = parameters.Properties.StorageAccountResourceGroupName;
                }
                
                if (parameters.Properties.StorageAccountSubscriptionId != null)
                {
                    propertiesValue["storageAccountSubscriptionId"] = parameters.Properties.StorageAccountSubscriptionId;
                }
                
                if (parameters.Properties.RetentionDays != null)
                {
                    propertiesValue["retentionDays"] = parameters.Properties.RetentionDays;
                }
                
                if (parameters.Properties.UseServerDefault != null)
                {
                    propertiesValue["useServerDefault"] = parameters.Properties.UseServerDefault;
                }
                
                if (parameters.Properties.AuditLogsTableName != null)
                {
                    propertiesValue["auditLogsTableName"] = parameters.Properties.AuditLogsTableName;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates or updates an Azure SQL Database Server auditing policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='parameters'>
        /// Required. The required parameters for createing or updating a Azure
        /// SQL Database Server auditing policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateOrUpdateServerPolicyAsync(string resourceGroupName, string serverName, ServerAuditingPolicyCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateServerPolicyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/auditingPolicies/Default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject serverAuditingPolicyCreateOrUpdateParametersValue = new JObject();
                requestDoc = serverAuditingPolicyCreateOrUpdateParametersValue;
                
                JObject propertiesValue = new JObject();
                serverAuditingPolicyCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.AuditingState != null)
                {
                    propertiesValue["auditingState"] = parameters.Properties.AuditingState;
                }
                
                if (parameters.Properties.EventTypesToAudit != null)
                {
                    propertiesValue["eventTypesToAudit"] = parameters.Properties.EventTypesToAudit;
                }
                
                if (parameters.Properties.StorageAccountName != null)
                {
                    propertiesValue["storageAccountName"] = parameters.Properties.StorageAccountName;
                }
                
                if (parameters.Properties.StorageAccountKey != null)
                {
                    propertiesValue["storageAccountKey"] = parameters.Properties.StorageAccountKey;
                }
                
                if (parameters.Properties.StorageAccountSecondaryKey != null)
                {
                    propertiesValue["storageAccountSecondaryKey"] = parameters.Properties.StorageAccountSecondaryKey;
                }
                
                if (parameters.Properties.StorageTableEndpoint != null)
                {
                    propertiesValue["storageTableEndpoint"] = parameters.Properties.StorageTableEndpoint;
                }
                
                if (parameters.Properties.StorageAccountResourceGroupName != null)
                {
                    propertiesValue["storageAccountResourceGroupName"] = parameters.Properties.StorageAccountResourceGroupName;
                }
                
                if (parameters.Properties.StorageAccountSubscriptionId != null)
                {
                    propertiesValue["storageAccountSubscriptionId"] = parameters.Properties.StorageAccountSubscriptionId;
                }
                
                if (parameters.Properties.RetentionDays != null)
                {
                    propertiesValue["retentionDays"] = parameters.Properties.RetentionDays;
                }
                
                if (parameters.Properties.AuditLogsTableName != null)
                {
                    propertiesValue["auditLogsTableName"] = parameters.Properties.AuditLogsTableName;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns an Azure SQL Database auditing policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='databaseName'>
        /// Required. The name of the Azure SQL Database for which the auditing
        /// policy applies.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a get database auditing policy request.
        /// </returns>
        public async Task<DatabaseAuditingPolicyGetResponse> GetDatabasePolicyAsync(string resourceGroupName, string serverName, string databaseName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            if (databaseName == null)
            {
                throw new ArgumentNullException("databaseName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                tracingParameters.Add("databaseName", databaseName);
                TracingAdapter.Enter(invocationId, this, "GetDatabasePolicyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/databases/";
            url = url + Uri.EscapeDataString(databaseName);
            url = url + "/auditingPolicies/Default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    DatabaseAuditingPolicyGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new DatabaseAuditingPolicyGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            DatabaseAuditingPolicy auditingPolicyInstance = new DatabaseAuditingPolicy();
                            result.AuditingPolicy = auditingPolicyInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                DatabaseAuditingPolicyProperties propertiesInstance = new DatabaseAuditingPolicyProperties();
                                auditingPolicyInstance.Properties = propertiesInstance;
                                
                                JToken auditingStateValue = propertiesValue["auditingState"];
                                if (auditingStateValue != null && auditingStateValue.Type != JTokenType.Null)
                                {
                                    string auditingStateInstance = ((string)auditingStateValue);
                                    propertiesInstance.AuditingState = auditingStateInstance;
                                }
                                
                                JToken eventTypesToAuditValue = propertiesValue["eventTypesToAudit"];
                                if (eventTypesToAuditValue != null && eventTypesToAuditValue.Type != JTokenType.Null)
                                {
                                    string eventTypesToAuditInstance = ((string)eventTypesToAuditValue);
                                    propertiesInstance.EventTypesToAudit = eventTypesToAuditInstance;
                                }
                                
                                JToken storageAccountNameValue = propertiesValue["storageAccountName"];
                                if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                {
                                    string storageAccountNameInstance = ((string)storageAccountNameValue);
                                    propertiesInstance.StorageAccountName = storageAccountNameInstance;
                                }
                                
                                JToken storageAccountKeyValue = propertiesValue["storageAccountKey"];
                                if (storageAccountKeyValue != null && storageAccountKeyValue.Type != JTokenType.Null)
                                {
                                    string storageAccountKeyInstance = ((string)storageAccountKeyValue);
                                    propertiesInstance.StorageAccountKey = storageAccountKeyInstance;
                                }
                                
                                JToken storageAccountSecondaryKeyValue = propertiesValue["storageAccountSecondaryKey"];
                                if (storageAccountSecondaryKeyValue != null && storageAccountSecondaryKeyValue.Type != JTokenType.Null)
                                {
                                    string storageAccountSecondaryKeyInstance = ((string)storageAccountSecondaryKeyValue);
                                    propertiesInstance.StorageAccountSecondaryKey = storageAccountSecondaryKeyInstance;
                                }
                                
                                JToken storageTableEndpointValue = propertiesValue["storageTableEndpoint"];
                                if (storageTableEndpointValue != null && storageTableEndpointValue.Type != JTokenType.Null)
                                {
                                    string storageTableEndpointInstance = ((string)storageTableEndpointValue);
                                    propertiesInstance.StorageTableEndpoint = storageTableEndpointInstance;
                                }
                                
                                JToken storageAccountResourceGroupNameValue = propertiesValue["storageAccountResourceGroupName"];
                                if (storageAccountResourceGroupNameValue != null && storageAccountResourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string storageAccountResourceGroupNameInstance = ((string)storageAccountResourceGroupNameValue);
                                    propertiesInstance.StorageAccountResourceGroupName = storageAccountResourceGroupNameInstance;
                                }
                                
                                JToken storageAccountSubscriptionIdValue = propertiesValue["storageAccountSubscriptionId"];
                                if (storageAccountSubscriptionIdValue != null && storageAccountSubscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string storageAccountSubscriptionIdInstance = ((string)storageAccountSubscriptionIdValue);
                                    propertiesInstance.StorageAccountSubscriptionId = storageAccountSubscriptionIdInstance;
                                }
                                
                                JToken retentionDaysValue = propertiesValue["retentionDays"];
                                if (retentionDaysValue != null && retentionDaysValue.Type != JTokenType.Null)
                                {
                                    string retentionDaysInstance = ((string)retentionDaysValue);
                                    propertiesInstance.RetentionDays = retentionDaysInstance;
                                }
                                
                                JToken useServerDefaultValue = propertiesValue["useServerDefault"];
                                if (useServerDefaultValue != null && useServerDefaultValue.Type != JTokenType.Null)
                                {
                                    string useServerDefaultInstance = ((string)useServerDefaultValue);
                                    propertiesInstance.UseServerDefault = useServerDefaultInstance;
                                }
                                
                                JToken auditLogsTableNameValue = propertiesValue["auditLogsTableName"];
                                if (auditLogsTableNameValue != null && auditLogsTableNameValue.Type != JTokenType.Null)
                                {
                                    string auditLogsTableNameInstance = ((string)auditLogsTableNameValue);
                                    propertiesInstance.AuditLogsTableName = auditLogsTableNameInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                auditingPolicyInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                auditingPolicyInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                auditingPolicyInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                auditingPolicyInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    auditingPolicyInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Returns an Azure SQL Database server auditing policy.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the Resource Group to which the server
        /// belongs.
        /// </param>
        /// <param name='serverName'>
        /// Required. The name of the Azure SQL Database Server on which the
        /// database is hosted.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Represents the response to a get database auditing policy request.
        /// </returns>
        public async Task<ServerAuditingPolicyGetResponse> GetServerPolicyAsync(string resourceGroupName, string serverName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (serverName == null)
            {
                throw new ArgumentNullException("serverName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("serverName", serverName);
                TracingAdapter.Enter(invocationId, this, "GetServerPolicyAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            url = url + "Microsoft.Sql";
            url = url + "/servers/";
            url = url + Uri.EscapeDataString(serverName);
            url = url + "/auditingPolicies/Default";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2014-04-01");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ServerAuditingPolicyGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ServerAuditingPolicyGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ServerAuditingPolicy auditingPolicyInstance = new ServerAuditingPolicy();
                            result.AuditingPolicy = auditingPolicyInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ServerAuditingPolicyProperties propertiesInstance = new ServerAuditingPolicyProperties();
                                auditingPolicyInstance.Properties = propertiesInstance;
                                
                                JToken auditingStateValue = propertiesValue["auditingState"];
                                if (auditingStateValue != null && auditingStateValue.Type != JTokenType.Null)
                                {
                                    string auditingStateInstance = ((string)auditingStateValue);
                                    propertiesInstance.AuditingState = auditingStateInstance;
                                }
                                
                                JToken eventTypesToAuditValue = propertiesValue["eventTypesToAudit"];
                                if (eventTypesToAuditValue != null && eventTypesToAuditValue.Type != JTokenType.Null)
                                {
                                    string eventTypesToAuditInstance = ((string)eventTypesToAuditValue);
                                    propertiesInstance.EventTypesToAudit = eventTypesToAuditInstance;
                                }
                                
                                JToken storageAccountNameValue = propertiesValue["storageAccountName"];
                                if (storageAccountNameValue != null && storageAccountNameValue.Type != JTokenType.Null)
                                {
                                    string storageAccountNameInstance = ((string)storageAccountNameValue);
                                    propertiesInstance.StorageAccountName = storageAccountNameInstance;
                                }
                                
                                JToken storageAccountKeyValue = propertiesValue["storageAccountKey"];
                                if (storageAccountKeyValue != null && storageAccountKeyValue.Type != JTokenType.Null)
                                {
                                    string storageAccountKeyInstance = ((string)storageAccountKeyValue);
                                    propertiesInstance.StorageAccountKey = storageAccountKeyInstance;
                                }
                                
                                JToken storageAccountSecondaryKeyValue = propertiesValue["storageAccountSecondaryKey"];
                                if (storageAccountSecondaryKeyValue != null && storageAccountSecondaryKeyValue.Type != JTokenType.Null)
                                {
                                    string storageAccountSecondaryKeyInstance = ((string)storageAccountSecondaryKeyValue);
                                    propertiesInstance.StorageAccountSecondaryKey = storageAccountSecondaryKeyInstance;
                                }
                                
                                JToken storageTableEndpointValue = propertiesValue["storageTableEndpoint"];
                                if (storageTableEndpointValue != null && storageTableEndpointValue.Type != JTokenType.Null)
                                {
                                    string storageTableEndpointInstance = ((string)storageTableEndpointValue);
                                    propertiesInstance.StorageTableEndpoint = storageTableEndpointInstance;
                                }
                                
                                JToken storageAccountResourceGroupNameValue = propertiesValue["storageAccountResourceGroupName"];
                                if (storageAccountResourceGroupNameValue != null && storageAccountResourceGroupNameValue.Type != JTokenType.Null)
                                {
                                    string storageAccountResourceGroupNameInstance = ((string)storageAccountResourceGroupNameValue);
                                    propertiesInstance.StorageAccountResourceGroupName = storageAccountResourceGroupNameInstance;
                                }
                                
                                JToken storageAccountSubscriptionIdValue = propertiesValue["storageAccountSubscriptionId"];
                                if (storageAccountSubscriptionIdValue != null && storageAccountSubscriptionIdValue.Type != JTokenType.Null)
                                {
                                    string storageAccountSubscriptionIdInstance = ((string)storageAccountSubscriptionIdValue);
                                    propertiesInstance.StorageAccountSubscriptionId = storageAccountSubscriptionIdInstance;
                                }
                                
                                JToken retentionDaysValue = propertiesValue["retentionDays"];
                                if (retentionDaysValue != null && retentionDaysValue.Type != JTokenType.Null)
                                {
                                    string retentionDaysInstance = ((string)retentionDaysValue);
                                    propertiesInstance.RetentionDays = retentionDaysInstance;
                                }
                                
                                JToken auditLogsTableNameValue = propertiesValue["auditLogsTableName"];
                                if (auditLogsTableNameValue != null && auditLogsTableNameValue.Type != JTokenType.Null)
                                {
                                    string auditLogsTableNameInstance = ((string)auditLogsTableNameValue);
                                    propertiesInstance.AuditLogsTableName = auditLogsTableNameInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                auditingPolicyInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                auditingPolicyInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                auditingPolicyInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                auditingPolicyInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    auditingPolicyInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
