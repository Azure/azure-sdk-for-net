// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Sql.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.Sql;
    using Microsoft.Azure.Management.Sql.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Represents an Azure SQL Database.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class DatabaseInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseInner class.
        /// </summary>
        public DatabaseInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseInner class.
        /// </summary>
        /// <param name="collation">The collation of the Azure SQL
        /// database.</param>
        /// <param name="creationDate">The creation date of the Azure SQL
        /// database (ISO8601 format).</param>
        /// <param name="containmentState">The containment state of the Azure
        /// SQL database.</param>
        /// <param name="currentServiceObjectiveId">The current Service Level
        /// Objective ID of the Azure SQL database. This is the ID of the
        /// Service Level Objective that is currently active.</param>
        /// <param name="databaseId">The ID of the Azure SQL database.</param>
        /// <param name="earliestRestoreDate">The recovery period start date of
        /// the Azure SQL database. This records the start date and time when
        /// recovery is available for this Azure SQL Database (ISO8601
        /// format).</param>
        /// <param name="createMode">Specifies the type of database to create.
        /// Possible values include: 'Copy', 'Default', 'NonReadableSecondary',
        /// 'OnlineSecondary', 'PointInTimeRestore', 'Recovery',
        /// 'Restore'</param>
        /// <param name="sourceDatabaseId">Conditional. Specifies the resource
        /// ID of the source database. If createMode is not set to Default,
        /// then this value must be specified. The name of the source database
        /// must be the same. NOTE: Collation, Edition, and MaxSizeBytes must
        /// remain the same while the link is active. Values specified for
        /// these parameters will be ignored.</param>
        /// <param name="edition">The edition of the Azure SQL database. The
        /// DatabaseEditions enumeration contains all the valid editions.
        /// Possible values include: 'Web', 'Business', 'Basic', 'Standard',
        /// 'Premium', 'Free', 'Stretch', 'DataWarehouse'</param>
        /// <param name="maxSizeBytes">The max size of the Azure SQL database
        /// expressed in bytes. Note: Only the following sizes are supported
        /// (in addition to limitations being placed on each edition): { 100 MB
        /// | 500 MB |1 GB | 5 GB | 10 GB | 20 GB | 30 GB … 150 GB | 200 GB …
        /// 500 GB }</param>
        /// <param name="requestedServiceObjectiveId">The configured Service
        /// Level Objective ID of the Azure SQL database. This is the Service
        /// Level Objective that is in the process of being applied to the
        /// Azure SQL database. Once successfully updated, it will match the
        /// value of currentServiceObjectiveId property.</param>
        /// <param name="requestedServiceObjectiveName">The name of the
        /// configured Service Level Objective of the Azure SQL database. This
        /// is the Service Level Objective that is in the process of being
        /// applied to the Azure SQL database. Once successfully updated, it
        /// will match the value of serviceLevelObjective property. Possible
        /// values include: 'Basic', 'S0', 'S1', 'S2', 'S3', 'P1', 'P2',
        /// 'P3'</param>
        /// <param name="serviceLevelObjective">The current Service Level
        /// Objective of the Azure SQL database. Possible values include:
        /// 'Basic', 'S0', 'S1', 'S2', 'S3', 'P1', 'P2', 'P3'</param>
        /// <param name="status">The status of the Azure SQL database.</param>
        /// <param name="elasticPoolName">The name of the Azure SQL Elastic
        /// Pool the database is in.</param>
        /// <param name="defaultSecondaryLocation">The default secondary region
        /// for this database.</param>
        /// <param name="serviceTierAdvisors">The list of service tier advisors
        /// for this database. Expanded property</param>
        /// <param name="upgradeHint">The upgrade hint for this
        /// database.</param>
        /// <param name="schemas">The schemas from this database.</param>
        /// <param name="transparentDataEncryption">The transparent data
        /// encryption info for this database.</param>
        /// <param name="recommendedIndex">The recommended indices for this
        /// database.</param>
        public DatabaseInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string collation = default(string), System.DateTime? creationDate = default(System.DateTime?), long? containmentState = default(long?), System.Guid? currentServiceObjectiveId = default(System.Guid?), string databaseId = default(string), System.DateTime? earliestRestoreDate = default(System.DateTime?), string createMode = default(string), string sourceDatabaseId = default(string), string edition = default(string), string maxSizeBytes = default(string), System.Guid? requestedServiceObjectiveId = default(System.Guid?), string requestedServiceObjectiveName = default(string), string serviceLevelObjective = default(string), string status = default(string), string elasticPoolName = default(string), string defaultSecondaryLocation = default(string), IList<ServiceTierAdvisorInner> serviceTierAdvisors = default(IList<ServiceTierAdvisorInner>), UpgradeHint upgradeHint = default(UpgradeHint), IList<SchemaInner> schemas = default(IList<SchemaInner>), IList<TransparentDataEncryptionInner> transparentDataEncryption = default(IList<TransparentDataEncryptionInner>), IList<RecommendedIndexInner> recommendedIndex = default(IList<RecommendedIndexInner>))
            : base(location, id, name, type, tags)
        {
            Collation = collation;
            CreationDate = creationDate;
            ContainmentState = containmentState;
            CurrentServiceObjectiveId = currentServiceObjectiveId;
            DatabaseId = databaseId;
            EarliestRestoreDate = earliestRestoreDate;
            CreateMode = createMode;
            SourceDatabaseId = sourceDatabaseId;
            Edition = edition;
            MaxSizeBytes = maxSizeBytes;
            RequestedServiceObjectiveId = requestedServiceObjectiveId;
            RequestedServiceObjectiveName = requestedServiceObjectiveName;
            ServiceLevelObjective = serviceLevelObjective;
            Status = status;
            ElasticPoolName = elasticPoolName;
            DefaultSecondaryLocation = defaultSecondaryLocation;
            ServiceTierAdvisors = serviceTierAdvisors;
            UpgradeHint = upgradeHint;
            Schemas = schemas;
            TransparentDataEncryption = transparentDataEncryption;
            RecommendedIndex = recommendedIndex;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the collation of the Azure SQL database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.collation")]
        public string Collation { get; set; }

        /// <summary>
        /// Gets the creation date of the Azure SQL database (ISO8601 format).
        /// </summary>
        [JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate { get; private set; }

        /// <summary>
        /// Gets the containment state of the Azure SQL database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.containmentState")]
        public long? ContainmentState { get; private set; }

        /// <summary>
        /// Gets the current Service Level Objective ID of the Azure SQL
        /// database. This is the ID of the Service Level Objective that is
        /// currently active.
        /// </summary>
        [JsonProperty(PropertyName = "properties.currentServiceObjectiveId")]
        public System.Guid? CurrentServiceObjectiveId { get; private set; }

        /// <summary>
        /// Gets the ID of the Azure SQL database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.databaseId")]
        public string DatabaseId { get; private set; }

        /// <summary>
        /// Gets the recovery period start date of the Azure SQL database. This
        /// records the start date and time when recovery is available for this
        /// Azure SQL Database (ISO8601 format).
        /// </summary>
        [JsonProperty(PropertyName = "properties.earliestRestoreDate")]
        public System.DateTime? EarliestRestoreDate { get; private set; }

        /// <summary>
        /// Gets or sets specifies the type of database to create. Possible
        /// values include: 'Copy', 'Default', 'NonReadableSecondary',
        /// 'OnlineSecondary', 'PointInTimeRestore', 'Recovery', 'Restore'
        /// </summary>
        [JsonProperty(PropertyName = "properties.createMode")]
        public string CreateMode { get; set; }

        /// <summary>
        /// Gets or sets conditional. Specifies the resource ID of the source
        /// database. If createMode is not set to Default, then this value must
        /// be specified. The name of the source database must be the same.
        /// NOTE: Collation, Edition, and MaxSizeBytes must remain the same
        /// while the link is active. Values specified for these parameters
        /// will be ignored.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sourceDatabaseId")]
        public string SourceDatabaseId { get; set; }

        /// <summary>
        /// Gets or sets the edition of the Azure SQL database. The
        /// DatabaseEditions enumeration contains all the valid editions.
        /// Possible values include: 'Web', 'Business', 'Basic', 'Standard',
        /// 'Premium', 'Free', 'Stretch', 'DataWarehouse'
        /// </summary>
        [JsonProperty(PropertyName = "properties.edition")]
        public string Edition { get; set; }

        /// <summary>
        /// Gets or sets the max size of the Azure SQL database expressed in
        /// bytes. Note: Only the following sizes are supported (in addition to
        /// limitations being placed on each edition): { 100 MB | 500 MB |1 GB
        /// | 5 GB | 10 GB | 20 GB | 30 GB … 150 GB | 200 GB … 500 GB }
        /// </summary>
        [JsonProperty(PropertyName = "properties.maxSizeBytes")]
        public string MaxSizeBytes { get; set; }

        /// <summary>
        /// Gets or sets the configured Service Level Objective ID of the Azure
        /// SQL database. This is the Service Level Objective that is in the
        /// process of being applied to the Azure SQL database. Once
        /// successfully updated, it will match the value of
        /// currentServiceObjectiveId property.
        /// </summary>
        [JsonProperty(PropertyName = "properties.requestedServiceObjectiveId")]
        public System.Guid? RequestedServiceObjectiveId { get; set; }

        /// <summary>
        /// Gets or sets the name of the configured Service Level Objective of
        /// the Azure SQL database. This is the Service Level Objective that is
        /// in the process of being applied to the Azure SQL database. Once
        /// successfully updated, it will match the value of
        /// serviceLevelObjective property. Possible values include: 'Basic',
        /// 'S0', 'S1', 'S2', 'S3', 'P1', 'P2', 'P3'
        /// </summary>
        [JsonProperty(PropertyName = "properties.requestedServiceObjectiveName")]
        public string RequestedServiceObjectiveName { get; set; }

        /// <summary>
        /// Gets the current Service Level Objective of the Azure SQL database.
        /// Possible values include: 'Basic', 'S0', 'S1', 'S2', 'S3', 'P1',
        /// 'P2', 'P3'
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceLevelObjective")]
        public string ServiceLevelObjective { get; private set; }

        /// <summary>
        /// Gets the status of the Azure SQL database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.status")]
        public string Status { get; private set; }

        /// <summary>
        /// Gets or sets the name of the Azure SQL Elastic Pool the database is
        /// in.
        /// </summary>
        [JsonProperty(PropertyName = "properties.elasticPoolName")]
        public string ElasticPoolName { get; set; }

        /// <summary>
        /// Gets the default secondary region for this database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.defaultSecondaryLocation")]
        public string DefaultSecondaryLocation { get; private set; }

        /// <summary>
        /// Gets the list of service tier advisors for this database. Expanded
        /// property
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceTierAdvisors")]
        public IList<ServiceTierAdvisorInner> ServiceTierAdvisors { get; private set; }

        /// <summary>
        /// Gets the upgrade hint for this database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.upgradeHint")]
        public UpgradeHint UpgradeHint { get; private set; }

        /// <summary>
        /// Gets the schemas from this database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.schemas")]
        public IList<SchemaInner> Schemas { get; private set; }

        /// <summary>
        /// Gets the transparent data encryption info for this database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.transparentDataEncryption")]
        public IList<TransparentDataEncryptionInner> TransparentDataEncryption { get; private set; }

        /// <summary>
        /// Gets the recommended indices for this database.
        /// </summary>
        [JsonProperty(PropertyName = "properties.recommendedIndex")]
        public IList<RecommendedIndexInner> RecommendedIndex { get; private set; }

    }
}
