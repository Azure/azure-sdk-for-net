// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Graph.RBAC.Fluent
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for UsersOperations.
    /// </summary>
    public static partial class UsersOperationsExtensions
    {
            /// <summary>
            /// Create a new user. Reference:
            /// https://msdn.microsoft.com/library/azure/ad/graph/api/users-operations#CreateUser
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters to create a user.
            /// </param>
            public static UserInner Create(this IUsersOperations operations, UserCreateParametersInner parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsersOperations)s).CreateAsync(parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a new user. Reference:
            /// https://msdn.microsoft.com/library/azure/ad/graph/api/users-operations#CreateUser
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters to create a user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<UserInner> CreateAsync(this IUsersOperations operations, UserCreateParametersInner parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of users for the current tenant. Reference
            /// https://msdn.microsoft.com/en-us/library/azure/ad/graph/api/users-operations#GetUsers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<UserInner> List(this IUsersOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<UserInner> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<UserInner>))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsersOperations)s).ListAsync(odataQuery), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of users for the current tenant. Reference
            /// https://msdn.microsoft.com/en-us/library/azure/ad/graph/api/users-operations#GetUsers
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='odataQuery'>
            /// OData parameters to apply to the operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<UserInner>> ListAsync(this IUsersOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<UserInner> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<UserInner>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets user information from the directory. Reference:
            /// https://msdn.microsoft.com/en-us/library/azure/ad/graph/api/users-operations#GetAUser
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='upnOrObjectId'>
            /// User object Id or user principal name to get user information.
            /// </param>
            public static UserInner Get(this IUsersOperations operations, string upnOrObjectId)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsersOperations)s).GetAsync(upnOrObjectId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets user information from the directory. Reference:
            /// https://msdn.microsoft.com/en-us/library/azure/ad/graph/api/users-operations#GetAUser
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='upnOrObjectId'>
            /// User object Id or user principal name to get user information.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<UserInner> GetAsync(this IUsersOperations operations, string upnOrObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(upnOrObjectId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an exisitng user. Reference:
            /// https://msdn.microsoft.com/en-us/library/azure/ad/graph/api/users-operations#UpdateUser
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='upnOrObjectId'>
            /// User object Id or user principal name to get user information.
            /// </param>
            /// <param name='parameters'>
            /// Parameters to update an exisitng user.
            /// </param>
            public static void Update(this IUsersOperations operations, string upnOrObjectId, UserUpdateParametersInner parameters)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsersOperations)s).UpdateAsync(upnOrObjectId, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an exisitng user. Reference:
            /// https://msdn.microsoft.com/en-us/library/azure/ad/graph/api/users-operations#UpdateUser
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='upnOrObjectId'>
            /// User object Id or user principal name to get user information.
            /// </param>
            /// <param name='parameters'>
            /// Parameters to update an exisitng user.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task UpdateAsync(this IUsersOperations operations, string upnOrObjectId, UserUpdateParametersInner parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.UpdateWithHttpMessagesAsync(upnOrObjectId, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Delete a user. Reference:
            /// https://msdn.microsoft.com/en-us/library/azure/ad/graph/api/users-operations#DeleteUser
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='upnOrObjectId'>
            /// user object id or user principal name (upn)
            /// </param>
            public static void Delete(this IUsersOperations operations, string upnOrObjectId)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsersOperations)s).DeleteAsync(upnOrObjectId), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a user. Reference:
            /// https://msdn.microsoft.com/en-us/library/azure/ad/graph/api/users-operations#DeleteUser
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='upnOrObjectId'>
            /// user object id or user principal name (upn)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IUsersOperations operations, string upnOrObjectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(upnOrObjectId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets a collection that contains the Object IDs of the groups of which the
            /// user is a member.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='objectId'>
            /// User filtering parameters.
            /// </param>
            /// <param name='parameters'>
            /// User filtering parameters.
            /// </param>
            public static System.Collections.Generic.IEnumerable<string> GetMemberGroups(this IUsersOperations operations, string objectId, UserGetMemberGroupsParametersInner parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsersOperations)s).GetMemberGroupsAsync(objectId, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a collection that contains the Object IDs of the groups of which the
            /// user is a member.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='objectId'>
            /// User filtering parameters.
            /// </param>
            /// <param name='parameters'>
            /// User filtering parameters.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.Collections.Generic.IEnumerable<string>> GetMemberGroupsAsync(this IUsersOperations operations, string objectId, UserGetMemberGroupsParametersInner parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetMemberGroupsWithHttpMessagesAsync(objectId, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of users for the current tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextLink'>
            /// Next link for list operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<UserInner> ListNext(this IUsersOperations operations, string nextLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IUsersOperations)s).ListNextAsync(nextLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of users for the current tenant.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextLink'>
            /// Next link for list operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<UserInner>> ListNextAsync(this IUsersOperations operations, string nextLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
