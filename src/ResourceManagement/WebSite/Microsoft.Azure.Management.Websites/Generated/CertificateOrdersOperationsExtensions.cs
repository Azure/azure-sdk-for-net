// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class CertificateOrdersOperationsExtensions
    {
            /// <summary>
            /// Get certificate associated with the certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            public static CertificateOrderCertificate GetCertificate(this ICertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).GetCertificateAsync(resourceGroupName, certificateOrderName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificate associated with the certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOrderCertificate> GetCertificateAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key Vault secret csm Id
            /// </param>
            public static CertificateOrderCertificate CreateOrUpdateCertificate(this ICertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, CertificateOrderCertificate keyVaultCertificate)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).CreateOrUpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key Vault secret csm Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOrderCertificate> CreateOrUpdateCertificateAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, CertificateOrderCertificate keyVaultCertificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the certificate associated with the certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            public static object DeleteCertificate(this ICertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).DeleteCertificateAsync(resourceGroupName, certificateOrderName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the certificate associated with the certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCertificateAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key Vault secret csm Id
            /// </param>
            public static CertificateOrderCertificate UpdateCertificate(this ICertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, CertificateOrderCertificate keyVaultCertificate)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).UpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key Vault secret csm Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOrderCertificate> UpdateCertificateAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, CertificateOrderCertificate keyVaultCertificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            public static CertificateOrder GetCertificateOrder(this ICertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).GetCertificateOrderAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOrder> GetCertificateOrderAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateOrderWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a certificate purchase order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to be used for purchasing certificate
            /// </param>
            public static CertificateOrder CreateOrUpdateCertificateOrder(this ICertificateOrdersOperations operations, string resourceGroupName, string name, CertificateOrder certificateDistinguishedName)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).CreateOrUpdateCertificateOrderAsync(resourceGroupName, name, certificateDistinguishedName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a certificate purchase order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to be used for purchasing certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOrder> CreateOrUpdateCertificateOrderAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string name, CertificateOrder certificateDistinguishedName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateCertificateOrderWithHttpMessagesAsync(resourceGroupName, name, certificateDistinguishedName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            public static object DeleteCertificateOrder(this ICertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).DeleteCertificateOrderAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCertificateOrderAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateOrderWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a certificate purchase order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to be used for purchasing certificate
            /// </param>
            public static CertificateOrder UpdateCertificateOrder(this ICertificateOrdersOperations operations, string resourceGroupName, string name, CertificateOrder certificateDistinguishedName)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).UpdateCertificateOrderAsync(resourceGroupName, name, certificateDistinguishedName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a certificate purchase order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to be used for purchasing certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOrder> UpdateCertificateOrderAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string name, CertificateOrder certificateDistinguishedName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCertificateOrderWithHttpMessagesAsync(resourceGroupName, name, certificateDistinguishedName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get certificate orders in a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            public static CertificateOrderCollection GetCertificateOrders(this ICertificateOrdersOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).GetCertificateOrdersAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificate orders in a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOrderCollection> GetCertificateOrdersAsync( this ICertificateOrdersOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateOrdersWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all certificates associated with a certificate order (only one
            /// certificate can be associated with an order at a time)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            public static CertificateOrderCertificateCollection GetCertificates(this ICertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).GetCertificatesAsync(resourceGroupName, certificateOrderName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificates associated with a certificate order (only one
            /// certificate can be associated with an order at a time)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CertificateOrderCertificateCollection> GetCertificatesAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificatesWithHttpMessagesAsync(resourceGroupName, certificateOrderName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reissue an existing certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='reissueCertificateOrderRequest'>
            /// Reissue parameters
            /// </param>
            public static object ReissueCertificateOrder(this ICertificateOrdersOperations operations, string resourceGroupName, string name, ReissueCertificateOrderRequest reissueCertificateOrderRequest)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).ReissueCertificateOrderAsync(resourceGroupName, name, reissueCertificateOrderRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reissue an existing certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='reissueCertificateOrderRequest'>
            /// Reissue parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ReissueCertificateOrderAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string name, ReissueCertificateOrderRequest reissueCertificateOrderRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReissueCertificateOrderWithHttpMessagesAsync(resourceGroupName, name, reissueCertificateOrderRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Renew an existing certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='renewCertificateOrderRequest'>
            /// Renew parameters
            /// </param>
            public static object RenewCertificateOrder(this ICertificateOrdersOperations operations, string resourceGroupName, string name, RenewCertificateOrderRequest renewCertificateOrderRequest)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).RenewCertificateOrderAsync(resourceGroupName, name, renewCertificateOrderRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Renew an existing certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='renewCertificateOrderRequest'>
            /// Renew parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RenewCertificateOrderAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string name, RenewCertificateOrderRequest renewCertificateOrderRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenewCertificateOrderWithHttpMessagesAsync(resourceGroupName, name, renewCertificateOrderRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve the list of certificate actions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static IList<CertificateOrderAction> RetrieveCertificateActions(this ICertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).RetrieveCertificateActionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the list of certificate actions
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CertificateOrderAction>> RetrieveCertificateActionsAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveCertificateActionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrive email history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static IList<CertificateEmail> RetrieveCertificateEmailHistory(this ICertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).RetrieveCertificateEmailHistoryAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrive email history
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CertificateEmail>> RetrieveCertificateEmailHistoryAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveCertificateEmailHistoryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resend certificate email
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static object ResendCertificateEmail(this ICertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).ResendCertificateEmailAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resend certificate email
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResendCertificateEmailAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResendCertificateEmailWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verify domain ownership for this certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static object VerifyDomainOwnership(this ICertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificateOrdersOperations)s).VerifyDomainOwnershipAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verify domain ownership for this certificate order
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> VerifyDomainOwnershipAsync( this ICertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyDomainOwnershipWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
