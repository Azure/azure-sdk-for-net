// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AppServicePlansOperations.
    /// </summary>
    public static partial class AppServicePlansOperationsExtensions
    {
            /// <summary>
            /// Gets all App Service Plans for a subcription
            /// </summary>
            /// Gets all App Service Plans for a subcription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='detailed'>
            /// False to return a subset of App Service Plan properties, true to return
            /// all of the properties.
            /// Retrieval of all properties may increase the API latency.
            /// </param>
            public static IPage<AppServicePlan> List(this IAppServicePlansOperations operations, bool? detailed = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListAsync(detailed), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all App Service Plans for a subcription
            /// </summary>
            /// Gets all App Service Plans for a subcription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='detailed'>
            /// False to return a subset of App Service Plan properties, true to return
            /// all of the properties.
            /// Retrieval of all properties may increase the API latency.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServicePlan>> ListAsync(this IAppServicePlansOperations operations, bool? detailed = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(detailed, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// </summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            public static IPage<AppServicePlan> ListByResourceGroup(this IAppServicePlansOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListByResourceGroupAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// </summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServicePlan>> ListByResourceGroupAsync(this IAppServicePlansOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets specified App Service Plan in a resource group
            /// </summary>
            /// Gets specified App Service Plan in a resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static AppServicePlan Get(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets specified App Service Plan in a resource group
            /// </summary>
            /// Gets specified App Service Plan in a resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServicePlan> GetAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an App Service Plan
            /// </summary>
            /// Creates or updates an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='appServicePlan'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            public static AppServicePlan CreateOrUpdate(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlan appServicePlan, bool? allowPendingState = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).CreateOrUpdateAsync(resourceGroupName, name, appServicePlan, allowPendingState), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an App Service Plan
            /// </summary>
            /// Creates or updates an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='appServicePlan'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServicePlan> CreateOrUpdateAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlan appServicePlan, bool? allowPendingState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, appServicePlan, allowPendingState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates an App Service Plan
            /// </summary>
            /// Creates or updates an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='appServicePlan'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            public static AppServicePlan BeginCreateOrUpdate(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlan appServicePlan, bool? allowPendingState = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, name, appServicePlan, allowPendingState), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates an App Service Plan
            /// </summary>
            /// Creates or updates an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='appServicePlan'>
            /// Details of App Service Plan
            /// </param>
            /// <param name='allowPendingState'>
            /// OBSOLETE: If true, allow pending state for App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServicePlan> BeginCreateOrUpdateAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, AppServicePlan appServicePlan, bool? allowPendingState = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, appServicePlan, allowPendingState, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a App Service Plan
            /// </summary>
            /// Deletes a App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static object Delete(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).DeleteAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a App Service Plan
            /// </summary>
            /// Deletes a App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List serverfarm capabilities
            /// </summary>
            /// List serverfarm capabilities
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            public static IList<Capability> ListCapabilities(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListCapabilitiesAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List serverfarm capabilities
            /// </summary>
            /// List serverfarm capabilities
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Capability>> ListCapabilitiesAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCapabilitiesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection in use on this App
            /// Service Plan.
            /// </summary>
            /// Retrieves a specific Service Bus Hybrid Connection in use on this App
            /// Service Plan.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='namespaceName'>
            /// The name of the Service Bus Namespace
            /// </param>
            /// <param name='relayName'>
            /// The name of the Service Bus Relay
            /// </param>
            public static HybridConnection GetHybridConnection(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection in use on this App
            /// Service Plan.
            /// </summary>
            /// Retrieves a specific Service Bus Hybrid Connection in use on this App
            /// Service Plan.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='namespaceName'>
            /// The name of the Service Bus Namespace
            /// </param>
            /// <param name='relayName'>
            /// The name of the Service Bus Relay
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> GetHybridConnectionAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates an existing Service Bus Hybrid Connection in use on this App
            /// Service Plan. This will fail if the Hybrid Connection does not already
            /// exist.
            /// </summary>
            /// Updates an existing Service Bus Hybrid Connection in use on this App
            /// Service Plan. This will fail if the Hybrid Connection does not already
            /// exist.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='namespaceName'>
            /// The name of the Service Bus Namespace
            /// </param>
            /// <param name='relayName'>
            /// The name of the Service Bus Relay
            /// </param>
            /// <param name='connection'>
            /// The hybrid connection entity
            /// </param>
            public static HybridConnection UpdateHybridConnection(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connection)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).UpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connection), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates an existing Service Bus Hybrid Connection in use on this App
            /// Service Plan. This will fail if the Hybrid Connection does not already
            /// exist.
            /// </summary>
            /// Updates an existing Service Bus Hybrid Connection in use on this App
            /// Service Plan. This will fail if the Hybrid Connection does not already
            /// exist.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='namespaceName'>
            /// The name of the Service Bus Namespace
            /// </param>
            /// <param name='relayName'>
            /// The name of the Service Bus Relay
            /// </param>
            /// <param name='connection'>
            /// The hybrid connection entity
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> UpdateHybridConnectionAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connection, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connection, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing Service Bus Hybrid Connection in use on this App
            /// Service Plan.
            /// </summary>
            /// Deletes an existing Service Bus Hybrid Connection in use on this App
            /// Service Plan.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='namespaceName'>
            /// The name of the Service Bus Namespace
            /// </param>
            /// <param name='relayName'>
            /// The name of the Service Bus Relay
            /// </param>
            public static object DeleteHybridConnection(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).DeleteHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing Service Bus Hybrid Connection in use on this App
            /// Service Plan.
            /// </summary>
            /// Deletes an existing Service Bus Hybrid Connection in use on this App
            /// Service Plan.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='namespaceName'>
            /// The name of the Service Bus Namespace
            /// </param>
            /// <param name='relayName'>
            /// The name of the Service Bus Relay
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHybridConnectionAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the send key name and value for this Hybrid Connection
            /// </summary>
            /// Gets the send key name and value for this Hybrid Connection
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='namespaceName'>
            /// The name of the Service Bus Namespace
            /// </param>
            /// <param name='relayName'>
            /// The name of the Service Bus Relay
            /// </param>
            public static HybridConnectionKey ListHybridConnectionKeys(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListHybridConnectionKeysAsync(resourceGroupName, name, namespaceName, relayName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the send key name and value for this Hybrid Connection
            /// </summary>
            /// Gets the send key name and value for this Hybrid Connection
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='namespaceName'>
            /// The name of the Service Bus Namespace
            /// </param>
            /// <param name='relayName'>
            /// The name of the Service Bus Relay
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnectionKey> ListHybridConnectionKeysAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionKeysWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of sites that are using a particular Hybrid Connection on an
            /// App Service Plan
            /// </summary>
            /// Gets a list of sites that are using a particular Hybrid Connection on an
            /// App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='namespaceName'>
            /// The Hybrid Connection namespace
            /// </param>
            /// <param name='relayName'>
            /// The Hybrid Connection relay name
            /// </param>
            public static object ListHybridConnectionWebApps(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListHybridConnectionWebAppsAsync(resourceGroupName, name, namespaceName, relayName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of sites that are using a particular Hybrid Connection on an
            /// App Service Plan
            /// </summary>
            /// Gets a list of sites that are using a particular Hybrid Connection on an
            /// App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='namespaceName'>
            /// The Hybrid Connection namespace
            /// </param>
            /// <param name='relayName'>
            /// The Hybrid Connection relay name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListHybridConnectionWebAppsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionWebAppsWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the maximum number of Hybrid Connections allowed on a specified App
            /// Service Plan
            /// </summary>
            /// Gets the maximum number of Hybrid Connections allowed on a specified App
            /// Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            public static object GetHybridConnectionPlanLimit(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetHybridConnectionPlanLimitAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the maximum number of Hybrid Connections allowed on a specified App
            /// Service Plan
            /// </summary>
            /// Gets the maximum number of Hybrid Connections allowed on a specified App
            /// Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHybridConnectionPlanLimitAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionPlanLimitWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections in use on this App Service
            /// Plan
            /// </summary>
            /// Retrieves all Service Bus Hybrid Connections in use on this App Service
            /// Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            public static HybridConnection ListHybridConnections(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListHybridConnectionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections in use on this App Service
            /// Plan
            /// </summary>
            /// Retrieves all Service Bus Hybrid Connections in use on this App Service
            /// Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> ListHybridConnectionsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of metrics that can be queried for an App Service Plan
            /// </summary>
            /// List of metrics that can be queried for an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static IPage<MetricDefinition> ListMetricDefintions(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListMetricDefintionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of metrics that can be queried for an App Service Plan
            /// </summary>
            /// List of metrics that can be queried for an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> ListMetricDefintionsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefintionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries for App Serice Plan metrics
            /// </summary>
            /// Queries for App Serice Plan metrics
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='details'>
            /// If true, metrics are broken down per App Service Plan instance
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<ResourceMetric> ListMetrics(this IAppServicePlansOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListMetricsAsync(resourceGroupName, name, details, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries for App Serice Plan metrics
            /// </summary>
            /// Queries for App Serice Plan metrics
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='details'>
            /// If true, metrics are broken down per App Service Plan instance
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a server farm operation
            /// </summary>
            /// Gets a server farm operation
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='operationId'>
            /// Id of Server farm operation"&amp;gt;
            /// </param>
            public static AppServicePlan GetOperation(this IAppServicePlansOperations operations, string resourceGroupName, string name, string operationId)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetOperationAsync(resourceGroupName, name, operationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a server farm operation
            /// </summary>
            /// Gets a server farm operation
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='operationId'>
            /// Id of Server farm operation"&amp;gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServicePlan> GetOperationAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts web apps in a specified App Service Plan
            /// </summary>
            /// Restarts web apps in a specified App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the apps if
            /// necessary. Hard restart always restarts and reprovisions the apps
            /// </param>
            public static object RestartWebApps(this IAppServicePlansOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).RestartWebAppsAsync(resourceGroupName, name, softRestart), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts web apps in a specified App Service Plan
            /// </summary>
            /// Restarts web apps in a specified App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the apps if
            /// necessary. Hard restart always restarts and reprovisions the apps
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RestartWebAppsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestartWebAppsWithHttpMessagesAsync(resourceGroupName, name, softRestart, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of Apps associated with an App Service Plan
            /// </summary>
            /// Gets list of Apps associated with an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='skipToken'>
            /// Skip to of web apps in a list. If specified, the resulting list will
            /// contain web apps starting from (including) the skipToken. Else, the
            /// resulting list contains web apps from the start of the list
            /// </param>
            /// <param name='filter'>
            /// Supported filter: $filter=state eq running. Returns only web apps that are
            /// currently running
            /// </param>
            /// <param name='top'>
            /// List page size. If specified, results are paged.
            /// </param>
            public static IPage<Site> ListWebApps(this IAppServicePlansOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string))
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListWebAppsAsync(resourceGroupName, name, skipToken, filter, top), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of Apps associated with an App Service Plan
            /// </summary>
            /// Gets list of Apps associated with an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='skipToken'>
            /// Skip to of web apps in a list. If specified, the resulting list will
            /// contain web apps starting from (including) the skipToken. Else, the
            /// resulting list contains web apps from the start of the list
            /// </param>
            /// <param name='filter'>
            /// Supported filter: $filter=state eq running. Returns only web apps that are
            /// currently running
            /// </param>
            /// <param name='top'>
            /// List page size. If specified, results are paged.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListWebAppsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string skipToken = default(string), string filter = default(string), string top = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebAppsWithHttpMessagesAsync(resourceGroupName, name, skipToken, filter, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of vnets associated with App Service Plan
            /// </summary>
            /// Gets list of vnets associated with App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            public static IList<VnetInfo> ListVnets(this IAppServicePlansOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListVnetsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of vnets associated with App Service Plan
            /// </summary>
            /// Gets list of vnets associated with App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfo>> ListVnetsAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVnetsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a vnet associated with an App Service Plan
            /// </summary>
            /// Gets a vnet associated with an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            public static VnetInfo GetVnetFromServerFarm(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetVnetFromServerFarmAsync(resourceGroupName, name, vnetName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a vnet associated with an App Service Plan
            /// </summary>
            /// Gets a vnet associated with an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> GetVnetFromServerFarmAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetFromServerFarmWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the vnet gateway.
            /// </summary>
            /// Gets the vnet gateway.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Only the 'primary' gateway is supported.
            /// </param>
            public static VnetGateway GetVnetGateway(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the vnet gateway.
            /// </summary>
            /// Gets the vnet gateway.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of the App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of the virtual network
            /// </param>
            /// <param name='gatewayName'>
            /// Name of the gateway. Only the 'primary' gateway is supported.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> GetVnetGatewayAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the vnet gateway
            /// </summary>
            /// Updates the vnet gateway
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// The name of the virtual network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. Only 'primary' is supported.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The gateway entity.
            /// </param>
            public static VnetGateway UpdateVnetGateway(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).UpdateVnetGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the vnet gateway
            /// </summary>
            /// Updates the vnet gateway
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group
            /// </param>
            /// <param name='name'>
            /// The name of the App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// The name of the virtual network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. Only 'primary' is supported.
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The gateway entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> UpdateVnetGatewayAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a list of all routes associated with a vnet, in an app service plan
            /// </summary>
            /// Gets a list of all routes associated with a vnet, in an app service plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            public static IList<VnetRoute> ListtRoutesForVnet(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListtRoutesForVnetAsync(resourceGroupName, name, vnetName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a list of all routes associated with a vnet, in an app service plan
            /// </summary>
            /// Gets a list of all routes associated with a vnet, in an app service plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetRoute>> ListtRoutesForVnetAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListtRoutesForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific route associated with a vnet, in an app service plan
            /// </summary>
            /// Gets a specific route associated with a vnet, in an app service plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            public static IList<VnetRoute> GetRouteForVnet(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).GetRouteForVnetAsync(resourceGroupName, name, vnetName, routeName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific route associated with a vnet, in an app service plan
            /// </summary>
            /// Gets a specific route associated with a vnet, in an app service plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetRoute>> GetRouteForVnetAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRouteForVnetWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// </summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            public static VnetRoute CreateOrUpdateVnetRoute(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).CreateOrUpdateVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// </summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetRoute> CreateOrUpdateVnetRouteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes an existing route for a vnet in an app service plan.
            /// </summary>
            /// Deletes an existing route for a vnet in an app service plan.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            public static object DeleteVnetRoute(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).DeleteVnetRouteAsync(resourceGroupName, name, vnetName, routeName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes an existing route for a vnet in an app service plan.
            /// </summary>
            /// Deletes an existing route for a vnet in an app service plan.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteVnetRouteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// </summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            public static VnetRoute UpdateVnetRoute(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).UpdateVnetRouteAsync(resourceGroupName, name, vnetName, routeName, route), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// </summary>
            /// Creates a new route or updates an existing route for a vnet in an app
            /// service plan.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of App Service Plan
            /// </param>
            /// <param name='vnetName'>
            /// Name of virtual network
            /// </param>
            /// <param name='routeName'>
            /// Name of the virtual network route
            /// </param>
            /// <param name='route'>
            /// The route object
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetRoute> UpdateVnetRouteAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string vnetName, string routeName, VnetRoute route, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetRouteWithHttpMessagesAsync(resourceGroupName, name, vnetName, routeName, route, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Submit a reboot request for a worker machine in the specified server farm
            /// </summary>
            /// Submit a reboot request for a worker machine in the specified server farm
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='workerName'>
            /// Name of worker machine, typically starts with RD
            /// </param>
            public static object RebootWorker(this IAppServicePlansOperations operations, string resourceGroupName, string name, string workerName)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).RebootWorkerAsync(resourceGroupName, name, workerName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Submit a reboot request for a worker machine in the specified server farm
            /// </summary>
            /// Submit a reboot request for a worker machine in the specified server farm
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of server farm
            /// </param>
            /// <param name='workerName'>
            /// Name of worker machine, typically starts with RD
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RebootWorkerAsync(this IAppServicePlansOperations operations, string resourceGroupName, string name, string workerName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RebootWorkerWithHttpMessagesAsync(resourceGroupName, name, workerName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all App Service Plans for a subcription
            /// </summary>
            /// Gets all App Service Plans for a subcription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServicePlan> ListNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all App Service Plans for a subcription
            /// </summary>
            /// Gets all App Service Plans for a subcription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServicePlan>> ListNextAsync(this IAppServicePlansOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// </summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServicePlan> ListByResourceGroupNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// </summary>
            /// Gets collection of App Service Plans in a resource group for a given
            /// subscription.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServicePlan>> ListByResourceGroupNextAsync(this IAppServicePlansOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List of metrics that can be queried for an App Service Plan
            /// </summary>
            /// List of metrics that can be queried for an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MetricDefinition> ListMetricDefintionsNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListMetricDefintionsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List of metrics that can be queried for an App Service Plan
            /// </summary>
            /// List of metrics that can be queried for an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> ListMetricDefintionsNextAsync(this IAppServicePlansOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefintionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Queries for App Serice Plan metrics
            /// </summary>
            /// Queries for App Serice Plan metrics
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetric> ListMetricsNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListMetricsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Queries for App Serice Plan metrics
            /// </summary>
            /// Queries for App Serice Plan metrics
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsNextAsync(this IAppServicePlansOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of Apps associated with an App Service Plan
            /// </summary>
            /// Gets list of Apps associated with an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ListWebAppsNext(this IAppServicePlansOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAppServicePlansOperations)s).ListWebAppsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of Apps associated with an App Service Plan
            /// </summary>
            /// Gets list of Apps associated with an App Service Plan
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListWebAppsNextAsync(this IAppServicePlansOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWebAppsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
