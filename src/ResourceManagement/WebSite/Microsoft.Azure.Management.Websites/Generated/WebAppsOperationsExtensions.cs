// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for WebAppsOperations.
    /// </summary>
    public static partial class WebAppsOperationsExtensions
    {
            /// <summary>
            /// Gets all Web Apps for a subscription
            /// </summary>
            /// Gets all Web Apps for a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Site> List(this IWebAppsOperations operations)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Web Apps for a subscription
            /// </summary>
            /// Gets all Web Apps for a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListAsync(this IWebAppsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets deleted web apps in subscription
            /// </summary>
            /// Gets deleted web apps in subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            public static IPage<DeletedSite> ListDeleted(this IWebAppsOperations operations, string resourceGroupName, string propertiesToInclude = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDeletedAsync(resourceGroupName, propertiesToInclude), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets deleted web apps in subscription
            /// </summary>
            /// Gets deleted web apps in subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedSite>> ListDeletedAsync(this IWebAppsOperations operations, string resourceGroupName, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeletedWithHttpMessagesAsync(resourceGroupName, propertiesToInclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web apps for a subscription in the specified resource group
            /// </summary>
            /// Gets the web apps for a subscription in the specified resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='includeSlots'>
            /// Whether or not to include deployments slots in results
            /// </param>
            public static IPage<Site> ListByResourceGroup(this IWebAppsOperations operations, string resourceGroupName, string propertiesToInclude = default(string), bool? includeSlots = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListByResourceGroupAsync(resourceGroupName, propertiesToInclude, includeSlots), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web apps for a subscription in the specified resource group
            /// </summary>
            /// Gets the web apps for a subscription in the specified resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='includeSlots'>
            /// Whether or not to include deployments slots in results
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListByResourceGroupAsync(this IWebAppsOperations operations, string resourceGroupName, string propertiesToInclude = default(string), bool? includeSlots = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, propertiesToInclude, includeSlots, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get details of a web app
            /// </summary>
            /// Get details of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            public static Site Get(this IWebAppsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetAsync(resourceGroupName, name, propertiesToInclude), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of a web app
            /// </summary>
            /// Get details of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> GetAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, propertiesToInclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site CreateOrUpdate(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> CreateOrUpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site BeginCreateOrUpdate(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> BeginCreateOrUpdateAsync(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a web app
            /// </summary>
            /// Deletes a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// If true and App Service Plan is empty after web app deletion, App Service
            /// Plan is also deleted
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            public static object Delete(this IWebAppsOperations operations, string resourceGroupName, string name, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a web app
            /// </summary>
            /// Deletes a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// If true and App Service Plan is empty after web app deletion, App Service
            /// Plan is also deleted
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Analyze a custom hostname
            /// </summary>
            /// Analyze a custom hostname
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            public static CustomHostnameAnalysisResult AnalyzeCustomHostname(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).AnalyzeCustomHostnameAsync(resourceGroupName, name, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Analyze a custom hostname
            /// </summary>
            /// Analyze a custom hostname
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomHostnameAnalysisResult> AnalyzeCustomHostnameAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AnalyzeCustomHostnameWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot
            /// </summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name. Settings from that slot
            /// will be applied on the source slot
            /// </param>
            public static object ApplySlotConfigToProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ApplySlotConfigToProductionAsync(resourceGroupName, name, slotSwapEntity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot
            /// </summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name. Settings from that slot
            /// will be applied on the source slot
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApplySlotConfigToProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApplySlotConfigToProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates web app backup
            /// </summary>
            /// Creates web app backup
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            public static BackupItem Backup(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BackupAsync(resourceGroupName, name, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates web app backup
            /// </summary>
            /// Creates web app backup
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> BackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all available backups for web app
            /// </summary>
            /// Lists all available backups for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static IPage<BackupItem> ListBackups(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all available backups for web app
            /// </summary>
            /// Lists all available backups for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItem>> ListBackupsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Discovers existing web app backups that can be restored
            /// </summary>
            /// Discovers existing web app backups that can be restored
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            public static RestoreRequest DiscoverRestore(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DiscoverRestoreAsync(resourceGroupName, name, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Discovers existing web app backups that can be restored
            /// </summary>
            /// Discovers existing web app backups that can be restored
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreRequest> DiscoverRestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverRestoreWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress.
            /// </summary>
            /// Gets status of a web app backup that may be in progress.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            public static BackupItem GetBackupStatus(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetBackupStatusAsync(resourceGroupName, name, backupId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress.
            /// </summary>
            /// Gets status of a web app backup that may be in progress.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> GetBackupStatusAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupStatusWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a backup from Azure Storage
            /// </summary>
            /// Deletes a backup from Azure Storage
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            public static BackupItem DeleteBackup(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteBackupAsync(resourceGroupName, name, backupId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a backup from Azure Storage
            /// </summary>
            /// Deletes a backup from Azure Storage
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> DeleteBackupAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBackupWithHttpMessagesAsync(resourceGroupName, name, backupId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            public static BackupItem ListBackupStatusSecrets(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequest request)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupStatusSecretsAsync(resourceGroupName, name, backupId, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> ListBackupStatusSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupStatusSecretsWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup to restore
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            public static RestoreResponse Restore(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).RestoreAsync(resourceGroupName, name, backupId, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup to restore
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreResponse> RestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestoreWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup to restore
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            public static RestoreResponse BeginRestore(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginRestoreAsync(resourceGroupName, name, backupId, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup to restore
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreResponse> BeginRestoreAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRestoreWithHttpMessagesAsync(resourceGroupName, name, backupId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the application settings of web app
            /// </summary>
            /// Updates the application settings of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of web app
            /// </param>
            public static StringDictionary UpdateApplicationSettings(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary appSettings)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateApplicationSettingsAsync(resourceGroupName, name, appSettings), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the application settings of web app
            /// </summary>
            /// Updates the application settings of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> UpdateApplicationSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary appSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationSettingsWithHttpMessagesAsync(resourceGroupName, name, appSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application settings of web app
            /// </summary>
            /// Gets the application settings of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static StringDictionary ListApplicationSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListApplicationSettingsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the application settings of web app
            /// </summary>
            /// Gets the application settings of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListApplicationSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListApplicationSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web app
            /// </summary>
            /// Updates the Authentication / Authorization settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            public static SiteAuthSettings UpdateAuthSettings(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettings siteAuthSettings)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateAuthSettingsAsync(resourceGroupName, name, siteAuthSettings), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web app
            /// </summary>
            /// Updates the Authentication / Authorization settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettings> UpdateAuthSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettings siteAuthSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAuthSettingsWithHttpMessagesAsync(resourceGroupName, name, siteAuthSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Authentication / Authorization settings associated with web app
            /// </summary>
            /// Gets the Authentication / Authorization settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SiteAuthSettings ListAuthSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListAuthSettingsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Authentication / Authorization settings associated with web app
            /// </summary>
            /// Gets the Authentication / Authorization settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettings> ListAuthSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAuthSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates backup configuration of web app
            /// </summary>
            /// Updates backup configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            public static BackupRequest UpdateBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateBackupConfigurationAsync(resourceGroupName, name, request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates backup configuration of web app
            /// </summary>
            /// Updates backup configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> UpdateBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the backup configuration for a web app
            /// </summary>
            /// Removes the backup configuration for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object DeleteBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteBackupConfigurationAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the backup configuration for a web app
            /// </summary>
            /// Removes the backup configuration for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the backup configuration for a web app
            /// </summary>
            /// Gets the backup configuration for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static BackupRequest GetBackupConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetBackupConfigurationAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the backup configuration for a web app
            /// </summary>
            /// Gets the backup configuration for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> GetBackupConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the connection strings associated with web app
            /// </summary>
            /// Updates the connection strings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings associated with web app
            /// </param>
            public static ConnectionStringDictionary UpdateConnectionStrings(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionary connectionStrings)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateConnectionStringsAsync(resourceGroupName, name, connectionStrings), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the connection strings associated with web app
            /// </summary>
            /// Updates the connection strings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings associated with web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionary> UpdateConnectionStringsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionary connectionStrings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connection strings associated with web app
            /// </summary>
            /// Gets the connection strings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static ConnectionStringDictionary ListConnectionStrings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListConnectionStringsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the connection strings associated with web app
            /// </summary>
            /// Gets the connection strings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionary> ListConnectionStringsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConnectionStringsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web app logs configuration
            /// </summary>
            /// Gets the web app logs configuration
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SiteLogsConfig GetDiagnosticLogsConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetDiagnosticLogsConfigurationAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web app logs configuration
            /// </summary>
            /// Gets the web app logs configuration
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> GetDiagnosticLogsConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticLogsConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the meta data for web app
            /// </summary>
            /// Updates the meta data for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteLogsConfig'>
            /// Site logs configuration
            /// </param>
            public static SiteLogsConfig UpdateDiagnosticLogsConfig(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateDiagnosticLogsConfigAsync(resourceGroupName, name, siteLogsConfig), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the meta data for web app
            /// </summary>
            /// Updates the meta data for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteLogsConfig'>
            /// Site logs configuration
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> UpdateDiagnosticLogsConfigAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDiagnosticLogsConfigWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the meta data for web app
            /// </summary>
            /// Updates the meta data for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='metadata'>
            /// Meta data of web app
            /// </param>
            public static StringDictionary UpdateMetadata(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary metadata)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateMetadataAsync(resourceGroupName, name, metadata), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the meta data for web app
            /// </summary>
            /// Updates the meta data for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='metadata'>
            /// Meta data of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> UpdateMetadataAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary metadata, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMetadataWithHttpMessagesAsync(resourceGroupName, name, metadata, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web app meta data.
            /// </summary>
            /// Gets the web app meta data.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static StringDictionary ListMetadata(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetadataAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web app meta data.
            /// </summary>
            /// Gets the web app meta data.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListMetadataAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetadataWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web app publishing credentials
            /// </summary>
            /// Gets the web app publishing credentials
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static User ListPublishingCredentials(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPublishingCredentialsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web app publishing credentials
            /// </summary>
            /// Gets the web app publishing credentials
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> ListPublishingCredentialsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web app publishing credentials
            /// </summary>
            /// Gets the web app publishing credentials
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static User BeginListPublishingCredentials(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginListPublishingCredentialsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web app publishing credentials
            /// </summary>
            /// Gets the web app publishing credentials
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> BeginListPublishingCredentialsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginListPublishingCredentialsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Push settings associated with web app
            /// </summary>
            /// Updates the Push settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            public static PushSettings UpdateSitePushSettings(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettings pushSettings)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateSitePushSettingsAsync(resourceGroupName, name, pushSettings), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Push settings associated with web app
            /// </summary>
            /// Updates the Push settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettings> UpdateSitePushSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettings pushSettings, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSitePushSettingsWithHttpMessagesAsync(resourceGroupName, name, pushSettings, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Push settings associated with web app
            /// </summary>
            /// Gets the Push settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static PushSettings ListSitePushSettings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSitePushSettingsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Push settings associated with web app
            /// </summary>
            /// Gets the Push settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettings> ListSitePushSettingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSitePushSettingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the names of application settings and connection string that remain
            /// with the slot during swap operation
            /// </summary>
            /// Gets the names of application settings and connection string that remain
            /// with the slot during swap operation
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SlotConfigNamesResource ListSlotConfigurationNames(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSlotConfigurationNamesAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the names of application settings and connection string that remain
            /// with the slot during swap operation
            /// </summary>
            /// Gets the names of application settings and connection string that remain
            /// with the slot during swap operation
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SlotConfigNamesResource> ListSlotConfigurationNamesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotConfigurationNamesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the names of application settings and connection string that
            /// remain with the slot during swap operation
            /// </summary>
            /// Updates the names of application settings and connection string that
            /// remain with the slot during swap operation
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotConfigNames'>
            /// Request body containing the names of application settings and connection
            /// strings
            /// </param>
            public static SlotConfigNamesResource UpdateSlotConfigurationNames(this IWebAppsOperations operations, string resourceGroupName, string name, SlotConfigNamesResource slotConfigNames)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateSlotConfigurationNamesAsync(resourceGroupName, name, slotConfigNames), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the names of application settings and connection string that
            /// remain with the slot during swap operation
            /// </summary>
            /// Updates the names of application settings and connection string that
            /// remain with the slot during swap operation
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotConfigNames'>
            /// Request body containing the names of application settings and connection
            /// strings
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SlotConfigNamesResource> UpdateSlotConfigurationNamesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SlotConfigNamesResource slotConfigNames, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSlotConfigurationNamesWithHttpMessagesAsync(resourceGroupName, name, slotConfigNames, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the configuration of the web app
            /// </summary>
            /// Gets the configuration of the web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SiteConfig GetConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetConfigurationAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the configuration of the web app
            /// </summary>
            /// Gets the configuration of the web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> GetConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the configuration of web app
            /// </summary>
            /// Update the configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            public static SiteConfig CreateOrUpdateConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateConfigurationAsync(resourceGroupName, name, siteConfig), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the configuration of web app
            /// </summary>
            /// Update the configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> CreateOrUpdateConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateConfigurationWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the configuration of web app
            /// </summary>
            /// Update the configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            public static SiteConfig UpdateConfiguration(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateConfigurationAsync(resourceGroupName, name, siteConfig), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the configuration of web app
            /// </summary>
            /// Update the configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> UpdateConfigurationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfigurationWithHttpMessagesAsync(resourceGroupName, name, siteConfig, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static IPage<Deployment> ListDeployments(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDeploymentsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListDeploymentsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the deployment
            /// </summary>
            /// Get the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            public static Deployment GetDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetDeploymentAsync(resourceGroupName, name, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the deployment
            /// </summary>
            /// Get the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> GetDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment
            /// </summary>
            /// Create a deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='deployment'>
            /// Details of deployment
            /// </param>
            public static Deployment CreateDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, Deployment deployment)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateDeploymentAsync(resourceGroupName, name, id, deployment), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment
            /// </summary>
            /// Create a deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='deployment'>
            /// Details of deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> CreateDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, Deployment deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the deployment
            /// </summary>
            /// Delete the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            public static object DeleteDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteDeploymentAsync(resourceGroupName, name, id), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the deployment
            /// </summary>
            /// Delete the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get web app hostname bindings
            /// </summary>
            /// Get web app hostname bindings
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static IPage<HostNameBinding> ListHostNameBindings(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHostNameBindingsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get web app hostname bindings
            /// </summary>
            /// Get web app hostname bindings
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBinding>> ListHostNameBindingsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get web app binding for a hostname
            /// </summary>
            /// Get web app binding for a hostname
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            public static HostNameBinding GetHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetHostNameBindingAsync(resourceGroupName, name, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get web app binding for a hostname
            /// </summary>
            /// Get web app binding for a hostname
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> GetHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a web app hostname binding
            /// </summary>
            /// Creates a web app hostname binding
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='hostNameBinding'>
            /// Host name binding information
            /// </param>
            public static HostNameBinding CreateOrUpdateHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateHostNameBindingAsync(resourceGroupName, name, hostName, hostNameBinding), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a web app hostname binding
            /// </summary>
            /// Creates a web app hostname binding
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='hostNameBinding'>
            /// Host name binding information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> CreateOrUpdateHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a host name binding
            /// </summary>
            /// Deletes a host name binding
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            public static object DeleteHostNameBinding(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteHostNameBindingAsync(resourceGroupName, name, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a host name binding
            /// </summary>
            /// Deletes a host name binding
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHostNameBindingAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHostNameBindingWithHttpMessagesAsync(resourceGroupName, name, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            public static HybridConnection GetHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> GetHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// </summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            public static HybridConnection CreateOrUpdateHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// </summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> CreateOrUpdateHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// Removes a Hybrid Connection from this site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            public static object DeleteHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// Removes a Hybrid Connection from this site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// </summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            public static HybridConnection UpdateHybridConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateHybridConnectionAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// </summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> UpdateHybridConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateHybridConnectionWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection
            /// </summary>
            /// Gets the send key name and value for a Hybrid Connection
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            public static object ListHybridConnectionKeys(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHybridConnectionKeysAsync(resourceGroupName, name, namespaceName, relayName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection
            /// </summary>
            /// Gets the send key name and value for a Hybrid Connection
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListHybridConnectionKeysAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionKeysWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            public static HybridConnection ListHybridConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHybridConnectionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> ListHybridConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Biztalk Hybrid Connections associated with this web app.
            /// </summary>
            /// Retrieves all Biztalk Hybrid Connections associated with this web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            public static RelayServiceConnectionEntity ListRelayServiceConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListRelayServiceConnectionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Biztalk Hybrid Connections associated with this web app.
            /// </summary>
            /// Retrieves all Biztalk Hybrid Connections associated with this web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> ListRelayServiceConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRelayServiceConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a Biztalk Hybrid Connection identified by its entity name.
            /// </summary>
            /// Retrieves a Biztalk Hybrid Connection identified by its entity name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            public static RelayServiceConnectionEntity GetRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetRelayServiceConnectionAsync(resourceGroupName, name, entityName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a Biztalk Hybrid Connection identified by its entity name.
            /// </summary>
            /// Retrieves a Biztalk Hybrid Connection identified by its entity name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> GetRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// </summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            public static RelayServiceConnectionEntity CreateOrUpdateRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// </summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> CreateOrUpdateRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the association to a Biztalk Hybrid Connection, identified by its
            /// entity name.
            /// </summary>
            /// Removes the association to a Biztalk Hybrid Connection, identified by its
            /// entity name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            public static object DeleteRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteRelayServiceConnectionAsync(resourceGroupName, name, entityName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the association to a Biztalk Hybrid Connection, identified by its
            /// entity name.
            /// </summary>
            /// Removes the association to a Biztalk Hybrid Connection, identified by its
            /// entity name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// </summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            public static RelayServiceConnectionEntity UpdateRelayServiceConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateRelayServiceConnectionAsync(resourceGroupName, name, entityName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// </summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> UpdateRelayServiceConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRelayServiceConnectionWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all instance of a web app
            /// </summary>
            /// Gets all instance of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static IPage<SiteInstance> ListInstanceIdentifiers(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceIdentifiersAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all instance of a web app
            /// </summary>
            /// Gets all instance of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            public static IPage<Deployment> ListInstanceDeployments(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceDeploymentsAsync(resourceGroupName, name, instanceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListInstanceDeploymentsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsWithHttpMessagesAsync(resourceGroupName, name, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the deployment
            /// </summary>
            /// Get the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            public static Deployment GetInstanceDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetInstanceDeploymentAsync(resourceGroupName, name, id, instanceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the deployment
            /// </summary>
            /// Get the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> GetInstanceDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment
            /// </summary>
            /// Create a deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            /// <param name='deployment'>
            /// Details of deployment
            /// </param>
            public static Deployment CreateInstanceDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, Deployment deployment)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateInstanceDeploymentAsync(resourceGroupName, name, id, instanceId, deployment), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment
            /// </summary>
            /// Create a deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            /// <param name='deployment'>
            /// Details of deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> CreateInstanceDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, Deployment deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInstanceDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, instanceId, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the deployment
            /// </summary>
            /// Delete the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            public static object DeleteInstanceDeployment(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteInstanceDeploymentAsync(resourceGroupName, name, id, instanceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the deployment
            /// </summary>
            /// Delete the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteInstanceDeploymentAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteInstanceDeploymentWithHttpMessagesAsync(resourceGroupName, name, id, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            public static SiteCloneability IsCloneable(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).IsCloneableAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCloneability> IsCloneableAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCloneableWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets metric definitions for web app
            /// </summary>
            /// Gets metric definitions for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static IPage<MetricDefinition> ListMetricDefinitions(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricDefinitionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets metric definitions for web app
            /// </summary>
            /// Gets metric definitions for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> ListMetricDefinitionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets metrics for web app
            /// </summary>
            /// Gets metrics for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='details'>
            /// If true, metric details are included in response
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<ResourceMetric> ListMetrics(this IWebAppsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricsAsync(resourceGroupName, name, details, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets metrics for web app
            /// </summary>
            /// Gets metrics for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='details'>
            /// If true, metric details are included in response
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Migration options
            /// </param>
            public static StorageMigrationResponse MigrateStorage(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions options)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).MigrateStorageAsync(subscriptionName, resourceGroupName, name, options), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Migration options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageMigrationResponse> MigrateStorageAsync(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions options, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateStorageWithHttpMessagesAsync(subscriptionName, resourceGroupName, name, options, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Migration options
            /// </param>
            public static StorageMigrationResponse BeginMigrateStorage(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions options)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginMigrateStorageAsync(subscriptionName, resourceGroupName, name, options), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionName'>
            /// Azure subscription
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Migration options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageMigrationResponse> BeginMigrateStorageAsync(this IWebAppsOperations operations, string subscriptionName, string resourceGroupName, string name, StorageMigrationOptions options, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateStorageWithHttpMessagesAsync(subscriptionName, resourceGroupName, name, options, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database
            /// </summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            public static Operation MigrateMySql(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).MigrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database
            /// </summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Operation> MigrateMySqlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MigrateMySqlWithHttpMessagesAsync(resourceGroupName, name, migrationRequestEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database
            /// </summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            public static Operation BeginMigrateMySql(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginMigrateMySqlAsync(resourceGroupName, name, migrationRequestEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database
            /// </summary>
            /// Migrates a local (in-app) MySql database to a remote MySql database
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='migrationRequestEnvelope'>
            /// MySql migration options
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Operation> BeginMigrateMySqlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, MigrateMySqlRequest migrationRequestEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginMigrateMySqlWithHttpMessagesAsync(resourceGroupName, name, migrationRequestEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a view of all network features in use on this web app.
            /// </summary>
            /// Retrieves a view of all network features in use on this web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            public static NetworkFeatures ListNetworkFeatures(this IWebAppsOperations operations, string resourceGroupName, string name, string view)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListNetworkFeaturesAsync(resourceGroupName, name, view), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a view of all network features in use on this web app.
            /// </summary>
            /// Retrieves a view of all network features in use on this web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkFeatures> ListNetworkFeaturesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string view, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNetworkFeaturesWithHttpMessagesAsync(resourceGroupName, name, view, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site
            /// </summary>
            /// Start capturing network packets for the site
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            public static string StartWebSiteNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).StartWebSiteNetworkTraceAsync(resourceGroupName, name, durationInSeconds), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start capturing network packets for the site
            /// </summary>
            /// Start capturing network packets for the site
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StartWebSiteNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, int? durationInSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWebSiteNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, durationInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site
            /// </summary>
            /// Stop ongoing capturing network packets for the site
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            public static string StopWebSiteNetworkTrace(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).StopWebSiteNetworkTraceAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site
            /// </summary>
            /// Stop ongoing capturing network packets for the site
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StopWebSiteNetworkTraceAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopWebSiteNetworkTraceWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates new random app publishing password
            /// </summary>
            /// Generates new random app publishing password
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object GenerateNewSitePublishingPassword(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GenerateNewSitePublishingPasswordAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates new random app publishing password
            /// </summary>
            /// Generates new random app publishing password
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GenerateNewSitePublishingPasswordAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateNewSitePublishingPasswordWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the operation for a web app
            /// </summary>
            /// Gets the operation for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='operationId'>
            /// Id of an operation
            /// </param>
            public static object GetOperation(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetOperationAsync(resourceGroupName, name, operationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the operation for a web app
            /// </summary>
            /// Gets the operation for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='operationId'>
            /// Id of an operation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetOperationAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets perfmon counters for web app
            /// </summary>
            /// Gets perfmon counters for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<PerfMonResponse> ListPerfMonCounters(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPerfMonCountersAsync(resourceGroupName, name, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app
            /// </summary>
            /// Gets perfmon counters for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets sites's event logs
            /// </summary>
            /// Gets sites's event logs
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static IList<object> GetSitePhpErrorLogFlag(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSitePhpErrorLogFlagAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets sites's event logs
            /// </summary>
            /// Gets sites's event logs
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<object>> GetSitePhpErrorLogFlagAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSitePhpErrorLogFlagWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List premier add ons for web app
            /// </summary>
            /// List premier add ons for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            public static object ListPremierAddOns(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPremierAddOnsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List premier add ons for web app
            /// </summary>
            /// List premier add ons for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListPremierAddOnsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPremierAddOnsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific premier add on
            /// </summary>
            /// Gets a specific premier add on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            public static object GetPremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetPremierAddOnAsync(resourceGroupName, name, premierAddOnName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific premier add on
            /// </summary>
            /// Gets a specific premier add on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add premier add-on
            /// </summary>
            /// Add premier add-on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            /// <param name='premierAddOn'>
            /// Premier add on request
            /// </param>
            public static object AddPremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnRequest premierAddOn)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).AddPremierAddOnAsync(resourceGroupName, name, premierAddOnName, premierAddOn), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add premier add-on
            /// </summary>
            /// Add premier add-on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            /// <param name='premierAddOn'>
            /// Premier add on request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddPremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnRequest premierAddOn, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete premier add-on
            /// </summary>
            /// Delete premier add-on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            public static object DeletePremierAddOn(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeletePremierAddOnAsync(resourceGroupName, name, premierAddOnName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete premier add-on
            /// </summary>
            /// Delete premier add-on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeletePremierAddOnAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePremierAddOnWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the publishing profile for web app
            /// </summary>
            /// Gets the publishing profile for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Specifies options for publishing profile. Pass
            /// CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
            /// </param>
            public static System.IO.Stream ListPublishingProfileXmlWithSecrets(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions options)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPublishingProfileXmlWithSecretsAsync(resourceGroupName, name, options), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the publishing profile for web app
            /// </summary>
            /// Gets the publishing profile for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Specifies options for publishing profile. Pass
            /// CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> ListPublishingProfileXmlWithSecretsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions options, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListPublishingProfileXmlWithSecretsWithHttpMessagesAsync(resourceGroupName, name, options, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Recovers a deleted web app
            /// </summary>
            /// Recovers a deleted web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            public static RecoverResponse Recover(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).RecoverAsync(resourceGroupName, name, recoveryEntity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app
            /// </summary>
            /// Recovers a deleted web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoverResponse> RecoverAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecoverWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recovers a deleted web app
            /// </summary>
            /// Recovers a deleted web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            public static RecoverResponse BeginRecover(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginRecoverAsync(resourceGroupName, name, recoveryEntity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app
            /// </summary>
            /// Recovers a deleted web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoverResponse> BeginRecoverAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRecoverWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling ApplySlotConfig API
            /// </summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling ApplySlotConfig API
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object ResetProductionSlotConfig(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ResetProductionSlotConfigAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling ApplySlotConfig API
            /// </summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling ApplySlotConfig API
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResetProductionSlotConfigAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResetProductionSlotConfigWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts web app
            /// </summary>
            /// Restarts web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the app if
            /// necessary. Hard restart always restarts and reprovisions the app
            /// </param>
            /// <param name='synchronous'>
            /// If true then the API will block until the app has been restarted
            /// </param>
            public static object Restart(this IWebAppsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).RestartAsync(resourceGroupName, name, softRestart, synchronous), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts web app
            /// </summary>
            /// Restarts web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the app if
            /// necessary. Hard restart always restarts and reprovisions the app
            /// </param>
            /// <param name='synchronous'>
            /// If true then the API will block until the app has been restarted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RestartAsync(this IWebAppsOperations operations, string resourceGroupName, string name, bool? softRestart = default(bool?), bool? synchronous = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestartWithHttpMessagesAsync(resourceGroupName, name, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the slots for a web apps
            /// </summary>
            /// Gets all the slots for a web apps
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='propertiesToInclude'>
            /// List of app properties to include in the response
            /// </param>
            public static IPage<Site> ListSlots(this IWebAppsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSlotsAsync(resourceGroupName, name, propertiesToInclude), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the slots for a web apps
            /// </summary>
            /// Gets all the slots for a web apps
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='propertiesToInclude'>
            /// List of app properties to include in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListSlotsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotsWithHttpMessagesAsync(resourceGroupName, name, propertiesToInclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get details of a web app
            /// </summary>
            /// Get details of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            public static Site GetSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string propertiesToInclude = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSlotAsync(resourceGroupName, name, slot, propertiesToInclude), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get details of a web app
            /// </summary>
            /// Get details of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Additional web app properties included in the response
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> GetSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotWithHttpMessagesAsync(resourceGroupName, name, slot, propertiesToInclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site CreateOrUpdateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateSlotAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> CreateOrUpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            public static Site BeginCreateOrUpdateSlot(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginCreateOrUpdateSlotAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='siteEnvelope'>
            /// Details of web app if it exists already
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true web app hostname is not registered with DNS on creation. This
            /// parameter is
            /// only used for app creation
            /// </param>
            /// <param name='skipCustomDomainVerification'>
            /// If true, custom (non *.azurewebsites.net) domains associated with web app
            /// are not verified.
            /// </param>
            /// <param name='forceDnsRegistration'>
            /// If true, web app hostname is force registered with DNS
            /// </param>
            /// <param name='ttlInSeconds'>
            /// Time to live in seconds for web app's default domain name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Site> BeginCreateOrUpdateSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, Site siteEnvelope, string slot, bool? skipDnsRegistration = default(bool?), bool? skipCustomDomainVerification = default(bool?), bool? forceDnsRegistration = default(bool?), string ttlInSeconds = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateSlotWithHttpMessagesAsync(resourceGroupName, name, siteEnvelope, slot, skipDnsRegistration, skipCustomDomainVerification, forceDnsRegistration, ttlInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a web app
            /// </summary>
            /// Deletes a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// If true and App Service Plan is empty after web app deletion, App Service
            /// Plan is also deleted
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            public static object DeleteSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteSlotAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a web app
            /// </summary>
            /// Deletes a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='deleteMetrics'>
            /// If true, web app metrics are also deleted
            /// </param>
            /// <param name='deleteEmptyServerFarm'>
            /// If true and App Service Plan is empty after web app deletion, App Service
            /// Plan is also deleted
            /// </param>
            /// <param name='skipDnsRegistration'>
            /// If true, DNS registration is skipped
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? deleteMetrics = default(bool?), bool? deleteEmptyServerFarm = default(bool?), bool? skipDnsRegistration = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSlotWithHttpMessagesAsync(resourceGroupName, name, slot, deleteMetrics, deleteEmptyServerFarm, skipDnsRegistration, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Analyze a custom hostname
            /// </summary>
            /// Analyze a custom hostname
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            public static CustomHostnameAnalysisResult AnalyzeCustomHostnameSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).AnalyzeCustomHostnameSlotAsync(resourceGroupName, name, slot, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Analyze a custom hostname
            /// </summary>
            /// Analyze a custom hostname
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Custom hostname
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CustomHostnameAnalysisResult> AnalyzeCustomHostnameSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AnalyzeCustomHostnameSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot
            /// </summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name. Settings from that slot
            /// will be applied on the source slot
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. Settings from the target slot will be applied
            /// onto this slot
            /// </param>
            public static object ApplySlotConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ApplySlotConfigurationSlotAsync(resourceGroupName, name, slotSwapEntity, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot
            /// </summary>
            /// Applies the configuration settings from the target slot onto the current
            /// slot
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name. Settings from that slot
            /// will be applied on the source slot
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot. Settings from the target slot will be applied
            /// onto this slot
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApplySlotConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApplySlotConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates web app backup
            /// </summary>
            /// Creates web app backup
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupItem BackupSlot(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BackupSlotAsync(resourceGroupName, name, request, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates web app backup
            /// </summary>
            /// Creates web app backup
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> BackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BackupSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all available backups for web app
            /// </summary>
            /// Lists all available backups for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IPage<BackupItem> ListBackupsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all available backups for web app
            /// </summary>
            /// Lists all available backups for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItem>> ListBackupsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Discovers existing web app backups that can be restored
            /// </summary>
            /// Discovers existing web app backups that can be restored
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static RestoreRequest DiscoverRestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DiscoverRestoreSlotAsync(resourceGroupName, name, request, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Discovers existing web app backups that can be restored
            /// </summary>
            /// Discovers existing web app backups that can be restored
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreRequest> DiscoverRestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, RestoreRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DiscoverRestoreSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress.
            /// </summary>
            /// Gets status of a web app backup that may be in progress.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupItem GetBackupStatusSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetBackupStatusSlotAsync(resourceGroupName, name, backupId, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress.
            /// </summary>
            /// Gets status of a web app backup that may be in progress.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> GetBackupStatusSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupStatusSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a backup from Azure Storage
            /// </summary>
            /// Deletes a backup from Azure Storage
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupItem DeleteBackupSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteBackupSlotAsync(resourceGroupName, name, backupId, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a backup from Azure Storage
            /// </summary>
            /// Deletes a backup from Azure Storage
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> DeleteBackupSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBackupSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupItem ListBackupStatusSecretsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequest request, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupStatusSecretsSlotAsync(resourceGroupName, name, backupId, request, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// </summary>
            /// Gets status of a web app backup that may be in progress, including secrets
            /// associated with the backup, such as the Azure Storage SAS URL. Also can
            /// be used to update the SAS URL for the backup if a new URL is passed in
            /// the request body.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupItem> ListBackupStatusSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, BackupRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupStatusSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup to restore
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static RestoreResponse RestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).RestoreSlotAsync(resourceGroupName, name, backupId, request, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup to restore
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreResponse> RestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestoreSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup to restore
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static RestoreResponse BeginRestoreSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginRestoreSlotAsync(resourceGroupName, name, backupId, request, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restores a web app
            /// </summary>
            /// Restores a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='backupId'>
            /// Id of backup to restore
            /// </param>
            /// <param name='request'>
            /// Information on restore request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RestoreResponse> BeginRestoreSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string backupId, RestoreRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRestoreSlotWithHttpMessagesAsync(resourceGroupName, name, backupId, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the application settings of web app
            /// </summary>
            /// Updates the application settings of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static StringDictionary UpdateApplicationSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary appSettings, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateApplicationSettingsSlotAsync(resourceGroupName, name, appSettings, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the application settings of web app
            /// </summary>
            /// Updates the application settings of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='appSettings'>
            /// Application settings of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> UpdateApplicationSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary appSettings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateApplicationSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, appSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the application settings of web app
            /// </summary>
            /// Gets the application settings of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static StringDictionary ListApplicationSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListApplicationSettingsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the application settings of web app
            /// </summary>
            /// Gets the application settings of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListApplicationSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListApplicationSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web app
            /// </summary>
            /// Updates the Authentication / Authorization settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteAuthSettings UpdateAuthSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettings siteAuthSettings, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateAuthSettingsSlotAsync(resourceGroupName, name, siteAuthSettings, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Authentication / Authorization settings associated with web app
            /// </summary>
            /// Updates the Authentication / Authorization settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteAuthSettings'>
            /// Auth settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettings> UpdateAuthSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteAuthSettings siteAuthSettings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateAuthSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, siteAuthSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Authentication / Authorization settings associated with web app
            /// </summary>
            /// Gets the Authentication / Authorization settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteAuthSettings ListAuthSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListAuthSettingsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Authentication / Authorization settings associated with web app
            /// </summary>
            /// Gets the Authentication / Authorization settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteAuthSettings> ListAuthSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListAuthSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates backup configuration of web app
            /// </summary>
            /// Updates backup configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupRequest UpdateBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateBackupConfigurationSlotAsync(resourceGroupName, name, request, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates backup configuration of web app
            /// </summary>
            /// Updates backup configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='request'>
            /// Information on backup request
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> UpdateBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, BackupRequest request, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, request, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the backup configuration for a web app
            /// </summary>
            /// Removes the backup configuration for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object DeleteBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteBackupConfigurationSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the backup configuration for a web app
            /// </summary>
            /// Removes the backup configuration for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the backup configuration for a web app
            /// </summary>
            /// Gets the backup configuration for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static BackupRequest GetBackupConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetBackupConfigurationSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the backup configuration for a web app
            /// </summary>
            /// Gets the backup configuration for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<BackupRequest> GetBackupConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetBackupConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the connection strings associated with web app
            /// </summary>
            /// Updates the connection strings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static ConnectionStringDictionary UpdateConnectionStringsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionary connectionStrings, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateConnectionStringsSlotAsync(resourceGroupName, name, connectionStrings, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the connection strings associated with web app
            /// </summary>
            /// Updates the connection strings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='connectionStrings'>
            /// Connection strings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionary> UpdateConnectionStringsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, ConnectionStringDictionary connectionStrings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConnectionStringsSlotWithHttpMessagesAsync(resourceGroupName, name, connectionStrings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the connection strings associated with web app
            /// </summary>
            /// Gets the connection strings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static ConnectionStringDictionary ListConnectionStringsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListConnectionStringsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the connection strings associated with web app
            /// </summary>
            /// Gets the connection strings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ConnectionStringDictionary> ListConnectionStringsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListConnectionStringsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web app logs configuration
            /// </summary>
            /// Gets the web app logs configuration
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteLogsConfig GetDiagnosticLogsConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetDiagnosticLogsConfigurationSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web app logs configuration
            /// </summary>
            /// Gets the web app logs configuration
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> GetDiagnosticLogsConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDiagnosticLogsConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the meta data for web app
            /// </summary>
            /// Updates the meta data for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteLogsConfig'>
            /// Site logs configuration
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteLogsConfig UpdateDiagnosticLogsConfigSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateDiagnosticLogsConfigSlotAsync(resourceGroupName, name, siteLogsConfig, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the meta data for web app
            /// </summary>
            /// Updates the meta data for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteLogsConfig'>
            /// Site logs configuration
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteLogsConfig> UpdateDiagnosticLogsConfigSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteLogsConfig siteLogsConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDiagnosticLogsConfigSlotWithHttpMessagesAsync(resourceGroupName, name, siteLogsConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the meta data for web app
            /// </summary>
            /// Updates the meta data for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='metadata'>
            /// Meta data of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static StringDictionary UpdateMetadataSlot(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary metadata, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateMetadataSlotAsync(resourceGroupName, name, metadata, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the meta data for web app
            /// </summary>
            /// Updates the meta data for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='metadata'>
            /// Meta data of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> UpdateMetadataSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, StringDictionary metadata, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMetadataSlotWithHttpMessagesAsync(resourceGroupName, name, metadata, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web app meta data.
            /// </summary>
            /// Gets the web app meta data.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static StringDictionary ListMetadataSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetadataSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web app meta data.
            /// </summary>
            /// Gets the web app meta data.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StringDictionary> ListMetadataSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetadataSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web app publishing credentials
            /// </summary>
            /// Gets the web app publishing credentials
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static User ListPublishingCredentialsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPublishingCredentialsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web app publishing credentials
            /// </summary>
            /// Gets the web app publishing credentials
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> ListPublishingCredentialsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPublishingCredentialsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web app publishing credentials
            /// </summary>
            /// Gets the web app publishing credentials
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static User BeginListPublishingCredentialsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginListPublishingCredentialsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web app publishing credentials
            /// </summary>
            /// Gets the web app publishing credentials
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> BeginListPublishingCredentialsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginListPublishingCredentialsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Push settings associated with web app
            /// </summary>
            /// Updates the Push settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static PushSettings UpdateSitePushSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettings pushSettings, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateSitePushSettingsSlotAsync(resourceGroupName, name, pushSettings, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Push settings associated with web app
            /// </summary>
            /// Updates the Push settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='pushSettings'>
            /// Push settings associated with web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettings> UpdateSitePushSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, PushSettings pushSettings, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSitePushSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, pushSettings, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the Push settings associated with web app
            /// </summary>
            /// Gets the Push settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static PushSettings ListSitePushSettingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSitePushSettingsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the Push settings associated with web app
            /// </summary>
            /// Gets the Push settings associated with web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<PushSettings> ListSitePushSettingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSitePushSettingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the configuration of the web app
            /// </summary>
            /// Gets the configuration of the web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteConfig GetConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetConfigurationSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the configuration of the web app
            /// </summary>
            /// Gets the configuration of the web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> GetConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the configuration of web app
            /// </summary>
            /// Update the configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteConfig CreateOrUpdateConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateConfigurationSlotAsync(resourceGroupName, name, siteConfig, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the configuration of web app
            /// </summary>
            /// Update the configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> CreateOrUpdateConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, siteConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the configuration of web app
            /// </summary>
            /// Update the configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteConfig UpdateConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateConfigurationSlotAsync(resourceGroupName, name, siteConfig, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the configuration of web app
            /// </summary>
            /// Update the configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteConfig'>
            /// Request body that contains the configuraiton setting for the web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteConfig> UpdateConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteConfig siteConfig, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, siteConfig, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IPage<Deployment> ListDeploymentsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDeploymentsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListDeploymentsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the deployment
            /// </summary>
            /// Get the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static Deployment GetDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetDeploymentSlotAsync(resourceGroupName, name, id, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the deployment
            /// </summary>
            /// Get the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> GetDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment
            /// </summary>
            /// Create a deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='deployment'>
            /// Details of deployment
            /// </param>
            public static Deployment CreateDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, Deployment deployment)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateDeploymentSlotAsync(resourceGroupName, name, id, slot, deployment), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment
            /// </summary>
            /// Create a deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='deployment'>
            /// Details of deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> CreateDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, Deployment deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the deployment
            /// </summary>
            /// Delete the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object DeleteDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteDeploymentSlotAsync(resourceGroupName, name, id, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the deployment
            /// </summary>
            /// Delete the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get web app hostname bindings
            /// </summary>
            /// Get web app hostname bindings
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IPage<HostNameBinding> ListHostNameBindingsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHostNameBindingsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get web app hostname bindings
            /// </summary>
            /// Get web app hostname bindings
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBinding>> ListHostNameBindingsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get web app binding for a hostname
            /// </summary>
            /// Get web app binding for a hostname
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            public static HostNameBinding GetHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get web app binding for a hostname
            /// </summary>
            /// Get web app binding for a hostname
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> GetHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a web app hostname binding
            /// </summary>
            /// Creates a web app hostname binding
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='hostNameBinding'>
            /// Host name binding information
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static HostNameBinding CreateOrUpdateHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateHostNameBindingSlotAsync(resourceGroupName, name, hostName, hostNameBinding, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a web app hostname binding
            /// </summary>
            /// Creates a web app hostname binding
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='hostNameBinding'>
            /// Host name binding information
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostNameBinding> CreateOrUpdateHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string hostName, HostNameBinding hostNameBinding, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, hostName, hostNameBinding, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a host name binding
            /// </summary>
            /// Deletes a host name binding
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            public static object DeleteHostNameBindingSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteHostNameBindingSlotAsync(resourceGroupName, name, slot, hostName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a host name binding
            /// </summary>
            /// Deletes a host name binding
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='hostName'>
            /// Name of host
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHostNameBindingSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string hostName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHostNameBindingSlotWithHttpMessagesAsync(resourceGroupName, name, slot, hostName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnection GetHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// </summary>
            /// Retrieves a specific Service Bus Hybrid Connection used by this Web App.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> GetHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// </summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnection CreateOrUpdateHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// </summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> CreateOrUpdateHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// Removes a Hybrid Connection from this site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static object DeleteHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes a Hybrid Connection from this site.
            /// </summary>
            /// Removes a Hybrid Connection from this site.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// </summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnection UpdateHybridConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateHybridConnectionSlotAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// </summary>
            /// Creates a new Hybrid Connection using a Service Bus relay
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> UpdateHybridConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, HybridConnection connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateHybridConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection
            /// </summary>
            /// Gets the send key name and value for a Hybrid Connection
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static object ListHybridConnectionKeysSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHybridConnectionKeysSlotAsync(resourceGroupName, name, namespaceName, relayName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the send key name and value for a Hybrid Connection
            /// </summary>
            /// Gets the send key name and value for a Hybrid Connection
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='namespaceName'>
            /// The namespace for this hybrid connection
            /// </param>
            /// <param name='relayName'>
            /// The relay name for this hybrid connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListHybridConnectionKeysSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string namespaceName, string relayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionKeysSlotWithHttpMessagesAsync(resourceGroupName, name, namespaceName, relayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static HybridConnection ListHybridConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHybridConnectionsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// </summary>
            /// Retrieves all Service Bus Hybrid Connections used by this Web App.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HybridConnection> ListHybridConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHybridConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves all Biztalk Hybrid Connections associated with this web app.
            /// </summary>
            /// Retrieves all Biztalk Hybrid Connections associated with this web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static RelayServiceConnectionEntity ListRelayServiceConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListRelayServiceConnectionsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves all Biztalk Hybrid Connections associated with this web app.
            /// </summary>
            /// Retrieves all Biztalk Hybrid Connections associated with this web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> ListRelayServiceConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListRelayServiceConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a Biztalk Hybrid Connection identified by its entity name.
            /// </summary>
            /// Retrieves a Biztalk Hybrid Connection identified by its entity name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static RelayServiceConnectionEntity GetRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a Biztalk Hybrid Connection identified by its entity name.
            /// </summary>
            /// Retrieves a Biztalk Hybrid Connection identified by its entity name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> GetRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// </summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static RelayServiceConnectionEntity CreateOrUpdateRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// </summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> CreateOrUpdateRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the association to a Biztalk Hybrid Connection, identified by its
            /// entity name.
            /// </summary>
            /// Removes the association to a Biztalk Hybrid Connection, identified by its
            /// entity name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static object DeleteRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the association to a Biztalk Hybrid Connection, identified by its
            /// entity name.
            /// </summary>
            /// Removes the association to a Biztalk Hybrid Connection, identified by its
            /// entity name.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// </summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            public static RelayServiceConnectionEntity UpdateRelayServiceConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateRelayServiceConnectionSlotAsync(resourceGroupName, name, entityName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// </summary>
            /// Creates a new association to a Biztalk Hybrid Connection, or updates an
            /// existing one.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='entityName'>
            /// The name by which the Hybrid Connection is identified
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The details of the Hybrid Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for the web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RelayServiceConnectionEntity> UpdateRelayServiceConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string entityName, RelayServiceConnectionEntity connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRelayServiceConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, entityName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all instance of a web app
            /// </summary>
            /// Gets all instance of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IPage<SiteInstance> ListInstanceIdentifiersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceIdentifiersSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all instance of a web app
            /// </summary>
            /// Gets all instance of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            public static IPage<Deployment> ListInstanceDeploymentsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceDeploymentsSlotAsync(resourceGroupName, name, slot, instanceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListInstanceDeploymentsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the deployment
            /// </summary>
            /// Get the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            public static Deployment GetInstanceDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the deployment
            /// </summary>
            /// Get the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> GetInstanceDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInstanceDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create a deployment
            /// </summary>
            /// Create a deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            /// <param name='deployment'>
            /// Details of deployment
            /// </param>
            public static Deployment CreateInstanceDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, Deployment deployment)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId, deployment), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create a deployment
            /// </summary>
            /// Create a deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            /// <param name='deployment'>
            /// Details of deployment
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Deployment> CreateInstanceDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, Deployment deployment, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateInstanceDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, instanceId, deployment, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the deployment
            /// </summary>
            /// Delete the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            public static object DeleteInstanceDeploymentSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteInstanceDeploymentSlotAsync(resourceGroupName, name, id, slot, instanceId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the deployment
            /// </summary>
            /// Delete the deployment
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='id'>
            /// Id of the deployment
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='instanceId'>
            /// Id of web app instance
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteInstanceDeploymentSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string id, string slot, string instanceId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteInstanceDeploymentSlotWithHttpMessagesAsync(resourceGroupName, name, id, slot, instanceId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteCloneability IsCloneableSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).IsCloneableSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a new web app or modifies an existing web app.
            /// </summary>
            /// Creates a new web app or modifies an existing web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCloneability> IsCloneableSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsCloneableSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets metric definitions for web app
            /// </summary>
            /// Gets metric definitions for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IPage<MetricDefinition> ListMetricDefinitionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricDefinitionsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets metric definitions for web app
            /// </summary>
            /// Gets metric definitions for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> ListMetricDefinitionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets metrics for web app
            /// </summary>
            /// Gets metrics for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='details'>
            /// If true, metric details are included in response
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<ResourceMetric> ListMetricsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? details = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricsSlotAsync(resourceGroupName, name, slot, details, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets metrics for web app
            /// </summary>
            /// Gets metrics for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='details'>
            /// If true, metric details are included in response
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a view of all network features in use on this web app.
            /// </summary>
            /// Retrieves a view of all network features in use on this web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static NetworkFeatures ListNetworkFeaturesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string view, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListNetworkFeaturesSlotAsync(resourceGroupName, name, view, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a view of all network features in use on this web app.
            /// </summary>
            /// Retrieves a view of all network features in use on this web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='view'>
            /// The type of view. This can either be "summary" or "detailed".
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkFeatures> ListNetworkFeaturesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string view, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNetworkFeaturesSlotWithHttpMessagesAsync(resourceGroupName, name, view, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Start capturing network packets for the site
            /// </summary>
            /// Start capturing network packets for the site
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            public static string StartWebSiteNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).StartWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot, durationInSeconds), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Start capturing network packets for the site
            /// </summary>
            /// Start capturing network packets for the site
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='durationInSeconds'>
            /// The duration to keep capturing in seconds
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StartWebSiteNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, int? durationInSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWebSiteNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, durationInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site
            /// </summary>
            /// Stop ongoing capturing network packets for the site
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static string StopWebSiteNetworkTraceSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).StopWebSiteNetworkTraceSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stop ongoing capturing network packets for the site
            /// </summary>
            /// Stop ongoing capturing network packets for the site
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> StopWebSiteNetworkTraceSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopWebSiteNetworkTraceSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Generates new random app publishing password
            /// </summary>
            /// Generates new random app publishing password
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object GenerateNewSitePublishingPasswordSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GenerateNewSitePublishingPasswordSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Generates new random app publishing password
            /// </summary>
            /// Generates new random app publishing password
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GenerateNewSitePublishingPasswordSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GenerateNewSitePublishingPasswordSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the operation for a web app
            /// </summary>
            /// Gets the operation for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='operationId'>
            /// Id of an operation
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object GetOperationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetOperationSlotAsync(resourceGroupName, name, operationId, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the operation for a web app
            /// </summary>
            /// Gets the operation for a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='operationId'>
            /// Id of an operation
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetOperationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string operationId, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetOperationSlotWithHttpMessagesAsync(resourceGroupName, name, operationId, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets perfmon counters for web app
            /// </summary>
            /// Gets perfmon counters for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot. **** CURRENTLY UNUSED *****
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<PerfMonResponse> ListPerfMonCountersSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPerfMonCountersSlotAsync(resourceGroupName, name, slot, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app
            /// </summary>
            /// Gets perfmon counters for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot. **** CURRENTLY UNUSED *****
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(startTime eq '2014-01-01T00:00:00Z' and
            /// endTime eq '2014-12-31T23:59:59Z' and timeGrain eq
            /// duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersSlotWithHttpMessagesAsync(resourceGroupName, name, slot, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets sites's event logs
            /// </summary>
            /// Gets sites's event logs
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static IList<object> GetSitePhpErrorLogFlagSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSitePhpErrorLogFlagSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets sites's event logs
            /// </summary>
            /// Gets sites's event logs
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<object>> GetSitePhpErrorLogFlagSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSitePhpErrorLogFlagSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List premier add ons for web app
            /// </summary>
            /// List premier add ons for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='slot'>
            /// web app slot name
            /// </param>
            public static object ListPremierAddOnsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPremierAddOnsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List premier add ons for web app
            /// </summary>
            /// List premier add ons for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='slot'>
            /// web app slot name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListPremierAddOnsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPremierAddOnsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a specific premier add on
            /// </summary>
            /// Gets a specific premier add on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            /// <param name='slot'>
            /// web app slot name
            /// </param>
            public static object GetPremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a specific premier add on
            /// </summary>
            /// Gets a specific premier add on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            /// <param name='slot'>
            /// web app slot name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetPremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add premier add-on
            /// </summary>
            /// Add premier add-on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            /// <param name='premierAddOn'>
            /// Premier add on request
            /// </param>
            /// <param name='slot'>
            /// web app slot name
            /// </param>
            public static object AddPremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnRequest premierAddOn, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).AddPremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, premierAddOn, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add premier add-on
            /// </summary>
            /// Add premier add-on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            /// <param name='premierAddOn'>
            /// Premier add on request
            /// </param>
            /// <param name='slot'>
            /// web app slot name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> AddPremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, PremierAddOnRequest premierAddOn, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.AddPremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, premierAddOn, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete premier add-on
            /// </summary>
            /// Delete premier add-on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            /// <param name='slot'>
            /// web app slot name
            /// </param>
            public static object DeletePremierAddOnSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeletePremierAddOnSlotAsync(resourceGroupName, name, premierAddOnName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete premier add-on
            /// </summary>
            /// Delete premier add-on
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// web app name
            /// </param>
            /// <param name='premierAddOnName'>
            /// Premier add on
            /// </param>
            /// <param name='slot'>
            /// web app slot name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeletePremierAddOnSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string premierAddOnName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeletePremierAddOnSlotWithHttpMessagesAsync(resourceGroupName, name, premierAddOnName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the publishing profile for web app
            /// </summary>
            /// Gets the publishing profile for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Specifies options for publishing profile. Pass
            /// CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static System.IO.Stream ListPublishingProfileXmlWithSecretsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions options, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPublishingProfileXmlWithSecretsSlotAsync(resourceGroupName, name, options, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the publishing profile for web app
            /// </summary>
            /// Gets the publishing profile for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='options'>
            /// Specifies options for publishing profile. Pass
            /// CsmPublishingProfileOptions.Format=FileZilla3 for FileZilla FTP format.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.IO.Stream> ListPublishingProfileXmlWithSecretsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmPublishingProfileOptions options, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                var _result = await operations.ListPublishingProfileXmlWithSecretsSlotWithHttpMessagesAsync(resourceGroupName, name, options, slot, null, cancellationToken).ConfigureAwait(false);
                _result.Request.Dispose();
                return _result.Body;
            }

            /// <summary>
            /// Recovers a deleted web app
            /// </summary>
            /// Recovers a deleted web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static RecoverResponse RecoverSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).RecoverSlotAsync(resourceGroupName, name, recoveryEntity, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app
            /// </summary>
            /// Recovers a deleted web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoverResponse> RecoverSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RecoverSlotWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Recovers a deleted web app
            /// </summary>
            /// Recovers a deleted web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static RecoverResponse BeginRecoverSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginRecoverSlotAsync(resourceGroupName, name, recoveryEntity, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Recovers a deleted web app
            /// </summary>
            /// Recovers a deleted web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='recoveryEntity'>
            /// Snapshot data used for web app recovery. Snapshot information can be
            /// obtained by calling GetDeletedSites or GetSiteSnapshots API.
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RecoverResponse> BeginRecoverSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSiteRecoveryEntity recoveryEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginRecoverSlotWithHttpMessagesAsync(resourceGroupName, name, recoveryEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling ApplySlotConfig API
            /// </summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling ApplySlotConfig API
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object ResetSlotConfigurationSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ResetSlotConfigurationSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling ApplySlotConfig API
            /// </summary>
            /// Resets the configuration settings of the current slot if they were
            /// previously modified by calling ApplySlotConfig API
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResetSlotConfigurationSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResetSlotConfigurationSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Restarts web app
            /// </summary>
            /// Restarts web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the app if
            /// necessary. Hard restart always restarts and reprovisions the app
            /// </param>
            /// <param name='synchronous'>
            /// If true then the API will block until the app has been restarted
            /// </param>
            public static object RestartSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).RestartSlotAsync(resourceGroupName, name, slot, softRestart, synchronous), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Restarts web app
            /// </summary>
            /// Restarts web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='softRestart'>
            /// Soft restart applies the configuration settings and restarts the app if
            /// necessary. Hard restart always restarts and reprovisions the app
            /// </param>
            /// <param name='synchronous'>
            /// If true then the API will block until the app has been restarted
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RestartSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, bool? softRestart = default(bool?), bool? synchronous = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RestartSlotWithHttpMessagesAsync(resourceGroupName, name, slot, softRestart, synchronous, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots
            /// </summary>
            /// Get the difference in configuration settings between two web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot
            /// </param>
            public static IPage<SlotDifference> GetSlotsDifferencesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSlotsDifferencesSlotAsync(resourceGroupName, name, slotSwapEntity, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots
            /// </summary>
            /// Get the difference in configuration settings between two web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='slot'>
            /// Name of the source slot
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> GetSlotsDifferencesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps web app slots
            /// </summary>
            /// Swaps web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='slot'>
            /// Name of source slot for the swap
            /// </param>
            public static object SwapSlotsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).SwapSlotsSlotAsync(resourceGroupName, name, slotSwapEntity, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps web app slots
            /// </summary>
            /// Swaps web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='slot'>
            /// Name of source slot for the swap
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SwapSlotsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SwapSlotsSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps web app slots
            /// </summary>
            /// Swaps web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='slot'>
            /// Name of source slot for the swap
            /// </param>
            public static object BeginSwapSlotsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginSwapSlotsSlotAsync(resourceGroupName, name, slotSwapEntity, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps web app slots
            /// </summary>
            /// Swaps web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='slot'>
            /// Name of source slot for the swap
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginSwapSlotsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSwapSlotsSlotWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// Returns all Snapshots to the user.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            /// <param name='slot'>
            /// Website Slot
            /// </param>
            public static IPage<Snapshot> ListSnapshotsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSnapshotsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// Returns all Snapshots to the user.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            /// <param name='slot'>
            /// Website Slot
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the source control configuration of web app
            /// </summary>
            /// Get the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteSourceControl GetSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSourceControlSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the source control configuration of web app
            /// </summary>
            /// Get the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> GetSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the source control configuration of web app
            /// </summary>
            /// Update the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteSourceControl CreateOrUpdateSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateSourceControlSlotAsync(resourceGroupName, name, siteSourceControl, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the source control configuration of web app
            /// </summary>
            /// Update the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> CreateOrUpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete source control configuration of web app
            /// </summary>
            /// Delete source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object DeleteSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteSourceControlSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete source control configuration of web app
            /// </summary>
            /// Delete source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the source control configuration of web app
            /// </summary>
            /// Update the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static SiteSourceControl UpdateSourceControlSlot(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateSourceControlSlotAsync(resourceGroupName, name, siteSourceControl, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the source control configuration of web app
            /// </summary>
            /// Update the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> UpdateSourceControlSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSourceControlSlotWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts web app
            /// </summary>
            /// Starts web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object StartSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).StartSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts web app
            /// </summary>
            /// Starts web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StartSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops web app
            /// </summary>
            /// Stops web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object StopSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).StopSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops web app
            /// </summary>
            /// Stops web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StopSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sync web app repository
            /// </summary>
            /// Sync web app repository
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            public static object SyncRepositorySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).SyncRepositorySlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sync web app repository
            /// </summary>
            /// Sync web app repository
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SyncRepositorySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SyncRepositorySlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the quota usage numbers for web app
            /// </summary>
            /// Gets the quota usage numbers for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='filter'>
            /// Return only usages specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<CsmUsageQuota> ListUsagesSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListUsagesSlotAsync(resourceGroupName, name, slot, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage numbers for web app
            /// </summary>
            /// Gets the quota usage numbers for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slot'>
            /// Name of web app slot. If not specified then will default to production
            /// slot.
            /// </param>
            /// <param name='filter'>
            /// Return only usages specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesSlotWithHttpMessagesAsync(resourceGroupName, name, slot, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a list of all Virtual Network Connections associated with this
            /// web app.
            /// </summary>
            /// Retrieves a list of all Virtual Network Connections associated with this
            /// web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static IList<VnetInfo> ListVnetConnectionsSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListVnetConnectionsSlotAsync(resourceGroupName, name, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a list of all Virtual Network Connections associated with this
            /// web app.
            /// </summary>
            /// Retrieves a list of all Virtual Network Connections associated with this
            /// web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfo>> ListVnetConnectionsSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVnetConnectionsSlotWithHttpMessagesAsync(resourceGroupName, name, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a specific Virtual Network Connection associated with this web
            /// app.
            /// </summary>
            /// Retrieves a specific Virtual Network Connection associated with this web
            /// app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static VnetInfo GetVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a specific Virtual Network Connection associated with this web
            /// app.
            /// </summary>
            /// Retrieves a specific Virtual Network Connection associated with this web
            /// app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> GetVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// </summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static VnetInfo CreateOrUpdateVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateVnetConnectionSlotAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// </summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> CreateOrUpdateVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the specified Virtual Network Connection association from this web
            /// app.
            /// </summary>
            /// Removes the specified Virtual Network Connection association from this web
            /// app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static object DeleteVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteVnetConnectionSlotAsync(resourceGroupName, name, vnetName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the specified Virtual Network Connection association from this web
            /// app.
            /// </summary>
            /// Removes the specified Virtual Network Connection association from this web
            /// app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// </summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static VnetInfo UpdateVnetConnectionSlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateVnetConnectionSlotAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// </summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> UpdateVnetConnectionSlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionSlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a Virtual Network connection gateway associated with this web
            /// app and virtual network.
            /// </summary>
            /// Retrieves a Virtual Network connection gateway associated with this web
            /// app and virtual network.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static object GetVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a Virtual Network connection gateway associated with this web
            /// app and virtual network.
            /// </summary>
            /// Retrieves a Virtual Network connection gateway associated with this web
            /// app and virtual network.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Virtual Network Gateway.
            /// </summary>
            /// Updates the Virtual Network Gateway.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static VnetGateway CreateOrUpdateVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Virtual Network Gateway.
            /// </summary>
            /// Updates the Virtual Network Gateway.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> CreateOrUpdateVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Virtual Network Gateway.
            /// </summary>
            /// Updates the Virtual Network Gateway.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            public static VnetGateway UpdateVnetConnectionGatewaySlot(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateVnetConnectionGatewaySlotAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Virtual Network Gateway.
            /// </summary>
            /// Updates the Virtual Network Gateway.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='slot'>
            /// The name of the slot for this web app.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> UpdateVnetConnectionGatewaySlotAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionGatewaySlotWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots
            /// </summary>
            /// Get the difference in configuration settings between two web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            public static IPage<SlotDifference> GetSlotsDifferencesFromProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSlotsDifferencesFromProductionAsync(resourceGroupName, name, slotSwapEntity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots
            /// </summary>
            /// Get the difference in configuration settings between two web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> GetSlotsDifferencesFromProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesFromProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps web app slots
            /// </summary>
            /// Swaps web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            public static object SwapSlotWithProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).SwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps web app slots
            /// </summary>
            /// Swaps web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SwapSlotWithProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Swaps web app slots
            /// </summary>
            /// Swaps web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            public static object BeginSwapSlotWithProduction(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).BeginSwapSlotWithProductionAsync(resourceGroupName, name, slotSwapEntity), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Swaps web app slots
            /// </summary>
            /// Swaps web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='slotSwapEntity'>
            /// Request body that contains the target slot name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginSwapSlotWithProductionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CsmSlotEntity slotSwapEntity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSwapSlotWithProductionWithHttpMessagesAsync(resourceGroupName, name, slotSwapEntity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// Returns all Snapshots to the user.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            public static IPage<Snapshot> ListSnapshots(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSnapshotsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// Returns all Snapshots to the user.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='name'>
            /// Website Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the source control configuration of web app
            /// </summary>
            /// Get the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static SiteSourceControl GetSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSourceControlAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the source control configuration of web app
            /// </summary>
            /// Get the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> GetSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the source control configuration of web app
            /// </summary>
            /// Update the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            public static SiteSourceControl CreateOrUpdateSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateSourceControlAsync(resourceGroupName, name, siteSourceControl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the source control configuration of web app
            /// </summary>
            /// Update the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> CreateOrUpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete source control configuration of web app
            /// </summary>
            /// Delete source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object DeleteSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteSourceControlAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete source control configuration of web app
            /// </summary>
            /// Delete source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteSourceControlWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update the source control configuration of web app
            /// </summary>
            /// Update the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            public static SiteSourceControl UpdateSourceControl(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateSourceControlAsync(resourceGroupName, name, siteSourceControl), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update the source control configuration of web app
            /// </summary>
            /// Update the source control configuration of web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='siteSourceControl'>
            /// Request body that contains the source control parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteSourceControl> UpdateSourceControlAsync(this IWebAppsOperations operations, string resourceGroupName, string name, SiteSourceControl siteSourceControl, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateSourceControlWithHttpMessagesAsync(resourceGroupName, name, siteSourceControl, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Starts web app
            /// </summary>
            /// Starts web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object Start(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).StartAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Starts web app
            /// </summary>
            /// Starts web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StartAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StartWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Stops web app
            /// </summary>
            /// Stops web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object Stop(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).StopAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Stops web app
            /// </summary>
            /// Stops web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> StopAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.StopWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sync web app repository
            /// </summary>
            /// Sync web app repository
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            public static object SyncRepository(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).SyncRepositoryAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sync web app repository
            /// </summary>
            /// Sync web app repository
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SyncRepositoryAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SyncRepositoryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the quota usage numbers for web app
            /// </summary>
            /// Gets the quota usage numbers for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='filter'>
            /// Return only usages specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static IPage<CsmUsageQuota> ListUsages(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListUsagesAsync(resourceGroupName, name, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage numbers for web app
            /// </summary>
            /// Gets the quota usage numbers for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of web app
            /// </param>
            /// <param name='filter'>
            /// Return only usages specified in the filter. Filter is specified by using
            /// OData syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a list of all Virtual Network Connections associated with this
            /// web app.
            /// </summary>
            /// Retrieves a list of all Virtual Network Connections associated with this
            /// web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            public static IList<VnetInfo> ListVnetConnections(this IWebAppsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListVnetConnectionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a list of all Virtual Network Connections associated with this
            /// web app.
            /// </summary>
            /// Retrieves a list of all Virtual Network Connections associated with this
            /// web app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VnetInfo>> ListVnetConnectionsAsync(this IWebAppsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListVnetConnectionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a specific Virtual Network Connection associated with this web
            /// app.
            /// </summary>
            /// Retrieves a specific Virtual Network Connection associated with this web
            /// app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            public static VnetInfo GetVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetVnetConnectionAsync(resourceGroupName, name, vnetName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a specific Virtual Network Connection associated with this web
            /// app.
            /// </summary>
            /// Retrieves a specific Virtual Network Connection associated with this web
            /// app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> GetVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// </summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            public static VnetInfo CreateOrUpdateVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// </summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> CreateOrUpdateVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Removes the specified Virtual Network Connection association from this web
            /// app.
            /// </summary>
            /// Removes the specified Virtual Network Connection association from this web
            /// app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            public static object DeleteVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).DeleteVnetConnectionAsync(resourceGroupName, name, vnetName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Removes the specified Virtual Network Connection association from this web
            /// app.
            /// </summary>
            /// Removes the specified Virtual Network Connection association from this web
            /// app.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// </summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            public static VnetInfo UpdateVnetConnection(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateVnetConnectionAsync(resourceGroupName, name, vnetName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// </summary>
            /// Adds a Virtual Network Connection or updates it's properties.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties of this Virtual Network Connection
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetInfo> UpdateVnetConnectionAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, VnetInfo connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionWithHttpMessagesAsync(resourceGroupName, name, vnetName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves a Virtual Network connection gateway associated with this web
            /// app and virtual network.
            /// </summary>
            /// Retrieves a Virtual Network connection gateway associated with this web
            /// app and virtual network.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            public static object GetVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves a Virtual Network connection gateway associated with this web
            /// app and virtual network.
            /// </summary>
            /// Retrieves a Virtual Network connection gateway associated with this web
            /// app and virtual network.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Virtual Network Gateway.
            /// </summary>
            /// Updates the Virtual Network Gateway.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            public static VnetGateway CreateOrUpdateVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).CreateOrUpdateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Virtual Network Gateway.
            /// </summary>
            /// Updates the Virtual Network Gateway.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> CreateOrUpdateVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates the Virtual Network Gateway.
            /// </summary>
            /// Updates the Virtual Network Gateway.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            public static VnetGateway UpdateVnetConnectionGateway(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).UpdateVnetConnectionGatewayAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates the Virtual Network Gateway.
            /// </summary>
            /// Updates the Virtual Network Gateway.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name
            /// </param>
            /// <param name='name'>
            /// The name of the web app
            /// </param>
            /// <param name='vnetName'>
            /// The name of the Virtual Network
            /// </param>
            /// <param name='gatewayName'>
            /// The name of the gateway. The only gateway that exists presently is
            /// "primary"
            /// </param>
            /// <param name='connectionEnvelope'>
            /// The properties to update this gateway with.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VnetGateway> UpdateVnetConnectionGatewayAsync(this IWebAppsOperations operations, string resourceGroupName, string name, string vnetName, string gatewayName, VnetGateway connectionEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateVnetConnectionGatewayWithHttpMessagesAsync(resourceGroupName, name, vnetName, gatewayName, connectionEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all Web Apps for a subscription
            /// </summary>
            /// Gets all Web Apps for a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ListNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all Web Apps for a subscription
            /// </summary>
            /// Gets all Web Apps for a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets deleted web apps in subscription
            /// </summary>
            /// Gets deleted web apps in subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DeletedSite> ListDeletedNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDeletedNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets deleted web apps in subscription
            /// </summary>
            /// Gets deleted web apps in subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DeletedSite>> ListDeletedNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeletedNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the web apps for a subscription in the specified resource group
            /// </summary>
            /// Gets the web apps for a subscription in the specified resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ListByResourceGroupNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the web apps for a subscription in the specified resource group
            /// </summary>
            /// Gets the web apps for a subscription in the specified resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListByResourceGroupNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all available backups for web app
            /// </summary>
            /// Lists all available backups for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BackupItem> ListBackupsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all available backups for web app
            /// </summary>
            /// Lists all available backups for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItem>> ListBackupsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Deployment> ListDeploymentsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDeploymentsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListDeploymentsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get web app hostname bindings
            /// </summary>
            /// Get web app hostname bindings
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HostNameBinding> ListHostNameBindingsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHostNameBindingsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get web app hostname bindings
            /// </summary>
            /// Get web app hostname bindings
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBinding>> ListHostNameBindingsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all instance of a web app
            /// </summary>
            /// Gets all instance of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SiteInstance> ListInstanceIdentifiersNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceIdentifiersNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all instance of a web app
            /// </summary>
            /// Gets all instance of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Deployment> ListInstanceDeploymentsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceDeploymentsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListInstanceDeploymentsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets metric definitions for web app
            /// </summary>
            /// Gets metric definitions for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MetricDefinition> ListMetricDefinitionsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricDefinitionsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets metric definitions for web app
            /// </summary>
            /// Gets metric definitions for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> ListMetricDefinitionsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets metrics for web app
            /// </summary>
            /// Gets metrics for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetric> ListMetricsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets metrics for web app
            /// </summary>
            /// Gets metrics for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets perfmon counters for web app
            /// </summary>
            /// Gets perfmon counters for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PerfMonResponse> ListPerfMonCountersNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPerfMonCountersNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app
            /// </summary>
            /// Gets perfmon counters for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all the slots for a web apps
            /// </summary>
            /// Gets all the slots for a web apps
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Site> ListSlotsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSlotsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all the slots for a web apps
            /// </summary>
            /// Gets all the slots for a web apps
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Site>> ListSlotsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSlotsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all available backups for web app
            /// </summary>
            /// Lists all available backups for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<BackupItem> ListBackupsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListBackupsSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all available backups for web app
            /// </summary>
            /// Lists all available backups for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<BackupItem>> ListBackupsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListBackupsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Deployment> ListDeploymentsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListDeploymentsSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListDeploymentsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListDeploymentsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get web app hostname bindings
            /// </summary>
            /// Get web app hostname bindings
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<HostNameBinding> ListHostNameBindingsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListHostNameBindingsSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get web app hostname bindings
            /// </summary>
            /// Get web app hostname bindings
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<HostNameBinding>> ListHostNameBindingsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListHostNameBindingsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets all instance of a web app
            /// </summary>
            /// Gets all instance of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SiteInstance> ListInstanceIdentifiersSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceIdentifiersSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets all instance of a web app
            /// </summary>
            /// Gets all instance of a web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SiteInstance>> ListInstanceIdentifiersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceIdentifiersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Deployment> ListInstanceDeploymentsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListInstanceDeploymentsSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List deployments
            /// </summary>
            /// List deployments
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Deployment>> ListInstanceDeploymentsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListInstanceDeploymentsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets metric definitions for web app
            /// </summary>
            /// Gets metric definitions for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<MetricDefinition> ListMetricDefinitionsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricDefinitionsSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets metric definitions for web app
            /// </summary>
            /// Gets metric definitions for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<MetricDefinition>> ListMetricDefinitionsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricDefinitionsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets metrics for web app
            /// </summary>
            /// Gets metrics for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<ResourceMetric> ListMetricsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListMetricsSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets metrics for web app
            /// </summary>
            /// Gets metrics for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<ResourceMetric>> ListMetricsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListMetricsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets perfmon counters for web app
            /// </summary>
            /// Gets perfmon counters for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<PerfMonResponse> ListPerfMonCountersSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListPerfMonCountersSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets perfmon counters for web app
            /// </summary>
            /// Gets perfmon counters for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<PerfMonResponse>> ListPerfMonCountersSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPerfMonCountersSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots
            /// </summary>
            /// Get the difference in configuration settings between two web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SlotDifference> GetSlotsDifferencesSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSlotsDifferencesSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots
            /// </summary>
            /// Get the difference in configuration settings between two web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> GetSlotsDifferencesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// Returns all Snapshots to the user.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Snapshot> ListSnapshotsSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSnapshotsSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// Returns all Snapshots to the user.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the quota usage numbers for web app
            /// </summary>
            /// Gets the quota usage numbers for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CsmUsageQuota> ListUsagesSlotNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListUsagesSlotNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage numbers for web app
            /// </summary>
            /// Gets the quota usage numbers for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesSlotNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots
            /// </summary>
            /// Get the difference in configuration settings between two web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SlotDifference> GetSlotsDifferencesFromProductionNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).GetSlotsDifferencesFromProductionNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the difference in configuration settings between two web app slots
            /// </summary>
            /// Get the difference in configuration settings between two web app slots
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SlotDifference>> GetSlotsDifferencesFromProductionNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSlotsDifferencesFromProductionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// Returns all Snapshots to the user.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Snapshot> ListSnapshotsNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListSnapshotsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns all Snapshots to the user.
            /// </summary>
            /// Returns all Snapshots to the user.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Snapshot>> ListSnapshotsNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSnapshotsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the quota usage numbers for web app
            /// </summary>
            /// Gets the quota usage numbers for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<CsmUsageQuota> ListUsagesNext(this IWebAppsOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebAppsOperations)s).ListUsagesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the quota usage numbers for web app
            /// </summary>
            /// Gets the quota usage numbers for web app
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<CsmUsageQuota>> ListUsagesNextAsync(this IWebAppsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListUsagesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
