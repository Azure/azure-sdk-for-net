// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class HostingEnvironmentsOperationsExtensions
    {
            /// <summary>
            /// Get properties of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static HostingEnvironment GetHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironment> GetHostingEnvironmentAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Properties of hostingEnvironment (App Service Environment)
            /// </param>
            public static HostingEnvironment CreateOrUpdateHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment hostingEnvironmentEnvelope)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).CreateOrUpdateHostingEnvironmentAsync(resourceGroupName, name, hostingEnvironmentEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Properties of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironment> CreateOrUpdateHostingEnvironmentAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment hostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Properties of hostingEnvironment (App Service Environment)
            /// </param>
            public static HostingEnvironment BeginCreateOrUpdateHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment hostingEnvironmentEnvelope)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).BeginCreateOrUpdateHostingEnvironmentAsync(resourceGroupName, name, hostingEnvironmentEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='hostingEnvironmentEnvelope'>
            /// Properties of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironment> BeginCreateOrUpdateHostingEnvironmentAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, HostingEnvironment hostingEnvironmentEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, hostingEnvironmentEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the hostingEnvironment (App Service Environment) contains
            /// resources
            /// </param>
            public static object DeleteHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).DeleteHostingEnvironmentAsync(resourceGroupName, name, forceDelete), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the hostingEnvironment (App Service Environment) contains
            /// resources
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteHostingEnvironmentAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the hostingEnvironment (App Service Environment) contains
            /// resources
            /// </param>
            public static object BeginDeleteHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).BeginDeleteHostingEnvironmentAsync(resourceGroupName, name, forceDelete), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='forceDelete'>
            /// Delete even if the hostingEnvironment (App Service Environment) contains
            /// resources
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> BeginDeleteHostingEnvironmentAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? forceDelete = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, forceDelete, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get diagnostic information for hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static IList<HostingEnvironmentDiagnostics> GetHostingEnvironmentDiagnostics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentDiagnosticsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get diagnostic information for hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<HostingEnvironmentDiagnostics>> GetHostingEnvironmentDiagnosticsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentDiagnosticsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get diagnostic information for hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='diagnosticsName'>
            /// Name of the diagnostics
            /// </param>
            public static HostingEnvironmentDiagnostics GetHostingEnvironmentDiagnosticsItem(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string diagnosticsName)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentDiagnosticsItemAsync(resourceGroupName, name, diagnosticsName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get diagnostic information for hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='diagnosticsName'>
            /// Name of the diagnostics
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironmentDiagnostics> GetHostingEnvironmentDiagnosticsItemAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string diagnosticsName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentDiagnosticsItemWithHttpMessagesAsync(resourceGroupName, name, diagnosticsName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get used, available, and total worker capacity for hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static StampCapacityCollection GetHostingEnvironmentCapacities(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentCapacitiesAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get used, available, and total worker capacity for hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StampCapacityCollection> GetHostingEnvironmentCapacitiesAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentCapacitiesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get IP addresses assigned to the hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static AddressResponse GetHostingEnvironmentVips(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentVipsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get IP addresses assigned to the hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AddressResponse> GetHostingEnvironmentVipsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentVipsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all hostingEnvironments (App Service Environments) in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            public static HostingEnvironmentCollection GetHostingEnvironments(this IHostingEnvironmentsOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentsAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all hostingEnvironments (App Service Environments) in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<HostingEnvironmentCollection> GetHostingEnvironmentsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentsWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reboots all machines in a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static object RebootHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).RebootHostingEnvironmentAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reboots all machines in a hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RebootHostingEnvironmentAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RebootHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all currently running operations on the hostingEnvironment (App
            /// Service Environment)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static object GetHostingEnvironmentOperations(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentOperationsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all currently running operations on the hostingEnvironment (App
            /// Service Environment)
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHostingEnvironmentOperationsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentOperationsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get status of an operation on a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='operationId'>
            /// operation identifier GUID
            /// </param>
            public static object GetHostingEnvironmentOperation(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string operationId)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentOperationAsync(resourceGroupName, name, operationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get status of an operation on a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='operationId'>
            /// operation identifier GUID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetHostingEnvironmentOperationAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentOperationWithHttpMessagesAsync(resourceGroupName, name, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get global metrics of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static ResourceMetricCollection GetHostingEnvironmentMetrics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentMetricsAsync(resourceGroupName, name, details, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get global metrics of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceMetricCollection> GetHostingEnvironmentMetricsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMetricsWithHttpMessagesAsync(resourceGroupName, name, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get global metric definitions of hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static MetricDefinition GetHostingEnvironmentMetricDefinitions(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentMetricDefinitionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get global metric definitions of hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricDefinition> GetHostingEnvironmentMetricDefinitionsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get global usages of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static CsmUsageQuotaCollection GetHostingEnvironmentUsages(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentUsagesAsync(resourceGroupName, name, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get global usages of hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CsmUsageQuotaCollection> GetHostingEnvironmentUsagesAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentUsagesWithHttpMessagesAsync(resourceGroupName, name, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='startTime'>
            /// Beginning time of metrics query
            /// </param>
            /// <param name='endTime'>
            /// End time of metrics query
            /// </param>
            /// <param name='timeGrain'>
            /// Time granularity of metrics query
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static ResourceMetricCollection GetHostingEnvironmentMultiRoleMetrics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string startTime = default(string), string endTime = default(string), string timeGrain = default(string), bool? details = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentMultiRoleMetricsAsync(resourceGroupName, name, startTime, endTime, timeGrain, details, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='startTime'>
            /// Beginning time of metrics query
            /// </param>
            /// <param name='endTime'>
            /// End time of metrics query
            /// </param>
            /// <param name='timeGrain'>
            /// Time granularity of metrics query
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceMetricCollection> GetHostingEnvironmentMultiRoleMetricsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string startTime = default(string), string endTime = default(string), string timeGrain = default(string), bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMultiRoleMetricsWithHttpMessagesAsync(resourceGroupName, name, startTime, endTime, timeGrain, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static ResourceMetricCollection GetHostingEnvironmentWebWorkerMetrics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, bool? details = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentWebWorkerMetricsAsync(resourceGroupName, name, workerPoolName, details, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceMetricCollection> GetHostingEnvironmentWebWorkerMetricsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebWorkerMetricsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a multiRole pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static MetricDefinitionCollection GetHostingEnvironmentMultiRoleMetricDefinitions(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentMultiRoleMetricDefinitionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a multiRole pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricDefinitionCollection> GetHostingEnvironmentMultiRoleMetricDefinitionsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMultiRoleMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a worker pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            public static MetricDefinitionCollection GetHostingEnvironmentWebWorkerMetricDefinitions(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentWebWorkerMetricDefinitionsAsync(resourceGroupName, name, workerPoolName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a worker pool of a hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MetricDefinitionCollection> GetHostingEnvironmentWebWorkerMetricDefinitionsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebWorkerMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get usages for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static UsageCollection GetHostingEnvironmentMultiRoleUsages(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentMultiRoleUsagesAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get usages for a multiRole pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsageCollection> GetHostingEnvironmentMultiRoleUsagesAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentMultiRoleUsagesWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get usages for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            public static UsageCollection GetHostingEnvironmentWebWorkerUsages(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentWebWorkerUsagesAsync(resourceGroupName, name, workerPoolName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get usages for a worker pool of a hostingEnvironment (App Service
            /// Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UsageCollection> GetHostingEnvironmentWebWorkerUsagesAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebWorkerUsagesWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all sites on the hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Comma separated list of site properties to include
            /// </param>
            public static SiteCollection GetHostingEnvironmentSites(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string))
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentSitesAsync(resourceGroupName, name, propertiesToInclude), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all sites on the hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='propertiesToInclude'>
            /// Comma separated list of site properties to include
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCollection> GetHostingEnvironmentSitesAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string propertiesToInclude = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentSitesWithHttpMessagesAsync(resourceGroupName, name, propertiesToInclude, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static ServerFarmCollection GetHostingEnvironmentWebHostingPlans(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentWebHostingPlansAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmCollection> GetHostingEnvironmentWebHostingPlansAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentWebHostingPlansWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static ServerFarmCollection GetHostingEnvironmentServerFarms(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetHostingEnvironmentServerFarmsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all serverfarms (App Service Plans) on the hostingEnvironment (App
            /// Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ServerFarmCollection> GetHostingEnvironmentServerFarmsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetHostingEnvironmentServerFarmsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all multi role pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static WorkerPoolCollection GetMultiRolePools(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetMultiRolePoolsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all multi role pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolCollection> GetMultiRolePoolsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get properties of a multiRool pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static WorkerPool GetMultiRolePool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetMultiRolePoolAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties of a multiRool pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> GetMultiRolePoolAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of multiRole pool
            /// </param>
            public static WorkerPool CreateOrUpdateMultiRolePool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPool multiRolePoolEnvelope)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).CreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of multiRole pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> CreateOrUpdateMultiRolePoolAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPool multiRolePoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of multiRole pool
            /// </param>
            public static WorkerPool BeginCreateOrUpdateMultiRolePool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPool multiRolePoolEnvelope)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).BeginCreateOrUpdateMultiRolePoolAsync(resourceGroupName, name, multiRolePoolEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='multiRolePoolEnvelope'>
            /// Properties of multiRole pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> BeginCreateOrUpdateMultiRolePoolAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, WorkerPool multiRolePoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateMultiRolePoolWithHttpMessagesAsync(resourceGroupName, name, multiRolePoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available skus for scaling a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static SkuInfoCollection GetMultiRolePoolSkus(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetMultiRolePoolSkusAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available skus for scaling a multiRole pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuInfoCollection> GetMultiRolePoolSkusAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolSkusWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all worker pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static WorkerPoolCollection GetWorkerPools(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetWorkerPoolsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all worker pools
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPoolCollection> GetWorkerPoolsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get properties of a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            public static WorkerPool GetWorkerPool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetWorkerPoolAsync(resourceGroupName, name, workerPoolName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get properties of a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> GetWorkerPoolAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of worker pool
            /// </param>
            public static WorkerPool CreateOrUpdateWorkerPool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPool workerPoolEnvelope)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).CreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> CreateOrUpdateWorkerPoolAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPool workerPoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of worker pool
            /// </param>
            public static WorkerPool BeginCreateOrUpdateWorkerPool(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPool workerPoolEnvelope)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).BeginCreateOrUpdateWorkerPoolAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='workerPoolEnvelope'>
            /// Properties of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<WorkerPool> BeginCreateOrUpdateWorkerPoolAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, WorkerPool workerPoolEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWorkerPoolWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, workerPoolEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get available skus for scaling a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            public static SkuInfoCollection GetWorkerPoolSkus(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetWorkerPoolSkusAsync(resourceGroupName, name, workerPoolName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get available skus for scaling a worker pool.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SkuInfoCollection> GetWorkerPoolSkusAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolSkusWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for a specific instance of a worker pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the worker pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            public static object GetWorkerPoolInstanceMetrics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance, bool? details = default(bool?), string filter = default(string))
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetWorkerPoolInstanceMetricsAsync(resourceGroupName, name, workerPoolName, instance, details, filter), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for a specific instance of a worker pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the worker pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='filter'>
            /// Return only usages/metrics specified in the filter. Filter conforms to
            /// odata syntax. Example: $filter=(name.value eq 'Metric1' or name.value eq
            /// 'Metric2') and startTime eq '2014-01-01T00:00:00Z' and endTime eq
            /// '2014-12-31T23:59:59Z' and timeGrain eq duration'[Hour|Minute|Day]'.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetWorkerPoolInstanceMetricsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance, bool? details = default(bool?), string filter = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolInstanceMetricsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, instance, details, filter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a worker pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the worker pool
            /// </param>
            public static object GetWorkerPoolInstanceMetricDefinitions(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetWorkerPoolInstanceMetricDefinitionsAsync(resourceGroupName, name, workerPoolName, instance), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a worker pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='workerPoolName'>
            /// Name of worker pool
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the worker pool
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetWorkerPoolInstanceMetricDefinitionsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string workerPoolName, string instance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWorkerPoolInstanceMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, workerPoolName, instance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metrics for a specific instance of a multiRole pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the multiRole pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            public static object GetMultiRolePoolInstanceMetrics(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string instance, bool? details = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetMultiRolePoolInstanceMetricsAsync(resourceGroupName, name, instance, details), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metrics for a specific instance of a multiRole pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the multiRole pool
            /// </param>
            /// <param name='details'>
            /// Include instance details
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMultiRolePoolInstanceMetricsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string instance, bool? details = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolInstanceMetricsWithHttpMessagesAsync(resourceGroupName, name, instance, details, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a multiRole pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the multiRole pool&amp;gt;
            /// </param>
            public static object GetMultiRolePoolInstanceMetricDefinitions(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string instance)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).GetMultiRolePoolInstanceMetricDefinitionsAsync(resourceGroupName, name, instance), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get metric definitions for a specific instance of a multiRole pool of a
            /// hostingEnvironment (App Service Environment).
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='instance'>
            /// Name of instance in the multiRole pool&amp;gt;
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMultiRolePoolInstanceMetricDefinitionsAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, string instance, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMultiRolePoolInstanceMetricDefinitionsWithHttpMessagesAsync(resourceGroupName, name, instance, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static SiteCollection SuspendHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).SuspendHostingEnvironmentAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCollection> SuspendHostingEnvironmentAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SuspendHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static SiteCollection BeginSuspendHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).BeginSuspendHostingEnvironmentAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Suspends the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCollection> BeginSuspendHostingEnvironmentAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginSuspendHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static SiteCollection ResumeHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).ResumeHostingEnvironmentAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCollection> ResumeHostingEnvironmentAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResumeHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            public static SiteCollection BeginResumeHostingEnvironment(this IHostingEnvironmentsOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IHostingEnvironmentsOperations)s).BeginResumeHostingEnvironmentAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resumes the hostingEnvironment.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of resource group
            /// </param>
            /// <param name='name'>
            /// Name of hostingEnvironment (App Service Environment)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SiteCollection> BeginResumeHostingEnvironmentAsync( this IHostingEnvironmentsOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginResumeHostingEnvironmentWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
