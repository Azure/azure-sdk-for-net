// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CertificatesOperations.
    /// </summary>
    public static partial class CertificatesOperationsExtensions
    {
            /// <summary>
            /// Get all certificates for a subscription
            /// </summary>
            /// Get all certificates for a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<Certificate> List(this ICertificatesOperations operations)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).ListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all certificates for a subscription
            /// </summary>
            /// Get all certificates for a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Certificate>> ListAsync(this ICertificatesOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get certificates for a subscription in the specified resource group.
            /// </summary>
            /// Get certificates for a subscription in the specified resource group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            public static IPage<Certificate> ListByResourceGroup(this ICertificatesOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).ListByResourceGroupAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificates for a subscription in the specified resource group.
            /// </summary>
            /// Get certificates for a subscription in the specified resource group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Certificate>> ListByResourceGroupAsync(this ICertificatesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a certificate by certificate name for a subscription in the specified
            /// resource group.
            /// </summary>
            /// Get a certificate by certificate name for a subscription in the specified
            /// resource group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            public static Certificate Get(this ICertificatesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).GetAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a certificate by certificate name for a subscription in the specified
            /// resource group.
            /// </summary>
            /// Get a certificate by certificate name for a subscription in the specified
            /// resource group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Certificate> GetAsync(this ICertificatesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or modifies an existing certificate.
            /// </summary>
            /// Creates or modifies an existing certificate.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='certificateEnvelope'>
            /// Details of certificate if it exists already.
            /// </param>
            public static Certificate CreateOrUpdate(this ICertificatesOperations operations, string resourceGroupName, string name, Certificate certificateEnvelope)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).CreateOrUpdateAsync(resourceGroupName, name, certificateEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or modifies an existing certificate.
            /// </summary>
            /// Creates or modifies an existing certificate.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='certificateEnvelope'>
            /// Details of certificate if it exists already.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Certificate> CreateOrUpdateAsync(this ICertificatesOperations operations, string resourceGroupName, string name, Certificate certificateEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, certificateEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a certificate by name in a specificed subscription and
            /// resourcegroup.
            /// </summary>
            /// Delete a certificate by name in a specificed subscription and
            /// resourcegroup.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate to be deleted.
            /// </param>
            public static object Delete(this ICertificatesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).DeleteAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a certificate by name in a specificed subscription and
            /// resourcegroup.
            /// </summary>
            /// Delete a certificate by name in a specificed subscription and
            /// resourcegroup.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate to be deleted.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this ICertificatesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or modifies an existing certificate.
            /// </summary>
            /// Creates or modifies an existing certificate.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='certificateEnvelope'>
            /// Details of certificate if it exists already.
            /// </param>
            public static Certificate Update(this ICertificatesOperations operations, string resourceGroupName, string name, Certificate certificateEnvelope)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).UpdateAsync(resourceGroupName, name, certificateEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or modifies an existing certificate.
            /// </summary>
            /// Creates or modifies an existing certificate.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='certificateEnvelope'>
            /// Details of certificate if it exists already.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Certificate> UpdateAsync(this ICertificatesOperations operations, string resourceGroupName, string name, Certificate certificateEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, name, certificateEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the certificate signing requests for a subscription in the specified
            /// resource group
            /// </summary>
            /// Gets the certificate signing requests for a subscription in the specified
            /// resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            public static IList<Csr> ListCsrs(this ICertificatesOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).ListCsrsAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the certificate signing requests for a subscription in the specified
            /// resource group
            /// </summary>
            /// Gets the certificate signing requests for a subscription in the specified
            /// resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Csr>> ListCsrsAsync(this ICertificatesOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCsrsWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets a certificate signing request by certificate name for a subscription
            /// in the specified resource group
            /// </summary>
            /// Gets a certificate signing request by certificate name for a subscription
            /// in the specified resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            public static Csr GetCsr(this ICertificatesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).GetCsrAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a certificate signing request by certificate name for a subscription
            /// in the specified resource group
            /// </summary>
            /// Gets a certificate signing request by certificate name for a subscription
            /// in the specified resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Csr> GetCsrAsync(this ICertificatesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCsrWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or modifies an existing certificate signing request.
            /// </summary>
            /// Creates or modifies an existing certificate signing request.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='csrEnvelope'>
            /// Details of certificate signing request if it exists already.
            /// </param>
            public static Csr CreateOrUpdateCsr(this ICertificatesOperations operations, string resourceGroupName, string name, Csr csrEnvelope)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).CreateOrUpdateCsrAsync(resourceGroupName, name, csrEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or modifies an existing certificate signing request.
            /// </summary>
            /// Creates or modifies an existing certificate signing request.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='csrEnvelope'>
            /// Details of certificate signing request if it exists already.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Csr> CreateOrUpdateCsrAsync(this ICertificatesOperations operations, string resourceGroupName, string name, Csr csrEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateCsrWithHttpMessagesAsync(resourceGroupName, name, csrEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete the certificate signing request.
            /// </summary>
            /// Delete the certificate signing request.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate signing request.
            /// </param>
            public static object DeleteCsr(this ICertificatesOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).DeleteCsrAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete the certificate signing request.
            /// </summary>
            /// Delete the certificate signing request.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate signing request.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCsrAsync(this ICertificatesOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCsrWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or modifies an existing certificate signing request.
            /// </summary>
            /// Creates or modifies an existing certificate signing request.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='csrEnvelope'>
            /// Details of certificate signing request if it exists already.
            /// </param>
            public static Csr UpdateCsr(this ICertificatesOperations operations, string resourceGroupName, string name, Csr csrEnvelope)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).UpdateCsrAsync(resourceGroupName, name, csrEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or modifies an existing certificate signing request.
            /// </summary>
            /// Creates or modifies an existing certificate signing request.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='name'>
            /// Name of the certificate.
            /// </param>
            /// <param name='csrEnvelope'>
            /// Details of certificate signing request if it exists already.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Csr> UpdateCsrAsync(this ICertificatesOperations operations, string resourceGroupName, string name, Csr csrEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateCsrWithHttpMessagesAsync(resourceGroupName, name, csrEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get all certificates for a subscription
            /// </summary>
            /// Get all certificates for a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Certificate> ListNext(this ICertificatesOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get all certificates for a subscription
            /// </summary>
            /// Get all certificates for a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Certificate>> ListNextAsync(this ICertificatesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get certificates for a subscription in the specified resource group.
            /// </summary>
            /// Get certificates for a subscription in the specified resource group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Certificate> ListByResourceGroupNext(this ICertificatesOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((ICertificatesOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificates for a subscription in the specified resource group.
            /// </summary>
            /// Get certificates for a subscription in the specified resource group.
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Certificate>> ListByResourceGroupNextAsync(this ICertificatesOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
