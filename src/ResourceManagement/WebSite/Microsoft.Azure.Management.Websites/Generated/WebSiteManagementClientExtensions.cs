// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for WebSiteManagementClient.
    /// </summary>
    public static partial class WebSiteManagementClientExtensions
    {
            /// <summary>
            /// Gets the source controls available for Azure websites
            /// </summary>
            /// Gets the source controls available for Azure websites
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<SourceControl> ListSourceControls(this IWebSiteManagementClient operations)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).ListSourceControlsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the source controls available for Azure websites
            /// </summary>
            /// Gets the source controls available for Azure websites
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SourceControl>> ListSourceControlsAsync(this IWebSiteManagementClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSourceControlsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Check if resource name is available
            /// </summary>
            /// Check if resource name is available
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Name availability request
            /// </param>
            public static ResourceNameAvailability CheckNameAvailability(this IWebSiteManagementClient operations, ResourceNameAvailabilityRequest request)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).CheckNameAvailabilityAsync(request), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Check if resource name is available
            /// </summary>
            /// Check if resource name is available
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// Name availability request
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ResourceNameAvailability> CheckNameAvailabilityAsync(this IWebSiteManagementClient operations, ResourceNameAvailabilityRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of available geo regions
            /// </summary>
            /// Gets list of available geo regions
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sku'>
            /// Filter only to regions that support this sku
            /// </param>
            public static IPage<GeoRegion> GetSubscriptionGeoRegions(this IWebSiteManagementClient operations, string sku = default(string))
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).GetSubscriptionGeoRegionsAsync(sku), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of available geo regions
            /// </summary>
            /// Gets list of available geo regions
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='sku'>
            /// Filter only to regions that support this sku
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GeoRegion>> GetSubscriptionGeoRegionsAsync(this IWebSiteManagementClient operations, string sku = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionGeoRegionsWithHttpMessagesAsync(sku, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Whether hosting environment name is available
            /// </summary>
            /// Whether hosting environment name is available
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Hosting environment name
            /// </param>
            public static object IsHostingEnvironmentNameAvailable(this IWebSiteManagementClient operations, string name)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).IsHostingEnvironmentNameAvailableAsync(name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Whether hosting environment name is available
            /// </summary>
            /// Whether hosting environment name is available
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Hosting environment name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsHostingEnvironmentNameAvailableAsync(this IWebSiteManagementClient operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsHostingEnvironmentNameAvailableWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Whether hosting environment name is available
            /// </summary>
            /// Whether hosting environment name is available
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Hosting environment name
            /// </param>
            public static object IsHostingEnvironmentWithLegacyNameAvailable(this IWebSiteManagementClient operations, string name)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).IsHostingEnvironmentWithLegacyNameAvailableAsync(name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Whether hosting environment name is available
            /// </summary>
            /// Whether hosting environment name is available
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// Hosting environment name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> IsHostingEnvironmentWithLegacyNameAvailableAsync(this IWebSiteManagementClient operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.IsHostingEnvironmentWithLegacyNameAvailableWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List premier add on offers
            /// </summary>
            /// List premier add on offers
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ListPremierAddOnOffers(this IWebSiteManagementClient operations)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).ListPremierAddOnOffersAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List premier add on offers
            /// </summary>
            /// List premier add on offers
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListPremierAddOnOffersAsync(this IWebSiteManagementClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListPremierAddOnOffersWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets publishing credentials for the subscription owner
            /// </summary>
            /// Gets publishing credentials for the subscription owner
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static User GetPublishingCredentials(this IWebSiteManagementClient operations)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).GetPublishingCredentialsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets publishing credentials for the subscription owner
            /// </summary>
            /// Gets publishing credentials for the subscription owner
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> GetPublishingCredentialsAsync(this IWebSiteManagementClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPublishingCredentialsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates publishing credentials for the subscription owner
            /// </summary>
            /// Updates publishing credentials for the subscription owner
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestMessage'>
            /// requestMessage with new publishing credentials
            /// </param>
            public static User UpdatePublishingCredentials(this IWebSiteManagementClient operations, User requestMessage)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).UpdatePublishingCredentialsAsync(requestMessage), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates publishing credentials for the subscription owner
            /// </summary>
            /// Updates publishing credentials for the subscription owner
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='requestMessage'>
            /// requestMessage with new publishing credentials
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<User> UpdatePublishingCredentialsAsync(this IWebSiteManagementClient operations, User requestMessage, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdatePublishingCredentialsWithHttpMessagesAsync(requestMessage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get skus
            /// </summary>
            /// Get skus
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static object ListSkus(this IWebSiteManagementClient operations)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).ListSkusAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get skus
            /// </summary>
            /// Get skus
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ListSkusAsync(this IWebSiteManagementClient operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSkusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Move resources between resource groups
            /// </summary>
            /// Move resources between resource groups
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='moveResourceEnvelope'>
            /// Object representing resource to move
            /// </param>
            public static object MoveResources(this IWebSiteManagementClient operations, string resourceGroupName, CsmMoveResourceEnvelope moveResourceEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).MoveResourcesAsync(resourceGroupName, moveResourceEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Move resources between resource groups
            /// </summary>
            /// Move resources between resource groups
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='moveResourceEnvelope'>
            /// Object representing resource to move
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> MoveResourcesAsync(this IWebSiteManagementClient operations, string resourceGroupName, CsmMoveResourceEnvelope moveResourceEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.MoveResourcesWithHttpMessagesAsync(resourceGroupName, moveResourceEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validates if a resource can be created
            /// </summary>
            /// Validates if a resource can be created
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='validateRequest'>
            /// Object representing resources to validate
            /// </param>
            public static ValidateResponse Validate(this IWebSiteManagementClient operations, string resourceGroupName, ValidateRequest validateRequest)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).ValidateAsync(resourceGroupName, validateRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validates if a resource can be created
            /// </summary>
            /// Validates if a resource can be created
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='validateRequest'>
            /// Object representing resources to validate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ValidateResponse> ValidateAsync(this IWebSiteManagementClient operations, string resourceGroupName, ValidateRequest validateRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateWithHttpMessagesAsync(resourceGroupName, validateRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validate specified resources can be moved
            /// </summary>
            /// Validate specified resources can be moved
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='moveResourceEnvelope'>
            /// Object representing resource to move
            /// </param>
            public static object ValidateMoveResources(this IWebSiteManagementClient operations, string resourceGroupName, CsmMoveResourceEnvelope moveResourceEnvelope)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).ValidateMoveResourcesAsync(resourceGroupName, moveResourceEnvelope), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate specified resources can be moved
            /// </summary>
            /// Validate specified resources can be moved
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Resource group
            /// </param>
            /// <param name='moveResourceEnvelope'>
            /// Object representing resource to move
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ValidateMoveResourcesAsync(this IWebSiteManagementClient operations, string resourceGroupName, CsmMoveResourceEnvelope moveResourceEnvelope, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateMoveResourcesWithHttpMessagesAsync(resourceGroupName, moveResourceEnvelope, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the source controls available for Azure websites
            /// </summary>
            /// Gets the source controls available for Azure websites
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<SourceControl> ListSourceControlsNext(this IWebSiteManagementClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).ListSourceControlsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the source controls available for Azure websites
            /// </summary>
            /// Gets the source controls available for Azure websites
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<SourceControl>> ListSourceControlsNextAsync(this IWebSiteManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSourceControlsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets list of available geo regions
            /// </summary>
            /// Gets list of available geo regions
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<GeoRegion> GetSubscriptionGeoRegionsNext(this IWebSiteManagementClient operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IWebSiteManagementClient)s).GetSubscriptionGeoRegionsNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets list of available geo regions
            /// </summary>
            /// Gets list of available geo regions
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GeoRegion>> GetSubscriptionGeoRegionsNextAsync(this IWebSiteManagementClient operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionGeoRegionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
