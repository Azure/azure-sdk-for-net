// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AppServiceCertificateOrdersOperations.
    /// </summary>
    public static partial class AppServiceCertificateOrdersOperationsExtensions
    {
            /// <summary>
            /// Lists all domains in a subscription
            /// </summary>
            /// Lists all domains in a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<AppServiceCertificateOrder> List(this IAppServiceCertificateOrdersOperations operations)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all domains in a subscription
            /// </summary>
            /// Lists all domains in a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificateOrder>> ListAsync(this IAppServiceCertificateOrdersOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Validate certificate purchase information
            /// </summary>
            /// Validate certificate purchase information
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appServiceCertificateOrder'>
            /// Certificate order
            /// </param>
            public static object ValidatePurchaseInformation(this IAppServiceCertificateOrdersOperations operations, AppServiceCertificateOrder appServiceCertificateOrder)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ValidatePurchaseInformationAsync(appServiceCertificateOrder), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Validate certificate purchase information
            /// </summary>
            /// Validate certificate purchase information
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='appServiceCertificateOrder'>
            /// Certificate order
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ValidatePurchaseInformationAsync(this IAppServiceCertificateOrdersOperations operations, AppServiceCertificateOrder appServiceCertificateOrder, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidatePurchaseInformationWithHttpMessagesAsync(appServiceCertificateOrder, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get certificate orders in a resource group
            /// </summary>
            /// Get certificate orders in a resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            public static IPage<AppServiceCertificateOrder> ListByResourceGroup(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListByResourceGroupAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificate orders in a resource group
            /// </summary>
            /// Get certificate orders in a resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificateOrder>> ListByResourceGroupAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all certificates associated with a certificate order (only one
            /// certificate can be associated with an order at a time)
            /// </summary>
            /// List all certificates associated with a certificate order (only one
            /// certificate can be associated with an order at a time)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            public static IPage<AppServiceCertificate> ListCertificates(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListCertificatesAsync(resourceGroupName, certificateOrderName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificates associated with a certificate order (only one
            /// certificate can be associated with an order at a time)
            /// </summary>
            /// List all certificates associated with a certificate order (only one
            /// certificate can be associated with an order at a time)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificate>> ListCertificatesAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCertificatesWithHttpMessagesAsync(resourceGroupName, certificateOrderName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get certificate associated with the certificate order
            /// </summary>
            /// Get certificate associated with the certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            public static AppServiceCertificate GetCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).GetCertificateAsync(resourceGroupName, certificateOrderName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificate associated with the certificate order
            /// </summary>
            /// Get certificate associated with the certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificate> GetCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// </summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key Vault secret csm Id
            /// </param>
            public static AppServiceCertificate CreateOrUpdateCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificate keyVaultCertificate)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).CreateOrUpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// </summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key Vault secret csm Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificate> CreateOrUpdateCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificate keyVaultCertificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// </summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key Vault secret csm Id
            /// </param>
            public static AppServiceCertificate BeginCreateOrUpdateCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificate keyVaultCertificate)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).BeginCreateOrUpdateCertificateAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// </summary>
            /// Associates a Key Vault secret to a certificate store that will be used for
            /// storing the certificate once it's ready
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='keyVaultCertificate'>
            /// Key Vault secret csm Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificate> BeginCreateOrUpdateCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, AppServiceCertificate keyVaultCertificate, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, keyVaultCertificate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes the certificate associated with the certificate order
            /// </summary>
            /// Deletes the certificate associated with the certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            public static object DeleteCertificate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).DeleteCertificateAsync(resourceGroupName, certificateOrderName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes the certificate associated with the certificate order
            /// </summary>
            /// Deletes the certificate associated with the certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='certificateOrderName'>
            /// Certificate name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCertificateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string certificateOrderName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateWithHttpMessagesAsync(resourceGroupName, certificateOrderName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a certificate order
            /// </summary>
            /// Get a certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            public static AppServiceCertificateOrder Get(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).GetAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a certificate order
            /// </summary>
            /// Get a certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateOrder> GetAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a certificate purchase order
            /// </summary>
            /// Create or update a certificate purchase order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to be used for purchasing certificate
            /// </param>
            public static AppServiceCertificateOrder CreateOrUpdate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, AppServiceCertificateOrder certificateDistinguishedName)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).CreateOrUpdateAsync(resourceGroupName, name, certificateDistinguishedName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a certificate purchase order
            /// </summary>
            /// Create or update a certificate purchase order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to be used for purchasing certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateOrder> CreateOrUpdateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, AppServiceCertificateOrder certificateDistinguishedName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, certificateDistinguishedName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Create or update a certificate purchase order
            /// </summary>
            /// Create or update a certificate purchase order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to be used for purchasing certificate
            /// </param>
            public static AppServiceCertificateOrder BeginCreateOrUpdate(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, AppServiceCertificateOrder certificateDistinguishedName)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, name, certificateDistinguishedName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create or update a certificate purchase order
            /// </summary>
            /// Create or update a certificate purchase order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='certificateDistinguishedName'>
            /// Distinguished name to be used for purchasing certificate
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AppServiceCertificateOrder> BeginCreateOrUpdateAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, AppServiceCertificateOrder certificateDistinguishedName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, name, certificateDistinguishedName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete an existing certificate order
            /// </summary>
            /// Delete an existing certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            public static object DeleteCertificateOrder(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).DeleteCertificateOrderAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete an existing certificate order
            /// </summary>
            /// Delete an existing certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteCertificateOrderAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCertificateOrderWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Reissue an existing certificate order
            /// </summary>
            /// Reissue an existing certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='reissueCertificateOrderRequest'>
            /// Reissue parameters
            /// </param>
            public static object Reissue(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, ReissueCertificateOrderRequest reissueCertificateOrderRequest)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ReissueAsync(resourceGroupName, name, reissueCertificateOrderRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Reissue an existing certificate order
            /// </summary>
            /// Reissue an existing certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='reissueCertificateOrderRequest'>
            /// Reissue parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ReissueAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, ReissueCertificateOrderRequest reissueCertificateOrderRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ReissueWithHttpMessagesAsync(resourceGroupName, name, reissueCertificateOrderRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Renew an existing certificate order
            /// </summary>
            /// Renew an existing certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='renewCertificateOrderRequest'>
            /// Renew parameters
            /// </param>
            public static object Renew(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, RenewCertificateOrderRequest renewCertificateOrderRequest)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).RenewAsync(resourceGroupName, name, renewCertificateOrderRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Renew an existing certificate order
            /// </summary>
            /// Renew an existing certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate name
            /// </param>
            /// <param name='renewCertificateOrderRequest'>
            /// Renew parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> RenewAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, RenewCertificateOrderRequest renewCertificateOrderRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RenewWithHttpMessagesAsync(resourceGroupName, name, renewCertificateOrderRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Resend certificate email
            /// </summary>
            /// Resend certificate email
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static object ResendCertificateEmail(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ResendCertificateEmailAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Resend certificate email
            /// </summary>
            /// Resend certificate email
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ResendCertificateEmailAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResendCertificateEmailWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieve the list of certificate actions
            /// </summary>
            /// Retrieve the list of certificate actions
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static IList<CertificateOrderAction> RetrieveCertificateActions(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).RetrieveCertificateActionsAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve the list of certificate actions
            /// </summary>
            /// Retrieve the list of certificate actions
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CertificateOrderAction>> RetrieveCertificateActionsAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveCertificateActionsWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrive email history
            /// </summary>
            /// Retrive email history
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static IList<CertificateEmail> RetrieveCertificateEmailHistory(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).RetrieveCertificateEmailHistoryAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrive email history
            /// </summary>
            /// Retrive email history
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CertificateEmail>> RetrieveCertificateEmailHistoryAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RetrieveCertificateEmailHistoryWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Verify domain ownership for this certificate order
            /// </summary>
            /// Verify domain ownership for this certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            public static object VerifyDomainOwnership(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).VerifyDomainOwnershipAsync(resourceGroupName, name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Verify domain ownership for this certificate order
            /// </summary>
            /// Verify domain ownership for this certificate order
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Azure resource group name
            /// </param>
            /// <param name='name'>
            /// Certificate order name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> VerifyDomainOwnershipAsync(this IAppServiceCertificateOrdersOperations operations, string resourceGroupName, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyDomainOwnershipWithHttpMessagesAsync(resourceGroupName, name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all domains in a subscription
            /// </summary>
            /// Lists all domains in a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServiceCertificateOrder> ListNext(this IAppServiceCertificateOrdersOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all domains in a subscription
            /// </summary>
            /// Lists all domains in a subscription
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificateOrder>> ListNextAsync(this IAppServiceCertificateOrdersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get certificate orders in a resource group
            /// </summary>
            /// Get certificate orders in a resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServiceCertificateOrder> ListByResourceGroupNext(this IAppServiceCertificateOrdersOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListByResourceGroupNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get certificate orders in a resource group
            /// </summary>
            /// Get certificate orders in a resource group
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificateOrder>> ListByResourceGroupNextAsync(this IAppServiceCertificateOrdersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// List all certificates associated with a certificate order (only one
            /// certificate can be associated with an order at a time)
            /// </summary>
            /// List all certificates associated with a certificate order (only one
            /// certificate can be associated with an order at a time)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AppServiceCertificate> ListCertificatesNext(this IAppServiceCertificateOrdersOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAppServiceCertificateOrdersOperations)s).ListCertificatesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// List all certificates associated with a certificate order (only one
            /// certificate can be associated with an order at a time)
            /// </summary>
            /// List all certificates associated with a certificate order (only one
            /// certificate can be associated with an order at a time)
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AppServiceCertificate>> ListCertificatesNextAsync(this IAppServiceCertificateOrdersOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListCertificatesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
