// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Represents a recommendation result generated by the recommendation
    /// engine
    /// </summary>
    public partial class Recommendation
    {
        /// <summary>
        /// Initializes a new instance of the Recommendation class.
        /// </summary>
        public Recommendation() { }

        /// <summary>
        /// Initializes a new instance of the Recommendation class.
        /// </summary>
        public Recommendation(NotificationLevel? level, Channels? channels, DateTime? creationTime = default(DateTime?), string recommendationId = default(string), string resourceId = default(string), string resourceScope = default(string), string ruleName = default(string), string displayName = default(string), string message = default(string), IList<string> tags = default(IList<string>), string actionName = default(string), int? enabled = default(int?), DateTime? startTime = default(DateTime?), DateTime? endTime = default(DateTime?), DateTime? nextNotificationTime = default(DateTime?), DateTime? notificationExpirationTime = default(DateTime?), DateTime? notifiedTime = default(DateTime?), double? score = default(double?))
        {
            CreationTime = creationTime;
            RecommendationId = recommendationId;
            ResourceId = resourceId;
            ResourceScope = resourceScope;
            RuleName = ruleName;
            DisplayName = displayName;
            Message = message;
            Level = level;
            Channels = channels;
            Tags = tags;
            ActionName = actionName;
            Enabled = enabled;
            StartTime = startTime;
            EndTime = endTime;
            NextNotificationTime = nextNotificationTime;
            NotificationExpirationTime = notificationExpirationTime;
            NotifiedTime = notifiedTime;
            Score = score;
        }

        /// <summary>
        /// Timestamp when this instance was created.
        /// </summary>
        [JsonProperty(PropertyName = "creationTime")]
        public DateTime? CreationTime { get; set; }

        /// <summary>
        /// A GUID value that each recommendation object is associated with.
        /// </summary>
        [JsonProperty(PropertyName = "recommendationId")]
        public string RecommendationId { get; set; }

        /// <summary>
        /// Full ARM resource ID string that this recommendation object is
        /// associated with.
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Name of a resource type this recommendation applies, e.g.
        /// Subscription, ServerFarm, Site.
        /// </summary>
        [JsonProperty(PropertyName = "resourceScope")]
        public string ResourceScope { get; set; }

        /// <summary>
        /// Unique name of the rule
        /// </summary>
        [JsonProperty(PropertyName = "ruleName")]
        public string RuleName { get; set; }

        /// <summary>
        /// UI friendly name of the rule (may not be unique)
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Localized text of recommendation, good for UI.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Level indicating how critical this recommendation can impact.
        /// Possible values for this property include: 'Critical', 'Warning',
        /// 'Information', 'NonUrgentSuggestion'.
        /// </summary>
        [JsonProperty(PropertyName = "level")]
        public NotificationLevel? Level { get; set; }

        /// <summary>
        /// List of channels that this recommendation can apply. Possible
        /// values for this property include: 'Notification', 'Api', 'Email',
        /// 'All'.
        /// </summary>
        [JsonProperty(PropertyName = "channels")]
        public Channels? Channels { get; set; }

        /// <summary>
        /// The list of category tags that this recommendation belongs to.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Name of action recommended by this object.
        /// </summary>
        [JsonProperty(PropertyName = "actionName")]
        public string ActionName { get; set; }

        /// <summary>
        /// On/off flag indicating the rule is currently enabled or disabled.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public int? Enabled { get; set; }

        /// <summary>
        /// The beginning time of a range that the recommendation refers to.
        /// </summary>
        [JsonProperty(PropertyName = "startTime")]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// The end time of a range that the recommendation refers to.
        /// </summary>
        [JsonProperty(PropertyName = "endTime")]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// When to notify this recommendation next. Null means that this will
        /// never be notified anymore.
        /// </summary>
        [JsonProperty(PropertyName = "nextNotificationTime")]
        public DateTime? NextNotificationTime { get; set; }

        /// <summary>
        /// Date and time when this notification expires.
        /// </summary>
        [JsonProperty(PropertyName = "notificationExpirationTime")]
        public DateTime? NotificationExpirationTime { get; set; }

        /// <summary>
        /// Last timestamp this instance was actually notified. Null means
        /// that this recommendation hasn't been notified yet.
        /// </summary>
        [JsonProperty(PropertyName = "notifiedTime")]
        public DateTime? NotifiedTime { get; set; }

        /// <summary>
        /// A metric value measured by the rule.
        /// </summary>
        [JsonProperty(PropertyName = "score")]
        public double? Score { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Level == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Level");
            }
            if (Channels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Channels");
            }
        }
    }
}
