// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Represents a custom domain analysis
    /// </summary>
    [JsonTransformation]
    public partial class CustomHostnameAnalysisResult : Resource
    {
        /// <summary>
        /// Initializes a new instance of the CustomHostnameAnalysisResult
        /// class.
        /// </summary>
        public CustomHostnameAnalysisResult() { }

        /// <summary>
        /// Initializes a new instance of the CustomHostnameAnalysisResult
        /// class.
        /// </summary>
        public CustomHostnameAnalysisResult(String name, String location, String id = default(String), String kind = default(String), String type = default(String), IDictionary<string, String> tags = default(IDictionary<string, String>), bool? isHostnameAlreadyVerified = default(bool?), DnsVerificationTestResult? customDomainVerificationTest = default(DnsVerificationTestResult?), ErrorEntity customDomainVerificationFailureInfo = default(ErrorEntity), bool? hasConflictOnScaleUnit = default(bool?), bool? hasConflictAcrossSubscription = default(bool?), string conflictingAppResourceId = default(string), IList<string> cNameRecords = default(IList<string>), IList<string> txtRecords = default(IList<string>), IList<string> aRecords = default(IList<string>), IList<string> alternateCNameRecords = default(IList<string>), IList<string> alternateTxtRecords = default(IList<string>))
            : base(name, location, id, kind, type, tags)
        {
            IsHostnameAlreadyVerified = isHostnameAlreadyVerified;
            CustomDomainVerificationTest = customDomainVerificationTest;
            CustomDomainVerificationFailureInfo = customDomainVerificationFailureInfo;
            HasConflictOnScaleUnit = hasConflictOnScaleUnit;
            HasConflictAcrossSubscription = hasConflictAcrossSubscription;
            ConflictingAppResourceId = conflictingAppResourceId;
            CNameRecords = cNameRecords;
            TxtRecords = txtRecords;
            ARecords = aRecords;
            AlternateCNameRecords = alternateCNameRecords;
            AlternateTxtRecords = alternateTxtRecords;
        }

        /// <summary>
        /// Is hostname already verified?
        /// </summary>
        [JsonProperty(PropertyName = "properties.isHostnameAlreadyVerified")]
        public bool? IsHostnameAlreadyVerified { get; set; }

        /// <summary>
        /// Dns verification test result. Possible values include: 'Passed',
        /// 'Failed', 'Skipped'
        /// </summary>
        [JsonProperty(PropertyName = "properties.customDomainVerificationTest")]
        public DnsVerificationTestResult? CustomDomainVerificationTest { get; set; }

        /// <summary>
        /// Raw failure info if Dns verification fails
        /// </summary>
        [JsonProperty(PropertyName = "properties.customDomainVerificationFailureInfo")]
        public ErrorEntity CustomDomainVerificationFailureInfo { get; set; }

        /// <summary>
        /// Does it have conflict on scale unit?
        /// </summary>
        [JsonProperty(PropertyName = "properties.hasConflictOnScaleUnit")]
        public bool? HasConflictOnScaleUnit { get; set; }

        /// <summary>
        /// Does it have conflict across subscription?
        /// </summary>
        [JsonProperty(PropertyName = "properties.hasConflictAcrossSubscription")]
        public bool? HasConflictAcrossSubscription { get; set; }

        /// <summary>
        /// Name of the conflicting App on scale unit if it's within the same
        /// subscription
        /// </summary>
        [JsonProperty(PropertyName = "properties.conflictingAppResourceId")]
        public string ConflictingAppResourceId { get; set; }

        /// <summary>
        /// CName records controller could see for this hostname
        /// </summary>
        [JsonProperty(PropertyName = "properties.cNameRecords")]
        public IList<string> CNameRecords { get; set; }

        /// <summary>
        /// TxT records controller could see for this hostname
        /// </summary>
        [JsonProperty(PropertyName = "properties.txtRecords")]
        public IList<string> TxtRecords { get; set; }

        /// <summary>
        /// A records controller could see for this hostname
        /// </summary>
        [JsonProperty(PropertyName = "properties.aRecords")]
        public IList<string> ARecords { get; set; }

        /// <summary>
        /// Alternate CName records controller could see for this hostname
        /// </summary>
        [JsonProperty(PropertyName = "properties.alternateCNameRecords")]
        public IList<string> AlternateCNameRecords { get; set; }

        /// <summary>
        /// Alternate TxT records controller could see for this hostname
        /// </summary>
        [JsonProperty(PropertyName = "properties.alternateTxtRecords")]
        public IList<string> AlternateTxtRecords { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
