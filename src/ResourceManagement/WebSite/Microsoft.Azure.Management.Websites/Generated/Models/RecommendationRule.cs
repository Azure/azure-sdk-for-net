// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Represents a recommendation rule that the recommendation engine can
    /// perform
    /// </summary>
    public partial class RecommendationRule
    {
        /// <summary>
        /// Initializes a new instance of the RecommendationRule class.
        /// </summary>
        public RecommendationRule() { }

        /// <summary>
        /// Initializes a new instance of the RecommendationRule class.
        /// </summary>
        public RecommendationRule(NotificationLevel? level, Channels? channels, string name = default(string), string displayName = default(string), string message = default(string), string recommendationId = default(string), string description = default(string), string actionName = default(string), int? enabled = default(int?), IList<string> tags = default(IList<string>))
        {
            Name = name;
            DisplayName = displayName;
            Message = message;
            RecommendationId = recommendationId;
            Description = description;
            ActionName = actionName;
            Enabled = enabled;
            Level = level;
            Channels = channels;
            Tags = tags;
        }

        /// <summary>
        /// Unique name of the rule
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// UI friendly name of the rule
        /// </summary>
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// Localized name of the rule (Good for UI)
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Recommendation ID of an associated recommendation object tied to
        /// the rule, if exists.
        /// If such an object doesn't exist, it is set to null.
        /// </summary>
        [JsonProperty(PropertyName = "recommendationId")]
        public string RecommendationId { get; set; }

        /// <summary>
        /// Localized detailed description of the rule
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Name of action that is recommended by this rule in string
        /// </summary>
        [JsonProperty(PropertyName = "actionName")]
        public string ActionName { get; set; }

        /// <summary>
        /// On/off flag indicating the rule is currently enabled or disabled.
        /// </summary>
        [JsonProperty(PropertyName = "enabled")]
        public int? Enabled { get; set; }

        /// <summary>
        /// Level of impact indicating how critical this rule is. Possible
        /// values for this property include: 'Critical', 'Warning',
        /// 'Information', 'NonUrgentSuggestion'.
        /// </summary>
        [JsonProperty(PropertyName = "level")]
        public NotificationLevel? Level { get; set; }

        /// <summary>
        /// List of available channels that this rule applies. Possible values
        /// for this property include: 'Notification', 'Api', 'Email', 'All'.
        /// </summary>
        [JsonProperty(PropertyName = "channels")]
        public Channels? Channels { get; set; }

        /// <summary>
        /// An array of category tags that the rule contains.
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IList<string> Tags { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Level == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Level");
            }
            if (Channels == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Channels");
            }
        }
    }
}
