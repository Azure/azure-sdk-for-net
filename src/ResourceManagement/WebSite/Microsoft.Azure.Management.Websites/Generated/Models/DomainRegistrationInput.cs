// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Domain registration input for validation Api
    /// </summary>
    [JsonTransformation]
    public partial class DomainRegistrationInput : Resource
    {
        /// <summary>
        /// Initializes a new instance of the DomainRegistrationInput class.
        /// </summary>
        public DomainRegistrationInput() { }

        /// <summary>
        /// Initializes a new instance of the DomainRegistrationInput class.
        /// </summary>
        public DomainRegistrationInput(String name, String location, String id = default(String), String kind = default(String), String type = default(String), IDictionary<string, String> tags = default(IDictionary<string, String>), string domainRegistrationInputName = default(string), Contact contactAdmin = default(Contact), Contact contactBilling = default(Contact), Contact contactRegistrant = default(Contact), Contact contactTech = default(Contact), DomainStatus? registrationStatus = default(DomainStatus?), ProvisioningState? provisioningState = default(ProvisioningState?), IList<string> nameServers = default(IList<string>), bool? privacy = default(bool?), DateTime? createdTime = default(DateTime?), DateTime? expirationTime = default(DateTime?), DateTime? lastRenewedTime = default(DateTime?), bool? autoRenew = default(bool?), bool? readyForDnsRecordManagement = default(bool?), IList<HostName> managedHostNames = default(IList<HostName>), DomainPurchaseConsent consent = default(DomainPurchaseConsent), IList<string> domainNotRenewableReasons = default(IList<string>))
            : base(name, location, id, kind, type, tags)
        {
            DomainRegistrationInputName = domainRegistrationInputName;
            ContactAdmin = contactAdmin;
            ContactBilling = contactBilling;
            ContactRegistrant = contactRegistrant;
            ContactTech = contactTech;
            RegistrationStatus = registrationStatus;
            ProvisioningState = provisioningState;
            NameServers = nameServers;
            Privacy = privacy;
            CreatedTime = createdTime;
            ExpirationTime = expirationTime;
            LastRenewedTime = lastRenewedTime;
            AutoRenew = autoRenew;
            ReadyForDnsRecordManagement = readyForDnsRecordManagement;
            ManagedHostNames = managedHostNames;
            Consent = consent;
            DomainNotRenewableReasons = domainNotRenewableReasons;
        }

        /// <summary>
        /// Name of the domain
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string DomainRegistrationInputName { get; set; }

        /// <summary>
        /// Admin contact information
        /// </summary>
        [JsonProperty(PropertyName = "properties.contactAdmin")]
        public Contact ContactAdmin { get; set; }

        /// <summary>
        /// Billing contact information
        /// </summary>
        [JsonProperty(PropertyName = "properties.contactBilling")]
        public Contact ContactBilling { get; set; }

        /// <summary>
        /// Registrant contact information
        /// </summary>
        [JsonProperty(PropertyName = "properties.contactRegistrant")]
        public Contact ContactRegistrant { get; set; }

        /// <summary>
        /// Technical contact information
        /// </summary>
        [JsonProperty(PropertyName = "properties.contactTech")]
        public Contact ContactTech { get; set; }

        /// <summary>
        /// Domain registration status. Possible values include: 'Active',
        /// 'Awaiting', 'Cancelled', 'Confiscated', 'Disabled', 'Excluded',
        /// 'Expired', 'Failed', 'Held', 'Locked', 'Parked', 'Pending',
        /// 'Reserved', 'Reverted', 'Suspended', 'Transferred', 'Unknown',
        /// 'Unlocked', 'Unparked', 'Updated', 'JsonConverterFailed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.registrationStatus")]
        public DomainStatus? RegistrationStatus { get; set; }

        /// <summary>
        /// Domain provisioning state. Possible values include: 'Succeeded',
        /// 'Failed', 'Canceled', 'InProgress', 'Deleting'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState { get; set; }

        /// <summary>
        /// Name servers
        /// </summary>
        [JsonProperty(PropertyName = "properties.nameServers")]
        public IList<string> NameServers { get; set; }

        /// <summary>
        /// If true then domain privacy is enabled for this domain
        /// </summary>
        [JsonProperty(PropertyName = "properties.privacy")]
        public bool? Privacy { get; set; }

        /// <summary>
        /// Domain creation timestamp
        /// </summary>
        [JsonProperty(PropertyName = "properties.createdTime")]
        public DateTime? CreatedTime { get; set; }

        /// <summary>
        /// Domain expiration timestamp
        /// </summary>
        [JsonProperty(PropertyName = "properties.expirationTime")]
        public DateTime? ExpirationTime { get; set; }

        /// <summary>
        /// Timestamp when the domain was renewed last time
        /// </summary>
        [JsonProperty(PropertyName = "properties.lastRenewedTime")]
        public DateTime? LastRenewedTime { get; set; }

        /// <summary>
        /// If true then domain will renewed automatically
        /// </summary>
        [JsonProperty(PropertyName = "properties.autoRenew")]
        public bool? AutoRenew { get; set; }

        /// <summary>
        /// If true then Azure can assign this domain to Web Apps. This value
        /// will be true if domain registration status is active and it is
        /// hosted on name servers Azure has programmatic access to
        /// </summary>
        [JsonProperty(PropertyName = "properties.readyForDnsRecordManagement")]
        public bool? ReadyForDnsRecordManagement { get; set; }

        /// <summary>
        /// All hostnames derived from the domain and assigned to Azure
        /// resources
        /// </summary>
        [JsonProperty(PropertyName = "properties.managedHostNames")]
        public IList<HostName> ManagedHostNames { get; set; }

        /// <summary>
        /// Legal agreement consent
        /// </summary>
        [JsonProperty(PropertyName = "properties.consent")]
        public DomainPurchaseConsent Consent { get; set; }

        /// <summary>
        /// Reasons why domain is not renewable
        /// </summary>
        [JsonProperty(PropertyName = "properties.domainNotRenewableReasons")]
        public IList<string> DomainNotRenewableReasons { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
