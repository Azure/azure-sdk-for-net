// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// App certificate
    /// </summary>
    [JsonTransformation]
    public partial class Certificate : Resource
    {
        /// <summary>
        /// Initializes a new instance of the Certificate class.
        /// </summary>
        public Certificate() { }

        /// <summary>
        /// Initializes a new instance of the Certificate class.
        /// </summary>
        public Certificate(string name, string location, string id = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string friendlyName = default(string), string subjectName = default(string), IList<string> hostNames = default(IList<string>), string pfxBlob = default(string), string siteName = default(string), string selfLink = default(string), string issuer = default(string), DateTime? issueDate = default(DateTime?), DateTime? expirationDate = default(DateTime?), string password = default(string), string thumbprint = default(string), bool? valid = default(bool?), string cerBlob = default(string), string publicKeyHash = default(string), HostingEnvironmentProfile hostingEnvironmentProfile = default(HostingEnvironmentProfile))
            : base(name, location, id, kind, type, tags)
        {
            FriendlyName = friendlyName;
            SubjectName = subjectName;
            HostNames = hostNames;
            PfxBlob = pfxBlob;
            SiteName = siteName;
            SelfLink = selfLink;
            Issuer = issuer;
            IssueDate = issueDate;
            ExpirationDate = expirationDate;
            Password = password;
            Thumbprint = thumbprint;
            Valid = valid;
            CerBlob = cerBlob;
            PublicKeyHash = publicKeyHash;
            HostingEnvironmentProfile = hostingEnvironmentProfile;
        }

        /// <summary>
        /// Friendly name of the certificate
        /// </summary>
        [JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Subject name of the certificate
        /// </summary>
        [JsonProperty(PropertyName = "properties.subjectName")]
        public string SubjectName { get; set; }

        /// <summary>
        /// Host names the certificate applies to
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostNames")]
        public IList<string> HostNames { get; set; }

        /// <summary>
        /// Pfx blob
        /// </summary>
        [JsonProperty(PropertyName = "properties.pfxBlob")]
        public string PfxBlob { get; set; }

        /// <summary>
        /// App name
        /// </summary>
        [JsonProperty(PropertyName = "properties.siteName")]
        public string SiteName { get; set; }

        /// <summary>
        /// Self link
        /// </summary>
        [JsonProperty(PropertyName = "properties.selfLink")]
        public string SelfLink { get; set; }

        /// <summary>
        /// Certificate issuer
        /// </summary>
        [JsonProperty(PropertyName = "properties.issuer")]
        public string Issuer { get; set; }

        /// <summary>
        /// Certificate issue Date
        /// </summary>
        [JsonProperty(PropertyName = "properties.issueDate")]
        public DateTime? IssueDate { get; set; }

        /// <summary>
        /// Certificate expriration date
        /// </summary>
        [JsonProperty(PropertyName = "properties.expirationDate")]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Certificate password
        /// </summary>
        [JsonProperty(PropertyName = "properties.password")]
        public string Password { get; set; }

        /// <summary>
        /// Certificate thumbprint
        /// </summary>
        [JsonProperty(PropertyName = "properties.thumbprint")]
        public string Thumbprint { get; set; }

        /// <summary>
        /// Is the certificate valid?
        /// </summary>
        [JsonProperty(PropertyName = "properties.valid")]
        public bool? Valid { get; set; }

        /// <summary>
        /// Raw bytes of .cer file
        /// </summary>
        [JsonProperty(PropertyName = "properties.cerBlob")]
        public string CerBlob { get; set; }

        /// <summary>
        /// Public key hash
        /// </summary>
        [JsonProperty(PropertyName = "properties.publicKeyHash")]
        public string PublicKeyHash { get; set; }

        /// <summary>
        /// Specification for the hosting environment (App Service
        /// Environment) to use for the certificate
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostingEnvironmentProfile")]
        public HostingEnvironmentProfile HostingEnvironmentProfile { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
