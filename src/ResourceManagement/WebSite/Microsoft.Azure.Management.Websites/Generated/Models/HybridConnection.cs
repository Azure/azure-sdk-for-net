// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Hybrid Connection contract. This is used to configure a Hybrid
    /// Connection.
    /// </summary>
    [JsonTransformation]
    public partial class HybridConnection : Resource
    {
        /// <summary>
        /// Initializes a new instance of the HybridConnection class.
        /// </summary>
        public HybridConnection() { }

        /// <summary>
        /// Initializes a new instance of the HybridConnection class.
        /// </summary>
        public HybridConnection(string name, string location, string id = default(string), string kind = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), string serviceBusNamespace = default(string), string relayName = default(string), string relayArmUri = default(string), string hostname = default(string), int? port = default(int?), string sendKeyName = default(string), string sendKeyValue = default(string))
            : base(name, location, id, kind, type, tags)
        {
            ServiceBusNamespace = serviceBusNamespace;
            RelayName = relayName;
            RelayArmUri = relayArmUri;
            Hostname = hostname;
            Port = port;
            SendKeyName = sendKeyName;
            SendKeyValue = sendKeyValue;
        }

        /// <summary>
        /// The name of the Service Bus Namespace.
        /// </summary>
        [JsonProperty(PropertyName = "properties.serviceBusNamespace")]
        public string ServiceBusNamespace { get; set; }

        /// <summary>
        /// The name of the Service Bus Relay.
        /// </summary>
        [JsonProperty(PropertyName = "properties.relayName")]
        public string RelayName { get; set; }

        /// <summary>
        /// The ARM URI to the Service Bus Relay.
        /// </summary>
        [JsonProperty(PropertyName = "properties.relayArmUri")]
        public string RelayArmUri { get; set; }

        /// <summary>
        /// The hostname of the endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "properties.hostname")]
        public string Hostname { get; set; }

        /// <summary>
        /// The port of the endpoint.
        /// </summary>
        [JsonProperty(PropertyName = "properties.port")]
        public int? Port { get; set; }

        /// <summary>
        /// The name of the Service Bus key which has Send permissions. This
        /// is used to authenticate to Service Bus.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sendKeyName")]
        public string SendKeyName { get; set; }

        /// <summary>
        /// The value of the Service Bus key. This is used to authenticate to
        /// Service Bus. In ARM this key will not be returned
        /// normally, use the POST /listKeys API instead.
        /// </summary>
        [JsonProperty(PropertyName = "properties.sendKeyValue")]
        public string SendKeyValue { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public override void Validate()
        {
            base.Validate();
        }
    }
}
