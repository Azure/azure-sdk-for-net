// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.WebSites
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class DomainsOperationsExtensions
    {
            /// <summary>
            /// Lists domains under a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            public static DomainCollection GetDomains(this IDomainsOperations operations, string resourceGroupName)
            {
                return Task.Factory.StartNew(s => ((IDomainsOperations)s).GetDomainsAsync(resourceGroupName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists domains under a resource group
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DomainCollection> GetDomainsAsync( this IDomainsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomainsWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets details of a domain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain
            /// </param>
            public static Domain GetDomain(this IDomainsOperations operations, string resourceGroupName, string domainName)
            {
                return Task.Factory.StartNew(s => ((IDomainsOperations)s).GetDomainAsync(resourceGroupName, domainName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets details of a domain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Domain> GetDomainAsync( this IDomainsOperations operations, string resourceGroupName, string domainName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomainWithHttpMessagesAsync(resourceGroupName, domainName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a domain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// &amp;gt;Name of the resource group
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain
            /// </param>
            /// <param name='domain'>
            /// Domain registration information
            /// </param>
            public static Domain CreateOrUpdateDomain(this IDomainsOperations operations, string resourceGroupName, string domainName, Domain domain)
            {
                return Task.Factory.StartNew(s => ((IDomainsOperations)s).CreateOrUpdateDomainAsync(resourceGroupName, domainName, domain), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a domain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// &amp;gt;Name of the resource group
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain
            /// </param>
            /// <param name='domain'>
            /// Domain registration information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Domain> CreateOrUpdateDomainAsync( this IDomainsOperations operations, string resourceGroupName, string domainName, Domain domain, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateDomainWithHttpMessagesAsync(resourceGroupName, domainName, domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a domain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain
            /// </param>
            /// <param name='forceHardDeleteDomain'>
            /// If true then the domain will be deleted immediately instead of after 24
            /// hours
            /// </param>
            public static object DeleteDomain(this IDomainsOperations operations, string resourceGroupName, string domainName, bool? forceHardDeleteDomain = default(bool?))
            {
                return Task.Factory.StartNew(s => ((IDomainsOperations)s).DeleteDomainAsync(resourceGroupName, domainName, forceHardDeleteDomain), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a domain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain
            /// </param>
            /// <param name='forceHardDeleteDomain'>
            /// If true then the domain will be deleted immediately instead of after 24
            /// hours
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteDomainAsync( this IDomainsOperations operations, string resourceGroupName, string domainName, bool? forceHardDeleteDomain = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteDomainWithHttpMessagesAsync(resourceGroupName, domainName, forceHardDeleteDomain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a domain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// &amp;gt;Name of the resource group
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain
            /// </param>
            /// <param name='domain'>
            /// Domain registration information
            /// </param>
            public static Domain UpdateDomain(this IDomainsOperations operations, string resourceGroupName, string domainName, Domain domain)
            {
                return Task.Factory.StartNew(s => ((IDomainsOperations)s).UpdateDomainAsync(resourceGroupName, domainName, domain), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a domain
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// &amp;gt;Name of the resource group
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain
            /// </param>
            /// <param name='domain'>
            /// Domain registration information
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Domain> UpdateDomainAsync( this IDomainsOperations operations, string resourceGroupName, string domainName, Domain domain, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDomainWithHttpMessagesAsync(resourceGroupName, domainName, domain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the latest status of a domain purchase operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain
            /// </param>
            /// <param name='operationId'>
            /// Domain purchase operation Id
            /// </param>
            public static Domain GetDomainOperation(this IDomainsOperations operations, string resourceGroupName, string domainName, string operationId)
            {
                return Task.Factory.StartNew(s => ((IDomainsOperations)s).GetDomainOperationAsync(resourceGroupName, domainName, operationId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the latest status of a domain purchase operation
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group
            /// </param>
            /// <param name='domainName'>
            /// Name of the domain
            /// </param>
            /// <param name='operationId'>
            /// Domain purchase operation Id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Domain> GetDomainOperationAsync( this IDomainsOperations operations, string resourceGroupName, string domainName, string operationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomainOperationWithHttpMessagesAsync(resourceGroupName, domainName, operationId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
