// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.WebSites;
using Microsoft.Azure.Management.WebSites.Models;

namespace Microsoft.Azure.Management.WebSites
{
    /// <summary>
    /// The Windows Azure Web Sites management API provides a RESTful set of
    /// web services that interact with Windows Azure Web Sites service to
    /// manage your web sites. The API has entities that capture the
    /// relationship between an end user and the Windows Azure Web Sites
    /// service.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166981.aspx for
    /// more information)
    /// </summary>
    public static partial class WebSiteOperationsExtensions
    {
        /// <summary>
        /// Backups a site on-demand.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// Required. A backup specification.
        /// </param>
        /// <returns>
        /// The backup record created based on the backup request.
        /// </returns>
        public static WebSiteBackupResponse Backup(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).BackupAsync(resourceGroupName, webSiteName, slotName, backupRequestEnvelope);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Backups a site on-demand.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// Required. A backup specification.
        /// </param>
        /// <returns>
        /// The backup record created based on the backup request.
        /// </returns>
        public static Task<WebSiteBackupResponse> BackupAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope)
        {
            return operations.BackupAsync(resourceGroupName, webSiteName, slotName, backupRequestEnvelope, CancellationToken.None);
        }
        
        /// <summary>
        /// You can clone a web site by using a PUT request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the clone Web Site operation.
        /// </param>
        /// <returns>
        /// The website operation response.
        /// </returns>
        public static WebSiteAsyncOperationResponse Clone(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteCloneParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).CloneAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can clone a web site by using a PUT request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the clone Web Site operation.
        /// </param>
        /// <returns>
        /// The website operation response.
        /// </returns>
        public static Task<WebSiteAsyncOperationResponse> CloneAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteCloneParameters parameters)
        {
            return operations.CloneAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public static WebSiteCreateResponse CreateOrUpdate(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).CreateOrUpdateAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can create a web site by using a POST request that includes the
        /// name of the web site and other information in the request body.
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166986.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the Create Web Site operation.
        /// </param>
        /// <returns>
        /// The Create Web Space operation response.
        /// </returns>
        public static Task<WebSiteCreateResponse> CreateOrUpdateAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse CreateRepository(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).CreateRepositoryAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> CreateRepositoryAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.CreateRepositoryAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group..
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the Web Site resource.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete a web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteDeleteParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).DeleteAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group..
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the Web Site resource.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters to delete a web site.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteDeleteParameters parameters)
        {
            return operations.DeleteAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public static WebSiteDeleteRepositoryResponse DeleteRepository(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).DeleteRepositoryAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Delete Web Site Repository operation response.
        /// </returns>
        public static Task<WebSiteDeleteRepositoryResponse> DeleteRepositoryAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.DeleteRepositoryAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Unlink source control from website
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='repoUrl'>
        /// Required. The repository url.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse DeleteSiteSourceControl(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, string repoUrl)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).DeleteSiteSourceControlAsync(resourceGroupName, webSiteName, slotName, repoUrl);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Unlink source control from website
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='repoUrl'>
        /// Required. The repository url.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteSiteSourceControlAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, string repoUrl)
        {
            return operations.DeleteSiteSourceControlAsync(resourceGroupName, webSiteName, slotName, repoUrl, CancellationToken.None);
        }
        
        /// <summary>
        /// Scans a backup in a storage account and returns database
        /// information etc. Should be called before calling Restore to
        /// discover what parameters are needed for the restore operation.
        /// KNOWN BUG: This has to be called against an exisingsite, otherwise
        /// will hit an error about non-existing resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// Required. A restore request.
        /// </param>
        /// <returns>
        /// The information gathered about a backup storaged in a storage
        /// account.
        /// </returns>
        public static WebSiteRestoreDiscoverResponse Discover(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).DiscoverAsync(resourceGroupName, webSiteName, slotName, restoreRequestEnvelope);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Scans a backup in a storage account and returns database
        /// information etc. Should be called before calling Restore to
        /// discover what parameters are needed for the restore operation.
        /// KNOWN BUG: This has to be called against an exisingsite, otherwise
        /// will hit an error about non-existing resource.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// Required. A restore request.
        /// </param>
        /// <returns>
        /// The information gathered about a backup storaged in a storage
        /// account.
        /// </returns>
        public static Task<WebSiteRestoreDiscoverResponse> DiscoverAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope)
        {
            return operations.DiscoverAsync(resourceGroupName, webSiteName, slotName, restoreRequestEnvelope, CancellationToken.None);
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse GeneratePassword(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GeneratePasswordAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can generate a new random password for publishing a site by
        /// issuing an HTTP POST request.  Tip: If you want to verify that the
        /// publish password has changed, call HTTP GET on /publishxml before
        /// calling /newpassword. In the publish XML, note the hash value in
        /// the userPWD attribute. After calling /newpassword, call
        /// /publishxml again. You can then compare the new value of userPWD
        /// in the Publish XML with the one you noted earlier.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn236428.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> GeneratePasswordAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GeneratePasswordAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public static WebSiteGetResponse Get(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Details operation response.
        /// </returns>
        public static Task<WebSiteGetResponse> GetAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetParameters parameters)
        {
            return operations.GetAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        public static WebSiteAppSettingsResult GetAppSettings(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetAppSettingsAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        public static Task<WebSiteAppSettingsResult> GetAppSettingsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetAppSettingsAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets a schedule configuration for site backups.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// Scheduled backup definition.
        /// </returns>
        public static WebSiteGetBackupConfigurationResponse GetBackupConfiguration(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetBackupConfigurationAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a schedule configuration for site backups.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// Scheduled backup definition.
        /// </returns>
        public static Task<WebSiteGetBackupConfigurationResponse> GetBackupConfigurationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetBackupConfigurationAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// Config for the website.
        /// </returns>
        public static WebSiteGetConfigurationResult GetConfiguration(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetConfigurationAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// Config for the website.
        /// </returns>
        public static Task<WebSiteGetConfigurationResult> GetConfigurationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetConfigurationParameters parameters)
        {
            return operations.GetConfigurationAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        public static WebSiteConnectionStringsResult GetConnectionStrings(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetConnectionStringsAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        public static Task<WebSiteConnectionStringsResult> GetConnectionStringsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetConnectionStringsAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public static WebSiteGetHistoricalUsageMetricsResponse GetHistoricalUsageMetrics(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetHistoricalUsageMetricsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetHistoricalUsageMetricsAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve historical usage metrics for a site by issuing an
        /// HTTP GET request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166964.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Get Web Site Historical Usage Metrics parameters.
        /// </param>
        /// <returns>
        /// The Get Web Site Historical Usage Metrics operation response.
        /// </returns>
        public static Task<WebSiteGetHistoricalUsageMetricsResponse> GetHistoricalUsageMetricsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteGetHistoricalUsageMetricsParameters parameters)
        {
            return operations.GetHistoricalUsageMetricsAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        public static WebSiteMetadataResult GetMetadata(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetMetadataAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        public static Task<WebSiteMetadataResult> GetMetadataAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetMetadataAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='operationId'>
        /// Required. Additional parameters.
        /// </param>
        /// <returns>
        /// The website operation response.
        /// </returns>
        public static WebSiteAsyncOperationResponse GetOperation(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, Guid operationId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetOperationAsync(resourceGroupName, webSiteName, slotName, operationId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve details for a web site by issuing an HTTP GET
        /// request.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn167007.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='operationId'>
        /// Required. Additional parameters.
        /// </param>
        /// <returns>
        /// The website operation response.
        /// </returns>
        public static Task<WebSiteAsyncOperationResponse> GetOperationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, Guid operationId)
        {
            return operations.GetOperationAsync(resourceGroupName, webSiteName, slotName, operationId, CancellationToken.None);
        }
        
        /// <summary>
        /// Get publishing credentials for the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site.
        /// </param>
        /// <returns>
        /// Publishing credentials for the website.
        /// </returns>
        public static WebSitePublishingCredentialsResult GetPublishingCredentials(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetPublishingCredentialsAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get publishing credentials for the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site.
        /// </param>
        /// <returns>
        /// Publishing credentials for the website.
        /// </returns>
        public static Task<WebSitePublishingCredentialsResult> GetPublishingCredentialsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetPublishingCredentialsAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Retrieve the publish settings information for a web site.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public static WebSiteGetPublishProfileResponse GetPublishProfile(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetPublishProfileAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Retrieve the publish settings information for a web site.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166996.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Publish Profile operation response.
        /// </returns>
        public static Task<WebSiteGetPublishProfileResponse> GetPublishProfileAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetPublishProfileAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public static WebSiteGetRepositoryResponse GetRepository(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetRepositoryAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// A web site repository is essentially a GIT repository that you can
        /// use to manage your web site content. By using GIT source control
        /// tools, you can push or pull version controlled changes to your
        /// site. You can create a repository for your web site by issuing an
        /// HTTP POST request, or retrieve information about the repository by
        /// using HTTP GET.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166967.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Repository operation response.
        /// </returns>
        public static Task<WebSiteGetRepositoryResponse> GetRepositoryAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetRepositoryAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Update list of app settings and connection strings which to be slot
        /// specific. E.g. settings in staging slots remain in staging after
        /// swap with production.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <returns>
        /// List of slot specific settings.
        /// </returns>
        public static SlotConfigNamesResult GetSlotConfigNames(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetSlotConfigNamesAsync(resourceGroupName, webSiteName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update list of app settings and connection strings which to be slot
        /// specific. E.g. settings in staging slots remain in staging after
        /// swap with production.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <returns>
        /// List of slot specific settings.
        /// </returns>
        public static Task<SlotConfigNamesResult> GetSlotConfigNamesAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName)
        {
            return operations.GetSlotConfigNamesAsync(resourceGroupName, webSiteName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get a web site's current usage metrics. The metrics returned
        /// include CPU Time, Data In, Data Out, Local bytes read, Local bytes
        /// written, Network bytes read, Network bytes written, WP stop
        /// requests, Memory Usage, CPU Time - Minute Limit, and File System
        /// Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public static WebSiteGetUsageMetricsResponse GetUsageMetrics(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).GetUsageMetricsAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get a web site's current usage metrics. The metrics returned
        /// include CPU Time, Data In, Data Out, Local bytes read, Local bytes
        /// written, Network bytes read, Network bytes written, WP stop
        /// requests, Memory Usage, CPU Time - Minute Limit, and File System
        /// Storage.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166991.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// The Get Web Site Usage Metrics operation response.
        /// </returns>
        public static Task<WebSiteGetUsageMetricsResponse> GetUsageMetricsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.GetUsageMetricsAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// List the Web Sites in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Optional. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public static WebSiteListResponse List(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).ListAsync(resourceGroupName, webSiteName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// List the Web Sites in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Optional. The name of the web site.
        /// </param>
        /// <param name='parameters'>
        /// Optional. Additional parameters.
        /// </param>
        /// <returns>
        /// The List Web Sites operation response.
        /// </returns>
        public static Task<WebSiteListResponse> ListAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, WebSiteListParameters parameters)
        {
            return operations.ListAsync(resourceGroupName, webSiteName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Returns list of all backups which are tracked by the system.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// List of backups for the website.
        /// </returns>
        public static WebSiteGetBackupsResponse ListBackups(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).ListBackupsAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Returns list of all backups which are tracked by the system.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// List of backups for the website.
        /// </returns>
        public static Task<WebSiteGetBackupsResponse> ListBackupsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.ListBackupsAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Restart(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).RestartAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RestartAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.RestartAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Restores a site to either a new site or existing site (Overwrite
        /// flag has to be set to true for that).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// Required. A restore request.
        /// </param>
        /// <returns>
        /// Restore operation information.
        /// </returns>
        public static WebSiteRestoreResponse Restore(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).RestoreAsync(resourceGroupName, webSiteName, slotName, restoreRequestEnvelope);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restores a site to either a new site or existing site (Overwrite
        /// flag has to be set to true for that).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='restoreRequestEnvelope'>
        /// Required. A restore request.
        /// </param>
        /// <returns>
        /// Restore operation information.
        /// </returns>
        public static Task<WebSiteRestoreResponse> RestoreAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, RestoreRequestEnvelope restoreRequestEnvelope)
        {
            return operations.RestoreAsync(resourceGroupName, webSiteName, slotName, restoreRequestEnvelope, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Start(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).StartAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> StartAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.StartAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Stop(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).StopAsync(resourceGroupName, webSiteName, slotName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Restart the web site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. Name of website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the web site
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> StopAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName)
        {
            return operations.StopAsync(resourceGroupName, webSiteName, slotName, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the application settings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site app settings parameters
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        public static WebSiteAppSettingsResult UpdateAppSettings(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateAppSettingsAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the application settings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site app settings parameters
        /// </param>
        /// <returns>
        /// List of app settings for the website.
        /// </returns>
        public static Task<WebSiteAppSettingsResult> UpdateAppSettingsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters)
        {
            return operations.UpdateAppSettingsAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Updates a backup schedule for a site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// Required. A backup schedule specification.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse UpdateBackupConfiguration(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateBackupConfigurationAsync(resourceGroupName, webSiteName, slotName, backupRequestEnvelope);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Updates a backup schedule for a site.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the web space.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='backupRequestEnvelope'>
        /// Required. A backup schedule specification.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UpdateBackupConfigurationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, BackupRequestEnvelope backupRequestEnvelope)
        {
            return operations.UpdateBackupConfigurationAsync(resourceGroupName, webSiteName, slotName, backupRequestEnvelope, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site Configuration parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse UpdateConfiguration(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConfigurationParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateConfigurationAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the config settings for a web site by issuing an
        /// HTTP GET request, or update them by using HTTP PUT with a request
        /// body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site.
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot.
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site Configuration parameters.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UpdateConfigurationAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConfigurationParameters parameters)
        {
            return operations.UpdateConfigurationAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the connection strings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site connection strings parameters
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        public static WebSiteConnectionStringsResult UpdateConnectionStrings(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConnectionStringsParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateConnectionStringsAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the connection strings for a web site by issuing
        /// an HTTP GET request, or update them by using HTTP PUT with a
        /// request body that contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site connection strings parameters
        /// </param>
        /// <returns>
        /// List of connection strings for the website.
        /// </returns>
        public static Task<WebSiteConnectionStringsResult> UpdateConnectionStringsAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteUpdateConnectionStringsParameters parameters)
        {
            return operations.UpdateConnectionStringsAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// You can retrieve the metadata for a web site by issuing an HTTP GET
        /// request, or update them by using HTTP PUT with a request body that
        /// contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site metadata parameters
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        public static WebSiteMetadataResult UpdateMetadata(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateMetadataAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// You can retrieve the metadata for a web site by issuing an HTTP GET
        /// request, or update them by using HTTP PUT with a request body that
        /// contains the settings to be updated.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/dn166985.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update Web Site metadata parameters
        /// </param>
        /// <returns>
        /// List of metadata for the website.
        /// </returns>
        public static Task<WebSiteMetadataResult> UpdateMetadataAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, WebSiteNameValueParameters parameters)
        {
            return operations.UpdateMetadataAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Link source control to website (do not forget to setup the token,
        /// and if needed token secret, for the specific source control type
        /// used).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The update site source control parameters.
        /// </param>
        /// <returns>
        /// The link site to source control operation response.
        /// </returns>
        public static SiteSourceControlUpdateResponse UpdateSiteSourceControl(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, SiteSourceControlUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateSiteSourceControlAsync(resourceGroupName, webSiteName, slotName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Link source control to website (do not forget to setup the token,
        /// and if needed token secret, for the specific source control type
        /// used).
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the web site
        /// </param>
        /// <param name='slotName'>
        /// Optional. The name of the slot of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The update site source control parameters.
        /// </param>
        /// <returns>
        /// The link site to source control operation response.
        /// </returns>
        public static Task<SiteSourceControlUpdateResponse> UpdateSiteSourceControlAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, string slotName, SiteSourceControlUpdateParameters parameters)
        {
            return operations.UpdateSiteSourceControlAsync(resourceGroupName, webSiteName, slotName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Update list of app settings and connection strings which to be slot
        /// specific. E.g. settings in staging slots remain in staging after
        /// swap with production.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update slot configs parameters
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse UpdateSlotConfigNames(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, SlotConfigNamesUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IWebSiteOperations)s).UpdateSlotConfigNamesAsync(resourceGroupName, webSiteName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update list of app settings and connection strings which to be slot
        /// specific. E.g. settings in staging slots remain in staging after
        /// swap with production.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.WebSites.IWebSiteOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='webSiteName'>
        /// Required. The name of the website
        /// </param>
        /// <param name='parameters'>
        /// Required. The Update slot configs parameters
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> UpdateSlotConfigNamesAsync(this IWebSiteOperations operations, string resourceGroupName, string webSiteName, SlotConfigNamesUpdateParameters parameters)
        {
            return operations.UpdateSlotConfigNamesAsync(resourceGroupName, webSiteName, parameters, CancellationToken.None);
        }
    }
}
