// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.AzureStack.Management;
using Microsoft.AzureStack.Management.Models;

namespace Microsoft.AzureStack.Management
{
    public static partial class ResourceOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='action'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ResourceActionResult Action(this IResourceOperations operations, string resourceGroupName, string resourceProviderNamespace, string fqResourceName, string action, ResourceActionParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResourceOperations)s).ActionAsync(resourceGroupName, resourceProviderNamespace, fqResourceName, action, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='action'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ResourceActionResult> ActionAsync(this IResourceOperations operations, string resourceGroupName, string resourceProviderNamespace, string fqResourceName, string action, ResourceActionParameters parameters)
        {
            return operations.ActionAsync(resourceGroupName, resourceProviderNamespace, fqResourceName, action, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ResourceCreateOrUpdateResult CreateOrUpdate(this IResourceOperations operations, string resourceGroupName, string resourceProviderNamespace, string fqResourceName, ResourceCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResourceOperations)s).CreateOrUpdateAsync(resourceGroupName, resourceProviderNamespace, fqResourceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ResourceCreateOrUpdateResult> CreateOrUpdateAsync(this IResourceOperations operations, string resourceGroupName, string resourceProviderNamespace, string fqResourceName, ResourceCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, resourceProviderNamespace, fqResourceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IResourceOperations operations, string resourceGroupName, string resourceProviderNamespace, string fqResourceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResourceOperations)s).DeleteAsync(resourceGroupName, resourceProviderNamespace, fqResourceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceName'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IResourceOperations operations, string resourceGroupName, string resourceProviderNamespace, string fqResourceName)
        {
            return operations.DeleteAsync(resourceGroupName, resourceProviderNamespace, fqResourceName, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ResourceGetResult Get(this IResourceOperations operations, string resourceGroupName, string resourceProviderNamespace, string fqResourceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResourceOperations)s).GetAsync(resourceGroupName, resourceProviderNamespace, fqResourceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ResourceGetResult> GetAsync(this IResourceOperations operations, string resourceGroupName, string resourceProviderNamespace, string fqResourceId)
        {
            return operations.GetAsync(resourceGroupName, resourceProviderNamespace, fqResourceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the spend on the resource with the given resource Id.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceId'>
        /// Required. The resource Id.
        /// </param>
        /// <returns>
        /// The resource spend result
        /// </returns>
        public static ResourceGetSpendResult GetSpend(this IResourceOperations operations, string resourceId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResourceOperations)s).GetSpendAsync(resourceId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the spend on the resource with the given resource Id.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceId'>
        /// Required. The resource Id.
        /// </param>
        /// <returns>
        /// The resource spend result
        /// </returns>
        public static Task<ResourceGetSpendResult> GetSpendAsync(this IResourceOperations operations, string resourceId)
        {
            return operations.GetSpendAsync(resourceId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceType'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ResourceListResult List(this IResourceOperations operations, string resourceGroupName, string resourceProviderNamespace, string fqResourceType)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResourceOperations)s).ListAsync(resourceGroupName, resourceProviderNamespace, fqResourceType);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceType'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ResourceListResult> ListAsync(this IResourceOperations operations, string resourceGroupName, string resourceProviderNamespace, string fqResourceType)
        {
            return operations.ListAsync(resourceGroupName, resourceProviderNamespace, fqResourceType, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ResourceListResult ListNext(this IResourceOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResourceOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ResourceListResult> ListNextAsync(this IResourceOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceType'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static ResourceListResult ListWithoutResourceGroup(this IResourceOperations operations, string resourceProviderNamespace, string fqResourceType)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IResourceOperations)s).ListWithoutResourceGroupAsync(resourceProviderNamespace, fqResourceType);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IResourceOperations.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='fqResourceType'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<ResourceListResult> ListWithoutResourceGroupAsync(this IResourceOperations operations, string resourceProviderNamespace, string fqResourceType)
        {
            return operations.ListWithoutResourceGroupAsync(resourceProviderNamespace, fqResourceType, CancellationToken.None);
        }
    }
}
