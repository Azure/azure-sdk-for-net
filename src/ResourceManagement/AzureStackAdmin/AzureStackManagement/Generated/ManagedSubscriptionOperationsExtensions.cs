// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.AzureStack.Management;
using Microsoft.AzureStack.Management.Models;

namespace Microsoft.AzureStack.Management
{
    public static partial class ManagedSubscriptionOperationsExtensions
    {
        /// <summary>
        /// Create or updates the subscription
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedSubscriptionOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Subscription update parameters
        /// </param>
        /// <returns>
        /// Result of the create or the update operation of the subscription
        /// </returns>
        public static ManagedSubscriptionCreateOrUpdateResult CreateOrUpdate(this IManagedSubscriptionOperations operations, ManagedSubscriptionCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagedSubscriptionOperations)s).CreateOrUpdateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Create or updates the subscription
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedSubscriptionOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Subscription update parameters
        /// </param>
        /// <returns>
        /// Result of the create or the update operation of the subscription
        /// </returns>
        public static Task<ManagedSubscriptionCreateOrUpdateResult> CreateOrUpdateAsync(this IManagedSubscriptionOperations operations, ManagedSubscriptionCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete operation of the subscription
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedSubscriptionOperations.
        /// </param>
        /// <param name='subscriptionId'>
        /// Required. Subscription Id
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IManagedSubscriptionOperations operations, string subscriptionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagedSubscriptionOperations)s).DeleteAsync(subscriptionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete operation of the subscription
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedSubscriptionOperations.
        /// </param>
        /// <param name='subscriptionId'>
        /// Required. Subscription Id
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IManagedSubscriptionOperations operations, string subscriptionId)
        {
            return operations.DeleteAsync(subscriptionId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the administrator view of the subscription
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedSubscriptionOperations.
        /// </param>
        /// <param name='subscriptionId'>
        /// Required. Subscription Id
        /// </param>
        /// <returns>
        /// Result of the subscription get operation
        /// </returns>
        public static ManagedSubscriptionGetResult Get(this IManagedSubscriptionOperations operations, string subscriptionId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagedSubscriptionOperations)s).GetAsync(subscriptionId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the administrator view of the subscription
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedSubscriptionOperations.
        /// </param>
        /// <param name='subscriptionId'>
        /// Required. Subscription Id
        /// </param>
        /// <returns>
        /// Result of the subscription get operation
        /// </returns>
        public static Task<ManagedSubscriptionGetResult> GetAsync(this IManagedSubscriptionOperations operations, string subscriptionId)
        {
            return operations.GetAsync(subscriptionId, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists the subscriptions
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedSubscriptionOperations.
        /// </param>
        /// <param name='includeDetails'>
        /// Required.
        /// </param>
        /// <returns>
        /// Result of the list operations
        /// </returns>
        public static ManagedSubscriptionListResult List(this IManagedSubscriptionOperations operations, bool includeDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagedSubscriptionOperations)s).ListAsync(includeDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists the subscriptions
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedSubscriptionOperations.
        /// </param>
        /// <param name='includeDetails'>
        /// Required.
        /// </param>
        /// <returns>
        /// Result of the list operations
        /// </returns>
        public static Task<ManagedSubscriptionListResult> ListAsync(this IManagedSubscriptionOperations operations, bool includeDetails)
        {
            return operations.ListAsync(includeDetails, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists the subscription with the next link
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedSubscriptionOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The URL pointing to get the next set of subscriptions
        /// </param>
        /// <returns>
        /// Result of the list operations
        /// </returns>
        public static ManagedSubscriptionListResult ListNext(this IManagedSubscriptionOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagedSubscriptionOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists the subscription with the next link
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedSubscriptionOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The URL pointing to get the next set of subscriptions
        /// </param>
        /// <returns>
        /// Result of the list operations
        /// </returns>
        public static Task<ManagedSubscriptionListResult> ListNextAsync(this IManagedSubscriptionOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
    }
}
