// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AzureStack.Management;
using Microsoft.AzureStack.Management.Models;

namespace Microsoft.AzureStack.Management
{
    public static partial class DelegatedOfferOperationsExtensions
    {
        /// <summary>
        /// Gets a delegated offer.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IDelegatedOfferOperations.
        /// </param>
        /// <param name='offerName'>
        /// Required. the name of the delegated offer.
        /// </param>
        /// <returns>
        /// Delegated offer get result.
        /// </returns>
        public static DelegatedOfferGetResult Get(this IDelegatedOfferOperations operations, string offerName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDelegatedOfferOperations)s).GetAsync(offerName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets a delegated offer.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IDelegatedOfferOperations.
        /// </param>
        /// <param name='offerName'>
        /// Required. the name of the delegated offer.
        /// </param>
        /// <returns>
        /// Delegated offer get result.
        /// </returns>
        public static Task<DelegatedOfferGetResult> GetAsync(this IDelegatedOfferOperations operations, string offerName)
        {
            return operations.GetAsync(offerName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get delegated offers for given subscription ID.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IDelegatedOfferOperations.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static DelegatedOfferListResult List(this IDelegatedOfferOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDelegatedOfferOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get delegated offers for given subscription ID.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IDelegatedOfferOperations.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<DelegatedOfferListResult> ListAsync(this IDelegatedOfferOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Next for get delegated offers for given subscription ID.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IDelegatedOfferOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The next link.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static DelegatedOfferListResult ListNext(this IDelegatedOfferOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDelegatedOfferOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Next for get delegated offers for given subscription ID.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IDelegatedOfferOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The next link.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<DelegatedOfferListResult> ListNextAsync(this IDelegatedOfferOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Update a delegated offer.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IDelegatedOfferOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to update delegated offer.
        /// </param>
        /// <returns>
        /// Delegated offer update result.
        /// </returns>
        public static DelegatedOfferUpdateResult Update(this IDelegatedOfferOperations operations, DelegatedOfferUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IDelegatedOfferOperations)s).UpdateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Update a delegated offer.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IDelegatedOfferOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters to update delegated offer.
        /// </param>
        /// <returns>
        /// Delegated offer update result.
        /// </returns>
        public static Task<DelegatedOfferUpdateResult> UpdateAsync(this IDelegatedOfferOperations operations, DelegatedOfferUpdateParameters parameters)
        {
            return operations.UpdateAsync(parameters, CancellationToken.None);
        }
    }
}
