// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.AzureStack.Management;
using Microsoft.AzureStack.Management.Models;

namespace Microsoft.AzureStack.Management
{
    public static partial class CloudOperationsExtensions
    {
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.ICloudOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static CloudCreateOrUpdateResult CreateOrUpdate(this ICloudOperations operations, CloudCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICloudOperations)s).CreateOrUpdateAsync(parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.ICloudOperations.
        /// </param>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<CloudCreateOrUpdateResult> CreateOrUpdateAsync(this ICloudOperations operations, CloudCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.ICloudOperations.
        /// </param>
        /// <param name='cloudId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this ICloudOperations operations, string cloudId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICloudOperations)s).DeleteAsync(cloudId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.ICloudOperations.
        /// </param>
        /// <param name='cloudId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this ICloudOperations operations, string cloudId)
        {
            return operations.DeleteAsync(cloudId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.ICloudOperations.
        /// </param>
        /// <param name='cloudId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static CloudGetResult Get(this ICloudOperations operations, string cloudId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICloudOperations)s).GetAsync(cloudId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.ICloudOperations.
        /// </param>
        /// <param name='cloudId'>
        /// Required. Your documentation here.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<CloudGetResult> GetAsync(this ICloudOperations operations, string cloudId)
        {
            return operations.GetAsync(cloudId, CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.ICloudOperations.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static CloudListResult List(this ICloudOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICloudOperations)s).ListAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.ICloudOperations.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<CloudListResult> ListAsync(this ICloudOperations operations)
        {
            return operations.ListAsync(CancellationToken.None);
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.ICloudOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static CloudListResult ListNext(this ICloudOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((ICloudOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.ICloudOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public static Task<CloudListResult> ListNextAsync(this ICloudOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
    }
}
