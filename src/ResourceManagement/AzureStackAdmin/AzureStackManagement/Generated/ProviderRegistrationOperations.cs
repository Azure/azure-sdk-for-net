// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.AzureStack.Management;
using Microsoft.AzureStack.Management.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.AzureStack.Management
{
    /// <summary>
    /// Resource provider manifest registration operations  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class ProviderRegistrationOperations : IServiceOperations<AzureStackClient>, IProviderRegistrationOperations
    {
        /// <summary>
        /// Initializes a new instance of the ProviderRegistrationOperations
        /// class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ProviderRegistrationOperations(AzureStackClient client)
        {
            this._client = client;
        }
        
        private AzureStackClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.AzureStackClient.
        /// </summary>
        public AzureStackClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Registers a resource provider manifest
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='parameters'>
        /// Required. Resource provider manifest definition
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Result of the create or update of resource provider manifest
        /// </returns>
        public async Task<ProviderRegistrationCreateOrUpdateResult> CreateOrUpdateAsync(string resourceGroupName, ProviderRegistrationCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.ProviderRegistration == null)
            {
                throw new ArgumentNullException("parameters.ProviderRegistration");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Subscriptions.Providers/manifests/";
            if (parameters.ProviderRegistration.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.ProviderRegistration.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject providerRegistrationCreateOrUpdateParametersValue = new JObject();
                requestDoc = providerRegistrationCreateOrUpdateParametersValue;
                
                if (parameters.ProviderRegistration.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    providerRegistrationCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.ProviderRegistration.Properties.DisplayName != null)
                    {
                        propertiesValue["displayName"] = parameters.ProviderRegistration.Properties.DisplayName;
                    }
                    
                    if (parameters.ProviderRegistration.Properties.Namespace != null)
                    {
                        propertiesValue["namespace"] = parameters.ProviderRegistration.Properties.Namespace;
                    }
                    
                    if (parameters.ProviderRegistration.Properties.ProviderLocation != null)
                    {
                        propertiesValue["providerLocation"] = parameters.ProviderRegistration.Properties.ProviderLocation;
                    }
                    
                    if (parameters.ProviderRegistration.Properties.Enabled != null)
                    {
                        propertiesValue["enabled"] = parameters.ProviderRegistration.Properties.Enabled.Value;
                    }
                    
                    if (parameters.ProviderRegistration.Properties.ManifestEndpoint != null)
                    {
                        JObject manifestEndpointValue = new JObject();
                        propertiesValue["manifestEndpoint"] = manifestEndpointValue;
                        
                        if (parameters.ProviderRegistration.Properties.ManifestEndpoint.ApiVersions != null)
                        {
                            if (parameters.ProviderRegistration.Properties.ManifestEndpoint.ApiVersions is ILazyCollection == false || ((ILazyCollection)parameters.ProviderRegistration.Properties.ManifestEndpoint.ApiVersions).IsInitialized)
                            {
                                JArray apiVersionsArray = new JArray();
                                foreach (string apiVersionsItem in parameters.ProviderRegistration.Properties.ManifestEndpoint.ApiVersions)
                                {
                                    apiVersionsArray.Add(apiVersionsItem);
                                }
                                manifestEndpointValue["apiVersions"] = apiVersionsArray;
                            }
                        }
                        
                        if (parameters.ProviderRegistration.Properties.ManifestEndpoint.ApiVersion != null)
                        {
                            manifestEndpointValue["apiVersion"] = parameters.ProviderRegistration.Properties.ManifestEndpoint.ApiVersion;
                        }
                        
                        if (parameters.ProviderRegistration.Properties.ManifestEndpoint.Enabled != null)
                        {
                            manifestEndpointValue["enabled"] = parameters.ProviderRegistration.Properties.ManifestEndpoint.Enabled.Value;
                        }
                        
                        if (parameters.ProviderRegistration.Properties.ManifestEndpoint.EndpointUri != null)
                        {
                            manifestEndpointValue["endpointUri"] = parameters.ProviderRegistration.Properties.ManifestEndpoint.EndpointUri;
                        }
                        
                        manifestEndpointValue["timeout"] = XmlConvert.ToString(parameters.ProviderRegistration.Properties.ManifestEndpoint.Timeout);
                        
                        if (parameters.ProviderRegistration.Properties.ManifestEndpoint.AuthenticationUsername != null)
                        {
                            manifestEndpointValue["authenticationUsername"] = parameters.ProviderRegistration.Properties.ManifestEndpoint.AuthenticationUsername;
                        }
                        
                        if (parameters.ProviderRegistration.Properties.ManifestEndpoint.AuthenticationPassword != null)
                        {
                            manifestEndpointValue["authenticationPassword"] = parameters.ProviderRegistration.Properties.ManifestEndpoint.AuthenticationPassword;
                        }
                    }
                    
                    if (parameters.ProviderRegistration.Properties.ProviderAuthorization != null)
                    {
                        JObject providerAuthorizationValue = new JObject();
                        propertiesValue["providerAuthorization"] = providerAuthorizationValue;
                        
                        if (parameters.ProviderRegistration.Properties.ProviderAuthorization.ApplicationId != null)
                        {
                            providerAuthorizationValue["applicationId"] = parameters.ProviderRegistration.Properties.ProviderAuthorization.ApplicationId;
                        }
                        
                        if (parameters.ProviderRegistration.Properties.ProviderAuthorization.RoleDefinitionId != null)
                        {
                            providerAuthorizationValue["roleDefinitionId"] = parameters.ProviderRegistration.Properties.ProviderAuthorization.RoleDefinitionId;
                        }
                    }
                    
                    if (parameters.ProviderRegistration.Properties.ExtensionName != null)
                    {
                        propertiesValue["extensionName"] = parameters.ProviderRegistration.Properties.ExtensionName;
                    }
                    
                    if (parameters.ProviderRegistration.Properties.ExtensionUri != null)
                    {
                        propertiesValue["extensionUri"] = parameters.ProviderRegistration.Properties.ExtensionUri;
                    }
                    
                    if (parameters.ProviderRegistration.Properties.Extensions != null)
                    {
                        if (parameters.ProviderRegistration.Properties.Extensions is ILazyCollection == false || ((ILazyCollection)parameters.ProviderRegistration.Properties.Extensions).IsInitialized)
                        {
                            JArray resourceTypesArray = new JArray();
                            foreach (Extension resourceTypesItem in parameters.ProviderRegistration.Properties.Extensions)
                            {
                                JObject extensionValue = new JObject();
                                resourceTypesArray.Add(extensionValue);
                                
                                if (resourceTypesItem.Name != null)
                                {
                                    extensionValue["name"] = resourceTypesItem.Name;
                                }
                                
                                if (resourceTypesItem.Uri != null)
                                {
                                    extensionValue["uri"] = resourceTypesItem.Uri;
                                }
                            }
                            propertiesValue["resourceTypes"] = resourceTypesArray;
                        }
                    }
                    
                    if (parameters.ProviderRegistration.Properties.ResourceTypes != null)
                    {
                        if (parameters.ProviderRegistration.Properties.ResourceTypes is ILazyCollection == false || ((ILazyCollection)parameters.ProviderRegistration.Properties.ResourceTypes).IsInitialized)
                        {
                            JArray resourceTypesArray2 = new JArray();
                            foreach (ResourceType resourceTypesItem2 in parameters.ProviderRegistration.Properties.ResourceTypes)
                            {
                                JObject resourceTypeValue = new JObject();
                                resourceTypesArray2.Add(resourceTypeValue);
                                
                                if (resourceTypesItem2.Name != null)
                                {
                                    resourceTypeValue["name"] = resourceTypesItem2.Name;
                                }
                                
                                resourceTypeValue["routingType"] = resourceTypesItem2.RoutingType.ToString();
                                
                                resourceTypeValue["resourceDeletionPolicy"] = resourceTypesItem2.ResourceDeletionPolicy.ToString();
                                
                                if (resourceTypesItem2.AllowedUnauthorizedActions != null)
                                {
                                    if (resourceTypesItem2.AllowedUnauthorizedActions is ILazyCollection == false || ((ILazyCollection)resourceTypesItem2.AllowedUnauthorizedActions).IsInitialized)
                                    {
                                        JArray allowedUnauthorizedActionsArray = new JArray();
                                        foreach (string allowedUnauthorizedActionsItem in resourceTypesItem2.AllowedUnauthorizedActions)
                                        {
                                            allowedUnauthorizedActionsArray.Add(allowedUnauthorizedActionsItem);
                                        }
                                        resourceTypeValue["allowedUnauthorizedActions"] = allowedUnauthorizedActionsArray;
                                    }
                                }
                                
                                if (resourceTypesItem2.MeteredResourceIds != null)
                                {
                                    if (resourceTypesItem2.MeteredResourceIds is ILazyCollection == false || ((ILazyCollection)resourceTypesItem2.MeteredResourceIds).IsInitialized)
                                    {
                                        JArray meteredResourceIdsArray = new JArray();
                                        foreach (string meteredResourceIdsItem in resourceTypesItem2.MeteredResourceIds)
                                        {
                                            meteredResourceIdsArray.Add(meteredResourceIdsItem);
                                        }
                                        resourceTypeValue["meteredResourceIds"] = meteredResourceIdsArray;
                                    }
                                }
                                
                                resourceTypeValue["marketplaceType"] = resourceTypesItem2.MarketplaceType.ToString();
                                
                                if (resourceTypesItem2.Endpoints != null)
                                {
                                    if (resourceTypesItem2.Endpoints is ILazyCollection == false || ((ILazyCollection)resourceTypesItem2.Endpoints).IsInitialized)
                                    {
                                        JArray endpointsArray = new JArray();
                                        foreach (ResourceProviderEndpoint endpointsItem in resourceTypesItem2.Endpoints)
                                        {
                                            JObject resourceProviderEndpointValue = new JObject();
                                            endpointsArray.Add(resourceProviderEndpointValue);
                                            
                                            if (endpointsItem.ApiVersions != null)
                                            {
                                                if (endpointsItem.ApiVersions is ILazyCollection == false || ((ILazyCollection)endpointsItem.ApiVersions).IsInitialized)
                                                {
                                                    JArray apiVersionsArray2 = new JArray();
                                                    foreach (string apiVersionsItem2 in endpointsItem.ApiVersions)
                                                    {
                                                        apiVersionsArray2.Add(apiVersionsItem2);
                                                    }
                                                    resourceProviderEndpointValue["apiVersions"] = apiVersionsArray2;
                                                }
                                            }
                                            
                                            if (endpointsItem.ApiVersion != null)
                                            {
                                                resourceProviderEndpointValue["apiVersion"] = endpointsItem.ApiVersion;
                                            }
                                            
                                            if (endpointsItem.Enabled != null)
                                            {
                                                resourceProviderEndpointValue["enabled"] = endpointsItem.Enabled.Value;
                                            }
                                            
                                            if (endpointsItem.EndpointUri != null)
                                            {
                                                resourceProviderEndpointValue["endpointUri"] = endpointsItem.EndpointUri;
                                            }
                                            
                                            resourceProviderEndpointValue["timeout"] = XmlConvert.ToString(endpointsItem.Timeout);
                                            
                                            if (endpointsItem.AuthenticationUsername != null)
                                            {
                                                resourceProviderEndpointValue["authenticationUsername"] = endpointsItem.AuthenticationUsername;
                                            }
                                            
                                            if (endpointsItem.AuthenticationPassword != null)
                                            {
                                                resourceProviderEndpointValue["authenticationPassword"] = endpointsItem.AuthenticationPassword;
                                            }
                                        }
                                        resourceTypeValue["endpoints"] = endpointsArray;
                                    }
                                }
                            }
                            propertiesValue["resourceTypes"] = resourceTypesArray2;
                        }
                    }
                    
                    if (parameters.ProviderRegistration.Properties.ProvisioningState != null)
                    {
                        propertiesValue["ProvisioningState"] = parameters.ProviderRegistration.Properties.ProvisioningState.Value.ToString();
                    }
                }
                
                if (parameters.ProviderRegistration.Id != null)
                {
                    providerRegistrationCreateOrUpdateParametersValue["id"] = parameters.ProviderRegistration.Id;
                }
                
                if (parameters.ProviderRegistration.Name != null)
                {
                    providerRegistrationCreateOrUpdateParametersValue["name"] = parameters.ProviderRegistration.Name;
                }
                
                if (parameters.ProviderRegistration.Type != null)
                {
                    providerRegistrationCreateOrUpdateParametersValue["type"] = parameters.ProviderRegistration.Type;
                }
                
                if (parameters.ProviderRegistration.Location != null)
                {
                    providerRegistrationCreateOrUpdateParametersValue["location"] = parameters.ProviderRegistration.Location;
                }
                
                if (parameters.ProviderRegistration.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.ProviderRegistration.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    providerRegistrationCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProviderRegistrationCreateOrUpdateResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProviderRegistrationCreateOrUpdateResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProviderRegistrationModel providerRegistrationInstance = new ProviderRegistrationModel();
                            result.ProviderRegistration = providerRegistrationInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                ManifestPropertiesDefinition propertiesInstance = new ManifestPropertiesDefinition();
                                providerRegistrationInstance.Properties = propertiesInstance;
                                
                                JToken displayNameValue = propertiesValue2["displayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    propertiesInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken namespaceValue = propertiesValue2["namespace"];
                                if (namespaceValue != null && namespaceValue.Type != JTokenType.Null)
                                {
                                    string namespaceInstance = ((string)namespaceValue);
                                    propertiesInstance.Namespace = namespaceInstance;
                                }
                                
                                JToken providerLocationValue = propertiesValue2["providerLocation"];
                                if (providerLocationValue != null && providerLocationValue.Type != JTokenType.Null)
                                {
                                    string providerLocationInstance = ((string)providerLocationValue);
                                    propertiesInstance.ProviderLocation = providerLocationInstance;
                                }
                                
                                JToken enabledValue = propertiesValue2["enabled"];
                                if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                {
                                    bool enabledInstance = ((bool)enabledValue);
                                    propertiesInstance.Enabled = enabledInstance;
                                }
                                
                                JToken manifestEndpointValue2 = propertiesValue2["manifestEndpoint"];
                                if (manifestEndpointValue2 != null && manifestEndpointValue2.Type != JTokenType.Null)
                                {
                                    ResourceProviderEndpoint manifestEndpointInstance = new ResourceProviderEndpoint();
                                    propertiesInstance.ManifestEndpoint = manifestEndpointInstance;
                                    
                                    JToken apiVersionsArray3 = manifestEndpointValue2["apiVersions"];
                                    if (apiVersionsArray3 != null && apiVersionsArray3.Type != JTokenType.Null)
                                    {
                                        foreach (JToken apiVersionsValue in ((JArray)apiVersionsArray3))
                                        {
                                            manifestEndpointInstance.ApiVersions.Add(((string)apiVersionsValue));
                                        }
                                    }
                                    
                                    JToken apiVersionValue = manifestEndpointValue2["apiVersion"];
                                    if (apiVersionValue != null && apiVersionValue.Type != JTokenType.Null)
                                    {
                                        string apiVersionInstance = ((string)apiVersionValue);
                                        manifestEndpointInstance.ApiVersion = apiVersionInstance;
                                    }
                                    
                                    JToken enabledValue2 = manifestEndpointValue2["enabled"];
                                    if (enabledValue2 != null && enabledValue2.Type != JTokenType.Null)
                                    {
                                        bool enabledInstance2 = ((bool)enabledValue2);
                                        manifestEndpointInstance.Enabled = enabledInstance2;
                                    }
                                    
                                    JToken endpointUriValue = manifestEndpointValue2["endpointUri"];
                                    if (endpointUriValue != null && endpointUriValue.Type != JTokenType.Null)
                                    {
                                        string endpointUriInstance = ((string)endpointUriValue);
                                        manifestEndpointInstance.EndpointUri = endpointUriInstance;
                                    }
                                    
                                    JToken timeoutValue = manifestEndpointValue2["timeout"];
                                    if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeoutInstance = XmlConvert.ToTimeSpan(((string)timeoutValue));
                                        manifestEndpointInstance.Timeout = timeoutInstance;
                                    }
                                    
                                    JToken authenticationUsernameValue = manifestEndpointValue2["authenticationUsername"];
                                    if (authenticationUsernameValue != null && authenticationUsernameValue.Type != JTokenType.Null)
                                    {
                                        string authenticationUsernameInstance = ((string)authenticationUsernameValue);
                                        manifestEndpointInstance.AuthenticationUsername = authenticationUsernameInstance;
                                    }
                                    
                                    JToken authenticationPasswordValue = manifestEndpointValue2["authenticationPassword"];
                                    if (authenticationPasswordValue != null && authenticationPasswordValue.Type != JTokenType.Null)
                                    {
                                        string authenticationPasswordInstance = ((string)authenticationPasswordValue);
                                        manifestEndpointInstance.AuthenticationPassword = authenticationPasswordInstance;
                                    }
                                }
                                
                                JToken providerAuthorizationValue2 = propertiesValue2["providerAuthorization"];
                                if (providerAuthorizationValue2 != null && providerAuthorizationValue2.Type != JTokenType.Null)
                                {
                                    ResourceProviderAuthorization providerAuthorizationInstance = new ResourceProviderAuthorization();
                                    propertiesInstance.ProviderAuthorization = providerAuthorizationInstance;
                                    
                                    JToken applicationIdValue = providerAuthorizationValue2["applicationId"];
                                    if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                    {
                                        string applicationIdInstance = ((string)applicationIdValue);
                                        providerAuthorizationInstance.ApplicationId = applicationIdInstance;
                                    }
                                    
                                    JToken roleDefinitionIdValue = providerAuthorizationValue2["roleDefinitionId"];
                                    if (roleDefinitionIdValue != null && roleDefinitionIdValue.Type != JTokenType.Null)
                                    {
                                        string roleDefinitionIdInstance = ((string)roleDefinitionIdValue);
                                        providerAuthorizationInstance.RoleDefinitionId = roleDefinitionIdInstance;
                                    }
                                }
                                
                                JToken extensionNameValue = propertiesValue2["extensionName"];
                                if (extensionNameValue != null && extensionNameValue.Type != JTokenType.Null)
                                {
                                    string extensionNameInstance = ((string)extensionNameValue);
                                    propertiesInstance.ExtensionName = extensionNameInstance;
                                }
                                
                                JToken extensionUriValue = propertiesValue2["extensionUri"];
                                if (extensionUriValue != null && extensionUriValue.Type != JTokenType.Null)
                                {
                                    string extensionUriInstance = ((string)extensionUriValue);
                                    propertiesInstance.ExtensionUri = extensionUriInstance;
                                }
                                
                                JToken resourceTypesArray3 = propertiesValue2["resourceTypes"];
                                if (resourceTypesArray3 != null && resourceTypesArray3.Type != JTokenType.Null)
                                {
                                    foreach (JToken resourceTypesValue in ((JArray)resourceTypesArray3))
                                    {
                                        Extension extensionInstance = new Extension();
                                        propertiesInstance.Extensions.Add(extensionInstance);
                                        
                                        JToken nameValue = resourceTypesValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            extensionInstance.Name = nameInstance;
                                        }
                                        
                                        JToken uriValue = resourceTypesValue["uri"];
                                        if (uriValue != null && uriValue.Type != JTokenType.Null)
                                        {
                                            string uriInstance = ((string)uriValue);
                                            extensionInstance.Uri = uriInstance;
                                        }
                                    }
                                }
                                
                                JToken resourceTypesArray4 = propertiesValue2["resourceTypes"];
                                if (resourceTypesArray4 != null && resourceTypesArray4.Type != JTokenType.Null)
                                {
                                    foreach (JToken resourceTypesValue2 in ((JArray)resourceTypesArray4))
                                    {
                                        ResourceType resourceTypeInstance = new ResourceType();
                                        propertiesInstance.ResourceTypes.Add(resourceTypeInstance);
                                        
                                        JToken nameValue2 = resourceTypesValue2["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            resourceTypeInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken routingTypeValue = resourceTypesValue2["routingType"];
                                        if (routingTypeValue != null && routingTypeValue.Type != JTokenType.Null)
                                        {
                                            RoutingType routingTypeInstance = ((RoutingType)Enum.Parse(typeof(RoutingType), ((string)routingTypeValue), true));
                                            resourceTypeInstance.RoutingType = routingTypeInstance;
                                        }
                                        
                                        JToken resourceDeletionPolicyValue = resourceTypesValue2["resourceDeletionPolicy"];
                                        if (resourceDeletionPolicyValue != null && resourceDeletionPolicyValue.Type != JTokenType.Null)
                                        {
                                            ResourceDeletionPolicy resourceDeletionPolicyInstance = ((ResourceDeletionPolicy)Enum.Parse(typeof(ResourceDeletionPolicy), ((string)resourceDeletionPolicyValue), true));
                                            resourceTypeInstance.ResourceDeletionPolicy = resourceDeletionPolicyInstance;
                                        }
                                        
                                        JToken allowedUnauthorizedActionsArray2 = resourceTypesValue2["allowedUnauthorizedActions"];
                                        if (allowedUnauthorizedActionsArray2 != null && allowedUnauthorizedActionsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedUnauthorizedActionsValue in ((JArray)allowedUnauthorizedActionsArray2))
                                            {
                                                resourceTypeInstance.AllowedUnauthorizedActions.Add(((string)allowedUnauthorizedActionsValue));
                                            }
                                        }
                                        
                                        JToken meteredResourceIdsArray2 = resourceTypesValue2["meteredResourceIds"];
                                        if (meteredResourceIdsArray2 != null && meteredResourceIdsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken meteredResourceIdsValue in ((JArray)meteredResourceIdsArray2))
                                            {
                                                resourceTypeInstance.MeteredResourceIds.Add(((string)meteredResourceIdsValue));
                                            }
                                        }
                                        
                                        JToken marketplaceTypeValue = resourceTypesValue2["marketplaceType"];
                                        if (marketplaceTypeValue != null && marketplaceTypeValue.Type != JTokenType.Null)
                                        {
                                            MarketplaceType marketplaceTypeInstance = ((MarketplaceType)Enum.Parse(typeof(MarketplaceType), ((string)marketplaceTypeValue), true));
                                            resourceTypeInstance.MarketplaceType = marketplaceTypeInstance;
                                        }
                                        
                                        JToken endpointsArray2 = resourceTypesValue2["endpoints"];
                                        if (endpointsArray2 != null && endpointsArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endpointsValue in ((JArray)endpointsArray2))
                                            {
                                                ResourceProviderEndpoint resourceProviderEndpointInstance = new ResourceProviderEndpoint();
                                                resourceTypeInstance.Endpoints.Add(resourceProviderEndpointInstance);
                                                
                                                JToken apiVersionsArray4 = endpointsValue["apiVersions"];
                                                if (apiVersionsArray4 != null && apiVersionsArray4.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken apiVersionsValue2 in ((JArray)apiVersionsArray4))
                                                    {
                                                        resourceProviderEndpointInstance.ApiVersions.Add(((string)apiVersionsValue2));
                                                    }
                                                }
                                                
                                                JToken apiVersionValue2 = endpointsValue["apiVersion"];
                                                if (apiVersionValue2 != null && apiVersionValue2.Type != JTokenType.Null)
                                                {
                                                    string apiVersionInstance2 = ((string)apiVersionValue2);
                                                    resourceProviderEndpointInstance.ApiVersion = apiVersionInstance2;
                                                }
                                                
                                                JToken enabledValue3 = endpointsValue["enabled"];
                                                if (enabledValue3 != null && enabledValue3.Type != JTokenType.Null)
                                                {
                                                    bool enabledInstance3 = ((bool)enabledValue3);
                                                    resourceProviderEndpointInstance.Enabled = enabledInstance3;
                                                }
                                                
                                                JToken endpointUriValue2 = endpointsValue["endpointUri"];
                                                if (endpointUriValue2 != null && endpointUriValue2.Type != JTokenType.Null)
                                                {
                                                    string endpointUriInstance2 = ((string)endpointUriValue2);
                                                    resourceProviderEndpointInstance.EndpointUri = endpointUriInstance2;
                                                }
                                                
                                                JToken timeoutValue2 = endpointsValue["timeout"];
                                                if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance2 = XmlConvert.ToTimeSpan(((string)timeoutValue2));
                                                    resourceProviderEndpointInstance.Timeout = timeoutInstance2;
                                                }
                                                
                                                JToken authenticationUsernameValue2 = endpointsValue["authenticationUsername"];
                                                if (authenticationUsernameValue2 != null && authenticationUsernameValue2.Type != JTokenType.Null)
                                                {
                                                    string authenticationUsernameInstance2 = ((string)authenticationUsernameValue2);
                                                    resourceProviderEndpointInstance.AuthenticationUsername = authenticationUsernameInstance2;
                                                }
                                                
                                                JToken authenticationPasswordValue2 = endpointsValue["authenticationPassword"];
                                                if (authenticationPasswordValue2 != null && authenticationPasswordValue2.Type != JTokenType.Null)
                                                {
                                                    string authenticationPasswordInstance2 = ((string)authenticationPasswordValue2);
                                                    resourceProviderEndpointInstance.AuthenticationPassword = authenticationPasswordInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["ProvisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                providerRegistrationInstance.Id = idInstance;
                            }
                            
                            JToken nameValue3 = responseDoc["name"];
                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                            {
                                string nameInstance3 = ((string)nameValue3);
                                providerRegistrationInstance.Name = nameInstance3;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                providerRegistrationInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                providerRegistrationInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    providerRegistrationInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes the resource provider registration
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='providerregistrationId'>
        /// Required. Resource provider manifest Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string providerregistrationId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (providerregistrationId == null)
            {
                throw new ArgumentNullException("providerregistrationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("providerregistrationId", providerregistrationId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Subscriptions.Providers/manifests/";
            url = url + Uri.EscapeDataString(providerregistrationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the manifest registration for the specified manifest
        /// registration id
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='providerregistrationId'>
        /// Required. Resource provider manifest registration Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Get result of the resource provider manifest registration
        /// </returns>
        public async Task<ProviderRegistrationGetResult> GetAsync(string resourceGroupName, string providerregistrationId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (providerregistrationId == null)
            {
                throw new ArgumentNullException("providerregistrationId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("providerregistrationId", providerregistrationId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Subscriptions.Providers/manifests/";
            url = url + Uri.EscapeDataString(providerregistrationId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProviderRegistrationGetResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProviderRegistrationGetResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            ProviderRegistrationModel providerRegistrationInstance = new ProviderRegistrationModel();
                            result.ProviderRegistration = providerRegistrationInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                ManifestPropertiesDefinition propertiesInstance = new ManifestPropertiesDefinition();
                                providerRegistrationInstance.Properties = propertiesInstance;
                                
                                JToken displayNameValue = propertiesValue["displayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    propertiesInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken namespaceValue = propertiesValue["namespace"];
                                if (namespaceValue != null && namespaceValue.Type != JTokenType.Null)
                                {
                                    string namespaceInstance = ((string)namespaceValue);
                                    propertiesInstance.Namespace = namespaceInstance;
                                }
                                
                                JToken providerLocationValue = propertiesValue["providerLocation"];
                                if (providerLocationValue != null && providerLocationValue.Type != JTokenType.Null)
                                {
                                    string providerLocationInstance = ((string)providerLocationValue);
                                    propertiesInstance.ProviderLocation = providerLocationInstance;
                                }
                                
                                JToken enabledValue = propertiesValue["enabled"];
                                if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                {
                                    bool enabledInstance = ((bool)enabledValue);
                                    propertiesInstance.Enabled = enabledInstance;
                                }
                                
                                JToken manifestEndpointValue = propertiesValue["manifestEndpoint"];
                                if (manifestEndpointValue != null && manifestEndpointValue.Type != JTokenType.Null)
                                {
                                    ResourceProviderEndpoint manifestEndpointInstance = new ResourceProviderEndpoint();
                                    propertiesInstance.ManifestEndpoint = manifestEndpointInstance;
                                    
                                    JToken apiVersionsArray = manifestEndpointValue["apiVersions"];
                                    if (apiVersionsArray != null && apiVersionsArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken apiVersionsValue in ((JArray)apiVersionsArray))
                                        {
                                            manifestEndpointInstance.ApiVersions.Add(((string)apiVersionsValue));
                                        }
                                    }
                                    
                                    JToken apiVersionValue = manifestEndpointValue["apiVersion"];
                                    if (apiVersionValue != null && apiVersionValue.Type != JTokenType.Null)
                                    {
                                        string apiVersionInstance = ((string)apiVersionValue);
                                        manifestEndpointInstance.ApiVersion = apiVersionInstance;
                                    }
                                    
                                    JToken enabledValue2 = manifestEndpointValue["enabled"];
                                    if (enabledValue2 != null && enabledValue2.Type != JTokenType.Null)
                                    {
                                        bool enabledInstance2 = ((bool)enabledValue2);
                                        manifestEndpointInstance.Enabled = enabledInstance2;
                                    }
                                    
                                    JToken endpointUriValue = manifestEndpointValue["endpointUri"];
                                    if (endpointUriValue != null && endpointUriValue.Type != JTokenType.Null)
                                    {
                                        string endpointUriInstance = ((string)endpointUriValue);
                                        manifestEndpointInstance.EndpointUri = endpointUriInstance;
                                    }
                                    
                                    JToken timeoutValue = manifestEndpointValue["timeout"];
                                    if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan timeoutInstance = XmlConvert.ToTimeSpan(((string)timeoutValue));
                                        manifestEndpointInstance.Timeout = timeoutInstance;
                                    }
                                    
                                    JToken authenticationUsernameValue = manifestEndpointValue["authenticationUsername"];
                                    if (authenticationUsernameValue != null && authenticationUsernameValue.Type != JTokenType.Null)
                                    {
                                        string authenticationUsernameInstance = ((string)authenticationUsernameValue);
                                        manifestEndpointInstance.AuthenticationUsername = authenticationUsernameInstance;
                                    }
                                    
                                    JToken authenticationPasswordValue = manifestEndpointValue["authenticationPassword"];
                                    if (authenticationPasswordValue != null && authenticationPasswordValue.Type != JTokenType.Null)
                                    {
                                        string authenticationPasswordInstance = ((string)authenticationPasswordValue);
                                        manifestEndpointInstance.AuthenticationPassword = authenticationPasswordInstance;
                                    }
                                }
                                
                                JToken providerAuthorizationValue = propertiesValue["providerAuthorization"];
                                if (providerAuthorizationValue != null && providerAuthorizationValue.Type != JTokenType.Null)
                                {
                                    ResourceProviderAuthorization providerAuthorizationInstance = new ResourceProviderAuthorization();
                                    propertiesInstance.ProviderAuthorization = providerAuthorizationInstance;
                                    
                                    JToken applicationIdValue = providerAuthorizationValue["applicationId"];
                                    if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                    {
                                        string applicationIdInstance = ((string)applicationIdValue);
                                        providerAuthorizationInstance.ApplicationId = applicationIdInstance;
                                    }
                                    
                                    JToken roleDefinitionIdValue = providerAuthorizationValue["roleDefinitionId"];
                                    if (roleDefinitionIdValue != null && roleDefinitionIdValue.Type != JTokenType.Null)
                                    {
                                        string roleDefinitionIdInstance = ((string)roleDefinitionIdValue);
                                        providerAuthorizationInstance.RoleDefinitionId = roleDefinitionIdInstance;
                                    }
                                }
                                
                                JToken extensionNameValue = propertiesValue["extensionName"];
                                if (extensionNameValue != null && extensionNameValue.Type != JTokenType.Null)
                                {
                                    string extensionNameInstance = ((string)extensionNameValue);
                                    propertiesInstance.ExtensionName = extensionNameInstance;
                                }
                                
                                JToken extensionUriValue = propertiesValue["extensionUri"];
                                if (extensionUriValue != null && extensionUriValue.Type != JTokenType.Null)
                                {
                                    string extensionUriInstance = ((string)extensionUriValue);
                                    propertiesInstance.ExtensionUri = extensionUriInstance;
                                }
                                
                                JToken resourceTypesArray = propertiesValue["resourceTypes"];
                                if (resourceTypesArray != null && resourceTypesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken resourceTypesValue in ((JArray)resourceTypesArray))
                                    {
                                        Extension extensionInstance = new Extension();
                                        propertiesInstance.Extensions.Add(extensionInstance);
                                        
                                        JToken nameValue = resourceTypesValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            extensionInstance.Name = nameInstance;
                                        }
                                        
                                        JToken uriValue = resourceTypesValue["uri"];
                                        if (uriValue != null && uriValue.Type != JTokenType.Null)
                                        {
                                            string uriInstance = ((string)uriValue);
                                            extensionInstance.Uri = uriInstance;
                                        }
                                    }
                                }
                                
                                JToken resourceTypesArray2 = propertiesValue["resourceTypes"];
                                if (resourceTypesArray2 != null && resourceTypesArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken resourceTypesValue2 in ((JArray)resourceTypesArray2))
                                    {
                                        ResourceType resourceTypeInstance = new ResourceType();
                                        propertiesInstance.ResourceTypes.Add(resourceTypeInstance);
                                        
                                        JToken nameValue2 = resourceTypesValue2["name"];
                                        if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                        {
                                            string nameInstance2 = ((string)nameValue2);
                                            resourceTypeInstance.Name = nameInstance2;
                                        }
                                        
                                        JToken routingTypeValue = resourceTypesValue2["routingType"];
                                        if (routingTypeValue != null && routingTypeValue.Type != JTokenType.Null)
                                        {
                                            RoutingType routingTypeInstance = ((RoutingType)Enum.Parse(typeof(RoutingType), ((string)routingTypeValue), true));
                                            resourceTypeInstance.RoutingType = routingTypeInstance;
                                        }
                                        
                                        JToken resourceDeletionPolicyValue = resourceTypesValue2["resourceDeletionPolicy"];
                                        if (resourceDeletionPolicyValue != null && resourceDeletionPolicyValue.Type != JTokenType.Null)
                                        {
                                            ResourceDeletionPolicy resourceDeletionPolicyInstance = ((ResourceDeletionPolicy)Enum.Parse(typeof(ResourceDeletionPolicy), ((string)resourceDeletionPolicyValue), true));
                                            resourceTypeInstance.ResourceDeletionPolicy = resourceDeletionPolicyInstance;
                                        }
                                        
                                        JToken allowedUnauthorizedActionsArray = resourceTypesValue2["allowedUnauthorizedActions"];
                                        if (allowedUnauthorizedActionsArray != null && allowedUnauthorizedActionsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken allowedUnauthorizedActionsValue in ((JArray)allowedUnauthorizedActionsArray))
                                            {
                                                resourceTypeInstance.AllowedUnauthorizedActions.Add(((string)allowedUnauthorizedActionsValue));
                                            }
                                        }
                                        
                                        JToken meteredResourceIdsArray = resourceTypesValue2["meteredResourceIds"];
                                        if (meteredResourceIdsArray != null && meteredResourceIdsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken meteredResourceIdsValue in ((JArray)meteredResourceIdsArray))
                                            {
                                                resourceTypeInstance.MeteredResourceIds.Add(((string)meteredResourceIdsValue));
                                            }
                                        }
                                        
                                        JToken marketplaceTypeValue = resourceTypesValue2["marketplaceType"];
                                        if (marketplaceTypeValue != null && marketplaceTypeValue.Type != JTokenType.Null)
                                        {
                                            MarketplaceType marketplaceTypeInstance = ((MarketplaceType)Enum.Parse(typeof(MarketplaceType), ((string)marketplaceTypeValue), true));
                                            resourceTypeInstance.MarketplaceType = marketplaceTypeInstance;
                                        }
                                        
                                        JToken endpointsArray = resourceTypesValue2["endpoints"];
                                        if (endpointsArray != null && endpointsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken endpointsValue in ((JArray)endpointsArray))
                                            {
                                                ResourceProviderEndpoint resourceProviderEndpointInstance = new ResourceProviderEndpoint();
                                                resourceTypeInstance.Endpoints.Add(resourceProviderEndpointInstance);
                                                
                                                JToken apiVersionsArray2 = endpointsValue["apiVersions"];
                                                if (apiVersionsArray2 != null && apiVersionsArray2.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken apiVersionsValue2 in ((JArray)apiVersionsArray2))
                                                    {
                                                        resourceProviderEndpointInstance.ApiVersions.Add(((string)apiVersionsValue2));
                                                    }
                                                }
                                                
                                                JToken apiVersionValue2 = endpointsValue["apiVersion"];
                                                if (apiVersionValue2 != null && apiVersionValue2.Type != JTokenType.Null)
                                                {
                                                    string apiVersionInstance2 = ((string)apiVersionValue2);
                                                    resourceProviderEndpointInstance.ApiVersion = apiVersionInstance2;
                                                }
                                                
                                                JToken enabledValue3 = endpointsValue["enabled"];
                                                if (enabledValue3 != null && enabledValue3.Type != JTokenType.Null)
                                                {
                                                    bool enabledInstance3 = ((bool)enabledValue3);
                                                    resourceProviderEndpointInstance.Enabled = enabledInstance3;
                                                }
                                                
                                                JToken endpointUriValue2 = endpointsValue["endpointUri"];
                                                if (endpointUriValue2 != null && endpointUriValue2.Type != JTokenType.Null)
                                                {
                                                    string endpointUriInstance2 = ((string)endpointUriValue2);
                                                    resourceProviderEndpointInstance.EndpointUri = endpointUriInstance2;
                                                }
                                                
                                                JToken timeoutValue2 = endpointsValue["timeout"];
                                                if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                {
                                                    TimeSpan timeoutInstance2 = XmlConvert.ToTimeSpan(((string)timeoutValue2));
                                                    resourceProviderEndpointInstance.Timeout = timeoutInstance2;
                                                }
                                                
                                                JToken authenticationUsernameValue2 = endpointsValue["authenticationUsername"];
                                                if (authenticationUsernameValue2 != null && authenticationUsernameValue2.Type != JTokenType.Null)
                                                {
                                                    string authenticationUsernameInstance2 = ((string)authenticationUsernameValue2);
                                                    resourceProviderEndpointInstance.AuthenticationUsername = authenticationUsernameInstance2;
                                                }
                                                
                                                JToken authenticationPasswordValue2 = endpointsValue["authenticationPassword"];
                                                if (authenticationPasswordValue2 != null && authenticationPasswordValue2.Type != JTokenType.Null)
                                                {
                                                    string authenticationPasswordInstance2 = ((string)authenticationPasswordValue2);
                                                    resourceProviderEndpointInstance.AuthenticationPassword = authenticationPasswordInstance2;
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                JToken provisioningStateValue = propertiesValue["ProvisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                providerRegistrationInstance.Id = idInstance;
                            }
                            
                            JToken nameValue3 = responseDoc["name"];
                            if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                            {
                                string nameInstance3 = ((string)nameValue3);
                                providerRegistrationInstance.Name = nameInstance3;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                providerRegistrationInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                providerRegistrationInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    providerRegistrationInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists the registered provider manifest given a resource group
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Result of the resource provider manifest list operation
        /// </returns>
        public async Task<ProviderRegistrationListResult> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Subscriptions.Providers/manifests";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ProviderRegistrationListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ProviderRegistrationListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    ProviderRegistrationModel providerRegistrationModelInstance = new ProviderRegistrationModel();
                                    result.ProviderRegistrations.Add(providerRegistrationModelInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        ManifestPropertiesDefinition propertiesInstance = new ManifestPropertiesDefinition();
                                        providerRegistrationModelInstance.Properties = propertiesInstance;
                                        
                                        JToken displayNameValue = propertiesValue["displayName"];
                                        if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                        {
                                            string displayNameInstance = ((string)displayNameValue);
                                            propertiesInstance.DisplayName = displayNameInstance;
                                        }
                                        
                                        JToken namespaceValue = propertiesValue["namespace"];
                                        if (namespaceValue != null && namespaceValue.Type != JTokenType.Null)
                                        {
                                            string namespaceInstance = ((string)namespaceValue);
                                            propertiesInstance.Namespace = namespaceInstance;
                                        }
                                        
                                        JToken providerLocationValue = propertiesValue["providerLocation"];
                                        if (providerLocationValue != null && providerLocationValue.Type != JTokenType.Null)
                                        {
                                            string providerLocationInstance = ((string)providerLocationValue);
                                            propertiesInstance.ProviderLocation = providerLocationInstance;
                                        }
                                        
                                        JToken enabledValue = propertiesValue["enabled"];
                                        if (enabledValue != null && enabledValue.Type != JTokenType.Null)
                                        {
                                            bool enabledInstance = ((bool)enabledValue);
                                            propertiesInstance.Enabled = enabledInstance;
                                        }
                                        
                                        JToken manifestEndpointValue = propertiesValue["manifestEndpoint"];
                                        if (manifestEndpointValue != null && manifestEndpointValue.Type != JTokenType.Null)
                                        {
                                            ResourceProviderEndpoint manifestEndpointInstance = new ResourceProviderEndpoint();
                                            propertiesInstance.ManifestEndpoint = manifestEndpointInstance;
                                            
                                            JToken apiVersionsArray = manifestEndpointValue["apiVersions"];
                                            if (apiVersionsArray != null && apiVersionsArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken apiVersionsValue in ((JArray)apiVersionsArray))
                                                {
                                                    manifestEndpointInstance.ApiVersions.Add(((string)apiVersionsValue));
                                                }
                                            }
                                            
                                            JToken apiVersionValue = manifestEndpointValue["apiVersion"];
                                            if (apiVersionValue != null && apiVersionValue.Type != JTokenType.Null)
                                            {
                                                string apiVersionInstance = ((string)apiVersionValue);
                                                manifestEndpointInstance.ApiVersion = apiVersionInstance;
                                            }
                                            
                                            JToken enabledValue2 = manifestEndpointValue["enabled"];
                                            if (enabledValue2 != null && enabledValue2.Type != JTokenType.Null)
                                            {
                                                bool enabledInstance2 = ((bool)enabledValue2);
                                                manifestEndpointInstance.Enabled = enabledInstance2;
                                            }
                                            
                                            JToken endpointUriValue = manifestEndpointValue["endpointUri"];
                                            if (endpointUriValue != null && endpointUriValue.Type != JTokenType.Null)
                                            {
                                                string endpointUriInstance = ((string)endpointUriValue);
                                                manifestEndpointInstance.EndpointUri = endpointUriInstance;
                                            }
                                            
                                            JToken timeoutValue = manifestEndpointValue["timeout"];
                                            if (timeoutValue != null && timeoutValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan timeoutInstance = XmlConvert.ToTimeSpan(((string)timeoutValue));
                                                manifestEndpointInstance.Timeout = timeoutInstance;
                                            }
                                            
                                            JToken authenticationUsernameValue = manifestEndpointValue["authenticationUsername"];
                                            if (authenticationUsernameValue != null && authenticationUsernameValue.Type != JTokenType.Null)
                                            {
                                                string authenticationUsernameInstance = ((string)authenticationUsernameValue);
                                                manifestEndpointInstance.AuthenticationUsername = authenticationUsernameInstance;
                                            }
                                            
                                            JToken authenticationPasswordValue = manifestEndpointValue["authenticationPassword"];
                                            if (authenticationPasswordValue != null && authenticationPasswordValue.Type != JTokenType.Null)
                                            {
                                                string authenticationPasswordInstance = ((string)authenticationPasswordValue);
                                                manifestEndpointInstance.AuthenticationPassword = authenticationPasswordInstance;
                                            }
                                        }
                                        
                                        JToken providerAuthorizationValue = propertiesValue["providerAuthorization"];
                                        if (providerAuthorizationValue != null && providerAuthorizationValue.Type != JTokenType.Null)
                                        {
                                            ResourceProviderAuthorization providerAuthorizationInstance = new ResourceProviderAuthorization();
                                            propertiesInstance.ProviderAuthorization = providerAuthorizationInstance;
                                            
                                            JToken applicationIdValue = providerAuthorizationValue["applicationId"];
                                            if (applicationIdValue != null && applicationIdValue.Type != JTokenType.Null)
                                            {
                                                string applicationIdInstance = ((string)applicationIdValue);
                                                providerAuthorizationInstance.ApplicationId = applicationIdInstance;
                                            }
                                            
                                            JToken roleDefinitionIdValue = providerAuthorizationValue["roleDefinitionId"];
                                            if (roleDefinitionIdValue != null && roleDefinitionIdValue.Type != JTokenType.Null)
                                            {
                                                string roleDefinitionIdInstance = ((string)roleDefinitionIdValue);
                                                providerAuthorizationInstance.RoleDefinitionId = roleDefinitionIdInstance;
                                            }
                                        }
                                        
                                        JToken extensionNameValue = propertiesValue["extensionName"];
                                        if (extensionNameValue != null && extensionNameValue.Type != JTokenType.Null)
                                        {
                                            string extensionNameInstance = ((string)extensionNameValue);
                                            propertiesInstance.ExtensionName = extensionNameInstance;
                                        }
                                        
                                        JToken extensionUriValue = propertiesValue["extensionUri"];
                                        if (extensionUriValue != null && extensionUriValue.Type != JTokenType.Null)
                                        {
                                            string extensionUriInstance = ((string)extensionUriValue);
                                            propertiesInstance.ExtensionUri = extensionUriInstance;
                                        }
                                        
                                        JToken resourceTypesArray = propertiesValue["resourceTypes"];
                                        if (resourceTypesArray != null && resourceTypesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken resourceTypesValue in ((JArray)resourceTypesArray))
                                            {
                                                Extension extensionInstance = new Extension();
                                                propertiesInstance.Extensions.Add(extensionInstance);
                                                
                                                JToken nameValue = resourceTypesValue["name"];
                                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                                {
                                                    string nameInstance = ((string)nameValue);
                                                    extensionInstance.Name = nameInstance;
                                                }
                                                
                                                JToken uriValue = resourceTypesValue["uri"];
                                                if (uriValue != null && uriValue.Type != JTokenType.Null)
                                                {
                                                    string uriInstance = ((string)uriValue);
                                                    extensionInstance.Uri = uriInstance;
                                                }
                                            }
                                        }
                                        
                                        JToken resourceTypesArray2 = propertiesValue["resourceTypes"];
                                        if (resourceTypesArray2 != null && resourceTypesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken resourceTypesValue2 in ((JArray)resourceTypesArray2))
                                            {
                                                ResourceType resourceTypeInstance = new ResourceType();
                                                propertiesInstance.ResourceTypes.Add(resourceTypeInstance);
                                                
                                                JToken nameValue2 = resourceTypesValue2["name"];
                                                if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                                {
                                                    string nameInstance2 = ((string)nameValue2);
                                                    resourceTypeInstance.Name = nameInstance2;
                                                }
                                                
                                                JToken routingTypeValue = resourceTypesValue2["routingType"];
                                                if (routingTypeValue != null && routingTypeValue.Type != JTokenType.Null)
                                                {
                                                    RoutingType routingTypeInstance = ((RoutingType)Enum.Parse(typeof(RoutingType), ((string)routingTypeValue), true));
                                                    resourceTypeInstance.RoutingType = routingTypeInstance;
                                                }
                                                
                                                JToken resourceDeletionPolicyValue = resourceTypesValue2["resourceDeletionPolicy"];
                                                if (resourceDeletionPolicyValue != null && resourceDeletionPolicyValue.Type != JTokenType.Null)
                                                {
                                                    ResourceDeletionPolicy resourceDeletionPolicyInstance = ((ResourceDeletionPolicy)Enum.Parse(typeof(ResourceDeletionPolicy), ((string)resourceDeletionPolicyValue), true));
                                                    resourceTypeInstance.ResourceDeletionPolicy = resourceDeletionPolicyInstance;
                                                }
                                                
                                                JToken allowedUnauthorizedActionsArray = resourceTypesValue2["allowedUnauthorizedActions"];
                                                if (allowedUnauthorizedActionsArray != null && allowedUnauthorizedActionsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken allowedUnauthorizedActionsValue in ((JArray)allowedUnauthorizedActionsArray))
                                                    {
                                                        resourceTypeInstance.AllowedUnauthorizedActions.Add(((string)allowedUnauthorizedActionsValue));
                                                    }
                                                }
                                                
                                                JToken meteredResourceIdsArray = resourceTypesValue2["meteredResourceIds"];
                                                if (meteredResourceIdsArray != null && meteredResourceIdsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken meteredResourceIdsValue in ((JArray)meteredResourceIdsArray))
                                                    {
                                                        resourceTypeInstance.MeteredResourceIds.Add(((string)meteredResourceIdsValue));
                                                    }
                                                }
                                                
                                                JToken marketplaceTypeValue = resourceTypesValue2["marketplaceType"];
                                                if (marketplaceTypeValue != null && marketplaceTypeValue.Type != JTokenType.Null)
                                                {
                                                    MarketplaceType marketplaceTypeInstance = ((MarketplaceType)Enum.Parse(typeof(MarketplaceType), ((string)marketplaceTypeValue), true));
                                                    resourceTypeInstance.MarketplaceType = marketplaceTypeInstance;
                                                }
                                                
                                                JToken endpointsArray = resourceTypesValue2["endpoints"];
                                                if (endpointsArray != null && endpointsArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken endpointsValue in ((JArray)endpointsArray))
                                                    {
                                                        ResourceProviderEndpoint resourceProviderEndpointInstance = new ResourceProviderEndpoint();
                                                        resourceTypeInstance.Endpoints.Add(resourceProviderEndpointInstance);
                                                        
                                                        JToken apiVersionsArray2 = endpointsValue["apiVersions"];
                                                        if (apiVersionsArray2 != null && apiVersionsArray2.Type != JTokenType.Null)
                                                        {
                                                            foreach (JToken apiVersionsValue2 in ((JArray)apiVersionsArray2))
                                                            {
                                                                resourceProviderEndpointInstance.ApiVersions.Add(((string)apiVersionsValue2));
                                                            }
                                                        }
                                                        
                                                        JToken apiVersionValue2 = endpointsValue["apiVersion"];
                                                        if (apiVersionValue2 != null && apiVersionValue2.Type != JTokenType.Null)
                                                        {
                                                            string apiVersionInstance2 = ((string)apiVersionValue2);
                                                            resourceProviderEndpointInstance.ApiVersion = apiVersionInstance2;
                                                        }
                                                        
                                                        JToken enabledValue3 = endpointsValue["enabled"];
                                                        if (enabledValue3 != null && enabledValue3.Type != JTokenType.Null)
                                                        {
                                                            bool enabledInstance3 = ((bool)enabledValue3);
                                                            resourceProviderEndpointInstance.Enabled = enabledInstance3;
                                                        }
                                                        
                                                        JToken endpointUriValue2 = endpointsValue["endpointUri"];
                                                        if (endpointUriValue2 != null && endpointUriValue2.Type != JTokenType.Null)
                                                        {
                                                            string endpointUriInstance2 = ((string)endpointUriValue2);
                                                            resourceProviderEndpointInstance.EndpointUri = endpointUriInstance2;
                                                        }
                                                        
                                                        JToken timeoutValue2 = endpointsValue["timeout"];
                                                        if (timeoutValue2 != null && timeoutValue2.Type != JTokenType.Null)
                                                        {
                                                            TimeSpan timeoutInstance2 = XmlConvert.ToTimeSpan(((string)timeoutValue2));
                                                            resourceProviderEndpointInstance.Timeout = timeoutInstance2;
                                                        }
                                                        
                                                        JToken authenticationUsernameValue2 = endpointsValue["authenticationUsername"];
                                                        if (authenticationUsernameValue2 != null && authenticationUsernameValue2.Type != JTokenType.Null)
                                                        {
                                                            string authenticationUsernameInstance2 = ((string)authenticationUsernameValue2);
                                                            resourceProviderEndpointInstance.AuthenticationUsername = authenticationUsernameInstance2;
                                                        }
                                                        
                                                        JToken authenticationPasswordValue2 = endpointsValue["authenticationPassword"];
                                                        if (authenticationPasswordValue2 != null && authenticationPasswordValue2.Type != JTokenType.Null)
                                                        {
                                                            string authenticationPasswordInstance2 = ((string)authenticationPasswordValue2);
                                                            resourceProviderEndpointInstance.AuthenticationPassword = authenticationPasswordInstance2;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["ProvisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            ProvisioningState provisioningStateInstance = ((ProvisioningState)Enum.Parse(typeof(ProvisioningState), ((string)provisioningStateValue), true));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        providerRegistrationModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue3 = valueValue["name"];
                                    if (nameValue3 != null && nameValue3.Type != JTokenType.Null)
                                    {
                                        string nameInstance3 = ((string)nameValue3);
                                        providerRegistrationModelInstance.Name = nameInstance3;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        providerRegistrationModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        providerRegistrationModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            providerRegistrationModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
