// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.AzureStack.Management;
using Microsoft.AzureStack.Management.Models;

namespace Microsoft.AzureStack.Management
{
    public static partial class ManagedPlanOperationsExtensions
    {
        /// <summary>
        /// Creates or updates the plan
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='parameters'>
        /// Required. Plan properties
        /// </param>
        /// <returns>
        /// Result for the create or update operation of the plan
        /// </returns>
        public static ManagedPlanCreateOrUpdateResult CreateOrUpdate(this IManagedPlanOperations operations, string resourceGroupName, ManagedPlanCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagedPlanOperations)s).CreateOrUpdateAsync(resourceGroupName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates or updates the plan
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='parameters'>
        /// Required. Plan properties
        /// </param>
        /// <returns>
        /// Result for the create or update operation of the plan
        /// </returns>
        public static Task<ManagedPlanCreateOrUpdateResult> CreateOrUpdateAsync(this IManagedPlanOperations operations, string resourceGroupName, ManagedPlanCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Delete operation on the plan
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='planId'>
        /// Required. Plan name
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this IManagedPlanOperations operations, string resourceGroupName, string planId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagedPlanOperations)s).DeleteAsync(resourceGroupName, planId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Delete operation on the plan
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='planId'>
        /// Required. Plan name
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this IManagedPlanOperations operations, string resourceGroupName, string planId)
        {
            return operations.DeleteAsync(resourceGroupName, planId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the administrator view of the plan
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='planId'>
        /// Required. Plan name
        /// </param>
        /// <returns>
        /// Administrator view of plan for the get operation
        /// </returns>
        public static ManagedPlanGetResult Get(this IManagedPlanOperations operations, string resourceGroupName, string planId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagedPlanOperations)s).GetAsync(resourceGroupName, planId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the administrator view of the plan
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='planId'>
        /// Required. Plan name
        /// </param>
        /// <returns>
        /// Administrator view of plan for the get operation
        /// </returns>
        public static Task<ManagedPlanGetResult> GetAsync(this IManagedPlanOperations operations, string resourceGroupName, string planId)
        {
            return operations.GetAsync(resourceGroupName, planId, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists all the plans under the resource group
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='includeDetails'>
        /// Required. Flag to specify whether to include details
        /// </param>
        /// <returns>
        /// Result of the plan llist operation
        /// </returns>
        public static ManagedPlanListResult List(this IManagedPlanOperations operations, string resourceGroupName, bool includeDetails)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IManagedPlanOperations)s).ListAsync(resourceGroupName, includeDetails);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists all the plans under the resource group
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.AzureStack.Management.IManagedPlanOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='includeDetails'>
        /// Required. Flag to specify whether to include details
        /// </param>
        /// <returns>
        /// Result of the plan llist operation
        /// </returns>
        public static Task<ManagedPlanListResult> ListAsync(this IManagedPlanOperations operations, string resourceGroupName, bool includeDetails)
        {
            return operations.ListAsync(resourceGroupName, includeDetails, CancellationToken.None);
        }
    }
}
