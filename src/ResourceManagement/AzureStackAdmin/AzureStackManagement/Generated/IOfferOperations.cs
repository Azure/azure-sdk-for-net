// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AzureStack.Management.Models;

namespace Microsoft.AzureStack.Management
{
    /// <summary>
    /// Operations on the offer  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    public partial interface IOfferOperations
    {
        /// <summary>
        /// Gets an offer given its Id.
        /// </summary>
        /// <param name='offerId'>
        /// The full offer Id in format
        /// /delegatedProviders/{providerId}/offers/{offerName}
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The offer get result.
        /// </returns>
        Task<OfferGetResult> GetAsync(string offerId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the price of the offer.
        /// </summary>
        /// <param name='offerId'>
        /// the full offer ID /delegatedProviders/{providerId}/offers/{offerId}.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Offer price result.
        /// </returns>
        Task<OfferGetPriceResult> GetPriceAsync(string offerId, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the public offers under the provider which has the given
        /// provider identifier
        /// </summary>
        /// <param name='providerIdentifier'>
        /// The provider identifier, we get the public offers under that
        /// provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Result of the offer
        /// </returns>
        Task<OfferListResult> ListAsync(string providerIdentifier, CancellationToken cancellationToken);
        
        /// <summary>
        /// Lists the offer with the next link
        /// </summary>
        /// <param name='nextLink'>
        /// The URL to get the next set of offers
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Result of the offer
        /// </returns>
        Task<OfferListResult> ListNextAsync(string nextLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the public offers under the zero day (root) provider
        /// </summary>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Result of the offer
        /// </returns>
        Task<OfferListResult> ListUnderRootProviderAsync(CancellationToken cancellationToken);
    }
}
