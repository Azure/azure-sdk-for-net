// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.AzureStack.Management;
using Microsoft.AzureStack.Management.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.AzureStack.Management
{
    /// <summary>
    /// Your documentation here.  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class SubscriptionOperations : IServiceOperations<AzureStackClient>, ISubscriptionOperations
    {
        /// <summary>
        /// Initializes a new instance of the SubscriptionOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal SubscriptionOperations(AzureStackClient client)
        {
            this._client = client;
        }
        
        private AzureStackClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.AzureStackClient.
        /// </summary>
        public AzureStackClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<SubscriptionCreateOrUpdateResult> CreateOrUpdateAsync(SubscriptionCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Subscription == null)
            {
                throw new ArgumentNullException("parameters.Subscription");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (parameters.Subscription.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(parameters.Subscription.SubscriptionId);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject subscriptionCreateOrUpdateParametersValue = new JObject();
                requestDoc = subscriptionCreateOrUpdateParametersValue;
                
                if (parameters.Subscription.Id != null)
                {
                    subscriptionCreateOrUpdateParametersValue["id"] = parameters.Subscription.Id;
                }
                
                if (parameters.Subscription.SubscriptionId != null)
                {
                    subscriptionCreateOrUpdateParametersValue["subscriptionId"] = parameters.Subscription.SubscriptionId;
                }
                
                if (parameters.Subscription.DisplayName != null)
                {
                    subscriptionCreateOrUpdateParametersValue["displayName"] = parameters.Subscription.DisplayName;
                }
                
                if (parameters.Subscription.ExternalReferenceId != null)
                {
                    subscriptionCreateOrUpdateParametersValue["externalReferenceId"] = parameters.Subscription.ExternalReferenceId;
                }
                
                if (parameters.Subscription.Owner != null)
                {
                    subscriptionCreateOrUpdateParametersValue["owner"] = parameters.Subscription.Owner;
                }
                
                if (parameters.Subscription.OfferName != null)
                {
                    subscriptionCreateOrUpdateParametersValue["offerName"] = parameters.Subscription.OfferName;
                }
                
                if (parameters.Subscription.OfferId != null)
                {
                    subscriptionCreateOrUpdateParametersValue["offerId"] = parameters.Subscription.OfferId;
                }
                
                if (parameters.Subscription.DelegatedProviderId != null)
                {
                    subscriptionCreateOrUpdateParametersValue["delegatedProviderId"] = parameters.Subscription.DelegatedProviderId;
                }
                
                if (parameters.Subscription.OfferDisplayName != null)
                {
                    subscriptionCreateOrUpdateParametersValue["offerDisplayName"] = parameters.Subscription.OfferDisplayName;
                }
                
                subscriptionCreateOrUpdateParametersValue["state"] = parameters.Subscription.State.ToString();
                
                subscriptionCreateOrUpdateParametersValue["quotaSyncState"] = parameters.Subscription.QuotaSyncState.ToString();
                
                if (parameters.Subscription.ServiceQuotas != null)
                {
                    if (parameters.Subscription.ServiceQuotas is ILazyCollection == false || ((ILazyCollection)parameters.Subscription.ServiceQuotas).IsInitialized)
                    {
                        JArray serviceQuotasArray = new JArray();
                        foreach (ServiceQuotaDefinition serviceQuotasItem in parameters.Subscription.ServiceQuotas)
                        {
                            JObject serviceQuotaDefinitionValue = new JObject();
                            serviceQuotasArray.Add(serviceQuotaDefinitionValue);
                            
                            if (serviceQuotasItem.ResourceProviderId != null)
                            {
                                serviceQuotaDefinitionValue["resourceProviderId"] = serviceQuotasItem.ResourceProviderId;
                            }
                            
                            if (serviceQuotasItem.ResourceProviderNamespace != null)
                            {
                                serviceQuotaDefinitionValue["resourceProviderNamespace"] = serviceQuotasItem.ResourceProviderNamespace;
                            }
                            
                            if (serviceQuotasItem.ResourceProviderDisplayName != null)
                            {
                                serviceQuotaDefinitionValue["resourceProviderDisplayName"] = serviceQuotasItem.ResourceProviderDisplayName;
                            }
                            
                            if (serviceQuotasItem.Location != null)
                            {
                                serviceQuotaDefinitionValue["location"] = serviceQuotasItem.Location;
                            }
                            
                            serviceQuotaDefinitionValue["quotaSyncState"] = serviceQuotasItem.QuotaSyncState.ToString();
                            
                            if (serviceQuotasItem.QuotaSettings != null)
                            {
                                serviceQuotaDefinitionValue["quotaSettings"] = JObject.Parse(serviceQuotasItem.QuotaSettings);
                            }
                        }
                        subscriptionCreateOrUpdateParametersValue["serviceQuotas"] = serviceQuotasArray;
                    }
                }
                
                if (parameters.Subscription.AcquiredPlans != null)
                {
                    if (parameters.Subscription.AcquiredPlans is ILazyCollection == false || ((ILazyCollection)parameters.Subscription.AcquiredPlans).IsInitialized)
                    {
                        JArray acquiredPlansArray = new JArray();
                        foreach (PlanReferenceDefinition acquiredPlansItem in parameters.Subscription.AcquiredPlans)
                        {
                            JObject planReferenceDefinitionValue = new JObject();
                            acquiredPlansArray.Add(planReferenceDefinitionValue);
                            
                            if (acquiredPlansItem.PlanName != null)
                            {
                                planReferenceDefinitionValue["planName"] = acquiredPlansItem.PlanName;
                            }
                            
                            planReferenceDefinitionValue["acquisitionState"] = acquiredPlansItem.AcquisitionState.ToString();
                            
                            if (acquiredPlansItem.AcquisitionTime != null)
                            {
                                planReferenceDefinitionValue["acquisitionTime"] = acquiredPlansItem.AcquisitionTime.Value;
                            }
                        }
                        subscriptionCreateOrUpdateParametersValue["acquiredPlans"] = acquiredPlansArray;
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SubscriptionCreateOrUpdateResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SubscriptionCreateOrUpdateResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            SubscriptionDefinition subscriptionInstance = new SubscriptionDefinition();
                            result.Subscription = subscriptionInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                subscriptionInstance.Id = idInstance;
                            }
                            
                            JToken subscriptionIdValue = responseDoc["subscriptionId"];
                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                            {
                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                subscriptionInstance.SubscriptionId = subscriptionIdInstance;
                            }
                            
                            JToken displayNameValue = responseDoc["displayName"];
                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                            {
                                string displayNameInstance = ((string)displayNameValue);
                                subscriptionInstance.DisplayName = displayNameInstance;
                            }
                            
                            JToken externalReferenceIdValue = responseDoc["externalReferenceId"];
                            if (externalReferenceIdValue != null && externalReferenceIdValue.Type != JTokenType.Null)
                            {
                                string externalReferenceIdInstance = ((string)externalReferenceIdValue);
                                subscriptionInstance.ExternalReferenceId = externalReferenceIdInstance;
                            }
                            
                            JToken ownerValue = responseDoc["owner"];
                            if (ownerValue != null && ownerValue.Type != JTokenType.Null)
                            {
                                string ownerInstance = ((string)ownerValue);
                                subscriptionInstance.Owner = ownerInstance;
                            }
                            
                            JToken offerNameValue = responseDoc["offerName"];
                            if (offerNameValue != null && offerNameValue.Type != JTokenType.Null)
                            {
                                string offerNameInstance = ((string)offerNameValue);
                                subscriptionInstance.OfferName = offerNameInstance;
                            }
                            
                            JToken offerIdValue = responseDoc["offerId"];
                            if (offerIdValue != null && offerIdValue.Type != JTokenType.Null)
                            {
                                string offerIdInstance = ((string)offerIdValue);
                                subscriptionInstance.OfferId = offerIdInstance;
                            }
                            
                            JToken delegatedProviderIdValue = responseDoc["delegatedProviderId"];
                            if (delegatedProviderIdValue != null && delegatedProviderIdValue.Type != JTokenType.Null)
                            {
                                string delegatedProviderIdInstance = ((string)delegatedProviderIdValue);
                                subscriptionInstance.DelegatedProviderId = delegatedProviderIdInstance;
                            }
                            
                            JToken offerDisplayNameValue = responseDoc["offerDisplayName"];
                            if (offerDisplayNameValue != null && offerDisplayNameValue.Type != JTokenType.Null)
                            {
                                string offerDisplayNameInstance = ((string)offerDisplayNameValue);
                                subscriptionInstance.OfferDisplayName = offerDisplayNameInstance;
                            }
                            
                            JToken stateValue = responseDoc["state"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                SubscriptionState stateInstance = ((SubscriptionState)Enum.Parse(typeof(SubscriptionState), ((string)stateValue), true));
                                subscriptionInstance.State = stateInstance;
                            }
                            
                            JToken quotaSyncStateValue = responseDoc["quotaSyncState"];
                            if (quotaSyncStateValue != null && quotaSyncStateValue.Type != JTokenType.Null)
                            {
                                QuotaSyncState quotaSyncStateInstance = ((QuotaSyncState)Enum.Parse(typeof(QuotaSyncState), ((string)quotaSyncStateValue), true));
                                subscriptionInstance.QuotaSyncState = quotaSyncStateInstance;
                            }
                            
                            JToken serviceQuotasArray2 = responseDoc["serviceQuotas"];
                            if (serviceQuotasArray2 != null && serviceQuotasArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken serviceQuotasValue in ((JArray)serviceQuotasArray2))
                                {
                                    ServiceQuotaDefinition serviceQuotaDefinitionInstance = new ServiceQuotaDefinition();
                                    subscriptionInstance.ServiceQuotas.Add(serviceQuotaDefinitionInstance);
                                    
                                    JToken resourceProviderIdValue = serviceQuotasValue["resourceProviderId"];
                                    if (resourceProviderIdValue != null && resourceProviderIdValue.Type != JTokenType.Null)
                                    {
                                        string resourceProviderIdInstance = ((string)resourceProviderIdValue);
                                        serviceQuotaDefinitionInstance.ResourceProviderId = resourceProviderIdInstance;
                                    }
                                    
                                    JToken resourceProviderNamespaceValue = serviceQuotasValue["resourceProviderNamespace"];
                                    if (resourceProviderNamespaceValue != null && resourceProviderNamespaceValue.Type != JTokenType.Null)
                                    {
                                        string resourceProviderNamespaceInstance = ((string)resourceProviderNamespaceValue);
                                        serviceQuotaDefinitionInstance.ResourceProviderNamespace = resourceProviderNamespaceInstance;
                                    }
                                    
                                    JToken resourceProviderDisplayNameValue = serviceQuotasValue["resourceProviderDisplayName"];
                                    if (resourceProviderDisplayNameValue != null && resourceProviderDisplayNameValue.Type != JTokenType.Null)
                                    {
                                        string resourceProviderDisplayNameInstance = ((string)resourceProviderDisplayNameValue);
                                        serviceQuotaDefinitionInstance.ResourceProviderDisplayName = resourceProviderDisplayNameInstance;
                                    }
                                    
                                    JToken locationValue = serviceQuotasValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        serviceQuotaDefinitionInstance.Location = locationInstance;
                                    }
                                    
                                    JToken quotaSyncStateValue2 = serviceQuotasValue["quotaSyncState"];
                                    if (quotaSyncStateValue2 != null && quotaSyncStateValue2.Type != JTokenType.Null)
                                    {
                                        QuotaSyncState quotaSyncStateInstance2 = ((QuotaSyncState)Enum.Parse(typeof(QuotaSyncState), ((string)quotaSyncStateValue2), true));
                                        serviceQuotaDefinitionInstance.QuotaSyncState = quotaSyncStateInstance2;
                                    }
                                    
                                    JToken quotaSettingsValue = serviceQuotasValue["quotaSettings"];
                                    if (quotaSettingsValue != null && quotaSettingsValue.Type != JTokenType.Null)
                                    {
                                        string quotaSettingsInstance = quotaSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                        serviceQuotaDefinitionInstance.QuotaSettings = quotaSettingsInstance;
                                    }
                                }
                            }
                            
                            JToken acquiredPlansArray2 = responseDoc["acquiredPlans"];
                            if (acquiredPlansArray2 != null && acquiredPlansArray2.Type != JTokenType.Null)
                            {
                                foreach (JToken acquiredPlansValue in ((JArray)acquiredPlansArray2))
                                {
                                    PlanReferenceDefinition planReferenceDefinitionInstance = new PlanReferenceDefinition();
                                    subscriptionInstance.AcquiredPlans.Add(planReferenceDefinitionInstance);
                                    
                                    JToken planNameValue = acquiredPlansValue["planName"];
                                    if (planNameValue != null && planNameValue.Type != JTokenType.Null)
                                    {
                                        string planNameInstance = ((string)planNameValue);
                                        planReferenceDefinitionInstance.PlanName = planNameInstance;
                                    }
                                    
                                    JToken acquisitionStateValue = acquiredPlansValue["acquisitionState"];
                                    if (acquisitionStateValue != null && acquisitionStateValue.Type != JTokenType.Null)
                                    {
                                        PlanAcquisitionState acquisitionStateInstance = ((PlanAcquisitionState)Enum.Parse(typeof(PlanAcquisitionState), ((string)acquisitionStateValue), true));
                                        planReferenceDefinitionInstance.AcquisitionState = acquisitionStateInstance;
                                    }
                                    
                                    JToken acquisitionTimeValue = acquiredPlansValue["acquisitionTime"];
                                    if (acquisitionTimeValue != null && acquisitionTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime acquisitionTimeInstance = ((DateTime)acquisitionTimeValue);
                                        planReferenceDefinitionInstance.AcquisitionTime = acquisitionTimeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='subscriptionId'>
        /// Required. Your documentation here.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string subscriptionId, CancellationToken cancellationToken)
        {
            // Validate
            if (subscriptionId == null)
            {
                throw new ArgumentNullException("subscriptionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("subscriptionId", subscriptionId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            url = url + Uri.EscapeDataString(subscriptionId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='subscriptionId'>
        /// Optional.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<SubscriptionGetResult> GetAsync(string subscriptionId, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("subscriptionId", subscriptionId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (subscriptionId != null)
            {
                url = url + Uri.EscapeDataString(subscriptionId);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SubscriptionGetResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SubscriptionGetResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            SubscriptionDefinition subscriptionInstance = new SubscriptionDefinition();
                            result.Subscription = subscriptionInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                subscriptionInstance.Id = idInstance;
                            }
                            
                            JToken subscriptionIdValue = responseDoc["subscriptionId"];
                            if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                            {
                                string subscriptionIdInstance = ((string)subscriptionIdValue);
                                subscriptionInstance.SubscriptionId = subscriptionIdInstance;
                            }
                            
                            JToken displayNameValue = responseDoc["displayName"];
                            if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                            {
                                string displayNameInstance = ((string)displayNameValue);
                                subscriptionInstance.DisplayName = displayNameInstance;
                            }
                            
                            JToken externalReferenceIdValue = responseDoc["externalReferenceId"];
                            if (externalReferenceIdValue != null && externalReferenceIdValue.Type != JTokenType.Null)
                            {
                                string externalReferenceIdInstance = ((string)externalReferenceIdValue);
                                subscriptionInstance.ExternalReferenceId = externalReferenceIdInstance;
                            }
                            
                            JToken ownerValue = responseDoc["owner"];
                            if (ownerValue != null && ownerValue.Type != JTokenType.Null)
                            {
                                string ownerInstance = ((string)ownerValue);
                                subscriptionInstance.Owner = ownerInstance;
                            }
                            
                            JToken offerNameValue = responseDoc["offerName"];
                            if (offerNameValue != null && offerNameValue.Type != JTokenType.Null)
                            {
                                string offerNameInstance = ((string)offerNameValue);
                                subscriptionInstance.OfferName = offerNameInstance;
                            }
                            
                            JToken offerIdValue = responseDoc["offerId"];
                            if (offerIdValue != null && offerIdValue.Type != JTokenType.Null)
                            {
                                string offerIdInstance = ((string)offerIdValue);
                                subscriptionInstance.OfferId = offerIdInstance;
                            }
                            
                            JToken delegatedProviderIdValue = responseDoc["delegatedProviderId"];
                            if (delegatedProviderIdValue != null && delegatedProviderIdValue.Type != JTokenType.Null)
                            {
                                string delegatedProviderIdInstance = ((string)delegatedProviderIdValue);
                                subscriptionInstance.DelegatedProviderId = delegatedProviderIdInstance;
                            }
                            
                            JToken offerDisplayNameValue = responseDoc["offerDisplayName"];
                            if (offerDisplayNameValue != null && offerDisplayNameValue.Type != JTokenType.Null)
                            {
                                string offerDisplayNameInstance = ((string)offerDisplayNameValue);
                                subscriptionInstance.OfferDisplayName = offerDisplayNameInstance;
                            }
                            
                            JToken stateValue = responseDoc["state"];
                            if (stateValue != null && stateValue.Type != JTokenType.Null)
                            {
                                SubscriptionState stateInstance = ((SubscriptionState)Enum.Parse(typeof(SubscriptionState), ((string)stateValue), true));
                                subscriptionInstance.State = stateInstance;
                            }
                            
                            JToken quotaSyncStateValue = responseDoc["quotaSyncState"];
                            if (quotaSyncStateValue != null && quotaSyncStateValue.Type != JTokenType.Null)
                            {
                                QuotaSyncState quotaSyncStateInstance = ((QuotaSyncState)Enum.Parse(typeof(QuotaSyncState), ((string)quotaSyncStateValue), true));
                                subscriptionInstance.QuotaSyncState = quotaSyncStateInstance;
                            }
                            
                            JToken serviceQuotasArray = responseDoc["serviceQuotas"];
                            if (serviceQuotasArray != null && serviceQuotasArray.Type != JTokenType.Null)
                            {
                                foreach (JToken serviceQuotasValue in ((JArray)serviceQuotasArray))
                                {
                                    ServiceQuotaDefinition serviceQuotaDefinitionInstance = new ServiceQuotaDefinition();
                                    subscriptionInstance.ServiceQuotas.Add(serviceQuotaDefinitionInstance);
                                    
                                    JToken resourceProviderIdValue = serviceQuotasValue["resourceProviderId"];
                                    if (resourceProviderIdValue != null && resourceProviderIdValue.Type != JTokenType.Null)
                                    {
                                        string resourceProviderIdInstance = ((string)resourceProviderIdValue);
                                        serviceQuotaDefinitionInstance.ResourceProviderId = resourceProviderIdInstance;
                                    }
                                    
                                    JToken resourceProviderNamespaceValue = serviceQuotasValue["resourceProviderNamespace"];
                                    if (resourceProviderNamespaceValue != null && resourceProviderNamespaceValue.Type != JTokenType.Null)
                                    {
                                        string resourceProviderNamespaceInstance = ((string)resourceProviderNamespaceValue);
                                        serviceQuotaDefinitionInstance.ResourceProviderNamespace = resourceProviderNamespaceInstance;
                                    }
                                    
                                    JToken resourceProviderDisplayNameValue = serviceQuotasValue["resourceProviderDisplayName"];
                                    if (resourceProviderDisplayNameValue != null && resourceProviderDisplayNameValue.Type != JTokenType.Null)
                                    {
                                        string resourceProviderDisplayNameInstance = ((string)resourceProviderDisplayNameValue);
                                        serviceQuotaDefinitionInstance.ResourceProviderDisplayName = resourceProviderDisplayNameInstance;
                                    }
                                    
                                    JToken locationValue = serviceQuotasValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        serviceQuotaDefinitionInstance.Location = locationInstance;
                                    }
                                    
                                    JToken quotaSyncStateValue2 = serviceQuotasValue["quotaSyncState"];
                                    if (quotaSyncStateValue2 != null && quotaSyncStateValue2.Type != JTokenType.Null)
                                    {
                                        QuotaSyncState quotaSyncStateInstance2 = ((QuotaSyncState)Enum.Parse(typeof(QuotaSyncState), ((string)quotaSyncStateValue2), true));
                                        serviceQuotaDefinitionInstance.QuotaSyncState = quotaSyncStateInstance2;
                                    }
                                    
                                    JToken quotaSettingsValue = serviceQuotasValue["quotaSettings"];
                                    if (quotaSettingsValue != null && quotaSettingsValue.Type != JTokenType.Null)
                                    {
                                        string quotaSettingsInstance = quotaSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                        serviceQuotaDefinitionInstance.QuotaSettings = quotaSettingsInstance;
                                    }
                                }
                            }
                            
                            JToken acquiredPlansArray = responseDoc["acquiredPlans"];
                            if (acquiredPlansArray != null && acquiredPlansArray.Type != JTokenType.Null)
                            {
                                foreach (JToken acquiredPlansValue in ((JArray)acquiredPlansArray))
                                {
                                    PlanReferenceDefinition planReferenceDefinitionInstance = new PlanReferenceDefinition();
                                    subscriptionInstance.AcquiredPlans.Add(planReferenceDefinitionInstance);
                                    
                                    JToken planNameValue = acquiredPlansValue["planName"];
                                    if (planNameValue != null && planNameValue.Type != JTokenType.Null)
                                    {
                                        string planNameInstance = ((string)planNameValue);
                                        planReferenceDefinitionInstance.PlanName = planNameInstance;
                                    }
                                    
                                    JToken acquisitionStateValue = acquiredPlansValue["acquisitionState"];
                                    if (acquisitionStateValue != null && acquisitionStateValue.Type != JTokenType.Null)
                                    {
                                        PlanAcquisitionState acquisitionStateInstance = ((PlanAcquisitionState)Enum.Parse(typeof(PlanAcquisitionState), ((string)acquisitionStateValue), true));
                                        planReferenceDefinitionInstance.AcquisitionState = acquisitionStateInstance;
                                    }
                                    
                                    JToken acquisitionTimeValue = acquiredPlansValue["acquisitionTime"];
                                    if (acquisitionTimeValue != null && acquisitionTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTime acquisitionTimeInstance = ((DateTime)acquisitionTimeValue);
                                        planReferenceDefinitionInstance.AcquisitionTime = acquisitionTimeInstance;
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='includeDetails'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<SubscriptionListResult> ListAsync(bool includeDetails, CancellationToken cancellationToken)
        {
            // Validate
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("includeDetails", includeDetails);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            queryParameters.Add("includeDetails=" + Uri.EscapeDataString(includeDetails.ToString().ToLower()));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SubscriptionListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SubscriptionListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SubscriptionDefinition subscriptionDefinitionInstance = new SubscriptionDefinition();
                                    result.Subscriptions.Add(subscriptionDefinitionInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        subscriptionDefinitionInstance.Id = idInstance;
                                    }
                                    
                                    JToken subscriptionIdValue = valueValue["subscriptionId"];
                                    if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                    {
                                        string subscriptionIdInstance = ((string)subscriptionIdValue);
                                        subscriptionDefinitionInstance.SubscriptionId = subscriptionIdInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        subscriptionDefinitionInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken externalReferenceIdValue = valueValue["externalReferenceId"];
                                    if (externalReferenceIdValue != null && externalReferenceIdValue.Type != JTokenType.Null)
                                    {
                                        string externalReferenceIdInstance = ((string)externalReferenceIdValue);
                                        subscriptionDefinitionInstance.ExternalReferenceId = externalReferenceIdInstance;
                                    }
                                    
                                    JToken ownerValue = valueValue["owner"];
                                    if (ownerValue != null && ownerValue.Type != JTokenType.Null)
                                    {
                                        string ownerInstance = ((string)ownerValue);
                                        subscriptionDefinitionInstance.Owner = ownerInstance;
                                    }
                                    
                                    JToken offerNameValue = valueValue["offerName"];
                                    if (offerNameValue != null && offerNameValue.Type != JTokenType.Null)
                                    {
                                        string offerNameInstance = ((string)offerNameValue);
                                        subscriptionDefinitionInstance.OfferName = offerNameInstance;
                                    }
                                    
                                    JToken offerIdValue = valueValue["offerId"];
                                    if (offerIdValue != null && offerIdValue.Type != JTokenType.Null)
                                    {
                                        string offerIdInstance = ((string)offerIdValue);
                                        subscriptionDefinitionInstance.OfferId = offerIdInstance;
                                    }
                                    
                                    JToken delegatedProviderIdValue = valueValue["delegatedProviderId"];
                                    if (delegatedProviderIdValue != null && delegatedProviderIdValue.Type != JTokenType.Null)
                                    {
                                        string delegatedProviderIdInstance = ((string)delegatedProviderIdValue);
                                        subscriptionDefinitionInstance.DelegatedProviderId = delegatedProviderIdInstance;
                                    }
                                    
                                    JToken offerDisplayNameValue = valueValue["offerDisplayName"];
                                    if (offerDisplayNameValue != null && offerDisplayNameValue.Type != JTokenType.Null)
                                    {
                                        string offerDisplayNameInstance = ((string)offerDisplayNameValue);
                                        subscriptionDefinitionInstance.OfferDisplayName = offerDisplayNameInstance;
                                    }
                                    
                                    JToken stateValue = valueValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        SubscriptionState stateInstance = ((SubscriptionState)Enum.Parse(typeof(SubscriptionState), ((string)stateValue), true));
                                        subscriptionDefinitionInstance.State = stateInstance;
                                    }
                                    
                                    JToken quotaSyncStateValue = valueValue["quotaSyncState"];
                                    if (quotaSyncStateValue != null && quotaSyncStateValue.Type != JTokenType.Null)
                                    {
                                        QuotaSyncState quotaSyncStateInstance = ((QuotaSyncState)Enum.Parse(typeof(QuotaSyncState), ((string)quotaSyncStateValue), true));
                                        subscriptionDefinitionInstance.QuotaSyncState = quotaSyncStateInstance;
                                    }
                                    
                                    JToken serviceQuotasArray = valueValue["serviceQuotas"];
                                    if (serviceQuotasArray != null && serviceQuotasArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken serviceQuotasValue in ((JArray)serviceQuotasArray))
                                        {
                                            ServiceQuotaDefinition serviceQuotaDefinitionInstance = new ServiceQuotaDefinition();
                                            subscriptionDefinitionInstance.ServiceQuotas.Add(serviceQuotaDefinitionInstance);
                                            
                                            JToken resourceProviderIdValue = serviceQuotasValue["resourceProviderId"];
                                            if (resourceProviderIdValue != null && resourceProviderIdValue.Type != JTokenType.Null)
                                            {
                                                string resourceProviderIdInstance = ((string)resourceProviderIdValue);
                                                serviceQuotaDefinitionInstance.ResourceProviderId = resourceProviderIdInstance;
                                            }
                                            
                                            JToken resourceProviderNamespaceValue = serviceQuotasValue["resourceProviderNamespace"];
                                            if (resourceProviderNamespaceValue != null && resourceProviderNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string resourceProviderNamespaceInstance = ((string)resourceProviderNamespaceValue);
                                                serviceQuotaDefinitionInstance.ResourceProviderNamespace = resourceProviderNamespaceInstance;
                                            }
                                            
                                            JToken resourceProviderDisplayNameValue = serviceQuotasValue["resourceProviderDisplayName"];
                                            if (resourceProviderDisplayNameValue != null && resourceProviderDisplayNameValue.Type != JTokenType.Null)
                                            {
                                                string resourceProviderDisplayNameInstance = ((string)resourceProviderDisplayNameValue);
                                                serviceQuotaDefinitionInstance.ResourceProviderDisplayName = resourceProviderDisplayNameInstance;
                                            }
                                            
                                            JToken locationValue = serviceQuotasValue["location"];
                                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                                            {
                                                string locationInstance = ((string)locationValue);
                                                serviceQuotaDefinitionInstance.Location = locationInstance;
                                            }
                                            
                                            JToken quotaSyncStateValue2 = serviceQuotasValue["quotaSyncState"];
                                            if (quotaSyncStateValue2 != null && quotaSyncStateValue2.Type != JTokenType.Null)
                                            {
                                                QuotaSyncState quotaSyncStateInstance2 = ((QuotaSyncState)Enum.Parse(typeof(QuotaSyncState), ((string)quotaSyncStateValue2), true));
                                                serviceQuotaDefinitionInstance.QuotaSyncState = quotaSyncStateInstance2;
                                            }
                                            
                                            JToken quotaSettingsValue = serviceQuotasValue["quotaSettings"];
                                            if (quotaSettingsValue != null && quotaSettingsValue.Type != JTokenType.Null)
                                            {
                                                string quotaSettingsInstance = quotaSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                serviceQuotaDefinitionInstance.QuotaSettings = quotaSettingsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken acquiredPlansArray = valueValue["acquiredPlans"];
                                    if (acquiredPlansArray != null && acquiredPlansArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken acquiredPlansValue in ((JArray)acquiredPlansArray))
                                        {
                                            PlanReferenceDefinition planReferenceDefinitionInstance = new PlanReferenceDefinition();
                                            subscriptionDefinitionInstance.AcquiredPlans.Add(planReferenceDefinitionInstance);
                                            
                                            JToken planNameValue = acquiredPlansValue["planName"];
                                            if (planNameValue != null && planNameValue.Type != JTokenType.Null)
                                            {
                                                string planNameInstance = ((string)planNameValue);
                                                planReferenceDefinitionInstance.PlanName = planNameInstance;
                                            }
                                            
                                            JToken acquisitionStateValue = acquiredPlansValue["acquisitionState"];
                                            if (acquisitionStateValue != null && acquisitionStateValue.Type != JTokenType.Null)
                                            {
                                                PlanAcquisitionState acquisitionStateInstance = ((PlanAcquisitionState)Enum.Parse(typeof(PlanAcquisitionState), ((string)acquisitionStateValue), true));
                                                planReferenceDefinitionInstance.AcquisitionState = acquisitionStateInstance;
                                            }
                                            
                                            JToken acquisitionTimeValue = acquiredPlansValue["acquisitionTime"];
                                            if (acquisitionTimeValue != null && acquisitionTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime acquisitionTimeInstance = ((DateTime)acquisitionTimeValue);
                                                planReferenceDefinitionInstance.AcquisitionTime = acquisitionTimeInstance;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </summary>
        /// <param name='nextLink'>
        /// Required. Your documentation here.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXXX.aspx
        /// for more information)
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Your documentation here.
        /// </returns>
        public async Task<SubscriptionListResult> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + Uri.EscapeDataString(nextLink);
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SubscriptionListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SubscriptionListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SubscriptionDefinition subscriptionDefinitionInstance = new SubscriptionDefinition();
                                    result.Subscriptions.Add(subscriptionDefinitionInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        subscriptionDefinitionInstance.Id = idInstance;
                                    }
                                    
                                    JToken subscriptionIdValue = valueValue["subscriptionId"];
                                    if (subscriptionIdValue != null && subscriptionIdValue.Type != JTokenType.Null)
                                    {
                                        string subscriptionIdInstance = ((string)subscriptionIdValue);
                                        subscriptionDefinitionInstance.SubscriptionId = subscriptionIdInstance;
                                    }
                                    
                                    JToken displayNameValue = valueValue["displayName"];
                                    if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                    {
                                        string displayNameInstance = ((string)displayNameValue);
                                        subscriptionDefinitionInstance.DisplayName = displayNameInstance;
                                    }
                                    
                                    JToken externalReferenceIdValue = valueValue["externalReferenceId"];
                                    if (externalReferenceIdValue != null && externalReferenceIdValue.Type != JTokenType.Null)
                                    {
                                        string externalReferenceIdInstance = ((string)externalReferenceIdValue);
                                        subscriptionDefinitionInstance.ExternalReferenceId = externalReferenceIdInstance;
                                    }
                                    
                                    JToken ownerValue = valueValue["owner"];
                                    if (ownerValue != null && ownerValue.Type != JTokenType.Null)
                                    {
                                        string ownerInstance = ((string)ownerValue);
                                        subscriptionDefinitionInstance.Owner = ownerInstance;
                                    }
                                    
                                    JToken offerNameValue = valueValue["offerName"];
                                    if (offerNameValue != null && offerNameValue.Type != JTokenType.Null)
                                    {
                                        string offerNameInstance = ((string)offerNameValue);
                                        subscriptionDefinitionInstance.OfferName = offerNameInstance;
                                    }
                                    
                                    JToken offerIdValue = valueValue["offerId"];
                                    if (offerIdValue != null && offerIdValue.Type != JTokenType.Null)
                                    {
                                        string offerIdInstance = ((string)offerIdValue);
                                        subscriptionDefinitionInstance.OfferId = offerIdInstance;
                                    }
                                    
                                    JToken delegatedProviderIdValue = valueValue["delegatedProviderId"];
                                    if (delegatedProviderIdValue != null && delegatedProviderIdValue.Type != JTokenType.Null)
                                    {
                                        string delegatedProviderIdInstance = ((string)delegatedProviderIdValue);
                                        subscriptionDefinitionInstance.DelegatedProviderId = delegatedProviderIdInstance;
                                    }
                                    
                                    JToken offerDisplayNameValue = valueValue["offerDisplayName"];
                                    if (offerDisplayNameValue != null && offerDisplayNameValue.Type != JTokenType.Null)
                                    {
                                        string offerDisplayNameInstance = ((string)offerDisplayNameValue);
                                        subscriptionDefinitionInstance.OfferDisplayName = offerDisplayNameInstance;
                                    }
                                    
                                    JToken stateValue = valueValue["state"];
                                    if (stateValue != null && stateValue.Type != JTokenType.Null)
                                    {
                                        SubscriptionState stateInstance = ((SubscriptionState)Enum.Parse(typeof(SubscriptionState), ((string)stateValue), true));
                                        subscriptionDefinitionInstance.State = stateInstance;
                                    }
                                    
                                    JToken quotaSyncStateValue = valueValue["quotaSyncState"];
                                    if (quotaSyncStateValue != null && quotaSyncStateValue.Type != JTokenType.Null)
                                    {
                                        QuotaSyncState quotaSyncStateInstance = ((QuotaSyncState)Enum.Parse(typeof(QuotaSyncState), ((string)quotaSyncStateValue), true));
                                        subscriptionDefinitionInstance.QuotaSyncState = quotaSyncStateInstance;
                                    }
                                    
                                    JToken serviceQuotasArray = valueValue["serviceQuotas"];
                                    if (serviceQuotasArray != null && serviceQuotasArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken serviceQuotasValue in ((JArray)serviceQuotasArray))
                                        {
                                            ServiceQuotaDefinition serviceQuotaDefinitionInstance = new ServiceQuotaDefinition();
                                            subscriptionDefinitionInstance.ServiceQuotas.Add(serviceQuotaDefinitionInstance);
                                            
                                            JToken resourceProviderIdValue = serviceQuotasValue["resourceProviderId"];
                                            if (resourceProviderIdValue != null && resourceProviderIdValue.Type != JTokenType.Null)
                                            {
                                                string resourceProviderIdInstance = ((string)resourceProviderIdValue);
                                                serviceQuotaDefinitionInstance.ResourceProviderId = resourceProviderIdInstance;
                                            }
                                            
                                            JToken resourceProviderNamespaceValue = serviceQuotasValue["resourceProviderNamespace"];
                                            if (resourceProviderNamespaceValue != null && resourceProviderNamespaceValue.Type != JTokenType.Null)
                                            {
                                                string resourceProviderNamespaceInstance = ((string)resourceProviderNamespaceValue);
                                                serviceQuotaDefinitionInstance.ResourceProviderNamespace = resourceProviderNamespaceInstance;
                                            }
                                            
                                            JToken resourceProviderDisplayNameValue = serviceQuotasValue["resourceProviderDisplayName"];
                                            if (resourceProviderDisplayNameValue != null && resourceProviderDisplayNameValue.Type != JTokenType.Null)
                                            {
                                                string resourceProviderDisplayNameInstance = ((string)resourceProviderDisplayNameValue);
                                                serviceQuotaDefinitionInstance.ResourceProviderDisplayName = resourceProviderDisplayNameInstance;
                                            }
                                            
                                            JToken locationValue = serviceQuotasValue["location"];
                                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                                            {
                                                string locationInstance = ((string)locationValue);
                                                serviceQuotaDefinitionInstance.Location = locationInstance;
                                            }
                                            
                                            JToken quotaSyncStateValue2 = serviceQuotasValue["quotaSyncState"];
                                            if (quotaSyncStateValue2 != null && quotaSyncStateValue2.Type != JTokenType.Null)
                                            {
                                                QuotaSyncState quotaSyncStateInstance2 = ((QuotaSyncState)Enum.Parse(typeof(QuotaSyncState), ((string)quotaSyncStateValue2), true));
                                                serviceQuotaDefinitionInstance.QuotaSyncState = quotaSyncStateInstance2;
                                            }
                                            
                                            JToken quotaSettingsValue = serviceQuotasValue["quotaSettings"];
                                            if (quotaSettingsValue != null && quotaSettingsValue.Type != JTokenType.Null)
                                            {
                                                string quotaSettingsInstance = quotaSettingsValue.ToString(Newtonsoft.Json.Formatting.Indented);
                                                serviceQuotaDefinitionInstance.QuotaSettings = quotaSettingsInstance;
                                            }
                                        }
                                    }
                                    
                                    JToken acquiredPlansArray = valueValue["acquiredPlans"];
                                    if (acquiredPlansArray != null && acquiredPlansArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken acquiredPlansValue in ((JArray)acquiredPlansArray))
                                        {
                                            PlanReferenceDefinition planReferenceDefinitionInstance = new PlanReferenceDefinition();
                                            subscriptionDefinitionInstance.AcquiredPlans.Add(planReferenceDefinitionInstance);
                                            
                                            JToken planNameValue = acquiredPlansValue["planName"];
                                            if (planNameValue != null && planNameValue.Type != JTokenType.Null)
                                            {
                                                string planNameInstance = ((string)planNameValue);
                                                planReferenceDefinitionInstance.PlanName = planNameInstance;
                                            }
                                            
                                            JToken acquisitionStateValue = acquiredPlansValue["acquisitionState"];
                                            if (acquisitionStateValue != null && acquisitionStateValue.Type != JTokenType.Null)
                                            {
                                                PlanAcquisitionState acquisitionStateInstance = ((PlanAcquisitionState)Enum.Parse(typeof(PlanAcquisitionState), ((string)acquisitionStateValue), true));
                                                planReferenceDefinitionInstance.AcquisitionState = acquisitionStateInstance;
                                            }
                                            
                                            JToken acquisitionTimeValue = acquiredPlansValue["acquisitionTime"];
                                            if (acquisitionTimeValue != null && acquisitionTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTime acquisitionTimeInstance = ((DateTime)acquisitionTimeValue);
                                                planReferenceDefinitionInstance.AcquisitionTime = acquisitionTimeInstance;
                                            }
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
