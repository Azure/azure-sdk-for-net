// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.AzureStack.Management;
using Microsoft.AzureStack.Management.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.AzureStack.Management
{
    /// <summary>
    /// Usage connection operations  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class UsageConnectionsOperations : IServiceOperations<AzureStackClient>, IUsageConnectionsOperations
    {
        /// <summary>
        /// Initializes a new instance of the UsageConnectionsOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal UsageConnectionsOperations(AzureStackClient client)
        {
            this._client = client;
        }
        
        private AzureStackClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.AzureStackClient.
        /// </summary>
        public AzureStackClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create or updates the usage connection
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource Group Name
        /// </param>
        /// <param name='usageConnectionId'>
        /// Required. Usage Connection Id
        /// </param>
        /// <param name='parameters'>
        /// Required. Usage Connections Create or Update Parameters
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The usage connection create or update result.
        /// </returns>
        public async Task<UsageConnectionsCreateOrUpdateResult> CreateOrUpdateAsync(string resourceGroupName, string usageConnectionId, UsageConnectionsCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (usageConnectionId == null)
            {
                throw new ArgumentNullException("usageConnectionId");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.UsageConnections == null)
            {
                throw new ArgumentNullException("parameters.UsageConnections");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("usageConnectionId", usageConnectionId);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Commerce.Providers/usageConnections/";
            url = url + Uri.EscapeDataString(usageConnectionId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject usageConnectionsCreateOrUpdateParametersValue = new JObject();
                requestDoc = usageConnectionsCreateOrUpdateParametersValue;
                
                if (parameters.UsageConnections.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    usageConnectionsCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.UsageConnections.Properties.ProviderLocation != null)
                    {
                        propertiesValue["providerLocation"] = parameters.UsageConnections.Properties.ProviderLocation;
                    }
                    
                    if (parameters.UsageConnections.Properties.ProviderNamespace != null)
                    {
                        propertiesValue["providerNamespace"] = parameters.UsageConnections.Properties.ProviderNamespace;
                    }
                    
                    if (parameters.UsageConnections.Properties.UsageStorageConnectionString != null)
                    {
                        propertiesValue["usageStorageConnectionString"] = parameters.UsageConnections.Properties.UsageStorageConnectionString;
                    }
                    
                    if (parameters.UsageConnections.Properties.UsageReportingQueue != null)
                    {
                        propertiesValue["usageReportingQueue"] = parameters.UsageConnections.Properties.UsageReportingQueue;
                    }
                    
                    if (parameters.UsageConnections.Properties.UsageReportingTable != null)
                    {
                        propertiesValue["usageReportingTable"] = parameters.UsageConnections.Properties.UsageReportingTable;
                    }
                    
                    if (parameters.UsageConnections.Properties.ErrorReportingQueue != null)
                    {
                        propertiesValue["errorReportingQueue"] = parameters.UsageConnections.Properties.ErrorReportingQueue;
                    }
                    
                    if (parameters.UsageConnections.Properties.ErrorReportingTable != null)
                    {
                        propertiesValue["errorReportingTable"] = parameters.UsageConnections.Properties.ErrorReportingTable;
                    }
                }
                
                if (parameters.UsageConnections.Id != null)
                {
                    usageConnectionsCreateOrUpdateParametersValue["id"] = parameters.UsageConnections.Id;
                }
                
                if (parameters.UsageConnections.Name != null)
                {
                    usageConnectionsCreateOrUpdateParametersValue["name"] = parameters.UsageConnections.Name;
                }
                
                if (parameters.UsageConnections.Type != null)
                {
                    usageConnectionsCreateOrUpdateParametersValue["type"] = parameters.UsageConnections.Type;
                }
                
                if (parameters.UsageConnections.Location != null)
                {
                    usageConnectionsCreateOrUpdateParametersValue["location"] = parameters.UsageConnections.Location;
                }
                
                if (parameters.UsageConnections.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.UsageConnections.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    usageConnectionsCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UsageConnectionsCreateOrUpdateResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new UsageConnectionsCreateOrUpdateResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            UsageConnectionModel usageConnectionInstance = new UsageConnectionModel();
                            result.UsageConnection = usageConnectionInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                UsageConnection propertiesInstance = new UsageConnection();
                                usageConnectionInstance.Properties = propertiesInstance;
                                
                                JToken providerLocationValue = propertiesValue2["providerLocation"];
                                if (providerLocationValue != null && providerLocationValue.Type != JTokenType.Null)
                                {
                                    string providerLocationInstance = ((string)providerLocationValue);
                                    propertiesInstance.ProviderLocation = providerLocationInstance;
                                }
                                
                                JToken providerNamespaceValue = propertiesValue2["providerNamespace"];
                                if (providerNamespaceValue != null && providerNamespaceValue.Type != JTokenType.Null)
                                {
                                    string providerNamespaceInstance = ((string)providerNamespaceValue);
                                    propertiesInstance.ProviderNamespace = providerNamespaceInstance;
                                }
                                
                                JToken usageStorageConnectionStringValue = propertiesValue2["usageStorageConnectionString"];
                                if (usageStorageConnectionStringValue != null && usageStorageConnectionStringValue.Type != JTokenType.Null)
                                {
                                    string usageStorageConnectionStringInstance = ((string)usageStorageConnectionStringValue);
                                    propertiesInstance.UsageStorageConnectionString = usageStorageConnectionStringInstance;
                                }
                                
                                JToken usageReportingQueueValue = propertiesValue2["usageReportingQueue"];
                                if (usageReportingQueueValue != null && usageReportingQueueValue.Type != JTokenType.Null)
                                {
                                    string usageReportingQueueInstance = ((string)usageReportingQueueValue);
                                    propertiesInstance.UsageReportingQueue = usageReportingQueueInstance;
                                }
                                
                                JToken usageReportingTableValue = propertiesValue2["usageReportingTable"];
                                if (usageReportingTableValue != null && usageReportingTableValue.Type != JTokenType.Null)
                                {
                                    string usageReportingTableInstance = ((string)usageReportingTableValue);
                                    propertiesInstance.UsageReportingTable = usageReportingTableInstance;
                                }
                                
                                JToken errorReportingQueueValue = propertiesValue2["errorReportingQueue"];
                                if (errorReportingQueueValue != null && errorReportingQueueValue.Type != JTokenType.Null)
                                {
                                    string errorReportingQueueInstance = ((string)errorReportingQueueValue);
                                    propertiesInstance.ErrorReportingQueue = errorReportingQueueInstance;
                                }
                                
                                JToken errorReportingTableValue = propertiesValue2["errorReportingTable"];
                                if (errorReportingTableValue != null && errorReportingTableValue.Type != JTokenType.Null)
                                {
                                    string errorReportingTableInstance = ((string)errorReportingTableValue);
                                    propertiesInstance.ErrorReportingTable = errorReportingTableInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                usageConnectionInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                usageConnectionInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                usageConnectionInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                usageConnectionInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    usageConnectionInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete operation on the usage connection
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='usageConnectionId'>
        /// Required. usage connection id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string usageConnectionId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (usageConnectionId == null)
            {
                throw new ArgumentNullException("usageConnectionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("usageConnectionId", usageConnectionId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Commerce.Providers/usageConnections/";
            url = url + Uri.EscapeDataString(usageConnectionId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the usage connection details given the id and resource group
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource Group name for usage connection information
        /// </param>
        /// <param name='usageConnectionId'>
        /// Required. Usage Connection Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Usage Connections Model as result
        /// </returns>
        public async Task<UsageConnectionsGetResult> GetAsync(string resourceGroupName, string usageConnectionId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (usageConnectionId == null)
            {
                throw new ArgumentNullException("usageConnectionId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("usageConnectionId", usageConnectionId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Commerce.Providers/usageConnections/";
            url = url + Uri.EscapeDataString(usageConnectionId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UsageConnectionsGetResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new UsageConnectionsGetResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            UsageConnectionModel usageConnectionsInstance = new UsageConnectionModel();
                            result.UsageConnections = usageConnectionsInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                UsageConnection propertiesInstance = new UsageConnection();
                                usageConnectionsInstance.Properties = propertiesInstance;
                                
                                JToken providerLocationValue = propertiesValue["providerLocation"];
                                if (providerLocationValue != null && providerLocationValue.Type != JTokenType.Null)
                                {
                                    string providerLocationInstance = ((string)providerLocationValue);
                                    propertiesInstance.ProviderLocation = providerLocationInstance;
                                }
                                
                                JToken providerNamespaceValue = propertiesValue["providerNamespace"];
                                if (providerNamespaceValue != null && providerNamespaceValue.Type != JTokenType.Null)
                                {
                                    string providerNamespaceInstance = ((string)providerNamespaceValue);
                                    propertiesInstance.ProviderNamespace = providerNamespaceInstance;
                                }
                                
                                JToken usageStorageConnectionStringValue = propertiesValue["usageStorageConnectionString"];
                                if (usageStorageConnectionStringValue != null && usageStorageConnectionStringValue.Type != JTokenType.Null)
                                {
                                    string usageStorageConnectionStringInstance = ((string)usageStorageConnectionStringValue);
                                    propertiesInstance.UsageStorageConnectionString = usageStorageConnectionStringInstance;
                                }
                                
                                JToken usageReportingQueueValue = propertiesValue["usageReportingQueue"];
                                if (usageReportingQueueValue != null && usageReportingQueueValue.Type != JTokenType.Null)
                                {
                                    string usageReportingQueueInstance = ((string)usageReportingQueueValue);
                                    propertiesInstance.UsageReportingQueue = usageReportingQueueInstance;
                                }
                                
                                JToken usageReportingTableValue = propertiesValue["usageReportingTable"];
                                if (usageReportingTableValue != null && usageReportingTableValue.Type != JTokenType.Null)
                                {
                                    string usageReportingTableInstance = ((string)usageReportingTableValue);
                                    propertiesInstance.UsageReportingTable = usageReportingTableInstance;
                                }
                                
                                JToken errorReportingQueueValue = propertiesValue["errorReportingQueue"];
                                if (errorReportingQueueValue != null && errorReportingQueueValue.Type != JTokenType.Null)
                                {
                                    string errorReportingQueueInstance = ((string)errorReportingQueueValue);
                                    propertiesInstance.ErrorReportingQueue = errorReportingQueueInstance;
                                }
                                
                                JToken errorReportingTableValue = propertiesValue["errorReportingTable"];
                                if (errorReportingTableValue != null && errorReportingTableValue.Type != JTokenType.Null)
                                {
                                    string errorReportingTableInstance = ((string)errorReportingTableValue);
                                    propertiesInstance.ErrorReportingTable = errorReportingTableInstance;
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                usageConnectionsInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                usageConnectionsInstance.Name = nameInstance;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                usageConnectionsInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                usageConnectionsInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    usageConnectionsInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists the usage connections under a resource group
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// List of usage connections
        /// </returns>
        public async Task<UsageConnectionsListResult> ListAsync(string resourceGroupName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Commerce.Providers/usageConnections";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    UsageConnectionsListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new UsageConnectionsListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    UsageConnectionModel usageConnectionModelInstance = new UsageConnectionModel();
                                    result.UsageConnections.Add(usageConnectionModelInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        UsageConnection propertiesInstance = new UsageConnection();
                                        usageConnectionModelInstance.Properties = propertiesInstance;
                                        
                                        JToken providerLocationValue = propertiesValue["providerLocation"];
                                        if (providerLocationValue != null && providerLocationValue.Type != JTokenType.Null)
                                        {
                                            string providerLocationInstance = ((string)providerLocationValue);
                                            propertiesInstance.ProviderLocation = providerLocationInstance;
                                        }
                                        
                                        JToken providerNamespaceValue = propertiesValue["providerNamespace"];
                                        if (providerNamespaceValue != null && providerNamespaceValue.Type != JTokenType.Null)
                                        {
                                            string providerNamespaceInstance = ((string)providerNamespaceValue);
                                            propertiesInstance.ProviderNamespace = providerNamespaceInstance;
                                        }
                                        
                                        JToken usageStorageConnectionStringValue = propertiesValue["usageStorageConnectionString"];
                                        if (usageStorageConnectionStringValue != null && usageStorageConnectionStringValue.Type != JTokenType.Null)
                                        {
                                            string usageStorageConnectionStringInstance = ((string)usageStorageConnectionStringValue);
                                            propertiesInstance.UsageStorageConnectionString = usageStorageConnectionStringInstance;
                                        }
                                        
                                        JToken usageReportingQueueValue = propertiesValue["usageReportingQueue"];
                                        if (usageReportingQueueValue != null && usageReportingQueueValue.Type != JTokenType.Null)
                                        {
                                            string usageReportingQueueInstance = ((string)usageReportingQueueValue);
                                            propertiesInstance.UsageReportingQueue = usageReportingQueueInstance;
                                        }
                                        
                                        JToken usageReportingTableValue = propertiesValue["usageReportingTable"];
                                        if (usageReportingTableValue != null && usageReportingTableValue.Type != JTokenType.Null)
                                        {
                                            string usageReportingTableInstance = ((string)usageReportingTableValue);
                                            propertiesInstance.UsageReportingTable = usageReportingTableInstance;
                                        }
                                        
                                        JToken errorReportingQueueValue = propertiesValue["errorReportingQueue"];
                                        if (errorReportingQueueValue != null && errorReportingQueueValue.Type != JTokenType.Null)
                                        {
                                            string errorReportingQueueInstance = ((string)errorReportingQueueValue);
                                            propertiesInstance.ErrorReportingQueue = errorReportingQueueInstance;
                                        }
                                        
                                        JToken errorReportingTableValue = propertiesValue["errorReportingTable"];
                                        if (errorReportingTableValue != null && errorReportingTableValue.Type != JTokenType.Null)
                                        {
                                            string errorReportingTableInstance = ((string)errorReportingTableValue);
                                            propertiesInstance.ErrorReportingTable = errorReportingTableInstance;
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        usageConnectionModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        usageConnectionModelInstance.Name = nameInstance;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        usageConnectionModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        usageConnectionModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            usageConnectionModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
