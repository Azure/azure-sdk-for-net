// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.AzureStack.Management;
using Microsoft.AzureStack.Management.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.AzureStack.Management
{
    /// <summary>
    /// Administrator Operations on the offer  (see
    /// http://msdn.microsoft.com/en-us/library/windowsazure/XXXX.aspx for
    /// more information)
    /// </summary>
    internal partial class ManagedOfferOperations : IServiceOperations<AzureStackClient>, IManagedOfferOperations
    {
        /// <summary>
        /// Initializes a new instance of the ManagedOfferOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal ManagedOfferOperations(AzureStackClient client)
        {
            this._client = client;
        }
        
        private AzureStackClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.AzureStack.Management.AzureStackClient.
        /// </summary>
        public AzureStackClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Returns the created or updated offer
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='parameters'>
        /// Required. Offer properties
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Result of the create or update operation of offer
        /// </returns>
        public async Task<ManagedOfferCreateOrUpdateResult> CreateOrUpdateAsync(string resourceGroupName, ManagedOfferCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Offer == null)
            {
                throw new ArgumentNullException("parameters.Offer");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Subscriptions.Admin/offers/";
            if (parameters.Offer.Name != null)
            {
                url = url + Uri.EscapeDataString(parameters.Offer.Name);
            }
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject managedOfferCreateOrUpdateParametersValue = new JObject();
                requestDoc = managedOfferCreateOrUpdateParametersValue;
                
                if (parameters.Offer.Properties != null)
                {
                    JObject propertiesValue = new JObject();
                    managedOfferCreateOrUpdateParametersValue["properties"] = propertiesValue;
                    
                    if (parameters.Offer.Properties.Name != null)
                    {
                        propertiesValue["name"] = parameters.Offer.Properties.Name;
                    }
                    
                    if (parameters.Offer.Properties.DisplayName != null)
                    {
                        propertiesValue["displayName"] = parameters.Offer.Properties.DisplayName;
                    }
                    
                    if (parameters.Offer.Properties.Description != null)
                    {
                        propertiesValue["description"] = parameters.Offer.Properties.Description;
                    }
                    
                    if (parameters.Offer.Properties.ExternalReferenceId != null)
                    {
                        propertiesValue["externalReferenceId"] = parameters.Offer.Properties.ExternalReferenceId;
                    }
                    
                    propertiesValue["state"] = parameters.Offer.Properties.State.ToString();
                    
                    if (parameters.Offer.Properties.SubscriptionCount != null)
                    {
                        propertiesValue["subscriptionCount"] = parameters.Offer.Properties.SubscriptionCount.Value;
                    }
                    
                    if (parameters.Offer.Properties.MaxSubscriptionsPerAccount != null)
                    {
                        propertiesValue["maxSubscriptionsPerAccount"] = parameters.Offer.Properties.MaxSubscriptionsPerAccount.Value;
                    }
                    
                    if (parameters.Offer.Properties.BasePlanIds != null)
                    {
                        if (parameters.Offer.Properties.BasePlanIds is ILazyCollection == false || ((ILazyCollection)parameters.Offer.Properties.BasePlanIds).IsInitialized)
                        {
                            JArray basePlanIdsArray = new JArray();
                            foreach (string basePlanIdsItem in parameters.Offer.Properties.BasePlanIds)
                            {
                                basePlanIdsArray.Add(basePlanIdsItem);
                            }
                            propertiesValue["basePlanIds"] = basePlanIdsArray;
                        }
                    }
                    
                    if (parameters.Offer.Properties.AddonPlans != null)
                    {
                        if (parameters.Offer.Properties.AddonPlans is ILazyCollection == false || ((ILazyCollection)parameters.Offer.Properties.AddonPlans).IsInitialized)
                        {
                            JArray addonPlansArray = new JArray();
                            foreach (AddonPlanDefinition addonPlansItem in parameters.Offer.Properties.AddonPlans)
                            {
                                JObject addonPlanDefinitionValue = new JObject();
                                addonPlansArray.Add(addonPlanDefinitionValue);
                                
                                if (addonPlansItem.PlanId != null)
                                {
                                    addonPlanDefinitionValue["planId"] = addonPlansItem.PlanId;
                                }
                                
                                if (addonPlansItem.MaxAcquisitionCount != null)
                                {
                                    addonPlanDefinitionValue["maxAcquisitionCount"] = addonPlansItem.MaxAcquisitionCount.Value;
                                }
                            }
                            propertiesValue["addonPlans"] = addonPlansArray;
                        }
                    }
                }
                
                if (parameters.Offer.Id != null)
                {
                    managedOfferCreateOrUpdateParametersValue["id"] = parameters.Offer.Id;
                }
                
                if (parameters.Offer.Name != null)
                {
                    managedOfferCreateOrUpdateParametersValue["name"] = parameters.Offer.Name;
                }
                
                if (parameters.Offer.Type != null)
                {
                    managedOfferCreateOrUpdateParametersValue["type"] = parameters.Offer.Type;
                }
                
                if (parameters.Offer.Location != null)
                {
                    managedOfferCreateOrUpdateParametersValue["location"] = parameters.Offer.Location;
                }
                
                if (parameters.Offer.Tags != null)
                {
                    JObject tagsDictionary = new JObject();
                    foreach (KeyValuePair<string, string> pair in parameters.Offer.Tags)
                    {
                        string tagsKey = pair.Key;
                        string tagsValue = pair.Value;
                        tagsDictionary[tagsKey] = tagsValue;
                    }
                    managedOfferCreateOrUpdateParametersValue["tags"] = tagsDictionary;
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ManagedOfferCreateOrUpdateResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ManagedOfferCreateOrUpdateResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AdminOfferModel offerInstance = new AdminOfferModel();
                            result.Offer = offerInstance;
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                AdminOfferPropertiesDefinition propertiesInstance = new AdminOfferPropertiesDefinition();
                                offerInstance.Properties = propertiesInstance;
                                
                                JToken nameValue = propertiesValue2["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    propertiesInstance.Name = nameInstance;
                                }
                                
                                JToken displayNameValue = propertiesValue2["displayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    propertiesInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue2["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken externalReferenceIdValue = propertiesValue2["externalReferenceId"];
                                if (externalReferenceIdValue != null && externalReferenceIdValue.Type != JTokenType.Null)
                                {
                                    string externalReferenceIdInstance = ((string)externalReferenceIdValue);
                                    propertiesInstance.ExternalReferenceId = externalReferenceIdInstance;
                                }
                                
                                JToken stateValue = propertiesValue2["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    AccessibilityState stateInstance = ((AccessibilityState)Enum.Parse(typeof(AccessibilityState), ((string)stateValue), true));
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken subscriptionCountValue = propertiesValue2["subscriptionCount"];
                                if (subscriptionCountValue != null && subscriptionCountValue.Type != JTokenType.Null)
                                {
                                    int subscriptionCountInstance = ((int)subscriptionCountValue);
                                    propertiesInstance.SubscriptionCount = subscriptionCountInstance;
                                }
                                
                                JToken maxSubscriptionsPerAccountValue = propertiesValue2["maxSubscriptionsPerAccount"];
                                if (maxSubscriptionsPerAccountValue != null && maxSubscriptionsPerAccountValue.Type != JTokenType.Null)
                                {
                                    int maxSubscriptionsPerAccountInstance = ((int)maxSubscriptionsPerAccountValue);
                                    propertiesInstance.MaxSubscriptionsPerAccount = maxSubscriptionsPerAccountInstance;
                                }
                                
                                JToken basePlanIdsArray2 = propertiesValue2["basePlanIds"];
                                if (basePlanIdsArray2 != null && basePlanIdsArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken basePlanIdsValue in ((JArray)basePlanIdsArray2))
                                    {
                                        propertiesInstance.BasePlanIds.Add(((string)basePlanIdsValue));
                                    }
                                }
                                
                                JToken addonPlansArray2 = propertiesValue2["addonPlans"];
                                if (addonPlansArray2 != null && addonPlansArray2.Type != JTokenType.Null)
                                {
                                    foreach (JToken addonPlansValue in ((JArray)addonPlansArray2))
                                    {
                                        AddonPlanDefinition addonPlanDefinitionInstance = new AddonPlanDefinition();
                                        propertiesInstance.AddonPlans.Add(addonPlanDefinitionInstance);
                                        
                                        JToken planIdValue = addonPlansValue["planId"];
                                        if (planIdValue != null && planIdValue.Type != JTokenType.Null)
                                        {
                                            string planIdInstance = ((string)planIdValue);
                                            addonPlanDefinitionInstance.PlanId = planIdInstance;
                                        }
                                        
                                        JToken maxAcquisitionCountValue = addonPlansValue["maxAcquisitionCount"];
                                        if (maxAcquisitionCountValue != null && maxAcquisitionCountValue.Type != JTokenType.Null)
                                        {
                                            int maxAcquisitionCountInstance = ((int)maxAcquisitionCountValue);
                                            addonPlanDefinitionInstance.MaxAcquisitionCount = maxAcquisitionCountInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                offerInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                offerInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                offerInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                offerInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey2 = ((string)property.Name);
                                    string tagsValue2 = ((string)property.Value);
                                    offerInstance.Tags.Add(tagsKey2, tagsValue2);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete operation on the offer
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='offerId'>
        /// Required. Offer name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string offerId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (offerId == null)
            {
                throw new ArgumentNullException("offerId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("offerId", offerId);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Subscriptions.Admin/offers/";
            url = url + Uri.EscapeDataString(offerId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the administrator view of the offer
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='offerId'>
        /// Required. Offer name
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Result of the offer Get operation
        /// </returns>
        public async Task<ManagedOfferGetResult> GetAsync(string resourceGroupName, string offerId, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (offerId == null)
            {
                throw new ArgumentNullException("offerId");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("offerId", offerId);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Subscriptions.Admin/offers/";
            url = url + Uri.EscapeDataString(offerId);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ManagedOfferGetResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ManagedOfferGetResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            AdminOfferModel offerInstance = new AdminOfferModel();
                            result.Offer = offerInstance;
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                AdminOfferPropertiesDefinition propertiesInstance = new AdminOfferPropertiesDefinition();
                                offerInstance.Properties = propertiesInstance;
                                
                                JToken nameValue = propertiesValue["name"];
                                if (nameValue != null && nameValue.Type != JTokenType.Null)
                                {
                                    string nameInstance = ((string)nameValue);
                                    propertiesInstance.Name = nameInstance;
                                }
                                
                                JToken displayNameValue = propertiesValue["displayName"];
                                if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                {
                                    string displayNameInstance = ((string)displayNameValue);
                                    propertiesInstance.DisplayName = displayNameInstance;
                                }
                                
                                JToken descriptionValue = propertiesValue["description"];
                                if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                {
                                    string descriptionInstance = ((string)descriptionValue);
                                    propertiesInstance.Description = descriptionInstance;
                                }
                                
                                JToken externalReferenceIdValue = propertiesValue["externalReferenceId"];
                                if (externalReferenceIdValue != null && externalReferenceIdValue.Type != JTokenType.Null)
                                {
                                    string externalReferenceIdInstance = ((string)externalReferenceIdValue);
                                    propertiesInstance.ExternalReferenceId = externalReferenceIdInstance;
                                }
                                
                                JToken stateValue = propertiesValue["state"];
                                if (stateValue != null && stateValue.Type != JTokenType.Null)
                                {
                                    AccessibilityState stateInstance = ((AccessibilityState)Enum.Parse(typeof(AccessibilityState), ((string)stateValue), true));
                                    propertiesInstance.State = stateInstance;
                                }
                                
                                JToken subscriptionCountValue = propertiesValue["subscriptionCount"];
                                if (subscriptionCountValue != null && subscriptionCountValue.Type != JTokenType.Null)
                                {
                                    int subscriptionCountInstance = ((int)subscriptionCountValue);
                                    propertiesInstance.SubscriptionCount = subscriptionCountInstance;
                                }
                                
                                JToken maxSubscriptionsPerAccountValue = propertiesValue["maxSubscriptionsPerAccount"];
                                if (maxSubscriptionsPerAccountValue != null && maxSubscriptionsPerAccountValue.Type != JTokenType.Null)
                                {
                                    int maxSubscriptionsPerAccountInstance = ((int)maxSubscriptionsPerAccountValue);
                                    propertiesInstance.MaxSubscriptionsPerAccount = maxSubscriptionsPerAccountInstance;
                                }
                                
                                JToken basePlanIdsArray = propertiesValue["basePlanIds"];
                                if (basePlanIdsArray != null && basePlanIdsArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken basePlanIdsValue in ((JArray)basePlanIdsArray))
                                    {
                                        propertiesInstance.BasePlanIds.Add(((string)basePlanIdsValue));
                                    }
                                }
                                
                                JToken addonPlansArray = propertiesValue["addonPlans"];
                                if (addonPlansArray != null && addonPlansArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken addonPlansValue in ((JArray)addonPlansArray))
                                    {
                                        AddonPlanDefinition addonPlanDefinitionInstance = new AddonPlanDefinition();
                                        propertiesInstance.AddonPlans.Add(addonPlanDefinitionInstance);
                                        
                                        JToken planIdValue = addonPlansValue["planId"];
                                        if (planIdValue != null && planIdValue.Type != JTokenType.Null)
                                        {
                                            string planIdInstance = ((string)planIdValue);
                                            addonPlanDefinitionInstance.PlanId = planIdInstance;
                                        }
                                        
                                        JToken maxAcquisitionCountValue = addonPlansValue["maxAcquisitionCount"];
                                        if (maxAcquisitionCountValue != null && maxAcquisitionCountValue.Type != JTokenType.Null)
                                        {
                                            int maxAcquisitionCountInstance = ((int)maxAcquisitionCountValue);
                                            addonPlanDefinitionInstance.MaxAcquisitionCount = maxAcquisitionCountInstance;
                                        }
                                    }
                                }
                            }
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                offerInstance.Id = idInstance;
                            }
                            
                            JToken nameValue2 = responseDoc["name"];
                            if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                            {
                                string nameInstance2 = ((string)nameValue2);
                                offerInstance.Name = nameInstance2;
                            }
                            
                            JToken typeValue = responseDoc["type"];
                            if (typeValue != null && typeValue.Type != JTokenType.Null)
                            {
                                string typeInstance = ((string)typeValue);
                                offerInstance.Type = typeInstance;
                            }
                            
                            JToken locationValue = responseDoc["location"];
                            if (locationValue != null && locationValue.Type != JTokenType.Null)
                            {
                                string locationInstance = ((string)locationValue);
                                offerInstance.Location = locationInstance;
                            }
                            
                            JToken tagsSequenceElement = ((JToken)responseDoc["tags"]);
                            if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                            {
                                foreach (JProperty property in tagsSequenceElement)
                                {
                                    string tagsKey = ((string)property.Name);
                                    string tagsValue = ((string)property.Value);
                                    offerInstance.Tags.Add(tagsKey, tagsValue);
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Lists the offers under the specified resource group
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. Resource group name
        /// </param>
        /// <param name='includeDetails'>
        /// Required. Flag to specify whether to include details
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Result of the offer list operation
        /// </returns>
        public async Task<ManagedOfferListResult> ListAsync(string resourceGroupName, bool includeDetails, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (resourceGroupName != null && resourceGroupName.Length > 80)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            if (Regex.IsMatch(resourceGroupName, "^[-\\w\\._]+$") == false)
            {
                throw new ArgumentOutOfRangeException("resourceGroupName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("includeDetails", includeDetails);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourcegroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/Microsoft.Subscriptions.Admin/offers";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=" + Uri.EscapeDataString(this.Client.ApiVersion));
            queryParameters.Add("includeDetails=" + Uri.EscapeDataString(includeDetails.ToString().ToLower()));
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ManagedOfferListResult result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ManagedOfferListResult();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    AdminOfferModel adminOfferModelInstance = new AdminOfferModel();
                                    result.Offers.Add(adminOfferModelInstance);
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        AdminOfferPropertiesDefinition propertiesInstance = new AdminOfferPropertiesDefinition();
                                        adminOfferModelInstance.Properties = propertiesInstance;
                                        
                                        JToken nameValue = propertiesValue["name"];
                                        if (nameValue != null && nameValue.Type != JTokenType.Null)
                                        {
                                            string nameInstance = ((string)nameValue);
                                            propertiesInstance.Name = nameInstance;
                                        }
                                        
                                        JToken displayNameValue = propertiesValue["displayName"];
                                        if (displayNameValue != null && displayNameValue.Type != JTokenType.Null)
                                        {
                                            string displayNameInstance = ((string)displayNameValue);
                                            propertiesInstance.DisplayName = displayNameInstance;
                                        }
                                        
                                        JToken descriptionValue = propertiesValue["description"];
                                        if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance = ((string)descriptionValue);
                                            propertiesInstance.Description = descriptionInstance;
                                        }
                                        
                                        JToken externalReferenceIdValue = propertiesValue["externalReferenceId"];
                                        if (externalReferenceIdValue != null && externalReferenceIdValue.Type != JTokenType.Null)
                                        {
                                            string externalReferenceIdInstance = ((string)externalReferenceIdValue);
                                            propertiesInstance.ExternalReferenceId = externalReferenceIdInstance;
                                        }
                                        
                                        JToken stateValue = propertiesValue["state"];
                                        if (stateValue != null && stateValue.Type != JTokenType.Null)
                                        {
                                            AccessibilityState stateInstance = ((AccessibilityState)Enum.Parse(typeof(AccessibilityState), ((string)stateValue), true));
                                            propertiesInstance.State = stateInstance;
                                        }
                                        
                                        JToken subscriptionCountValue = propertiesValue["subscriptionCount"];
                                        if (subscriptionCountValue != null && subscriptionCountValue.Type != JTokenType.Null)
                                        {
                                            int subscriptionCountInstance = ((int)subscriptionCountValue);
                                            propertiesInstance.SubscriptionCount = subscriptionCountInstance;
                                        }
                                        
                                        JToken maxSubscriptionsPerAccountValue = propertiesValue["maxSubscriptionsPerAccount"];
                                        if (maxSubscriptionsPerAccountValue != null && maxSubscriptionsPerAccountValue.Type != JTokenType.Null)
                                        {
                                            int maxSubscriptionsPerAccountInstance = ((int)maxSubscriptionsPerAccountValue);
                                            propertiesInstance.MaxSubscriptionsPerAccount = maxSubscriptionsPerAccountInstance;
                                        }
                                        
                                        JToken basePlanIdsArray = propertiesValue["basePlanIds"];
                                        if (basePlanIdsArray != null && basePlanIdsArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken basePlanIdsValue in ((JArray)basePlanIdsArray))
                                            {
                                                propertiesInstance.BasePlanIds.Add(((string)basePlanIdsValue));
                                            }
                                        }
                                        
                                        JToken addonPlansArray = propertiesValue["addonPlans"];
                                        if (addonPlansArray != null && addonPlansArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken addonPlansValue in ((JArray)addonPlansArray))
                                            {
                                                AddonPlanDefinition addonPlanDefinitionInstance = new AddonPlanDefinition();
                                                propertiesInstance.AddonPlans.Add(addonPlanDefinitionInstance);
                                                
                                                JToken planIdValue = addonPlansValue["planId"];
                                                if (planIdValue != null && planIdValue.Type != JTokenType.Null)
                                                {
                                                    string planIdInstance = ((string)planIdValue);
                                                    addonPlanDefinitionInstance.PlanId = planIdInstance;
                                                }
                                                
                                                JToken maxAcquisitionCountValue = addonPlansValue["maxAcquisitionCount"];
                                                if (maxAcquisitionCountValue != null && maxAcquisitionCountValue.Type != JTokenType.Null)
                                                {
                                                    int maxAcquisitionCountInstance = ((int)maxAcquisitionCountValue);
                                                    addonPlanDefinitionInstance.MaxAcquisitionCount = maxAcquisitionCountInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        adminOfferModelInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue2 = valueValue["name"];
                                    if (nameValue2 != null && nameValue2.Type != JTokenType.Null)
                                    {
                                        string nameInstance2 = ((string)nameValue2);
                                        adminOfferModelInstance.Name = nameInstance2;
                                    }
                                    
                                    JToken typeValue = valueValue["type"];
                                    if (typeValue != null && typeValue.Type != JTokenType.Null)
                                    {
                                        string typeInstance = ((string)typeValue);
                                        adminOfferModelInstance.Type = typeInstance;
                                    }
                                    
                                    JToken locationValue = valueValue["location"];
                                    if (locationValue != null && locationValue.Type != JTokenType.Null)
                                    {
                                        string locationInstance = ((string)locationValue);
                                        adminOfferModelInstance.Location = locationInstance;
                                    }
                                    
                                    JToken tagsSequenceElement = ((JToken)valueValue["tags"]);
                                    if (tagsSequenceElement != null && tagsSequenceElement.Type != JTokenType.Null)
                                    {
                                        foreach (JProperty property in tagsSequenceElement)
                                        {
                                            string tagsKey = ((string)property.Name);
                                            string tagsValue = ((string)property.Value);
                                            adminOfferModelInstance.Tags.Add(tagsKey, tagsValue);
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["@odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = ((string)odatanextLinkValue);
                                result.NextLink = odatanextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
