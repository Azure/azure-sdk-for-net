// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.AzureStack.Management;
using Microsoft.AzureStack.Management.Models;

namespace Microsoft.AzureStack.Management
{
    public static partial class OfferOperationsExtensions
    {
        /// <summary>
        /// Gets an offer given its Id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.IOfferOperations.
        /// </param>
        /// <param name='offerId'>
        /// Required. The full offer Id in format
        /// /delegatedProviders/{providerId}/offers/{offerName}
        /// </param>
        /// <returns>
        /// The offer get result.
        /// </returns>
        public static OfferGetResult Get(this IOfferOperations operations, string offerId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOfferOperations)s).GetAsync(offerId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets an offer given its Id.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.IOfferOperations.
        /// </param>
        /// <param name='offerId'>
        /// Required. The full offer Id in format
        /// /delegatedProviders/{providerId}/offers/{offerName}
        /// </param>
        /// <returns>
        /// The offer get result.
        /// </returns>
        public static Task<OfferGetResult> GetAsync(this IOfferOperations operations, string offerId)
        {
            return operations.GetAsync(offerId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the price of the offer.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.IOfferOperations.
        /// </param>
        /// <param name='offerId'>
        /// Required. the full offer ID
        /// /delegatedProviders/{providerId}/offers/{offerId}.
        /// </param>
        /// <returns>
        /// Offer price result.
        /// </returns>
        public static OfferGetPriceResult GetPrice(this IOfferOperations operations, string offerId)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOfferOperations)s).GetPriceAsync(offerId);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the price of the offer.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.IOfferOperations.
        /// </param>
        /// <param name='offerId'>
        /// Required. the full offer ID
        /// /delegatedProviders/{providerId}/offers/{offerId}.
        /// </param>
        /// <returns>
        /// Offer price result.
        /// </returns>
        public static Task<OfferGetPriceResult> GetPriceAsync(this IOfferOperations operations, string offerId)
        {
            return operations.GetPriceAsync(offerId, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the public offers under the provider which has the given
        /// provider identifier
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.IOfferOperations.
        /// </param>
        /// <param name='providerIdentifier'>
        /// Required. The provider identifier, we get the public offers under
        /// that provider.
        /// </param>
        /// <returns>
        /// Result of the offer
        /// </returns>
        public static OfferListResult List(this IOfferOperations operations, string providerIdentifier)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOfferOperations)s).ListAsync(providerIdentifier);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the public offers under the provider which has the given
        /// provider identifier
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.IOfferOperations.
        /// </param>
        /// <param name='providerIdentifier'>
        /// Required. The provider identifier, we get the public offers under
        /// that provider.
        /// </param>
        /// <returns>
        /// Result of the offer
        /// </returns>
        public static Task<OfferListResult> ListAsync(this IOfferOperations operations, string providerIdentifier)
        {
            return operations.ListAsync(providerIdentifier, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists the offer with the next link
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.IOfferOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The URL to get the next set of offers
        /// </param>
        /// <returns>
        /// Result of the offer
        /// </returns>
        public static OfferListResult ListNext(this IOfferOperations operations, string nextLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOfferOperations)s).ListNextAsync(nextLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists the offer with the next link
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.IOfferOperations.
        /// </param>
        /// <param name='nextLink'>
        /// Required. The URL to get the next set of offers
        /// </param>
        /// <returns>
        /// Result of the offer
        /// </returns>
        public static Task<OfferListResult> ListNextAsync(this IOfferOperations operations, string nextLink)
        {
            return operations.ListNextAsync(nextLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the public offers under the zero day (root) provider
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.IOfferOperations.
        /// </param>
        /// <returns>
        /// Result of the offer
        /// </returns>
        public static OfferListResult ListUnderRootProvider(this IOfferOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IOfferOperations)s).ListUnderRootProviderAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the public offers under the zero day (root) provider
        /// </summary>
        /// <param name='operations'>
        /// Reference to the Microsoft.AzureStack.Management.IOfferOperations.
        /// </param>
        /// <returns>
        /// Result of the offer
        /// </returns>
        public static Task<OfferListResult> ListUnderRootProviderAsync(this IOfferOperations operations)
        {
            return operations.ListUnderRootProviderAsync(CancellationToken.None);
        }
    }
}
