// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Intune
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    public static partial class AndroidOperationsExtensions
    {
            /// <summary>
            /// Returns Intune Android policies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static IPage<AndroidMAMPolicy> GetMAMPolicies(this IAndroidOperations operations, string hostName, string filter = default(string), int? top = default(int?), string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IAndroidOperations)s).GetMAMPoliciesAsync(hostName, filter, top, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune Android policies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AndroidMAMPolicy>> GetMAMPoliciesAsync( this IAndroidOperations operations, string hostName, string filter = default(string), int? top = default(int?), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMAMPoliciesWithHttpMessagesAsync(hostName, filter, top, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns AndroidMAMPolicy with given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static AndroidMAMPolicy GetMAMPolicyByName(this IAndroidOperations operations, string hostName, string policyName, string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IAndroidOperations)s).GetMAMPolicyByNameAsync(hostName, policyName, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns AndroidMAMPolicy with given name.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AndroidMAMPolicy> GetMAMPolicyByNameAsync( this IAndroidOperations operations, string hostName, string policyName, string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMAMPolicyByNameWithHttpMessagesAsync(hostName, policyName, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update an android policy operation.
            /// </param>
            public static AndroidMAMPolicy CreateOrUpdateMAMPolicy(this IAndroidOperations operations, string hostName, string policyName, AndroidMAMPolicy parameters)
            {
                return Task.Factory.StartNew(s => ((IAndroidOperations)s).CreateOrUpdateMAMPolicyAsync(hostName, policyName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update an android policy operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AndroidMAMPolicy> CreateOrUpdateMAMPolicyAsync( this IAndroidOperations operations, string hostName, string policyName, AndroidMAMPolicy parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateMAMPolicyWithHttpMessagesAsync(hostName, policyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Patch AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update an android policy operation.
            /// </param>
            public static AndroidMAMPolicy PatchMAMPolicy(this IAndroidOperations operations, string hostName, string policyName, AndroidMAMPolicy parameters)
            {
                return Task.Factory.StartNew(s => ((IAndroidOperations)s).PatchMAMPolicyAsync(hostName, policyName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Patch AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update an android policy operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AndroidMAMPolicy> PatchMAMPolicyAsync( this IAndroidOperations operations, string hostName, string policyName, AndroidMAMPolicy parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PatchMAMPolicyWithHttpMessagesAsync(hostName, policyName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Android Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            public static void DeleteMAMPolicy(this IAndroidOperations operations, string hostName, string policyName)
            {
                Task.Factory.StartNew(s => ((IAndroidOperations)s).DeleteMAMPolicyAsync(hostName, policyName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Android Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteMAMPolicyAsync( this IAndroidOperations operations, string hostName, string policyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteMAMPolicyWithHttpMessagesAsync(hostName, policyName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get apps for an AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            public static IPage<Application> GetAppForMAMPolicy(this IAndroidOperations operations, string hostName, string policyName, string filter = default(string), int? top = default(int?), string select = default(string))
            {
                return Task.Factory.StartNew(s => ((IAndroidOperations)s).GetAppForMAMPolicyAsync(hostName, policyName, filter, top, select), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get apps for an AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='filter'>
            /// The filter to apply on the operation.
            /// </param>
            /// <param name='top'>
            /// </param>
            /// <param name='select'>
            /// select specific fields in entity.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Application>> GetAppForMAMPolicyAsync( this IAndroidOperations operations, string hostName, string policyName, string filter = default(string), int? top = default(int?), string select = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppForMAMPolicyWithHttpMessagesAsync(hostName, policyName, filter, top, select, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add app to an AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='appName'>
            /// application unique Name
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update app to an android policy
            /// operation.
            /// </param>
            public static void AddAppForMAMPolicy(this IAndroidOperations operations, string hostName, string policyName, string appName, MAMPolicyAppIdOrGroupIdPayload parameters)
            {
                Task.Factory.StartNew(s => ((IAndroidOperations)s).AddAppForMAMPolicyAsync(hostName, policyName, appName, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add app to an AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='appName'>
            /// application unique Name
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update app to an android policy
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddAppForMAMPolicyAsync( this IAndroidOperations operations, string hostName, string policyName, string appName, MAMPolicyAppIdOrGroupIdPayload parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddAppForMAMPolicyWithHttpMessagesAsync(hostName, policyName, appName, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Delete App for Android Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='appName'>
            /// application unique Name
            /// </param>
            public static void DeleteAppForMAMPolicy(this IAndroidOperations operations, string hostName, string policyName, string appName)
            {
                Task.Factory.StartNew(s => ((IAndroidOperations)s).DeleteAppForMAMPolicyAsync(hostName, policyName, appName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete App for Android Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='appName'>
            /// application unique Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAppForMAMPolicyAsync( this IAndroidOperations operations, string hostName, string policyName, string appName, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteAppForMAMPolicyWithHttpMessagesAsync(hostName, policyName, appName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns groups for a given AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// policy name for the tenant
            /// </param>
            public static IPage<GroupItem> GetGroupsForMAMPolicy(this IAndroidOperations operations, string hostName, string policyName)
            {
                return Task.Factory.StartNew(s => ((IAndroidOperations)s).GetGroupsForMAMPolicyAsync(hostName, policyName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns groups for a given AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// policy name for the tenant
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GroupItem>> GetGroupsForMAMPolicyAsync( this IAndroidOperations operations, string hostName, string policyName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsForMAMPolicyWithHttpMessagesAsync(hostName, policyName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Add group to an AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='groupId'>
            /// group Id
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update app to an android policy
            /// operation.
            /// </param>
            public static void AddGroupForMAMPolicy(this IAndroidOperations operations, string hostName, string policyName, string groupId, MAMPolicyAppIdOrGroupIdPayload parameters)
            {
                Task.Factory.StartNew(s => ((IAndroidOperations)s).AddGroupForMAMPolicyAsync(hostName, policyName, groupId, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Add group to an AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='groupId'>
            /// group Id
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create or update app to an android policy
            /// operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task AddGroupForMAMPolicyAsync( this IAndroidOperations operations, string hostName, string policyName, string groupId, MAMPolicyAppIdOrGroupIdPayload parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.AddGroupForMAMPolicyWithHttpMessagesAsync(hostName, policyName, groupId, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Delete Group for Android Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='groupId'>
            /// application unique Name
            /// </param>
            public static void DeleteGroupForMAMPolicy(this IAndroidOperations operations, string hostName, string policyName, string groupId)
            {
                Task.Factory.StartNew(s => ((IAndroidOperations)s).DeleteGroupForMAMPolicyAsync(hostName, policyName, groupId), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Group for Android Policy
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='hostName'>
            /// Location hostName for the tenant
            /// </param>
            /// <param name='policyName'>
            /// Unique name for the policy
            /// </param>
            /// <param name='groupId'>
            /// application unique Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteGroupForMAMPolicyAsync( this IAndroidOperations operations, string hostName, string policyName, string groupId, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.DeleteGroupForMAMPolicyWithHttpMessagesAsync(hostName, policyName, groupId, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Returns Intune Android policies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AndroidMAMPolicy> GetMAMPoliciesNext(this IAndroidOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAndroidOperations)s).GetMAMPoliciesNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns Intune Android policies.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AndroidMAMPolicy>> GetMAMPoliciesNextAsync( this IAndroidOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMAMPoliciesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get apps for an AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<Application> GetAppForMAMPolicyNext(this IAndroidOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAndroidOperations)s).GetAppForMAMPolicyNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get apps for an AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<Application>> GetAppForMAMPolicyNextAsync( this IAndroidOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAppForMAMPolicyNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns groups for a given AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<GroupItem> GetGroupsForMAMPolicyNext(this IAndroidOperations operations, string nextPageLink)
            {
                return Task.Factory.StartNew(s => ((IAndroidOperations)s).GetGroupsForMAMPolicyNextAsync(nextPageLink), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns groups for a given AndroidMAMPolicy.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<GroupItem>> GetGroupsForMAMPolicyNextAsync( this IAndroidOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGroupsForMAMPolicyNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
