// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// </auto-generated>

namespace Microsoft.Azure.Management.NotificationHubs.Fluent.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.NotificationHubs;
    using Microsoft.Azure.Management.NotificationHubs.Fluent;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Description of a CheckAvailibility resource.
    /// </summary>
    public partial class CheckAvailabilityResultInner : Microsoft.Azure.Management.ResourceManager.Fluent.Resource
    {
        /// <summary>
        /// Initializes a new instance of the CheckAvailabilityResultInner
        /// class.
        /// </summary>
        public CheckAvailabilityResultInner()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CheckAvailabilityResultInner
        /// class.
        /// </summary>
        /// <param name="isAvailiable">True if the name is available and can be
        /// used to create new Namespace/NotificationHub. Otherwise
        /// false.</param>
        public CheckAvailabilityResultInner(string location = default(string), string id = default(string), string name = default(string), string type = default(string), IDictionary<string, string> tags = default(IDictionary<string, string>), bool? isAvailiable = default(bool?))
            : base(location, id, name, type, tags)
        {
            IsAvailiable = isAvailiable;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets true if the name is available and can be used to
        /// create new Namespace/NotificationHub. Otherwise false.
        /// </summary>
        [JsonProperty(PropertyName = "isAvailiable")]
        public bool? IsAvailiable { get; set; }

    }
}
