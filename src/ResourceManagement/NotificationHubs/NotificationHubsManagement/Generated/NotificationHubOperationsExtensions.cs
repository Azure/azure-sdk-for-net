// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.NotificationHubs;
using Microsoft.Azure.Management.NotificationHubs.Models;

namespace Microsoft.Azure.Management.NotificationHubs
{
    /// <summary>
    /// .Net client wrapper for the REST API for Azure NotificationHub Service
    /// </summary>
    public static partial class NotificationHubOperationsExtensions
    {
        /// <summary>
        /// Checks the availability of the given notificationHub in a
        /// namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The notificationHub name.
        /// </param>
        /// <returns>
        /// Response of the Check NameAvailability operation.
        /// </returns>
        public static CheckAvailabilityResponse CheckAvailability(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, CheckAvailabilityParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).CheckAvailabilityAsync(resourceGroupName, namespaceName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Checks the availability of the given notificationHub in a
        /// namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The notificationHub name.
        /// </param>
        /// <returns>
        /// Response of the Check NameAvailability operation.
        /// </returns>
        public static Task<CheckAvailabilityResponse> CheckAvailabilityAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, CheckAvailabilityParameters parameters)
        {
            return operations.CheckAvailabilityAsync(resourceGroupName, namespaceName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// The create NotificationHub authorization rule operation creates an
        /// authorization rule for a NotificationHub
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// Required. The namespace authorizationRuleName name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The shared access authorization rule.
        /// </param>
        /// <returns>
        /// Response of the CreateOrUpdate operation on the AuthorizationRules
        /// </returns>
        public static AuthorizationRulesCreateOrUpdateResponse CreateAuthorizationRule(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName, AuthorizationRulesCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).CreateAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The create NotificationHub authorization rule operation creates an
        /// authorization rule for a NotificationHub
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// Required. The namespace authorizationRuleName name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The shared access authorization rule.
        /// </param>
        /// <returns>
        /// Response of the CreateOrUpdate operation on the AuthorizationRules
        /// </returns>
        public static Task<AuthorizationRulesCreateOrUpdateResponse> CreateAuthorizationRuleAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName, AuthorizationRulesCreateOrUpdateParameters parameters)
        {
            return operations.CreateAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates a new NotificationHub in a namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create a Namespace Resource.
        /// </param>
        /// <returns>
        /// Response of the CreateOrUpdate operation on the NotificationHub
        /// </returns>
        public static NotificationHubCreateOrUpdateResponse CreateOrUpdate(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName, NotificationHubCreateOrUpdateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).CreateOrUpdateAsync(resourceGroupName, namespaceName, notificationHubName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a new NotificationHub in a namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <param name='parameters'>
        /// Required. Parameters supplied to the create a Namespace Resource.
        /// </param>
        /// <returns>
        /// Response of the CreateOrUpdate operation on the NotificationHub
        /// </returns>
        public static Task<NotificationHubCreateOrUpdateResponse> CreateOrUpdateAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName, NotificationHubCreateOrUpdateParameters parameters)
        {
            return operations.CreateOrUpdateAsync(resourceGroupName, namespaceName, notificationHubName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes a notification hub associated with a namespace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Delete(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).DeleteAsync(resourceGroupName, namespaceName, notificationHubName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes a notification hub associated with a namespace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName)
        {
            return operations.DeleteAsync(resourceGroupName, namespaceName, notificationHubName, CancellationToken.None);
        }
        
        /// <summary>
        /// The delete a notificationHub authorization rule operation
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// Required. The namespace authorizationRuleName name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse DeleteAuthorizationRule(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).DeleteAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The delete a notificationHub authorization rule operation
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// Required. The namespace authorizationRuleName name.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DeleteAuthorizationRuleAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName)
        {
            return operations.DeleteAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists the notification hubs associated with a namespace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <returns>
        /// The response of the Get NotificationHub operation.
        /// </returns>
        public static NotificationHubGetResponse Get(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).GetAsync(resourceGroupName, namespaceName, notificationHubName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists the notification hubs associated with a namespace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <returns>
        /// The response of the Get NotificationHub operation.
        /// </returns>
        public static Task<NotificationHubGetResponse> GetAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName)
        {
            return operations.GetAsync(resourceGroupName, namespaceName, notificationHubName, CancellationToken.None);
        }
        
        /// <summary>
        /// The get authorization rule operation gets an authorization rule for
        /// a NotificationHub by name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace to get the authorization rule for.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// Required. The entity name to get the authorization rule for.
        /// </param>
        /// <returns>
        /// The response of the Get Namespace operation.
        /// </returns>
        public static AuthorizationRulesGetResponse GetAuthorizationRule(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).GetAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The get authorization rule operation gets an authorization rule for
        /// a NotificationHub by name.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace to get the authorization rule for.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// Required. The entity name to get the authorization rule for.
        /// </param>
        /// <returns>
        /// The response of the Get Namespace operation.
        /// </returns>
        public static Task<AuthorizationRulesGetResponse> GetAuthorizationRuleAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName)
        {
            return operations.GetAuthorizationRuleAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists the PNS Credentials associated with a notification hub .
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <returns>
        /// The response of the Get NotificationHub operation.
        /// </returns>
        public static NotificationHubGetResponse GetPnsCredentials(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).GetPnsCredentialsAsync(resourceGroupName, namespaceName, notificationHubName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists the PNS Credentials associated with a notification hub .
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <returns>
        /// The response of the Get NotificationHub operation.
        /// </returns>
        public static Task<NotificationHubGetResponse> GetPnsCredentialsAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName)
        {
            return operations.GetPnsCredentialsAsync(resourceGroupName, namespaceName, notificationHubName, CancellationToken.None);
        }
        
        /// <summary>
        /// Lists the notification hubs associated with a namespace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <returns>
        /// The response of the List NotificationHub operation.
        /// </returns>
        public static NotificationHubListResponse List(this INotificationHubOperations operations, string resourceGroupName, string namespaceName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).ListAsync(resourceGroupName, namespaceName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Lists the notification hubs associated with a namespace.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <returns>
        /// The response of the List NotificationHub operation.
        /// </returns>
        public static Task<NotificationHubListResponse> ListAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName)
        {
            return operations.ListAsync(resourceGroupName, namespaceName, CancellationToken.None);
        }
        
        /// <summary>
        /// The get authorization rules operation gets the authorization rules
        /// for a NotificationHub.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The NotificationHub to get the authorization rule for.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <returns>
        /// The response of the List Namespace operation.
        /// </returns>
        public static AuthorizationRulesListResponse ListAuthorizationRules(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).ListAuthorizationRulesAsync(resourceGroupName, namespaceName, notificationHubName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// The get authorization rules operation gets the authorization rules
        /// for a NotificationHub.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The NotificationHub to get the authorization rule for.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <returns>
        /// The response of the List Namespace operation.
        /// </returns>
        public static Task<AuthorizationRulesListResponse> ListAuthorizationRulesAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName)
        {
            return operations.ListAuthorizationRulesAsync(resourceGroupName, namespaceName, notificationHubName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the Primary and Secondary ConnectionStrings to the
        /// NotificationHub   (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// Required. The connection string of the NotificationHub for the
        /// specified authorizationRule.
        /// </param>
        /// <returns>
        /// Namespace/NotificationHub Connection String
        /// </returns>
        public static ResourceListKeys ListKeys(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((INotificationHubOperations)s).ListKeysAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the Primary and Secondary ConnectionStrings to the
        /// NotificationHub   (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx
        /// for more information)
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.NotificationHubs.INotificationHubOperations.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// Required. The namespace name.
        /// </param>
        /// <param name='notificationHubName'>
        /// Required. The notification hub name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// Required. The connection string of the NotificationHub for the
        /// specified authorizationRule.
        /// </param>
        /// <returns>
        /// Namespace/NotificationHub Connection String
        /// </returns>
        public static Task<ResourceListKeys> ListKeysAsync(this INotificationHubOperations operations, string resourceGroupName, string namespaceName, string notificationHubName, string authorizationRuleName)
        {
            return operations.ListKeysAsync(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, CancellationToken.None);
        }
    }
}
