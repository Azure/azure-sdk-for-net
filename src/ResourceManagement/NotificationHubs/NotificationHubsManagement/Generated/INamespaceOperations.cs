// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.NotificationHubs.Models;

namespace Microsoft.Azure.Management.NotificationHubs
{
    /// <summary>
    /// The Management API includes operations for managing NotificationHub
    /// only namespaces.
    /// </summary>
    public partial interface INamespaceOperations
    {
        /// <summary>
        /// Deletes an existing namespace. This operation also removes all
        /// associated notificationHubs under the namespace.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj856296.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the CreateOrUpdate Api Management service long
        /// running operation.
        /// </returns>
        Task<NamespaceLongRunningResponse> BeginDeleteAsync(string resourceGroupName, string namespaceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Checks the availability of the given service namespace across all
        /// Windows Azure subscriptions. This is useful because the domain
        /// name is created based on the service namespace name.  (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj870968.aspx
        /// for more information)
        /// </summary>
        /// <param name='parameters'>
        /// The namespace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of the Check NameAvailability operation.
        /// </returns>
        Task<CheckAvailabilityResponse> CheckAvailabilityAsync(CheckAvailabilityParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// The create namespace authorization rule operation creates an
        /// authorization rule for a namespace
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// The namespace authorizationRuleName name.
        /// </param>
        /// <param name='parameters'>
        /// The shared access authorization rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Response of the CreateOrUpdate operation on the AuthorizationRules
        /// </returns>
        Task<AuthorizationRulesCreateOrUpdateResponse> CreateAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, AuthorizationRulesCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Creates/Updates a service namespace. Once created, this namespace's
        /// resource manifest is immutable. This operation is idempotent.
        /// (see http://msdn.microsoft.com/en-us/library/windowsazure/jj856303.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the create a Namespace Resource.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the CreateOrUpdate Namespace.
        /// </returns>
        Task<NamespaceCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string namespaceName, NamespaceCreateOrUpdateParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Delete existing Namespace
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// The name of the namespace.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the CreateOrUpdate Api Management service long
        /// running operation.
        /// </returns>
        Task<NamespaceLongRunningResponse> DeleteAsync(string resourceGroupName, string namespaceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The delete a namespace authorization rule operation
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// The namespace authorizationRuleName name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        Task<AzureOperationResponse> DeleteAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Returns the description for the specified namespace.  (see
        /// http://msdn.microsoft.com/library/azure/dn140232.aspx for more
        /// information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the Get Namespace operation.
        /// </returns>
        Task<NamespaceGetResponse> GetAsync(string resourceGroupName, string namespaceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The get authorization rule operation gets an authorization rule for
        /// a namespace by name.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace to get the authorization rule for.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// The entity name to get the authorization rule for.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the Get Namespace operation.
        /// </returns>
        Task<AuthorizationRulesGetResponse> GetAuthorizationRuleAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get namespace Delete Operation Status operation returns the
        /// status of the delete operation. After calling the operation, you
        /// can call Get namespace Delete Operation Status to determine
        /// whether the operation has succeeded, failed, or is still in
        /// progress. This method differs from GetLongRunningOperationStatus
        /// in providing NotificationHub service resource description.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the CreateOrUpdate Api Management service long
        /// running operation.
        /// </returns>
        Task<NamespaceLongRunningResponse> GetDeleteNamespaceOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// The Get Operation Status operation returns the status of the
        /// specified operation. After calling an asynchronous operation, you
        /// can call Get Operation Status to determine whether the operation
        /// has succeeded, failed, or is still in progress.
        /// </summary>
        /// <param name='operationStatusLink'>
        /// Location value returned by the Begin operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response for long running operations.
        /// </returns>
        Task<LongRunningOperationResponse> GetLongRunningOperationStatusAsync(string operationStatusLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// Lists the available namespaces within a resourceGroup.  (see
        /// http://msdn.microsoft.com/en-us/library/azure/hh780759.aspx for
        /// more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. If resourceGroupName value is null
        /// the method lists all the namespaces within subscription
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the List Namespace operation.
        /// </returns>
        Task<NamespaceListResponse> ListAsync(string resourceGroupName, CancellationToken cancellationToken);
        
        /// <summary>
        /// The get authorization rules operation gets the authorization rules
        /// for a namespace.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace to get the authorization rule for.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response of the List Namespace operation.
        /// </returns>
        Task<AuthorizationRulesListResponse> ListAuthorizationRulesAsync(string resourceGroupName, string namespaceName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets the Primary and Secondary ConnectionStrings to the namespace
        /// (see
        /// http://msdn.microsoft.com/en-us/library/windowsazure/jj873988.aspx
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='namespaceName'>
        /// The namespace name.
        /// </param>
        /// <param name='authorizationRuleName'>
        /// The connection string of the namespace for the specified
        /// authorizationRule.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Namespace/NotificationHub Connection String
        /// </returns>
        Task<ResourceListKeys> ListKeysAsync(string resourceGroupName, string namespaceName, string authorizationRuleName, CancellationToken cancellationToken);
    }
}
