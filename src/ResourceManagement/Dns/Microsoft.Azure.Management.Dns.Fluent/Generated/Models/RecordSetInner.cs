// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Dns.Fluent.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a DNS record set (a collection of DNS records with the same
    /// name and type).
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RecordSetInner
    {
        /// <summary>
        /// Initializes a new instance of the RecordSetInner class.
        /// </summary>
        public RecordSetInner() { }

        /// <summary>
        /// Initializes a new instance of the RecordSetInner class.
        /// </summary>
        /// <param name="id">The ID of the record set.</param>
        /// <param name="name">The name of the record set.</param>
        /// <param name="type">The type of the record set.</param>
        /// <param name="etag">The etag of the record set.</param>
        /// <param name="metadata">The metadata attached to the record
        /// set.</param>
        /// <param name="tTL">The TTL (time-to-live) of the records in the
        /// record set.</param>
        /// <param name="aRecords">The list of A records in the record
        /// set.</param>
        /// <param name="aaaaRecords">The list of AAAA records in the record
        /// set.</param>
        /// <param name="mxRecords">The list of MX records in the record
        /// set.</param>
        /// <param name="nsRecords">The list of NS records in the record
        /// set.</param>
        /// <param name="ptrRecords">The list of PTR records in the record
        /// set.</param>
        /// <param name="srvRecords">The list of SRV records in the record
        /// set.</param>
        /// <param name="txtRecords">The list of TXT records in the record
        /// set.</param>
        /// <param name="cnameRecord">The CNAME record in the  record
        /// set.</param>
        /// <param name="soaRecord">The SOA record in the record set.</param>
        public RecordSetInner(string id = default(string), string name = default(string), string type = default(string), string etag = default(string), System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), long? tTL = default(long?), System.Collections.Generic.IList<ARecord> aRecords = default(System.Collections.Generic.IList<ARecord>), System.Collections.Generic.IList<AaaaRecord> aaaaRecords = default(System.Collections.Generic.IList<AaaaRecord>), System.Collections.Generic.IList<MxRecord> mxRecords = default(System.Collections.Generic.IList<MxRecord>), System.Collections.Generic.IList<NsRecord> nsRecords = default(System.Collections.Generic.IList<NsRecord>), System.Collections.Generic.IList<PtrRecord> ptrRecords = default(System.Collections.Generic.IList<PtrRecord>), System.Collections.Generic.IList<SrvRecord> srvRecords = default(System.Collections.Generic.IList<SrvRecord>), System.Collections.Generic.IList<TxtRecord> txtRecords = default(System.Collections.Generic.IList<TxtRecord>), CnameRecord cnameRecord = default(CnameRecord), SoaRecord soaRecord = default(SoaRecord))
        {
            Id = id;
            Name = name;
            Type = type;
            Etag = etag;
            Metadata = metadata;
            TTL = tTL;
            ARecords = aRecords;
            AaaaRecords = aaaaRecords;
            MxRecords = mxRecords;
            NsRecords = nsRecords;
            PtrRecords = ptrRecords;
            SrvRecords = srvRecords;
            TxtRecords = txtRecords;
            CnameRecord = cnameRecord;
            SoaRecord = soaRecord;
        }

        /// <summary>
        /// Gets or sets the ID of the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the name of the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the type of the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the etag of the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

        /// <summary>
        /// Gets or sets the metadata attached to the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.metadata")]
        public System.Collections.Generic.IDictionary<string, string> Metadata { get; set; }

        /// <summary>
        /// Gets or sets the TTL (time-to-live) of the records in the record
        /// set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.TTL")]
        public long? TTL { get; set; }

        /// <summary>
        /// Gets or sets the list of A records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ARecords")]
        public System.Collections.Generic.IList<ARecord> ARecords { get; set; }

        /// <summary>
        /// Gets or sets the list of AAAA records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.AAAARecords")]
        public System.Collections.Generic.IList<AaaaRecord> AaaaRecords { get; set; }

        /// <summary>
        /// Gets or sets the list of MX records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.MXRecords")]
        public System.Collections.Generic.IList<MxRecord> MxRecords { get; set; }

        /// <summary>
        /// Gets or sets the list of NS records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.NSRecords")]
        public System.Collections.Generic.IList<NsRecord> NsRecords { get; set; }

        /// <summary>
        /// Gets or sets the list of PTR records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.PTRRecords")]
        public System.Collections.Generic.IList<PtrRecord> PtrRecords { get; set; }

        /// <summary>
        /// Gets or sets the list of SRV records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.SRVRecords")]
        public System.Collections.Generic.IList<SrvRecord> SrvRecords { get; set; }

        /// <summary>
        /// Gets or sets the list of TXT records in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.TXTRecords")]
        public System.Collections.Generic.IList<TxtRecord> TxtRecords { get; set; }

        /// <summary>
        /// Gets or sets the CNAME record in the  record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.CNAMERecord")]
        public CnameRecord CnameRecord { get; set; }

        /// <summary>
        /// Gets or sets the SOA record in the record set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.SOARecord")]
        public SoaRecord SoaRecord { get; set; }

    }
}
