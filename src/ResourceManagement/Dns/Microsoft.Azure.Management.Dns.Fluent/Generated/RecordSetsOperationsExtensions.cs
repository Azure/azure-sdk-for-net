// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Dns.Fluent
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for RecordSetsOperations.
    /// </summary>
    public static partial class RecordSetsOperationsExtensions
    {
            /// <summary>
            /// Updates a record set within a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='relativeRecordSetName'>
            /// The name of the record set, relative to the name of the zone.
            /// </param>
            /// <param name='recordType'>
            /// The type of DNS record in this record set. Possible values include: 'A',
            /// 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of the record set. Omit this value to always overwrite the
            /// current record set. Specify the last-seen etag value to prevent
            /// accidentally overwritting concurrent changes.
            /// </param>
            public static RecordSetInner Update(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, RecordSetInner parameters, string ifMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IRecordSetsOperations)s).UpdateAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a record set within a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='relativeRecordSetName'>
            /// The name of the record set, relative to the name of the zone.
            /// </param>
            /// <param name='recordType'>
            /// The type of DNS record in this record set. Possible values include: 'A',
            /// 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Update operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of the record set. Omit this value to always overwrite the
            /// current record set. Specify the last-seen etag value to prevent
            /// accidentally overwritting concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RecordSetInner> UpdateAsync(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, RecordSetInner parameters, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a record set within a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='relativeRecordSetName'>
            /// The name of the record set, relative to the name of the zone.
            /// </param>
            /// <param name='recordType'>
            /// The type of DNS record in this record set. Record sets of type SOA can be
            /// updated but not created (they are created when the DNS zone is created).
            /// Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA',
            /// 'SRV', 'TXT'
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of the record set. Omit this value to always overwrite the
            /// current record set. Specify the last-seen etag value to prevent
            /// accidentally overwritting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new record set to be created, but to prevent
            /// updating an existing record set. Other values will be ignored.
            /// </param>
            public static RecordSetInner CreateOrUpdate(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, RecordSetInner parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IRecordSetsOperations)s).CreateOrUpdateAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a record set within a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='relativeRecordSetName'>
            /// The name of the record set, relative to the name of the zone.
            /// </param>
            /// <param name='recordType'>
            /// The type of DNS record in this record set. Record sets of type SOA can be
            /// updated but not created (they are created when the DNS zone is created).
            /// Possible values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA',
            /// 'SRV', 'TXT'
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the CreateOrUpdate operation.
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of the record set. Omit this value to always overwrite the
            /// current record set. Specify the last-seen etag value to prevent
            /// accidentally overwritting any concurrent changes.
            /// </param>
            /// <param name='ifNoneMatch'>
            /// Set to '*' to allow a new record set to be created, but to prevent
            /// updating an existing record set. Other values will be ignored.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RecordSetInner> CreateOrUpdateAsync(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, RecordSetInner parameters, string ifMatch = default(string), string ifNoneMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a record set from a DNS zone. This operation cannot be undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='relativeRecordSetName'>
            /// The name of the record set, relative to the name of the zone.
            /// </param>
            /// <param name='recordType'>
            /// The type of DNS record in this record set. Record sets of type SOA cannot
            /// be deleted (they are deleted when the DNS zone is deleted). Possible
            /// values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV',
            /// 'TXT'
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of the record set. Omit this value to always delete the current
            /// record set. Specify the last-seen etag value to prevent accidentally
            /// deleting any concurrent changes.
            /// </param>
            public static void Delete(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, string ifMatch = default(string))
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IRecordSetsOperations)s).DeleteAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a record set from a DNS zone. This operation cannot be undone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='relativeRecordSetName'>
            /// The name of the record set, relative to the name of the zone.
            /// </param>
            /// <param name='recordType'>
            /// The type of DNS record in this record set. Record sets of type SOA cannot
            /// be deleted (they are deleted when the DNS zone is deleted). Possible
            /// values include: 'A', 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV',
            /// 'TXT'
            /// </param>
            /// <param name='ifMatch'>
            /// The etag of the record set. Omit this value to always delete the current
            /// record set. Specify the last-seen etag value to prevent accidentally
            /// deleting any concurrent changes.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, ifMatch, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Gets a record set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='relativeRecordSetName'>
            /// The name of the record set, relative to the name of the zone.
            /// </param>
            /// <param name='recordType'>
            /// The type of DNS record in this record set. Possible values include: 'A',
            /// 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
            /// </param>
            public static RecordSetInner Get(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IRecordSetsOperations)s).GetAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets a record set.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='relativeRecordSetName'>
            /// The name of the record set, relative to the name of the zone.
            /// </param>
            /// <param name='recordType'>
            /// The type of DNS record in this record set. Possible values include: 'A',
            /// 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<RecordSetInner> GetAsync(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, string relativeRecordSetName, RecordType recordType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, zoneName, relativeRecordSetName, recordType, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the record sets of a specified type in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='recordType'>
            /// The type of record sets to enumerate. Possible values include: 'A',
            /// 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return. If not specified, returns up
            /// to 100 record sets.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<RecordSetInner> ListByType(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, RecordType recordType, int? top = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IRecordSetsOperations)s).ListByTypeAsync(resourceGroupName, zoneName, recordType, top), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the record sets of a specified type in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='recordType'>
            /// The type of record sets to enumerate. Possible values include: 'A',
            /// 'AAAA', 'CNAME', 'MX', 'NS', 'PTR', 'SOA', 'SRV', 'TXT'
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return. If not specified, returns up
            /// to 100 record sets.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<RecordSetInner>> ListByTypeAsync(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, RecordType recordType, int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByTypeWithHttpMessagesAsync(resourceGroupName, zoneName, recordType, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all record sets in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return. If not specified, returns up
            /// to 100 record sets.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<RecordSetInner> ListByDnsZone(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, int? top = default(int?))
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IRecordSetsOperations)s).ListByDnsZoneAsync(resourceGroupName, zoneName, top), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all record sets in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='zoneName'>
            /// The name of the DNS zone (without a terminating dot).
            /// </param>
            /// <param name='top'>
            /// The maximum number of record sets to return. If not specified, returns up
            /// to 100 record sets.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<RecordSetInner>> ListByDnsZoneAsync(this IRecordSetsOperations operations, string resourceGroupName, string zoneName, int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByDnsZoneWithHttpMessagesAsync(resourceGroupName, zoneName, top, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists the record sets of a specified type in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<RecordSetInner> ListByTypeNext(this IRecordSetsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IRecordSetsOperations)s).ListByTypeNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists the record sets of a specified type in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<RecordSetInner>> ListByTypeNextAsync(this IRecordSetsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByTypeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all record sets in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static Microsoft.Rest.Azure.IPage<RecordSetInner> ListByDnsZoneNext(this IRecordSetsOperations operations, string nextPageLink)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IRecordSetsOperations)s).ListByDnsZoneNextAsync(nextPageLink), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all record sets in a DNS zone.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Microsoft.Rest.Azure.IPage<RecordSetInner>> ListByDnsZoneNextAsync(this IRecordSetsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListByDnsZoneNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
