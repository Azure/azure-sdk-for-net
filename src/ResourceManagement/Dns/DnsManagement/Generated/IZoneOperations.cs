// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Management.Dns.Models;

namespace Microsoft.Azure.Management.Dns
{
    /// <summary>
    /// Operations for managing DNS zones.
    /// </summary>
    public partial interface IZoneOperations
    {
        /// <summary>
        /// Removes a DNS zone from a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='zoneName'>
        /// The name of the zone without a terminating dot.
        /// </param>
        /// <param name='ifMatch'>
        /// Defines the If-Match condition. The delete operation will be
        /// performed only if the ETag of the zone on the server matches this
        /// value.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Defines the If-None-Match condition. The delete operation will be
        /// performed only if the ETag of the zone on the server does not
        /// match this value.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Zone Delete operation.
        /// </returns>
        Task<ZoneDeleteResponse> BeginDeletingAsync(string resourceGroupName, string zoneName, string ifMatch, string ifNoneMatch, CancellationToken cancellationToken);
        
        /// <summary>
        /// Creates a DNS zone within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='zoneName'>
        /// The name of the zone without a terminating dot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the CreateOrUpdate operation.
        /// </param>
        /// <param name='ifMatch'>
        /// The etag of Zone.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Defines the If-None-Match condition. Set to '*' to force
        /// Create-If-Not-Exist. Other values will be ignored.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Zone CreateOrUpdate operation.
        /// </returns>
        Task<ZoneCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string zoneName, ZoneCreateOrUpdateParameters parameters, string ifMatch, string ifNoneMatch, CancellationToken cancellationToken);
        
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='zoneName'>
        /// The name of the zone without a terminating dot.
        /// </param>
        /// <param name='ifMatch'>
        /// Defines the If-Match condition. The delete operation will be
        /// performed only if the ETag of the zone on the server matches this
        /// value.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Defines the If-None-Match condition. The delete operation will be
        /// performed only if the ETag of the zone on the server does not
        /// match this value.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Zone Delete operation.
        /// </returns>
        Task<ZoneDeleteResponse> DeleteAsync(string resourceGroupName, string zoneName, string ifMatch, string ifNoneMatch, CancellationToken cancellationToken);
        
        /// <summary>
        /// Gets a DNS zone.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='zoneName'>
        /// The name of the zone without a terminating dot.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Zone Get operation.
        /// </returns>
        Task<ZoneGetResponse> GetAsync(string resourceGroupName, string zoneName, CancellationToken cancellationToken);
        
        /// <summary>
        /// Lists the DNS zones within a resource group.
        /// </summary>
        /// <param name='nextLink'>
        /// NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Zone List or ListAll operation.
        /// </returns>
        Task<ZoneListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken);
        
        /// <summary>
        /// Lists the DNS zones within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='parameters'>
        /// Query parameters. If null is passed returns the default number of
        /// zones.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Zone List or ListAll operation.
        /// </returns>
        Task<ZoneListResponse> ListZonesInResourceGroupAsync(string resourceGroupName, ZoneListParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Lists the DNS zones within a resource group.
        /// </summary>
        /// <param name='parameters'>
        /// Query parameters. If null is passed returns the default number of
        /// zones.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Zone List or ListAll operation.
        /// </returns>
        Task<ZoneListResponse> ListZonesInSubscriptionAsync(ZoneListParameters parameters, CancellationToken cancellationToken);
        
        /// <summary>
        /// Creates a DNS zone within a resource group.
        /// </summary>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='zoneName'>
        /// The name of the zone without a terminating dot.
        /// </param>
        /// <param name='parameters'>
        /// Parameters supplied to the CreateOrUpdate operation.
        /// </param>
        /// <param name='ifMatch'>
        /// The etag of Zone.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Defines the If-None-Match condition. Set to '*' to force
        /// Create-If-Not-Exist. Other values will be ignored.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response to a Zone Update operation.
        /// </returns>
        Task<ZoneUpdateResponse> UpdateAsync(string resourceGroupName, string zoneName, ZoneUpdateParameters parameters, string ifMatch, string ifNoneMatch, CancellationToken cancellationToken);
    }
}
