// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.ServiceFabric;
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// ServiceFabric section settings
    /// </summary>
    public partial class SettingsSectionDescription
    {
        /// <summary>
        /// Initializes a new instance of the SettingsSectionDescription class.
        /// </summary>
        public SettingsSectionDescription()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SettingsSectionDescription class.
        /// </summary>
        /// <param name="name">The name of settings section</param>
        /// <param name="parameters">Collection of settings in the section,
        /// each setting is a tuple consisting of setting name and
        /// value</param>
        public SettingsSectionDescription(string name, IList<SettingsParameterDescription> parameters)
        {
            Name = name;
            Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of settings section
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets collection of settings in the section, each setting is
        /// a tuple consisting of setting name and value
        /// </summary>
        [JsonProperty(PropertyName = "parameters")]
        public IList<SettingsParameterDescription> Parameters { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
            if (Parameters == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Parameters");
            }
            if (Parameters != null)
            {
                foreach (var element in Parameters)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
