// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.ServiceFabric.Models
{
    using Microsoft.Azure;
    using Microsoft.Azure.Management;
    using Microsoft.Azure.Management.ServiceFabric;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Cluster update request
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class ClusterUpdateParameters
    {
        /// <summary>
        /// Initializes a new instance of the ClusterUpdateParameters class.
        /// </summary>
        public ClusterUpdateParameters() { }

        /// <summary>
        /// Initializes a new instance of the ClusterUpdateParameters class.
        /// </summary>
        /// <param name="reliabilityLevel">Cluster reliability level indicates
        /// replica set size of system service. Possible values include:
        /// 'Invalid', 'Bronze', 'Silver', 'Gold', 'Platinum'</param>
        /// <param name="upgradeMode">Cluster upgrade mode indicates if fabric
        /// upgrade is initiated automatically by the system or not. Possible
        /// values include: 'Default', 'Automatic', 'Manual'</param>
        /// <param name="clusterCodeVersion">The ServiceFabric code version, if
        /// set it, please make sure you have set upgradeMode to Manual,
        /// otherwise ,it will fail</param>
        /// <param name="certificate">The cluster certificate settings, the new
        /// certificate should exist in VMSS or KeyVault,before you add it, it
        /// will override original value</param>
        /// <param name="clientCertificateThumbprints">The client thumbprint
        /// details ,it is used for client access for cluter operation, it will
        /// override existing collection</param>
        /// <param name="fabricSettings">ServiceFabric section settings, Note,
        /// it will overwrite existing collection</param>
        /// <param name="reverseProxyCertificate">Certificate for the reverse
        /// proxy</param>
        /// <param name="nodeTypes">The list of nodetypes that make up the
        /// cluster, it will override</param>
        /// <param name="tags">Cluster update parameters</param>
        public ClusterUpdateParameters(string reliabilityLevel = default(string), string upgradeMode = default(string), string clusterCodeVersion = default(string), CertificateDescription certificate = default(CertificateDescription), IList<ClientCertificateThumbprint> clientCertificateThumbprints = default(IList<ClientCertificateThumbprint>), IList<SettingsSectionDescription> fabricSettings = default(IList<SettingsSectionDescription>), CertificateDescription reverseProxyCertificate = default(CertificateDescription), IList<NodeTypeDescription> nodeTypes = default(IList<NodeTypeDescription>), IDictionary<string, string> tags = default(IDictionary<string, string>))
        {
            ReliabilityLevel = reliabilityLevel;
            UpgradeMode = upgradeMode;
            ClusterCodeVersion = clusterCodeVersion;
            Certificate = certificate;
            ClientCertificateThumbprints = clientCertificateThumbprints;
            FabricSettings = fabricSettings;
            ReverseProxyCertificate = reverseProxyCertificate;
            NodeTypes = nodeTypes;
            Tags = tags;
        }

        /// <summary>
        /// Gets or sets cluster reliability level indicates replica set size
        /// of system service. Possible values include: 'Invalid', 'Bronze',
        /// 'Silver', 'Gold', 'Platinum'
        /// </summary>
        [JsonProperty(PropertyName = "properties.reliabilityLevel")]
        public string ReliabilityLevel { get; set; }

        /// <summary>
        /// Gets or sets cluster upgrade mode indicates if fabric upgrade is
        /// initiated automatically by the system or not. Possible values
        /// include: 'Default', 'Automatic', 'Manual'
        /// </summary>
        [JsonProperty(PropertyName = "properties.upgradeMode")]
        public string UpgradeMode { get; set; }

        /// <summary>
        /// Gets or sets the ServiceFabric code version, if set it, please make
        /// sure you have set upgradeMode to Manual, otherwise ,it will fail
        /// </summary>
        [JsonProperty(PropertyName = "properties.clusterCodeVersion")]
        public string ClusterCodeVersion { get; set; }

        /// <summary>
        /// Gets or sets the cluster certificate settings, the new certificate
        /// should exist in VMSS or KeyVault,before you add it, it will
        /// override original value
        /// </summary>
        [JsonProperty(PropertyName = "properties.certificate")]
        public CertificateDescription Certificate { get; set; }

        /// <summary>
        /// Gets or sets the client thumbprint details ,it is used for client
        /// access for cluter operation, it will override existing collection
        /// </summary>
        [JsonProperty(PropertyName = "properties.clientCertificateThumbprints")]
        public IList<ClientCertificateThumbprint> ClientCertificateThumbprints { get; set; }

        /// <summary>
        /// Gets or sets serviceFabric section settings, Note, it will
        /// overwrite existing collection
        /// </summary>
        [JsonProperty(PropertyName = "properties.fabricSettings")]
        public IList<SettingsSectionDescription> FabricSettings { get; set; }

        /// <summary>
        /// Gets or sets certificate for the reverse proxy
        /// </summary>
        [JsonProperty(PropertyName = "properties.reverseProxyCertificate")]
        public CertificateDescription ReverseProxyCertificate { get; set; }

        /// <summary>
        /// Gets or sets the list of nodetypes that make up the cluster, it
        /// will override
        /// </summary>
        [JsonProperty(PropertyName = "properties.nodeTypes")]
        public IList<NodeTypeDescription> NodeTypes { get; set; }

        /// <summary>
        /// Gets or sets cluster update parameters
        /// </summary>
        [JsonProperty(PropertyName = "tags")]
        public IDictionary<string, string> Tags { get; set; }

    }
}
