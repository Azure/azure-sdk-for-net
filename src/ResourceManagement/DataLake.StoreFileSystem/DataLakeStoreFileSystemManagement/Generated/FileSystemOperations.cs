// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Hyak.Common;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataLake.StoreFileSystem;
using Microsoft.Azure.Management.DataLake.StoreFileSystem.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.DataLake.StoreFileSystem
{
    /// <summary>
    /// Operations for managing the Data Lake Store filesystem
    /// </summary>
    internal partial class FileSystemOperations : IServiceOperations<DataLakeStoreFileSystemManagementClient>, IFileSystemOperations
    {
        /// <summary>
        /// Initializes a new instance of the FileSystemOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal FileSystemOperations(DataLakeStoreFileSystemManagementClient client)
        {
            this._client = client;
        }
        
        private DataLakeStoreFileSystemManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.DataLakeStoreFileSystemManagementClient.
        /// </summary>
        public DataLakeStoreFileSystemManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Appends to the file specified in the link that was returned from
        /// BeginAppend.
        /// </summary>
        /// <param name='fileAppendRequestLink'>
        /// Required. The link to the file to append to including all required
        /// parameters.
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when appending to the file.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> AppendAsync(string fileAppendRequestLink, Stream streamContents, CancellationToken cancellationToken)
        {
            // Validate
            if (fileAppendRequestLink == null)
            {
                throw new ArgumentNullException("fileAppendRequestLink");
            }
            if (streamContents == null)
            {
                throw new ArgumentNullException("streamContents");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fileAppendRequestLink", fileAppendRequestLink);
                tracingParameters.Add("streamContents", streamContents);
                TracingAdapter.Enter(invocationId, this, "AppendAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + fileAppendRequestLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Transfer-Encoding", "chunked");
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                Stream requestContent = streamContents;
                httpRequest.Content = new StreamContent(requestContent);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Initiates a file append request, resulting in a return of the data
        /// node location that will service the request.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the file to append to.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to append to the
        /// file in
        /// </param>
        /// <param name='bufferSize'>
        /// Required. The optional buffer size to use when appending data
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response recieved after the BeginOpen, BeginCreate and
        /// BeginAppend requests.
        /// </returns>
        public async Task<FileCreateOpenAndAppendResponse> BeginAppendAsync(string filePath, string accountName, long? bufferSize, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("bufferSize", bufferSize);
                TracingAdapter.Enter(invocationId, this, "BeginAppendAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=APPEND");
            if (bufferSize != null)
            {
                queryParameters.Add("buffersize=" + Uri.EscapeDataString(bufferSize.Value.ToString()));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.TemporaryRedirect)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileCreateOpenAndAppendResponse result = null;
                    // Deserialize Response
                    result = new FileCreateOpenAndAppendResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Initiates a file creation request, resulting in a return of the
        /// data node location that will service the request.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the file to create.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to create the
        /// file in
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to use when creating the file
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response recieved after the BeginOpen, BeginCreate and
        /// BeginAppend requests.
        /// </returns>
        public async Task<FileCreateOpenAndAppendResponse> BeginCreateAsync(string filePath, string accountName, FileCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginCreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=CREATE");
            if (parameters != null && parameters.Overwrite != null)
            {
                queryParameters.Add("overwrite=" + Uri.EscapeDataString(parameters.Overwrite.Value.ToString().ToLower()));
            }
            if (parameters != null && parameters.BlockSize != null)
            {
                queryParameters.Add("blocksize=" + Uri.EscapeDataString(parameters.BlockSize.Value.ToString()));
            }
            if (parameters != null && parameters.Replication != null)
            {
                queryParameters.Add("replication=" + Uri.EscapeDataString(parameters.Replication.Value.ToString()));
            }
            if (parameters != null && parameters.Permission != null)
            {
                queryParameters.Add("permission=" + Uri.EscapeDataString(parameters.Permission));
            }
            if (parameters != null && parameters.BufferSize != null)
            {
                queryParameters.Add("buffersize=" + Uri.EscapeDataString(parameters.BufferSize.Value.ToString()));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.TemporaryRedirect)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileCreateOpenAndAppendResponse result = null;
                    // Deserialize Response
                    result = new FileCreateOpenAndAppendResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Initiates a file open (read) request, resulting in a return of the
        /// data node location that will service the request.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the file to open.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to pass to the open operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response recieved after the BeginOpen, BeginCreate and
        /// BeginAppend requests.
        /// </returns>
        public async Task<FileCreateOpenAndAppendResponse> BeginOpenAsync(string filePath, string accountName, FileOpenParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "BeginOpenAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=OPEN");
            if (parameters != null && parameters.Offset != null)
            {
                queryParameters.Add("offset=" + Uri.EscapeDataString(parameters.Offset.Value.ToString()));
            }
            if (parameters != null && parameters.Length != null)
            {
                queryParameters.Add("length=" + Uri.EscapeDataString(parameters.Length.Value.ToString()));
            }
            if (parameters != null && parameters.BufferSize != null)
            {
                queryParameters.Add("buffersize=" + Uri.EscapeDataString(parameters.BufferSize.Value.ToString()));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.TemporaryRedirect)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileCreateOpenAndAppendResponse result = null;
                    // Deserialize Response
                    result = new FileCreateOpenAndAppendResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("Location"))
                    {
                        result.Location = httpResponse.Headers.GetValues("Location").FirstOrDefault();
                    }
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Checks if the specified access is available at the given path.
        /// </summary>
        /// <param name='path'>
        /// Required. The path to the file or folder to check access for.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='fsAction'>
        /// Required. File system operation read/write/execute in string form,
        /// matching regex pattern '[rwx-]{3}'
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CheckAccessAsync(string path, string accountName, string fsAction, CancellationToken cancellationToken)
        {
            // Validate
            if (path == null)
            {
                throw new ArgumentNullException("path");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (fsAction == null)
            {
                throw new ArgumentNullException("fsAction");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("path", path);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("fsAction", fsAction);
                TracingAdapter.Enter(invocationId, this, "CheckAccessAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(path);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=CHECKACCESS");
            queryParameters.Add("fsaction=" + Uri.EscapeDataString(fsAction));
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Concatenates the list of files into the target file.
        /// </summary>
        /// <param name='destinationPath'>
        /// Required. The path to the destination file resulting from the
        /// concatenation.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='paths'>
        /// Required. A list of comma seperated absolute FileSystem paths
        /// without scheme and authority
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> ConcatAsync(string destinationPath, string accountName, string paths, CancellationToken cancellationToken)
        {
            // Validate
            if (destinationPath == null)
            {
                throw new ArgumentNullException("destinationPath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (paths == null)
            {
                throw new ArgumentNullException("paths");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("destinationPath", destinationPath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("paths", paths);
                TracingAdapter.Enter(invocationId, this, "ConcatAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(destinationPath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=CONCAT");
            queryParameters.Add("sources=" + Uri.EscapeDataString(paths));
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Appends to the file specified. This method supports multiple
        /// concurrent appends to the file. NOTE: that concurrent append and
        /// serial append CANNOT be used interchangeably. Once a file has been
        /// appended to using either one, it can only be appended to using
        /// that type of append.
        /// </summary>
        /// <param name='accountName'>
        /// Required. The name of the data lake account that the file lives in.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to append to using concurrent append.
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when appending to the file.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> ConcurrentAppendAsync(string accountName, string filePath, Stream streamContents, CancellationToken cancellationToken)
        {
            // Validate
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (streamContents == null)
            {
                throw new ArgumentNullException("streamContents");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("streamContents", streamContents);
                TracingAdapter.Enter(invocationId, this, "ConcurrentAppendAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/WebHdfsExt/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=concurrentappend");
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Transfer-Encoding", "chunked");
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                Stream requestContent = streamContents;
                httpRequest.Content = new StreamContent(requestContent);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates the file specified in the link that was returned from
        /// BeginCreate.
        /// </summary>
        /// <param name='fileCreateRequestLink'>
        /// Required. The link to the file to create including all required
        /// parameters.
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when creating the file. This
        /// parameter is required, however it can be an empty stream. Just not
        /// null.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateAsync(string fileCreateRequestLink, Stream streamContents, CancellationToken cancellationToken)
        {
            // Validate
            if (fileCreateRequestLink == null)
            {
                throw new ArgumentNullException("fileCreateRequestLink");
            }
            if (streamContents == null)
            {
                throw new ArgumentNullException("streamContents");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fileCreateRequestLink", fileCreateRequestLink);
                tracingParameters.Add("streamContents", streamContents);
                TracingAdapter.Enter(invocationId, this, "CreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + fileCreateRequestLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Transfer-Encoding", "chunked");
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                Stream requestContent = streamContents;
                httpRequest.Content = new StreamContent(requestContent);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a symbolic link.
        /// </summary>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to create a symlink of.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='destinationPath'>
        /// Required. The path to create the symlink at
        /// </param>
        /// <param name='createParent'>
        /// Required. If the parent directories do not exist, indicates if they
        /// should be created.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> CreateSymLinkAsync(string sourcePath, string accountName, string destinationPath, bool? createParent, CancellationToken cancellationToken)
        {
            // Validate
            if (sourcePath == null)
            {
                throw new ArgumentNullException("sourcePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (destinationPath == null)
            {
                throw new ArgumentNullException("destinationPath");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("sourcePath", sourcePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("destinationPath", destinationPath);
                tracingParameters.Add("createParent", createParent);
                TracingAdapter.Enter(invocationId, this, "CreateSymLinkAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(sourcePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=CREATESYMLINK");
            queryParameters.Add("destination=" + Uri.EscapeDataString(destinationPath));
            if (createParent != null)
            {
                queryParameters.Add("createParent=" + Uri.EscapeDataString(createParent.Value.ToString().ToLower()));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deletes the requested file or folder, optionally recursively.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the file or folder to delete.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='recursive'>
        /// Required. The optional switch indicating if the delete should be
        /// recursive
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public async Task<FileOperationResultResponse> DeleteAsync(string filePath, string accountName, bool recursive, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("recursive", recursive);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=DELETE");
            queryParameters.Add("recursive=" + Uri.EscapeDataString(recursive.ToString().ToLower()));
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileOperationResultResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FileOperationResultResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken booleanValue = responseDoc["boolean"];
                            if (booleanValue != null && booleanValue.Type != JTokenType.Null)
                            {
                                bool booleanInstance = ((bool)booleanValue);
                                result.OperationResult = booleanInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Directly appends to a file with the specified content, without
        /// requiring a redirect. This API is NOT webhdfs compliant. It should
        /// be used only by tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the file to append to.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to append to the
        /// file in
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when appending to the file.
        /// </param>
        /// <param name='bufferSize'>
        /// Required. The optional buffer size to use when appending data
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DirectAppendAsync(string filePath, string accountName, Stream streamContents, long? bufferSize, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (streamContents == null)
            {
                throw new ArgumentNullException("streamContents");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("streamContents", streamContents);
                tracingParameters.Add("bufferSize", bufferSize);
                TracingAdapter.Enter(invocationId, this, "DirectAppendAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=APPEND");
            if (bufferSize != null)
            {
                queryParameters.Add("buffersize=" + Uri.EscapeDataString(bufferSize.Value.ToString()));
            }
            queryParameters.Add("append=true");
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Transfer-Encoding", "chunked");
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                Stream requestContent = streamContents;
                httpRequest.Content = new StreamContent(requestContent);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Directly creates a file with the specified content, without
        /// requiring a redirect. This API is NOT webhdfs compliant. It should
        /// be used only by tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the file to create.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to create the
        /// file in
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when creating the file. This
        /// parameter is required, however it can be an empty stream. Just not
        /// null.
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to use when creating the file
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DirectCreateAsync(string filePath, string accountName, Stream streamContents, FileCreateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (streamContents == null)
            {
                throw new ArgumentNullException("streamContents");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("streamContents", streamContents);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "DirectCreateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=CREATE");
            if (parameters != null && parameters.Overwrite != null)
            {
                queryParameters.Add("overwrite=" + Uri.EscapeDataString(parameters.Overwrite.Value.ToString().ToLower()));
            }
            if (parameters != null && parameters.BlockSize != null)
            {
                queryParameters.Add("blocksize=" + Uri.EscapeDataString(parameters.BlockSize.Value.ToString()));
            }
            if (parameters != null && parameters.Replication != null)
            {
                queryParameters.Add("replication=" + Uri.EscapeDataString(parameters.Replication.Value.ToString()));
            }
            if (parameters != null && parameters.Permission != null)
            {
                queryParameters.Add("permission=" + Uri.EscapeDataString(parameters.Permission));
            }
            if (parameters != null && parameters.BufferSize != null)
            {
                queryParameters.Add("buffersize=" + Uri.EscapeDataString(parameters.BufferSize.Value.ToString()));
            }
            queryParameters.Add("write=true");
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Transfer-Encoding", "chunked");
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                Stream requestContent = streamContents;
                httpRequest.Content = new StreamContent(requestContent);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Directly opens and reads from the specified file, without requiring
        /// a redirect. This API is NOT webhdfs compliant. It should be used
        /// only by tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the file to open.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to pass to the open operation
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The data from the file requested.
        /// </returns>
        public async Task<FileOpenResponse> DirectOpenAsync(string filePath, string accountName, FileOpenParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "DirectOpenAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=OPEN");
            if (parameters != null && parameters.Offset != null)
            {
                queryParameters.Add("offset=" + Uri.EscapeDataString(parameters.Offset.Value.ToString()));
            }
            if (parameters != null && parameters.Length != null)
            {
                queryParameters.Add("length=" + Uri.EscapeDataString(parameters.Length.Value.ToString()));
            }
            if (parameters != null && parameters.BufferSize != null)
            {
                queryParameters.Add("buffersize=" + Uri.EscapeDataString(parameters.BufferSize.Value.ToString()));
            }
            queryParameters.Add("read=true");
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileOpenResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        result = new FileOpenResponse
                        {
                            FileContents = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false)
                        };
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets ACL entries on a file or folder.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to get ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem Acl information.
        /// </returns>
        public async Task<AclStatusResponse> GetAclStatusAsync(string filePath, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "GetAclStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=GETACLSTATUS");
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AclStatusResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new AclStatusResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken aclStatusValue = responseDoc["AclStatus"];
                            if (aclStatusValue != null && aclStatusValue.Type != JTokenType.Null)
                            {
                                AclStatus aclStatusInstance = new AclStatus();
                                result.AclStatus = aclStatusInstance;
                                
                                JToken entriesArray = aclStatusValue["entries"];
                                if (entriesArray != null && entriesArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken entriesValue in ((JArray)entriesArray))
                                    {
                                        aclStatusInstance.Entries.Add(((string)entriesValue));
                                    }
                                }
                                
                                JToken groupValue = aclStatusValue["group"];
                                if (groupValue != null && groupValue.Type != JTokenType.Null)
                                {
                                    string groupInstance = ((string)groupValue);
                                    aclStatusInstance.Group = groupInstance;
                                }
                                
                                JToken ownerValue = aclStatusValue["owner"];
                                if (ownerValue != null && ownerValue.Type != JTokenType.Null)
                                {
                                    string ownerInstance = ((string)ownerValue);
                                    aclStatusInstance.Owner = ownerInstance;
                                }
                                
                                JToken stickyBitValue = aclStatusValue["stickyBit"];
                                if (stickyBitValue != null && stickyBitValue.Type != JTokenType.Null)
                                {
                                    bool stickyBitInstance = ((bool)stickyBitValue);
                                    aclStatusInstance.StickyBit = stickyBitInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the file content summary object specified by the file path.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the file to open.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem content summary information response.
        /// </returns>
        public async Task<ContentSummaryResponse> GetContentSummaryAsync(string filePath, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "GetContentSummaryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=GETCONTENTSUMMARY");
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    ContentSummaryResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new ContentSummaryResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken contentSummaryValue = responseDoc["ContentSummary"];
                            if (contentSummaryValue != null && contentSummaryValue.Type != JTokenType.Null)
                            {
                                ContentSummary contentSummaryInstance = new ContentSummary();
                                result.ContentSummary = contentSummaryInstance;
                                
                                JToken directoryCountValue = contentSummaryValue["directoryCount"];
                                if (directoryCountValue != null && directoryCountValue.Type != JTokenType.Null)
                                {
                                    long directoryCountInstance = ((long)directoryCountValue);
                                    contentSummaryInstance.DirectoryCount = directoryCountInstance;
                                }
                                
                                JToken fileCountValue = contentSummaryValue["fileCount"];
                                if (fileCountValue != null && fileCountValue.Type != JTokenType.Null)
                                {
                                    long fileCountInstance = ((long)fileCountValue);
                                    contentSummaryInstance.FileCount = fileCountInstance;
                                }
                                
                                JToken lengthValue = contentSummaryValue["length"];
                                if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                {
                                    long lengthInstance = ((long)lengthValue);
                                    contentSummaryInstance.Length = lengthInstance;
                                }
                                
                                JToken quotaValue = contentSummaryValue["quota"];
                                if (quotaValue != null && quotaValue.Type != JTokenType.Null)
                                {
                                    long quotaInstance = ((long)quotaValue);
                                    contentSummaryInstance.Quota = quotaInstance;
                                }
                                
                                JToken spaceConsumedValue = contentSummaryValue["spaceConsumed"];
                                if (spaceConsumedValue != null && spaceConsumedValue.Type != JTokenType.Null)
                                {
                                    long spaceConsumedInstance = ((long)spaceConsumedValue);
                                    contentSummaryInstance.SpaceConsumed = spaceConsumedInstance;
                                }
                                
                                JToken spaceQuotaValue = contentSummaryValue["spaceQuota"];
                                if (spaceQuotaValue != null && spaceQuotaValue.Type != JTokenType.Null)
                                {
                                    long spaceQuotaInstance = ((long)spaceQuotaValue);
                                    contentSummaryInstance.SpaceQuota = spaceQuotaInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the file status object specified by the file path.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the file to retrieve status for.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem file status information response.
        /// </returns>
        public async Task<FileStatusResponse> GetFileStatusAsync(string filePath, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "GetFileStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=GETFILESTATUS");
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileStatusResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FileStatusResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken fileStatusValue = responseDoc["FileStatus"];
                            if (fileStatusValue != null && fileStatusValue.Type != JTokenType.Null)
                            {
                                FileStatusProperties fileStatusInstance = new FileStatusProperties();
                                result.FileStatus = fileStatusInstance;
                                
                                JToken accessTimeValue = fileStatusValue["accessTime"];
                                if (accessTimeValue != null && accessTimeValue.Type != JTokenType.Null)
                                {
                                    long accessTimeInstance = ((long)accessTimeValue);
                                    fileStatusInstance.AccessTime = accessTimeInstance;
                                }
                                
                                JToken blockSizeValue = fileStatusValue["blockSize"];
                                if (blockSizeValue != null && blockSizeValue.Type != JTokenType.Null)
                                {
                                    long blockSizeInstance = ((long)blockSizeValue);
                                    fileStatusInstance.BlockSize = blockSizeInstance;
                                }
                                
                                JToken childrenNumValue = fileStatusValue["childrenNum"];
                                if (childrenNumValue != null && childrenNumValue.Type != JTokenType.Null)
                                {
                                    long childrenNumInstance = ((long)childrenNumValue);
                                    fileStatusInstance.ChildrenNum = childrenNumInstance;
                                }
                                
                                JToken fileIdValue = fileStatusValue["fileId"];
                                if (fileIdValue != null && fileIdValue.Type != JTokenType.Null)
                                {
                                    long fileIdInstance = ((long)fileIdValue);
                                    fileStatusInstance.FileId = fileIdInstance;
                                }
                                
                                JToken groupValue = fileStatusValue["group"];
                                if (groupValue != null && groupValue.Type != JTokenType.Null)
                                {
                                    string groupInstance = ((string)groupValue);
                                    fileStatusInstance.Group = groupInstance;
                                }
                                
                                JToken lengthValue = fileStatusValue["length"];
                                if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                {
                                    long lengthInstance = ((long)lengthValue);
                                    fileStatusInstance.Length = lengthInstance;
                                }
                                
                                JToken modificationTimeValue = fileStatusValue["modificationTime"];
                                if (modificationTimeValue != null && modificationTimeValue.Type != JTokenType.Null)
                                {
                                    long modificationTimeInstance = ((long)modificationTimeValue);
                                    fileStatusInstance.ModificationTime = modificationTimeInstance;
                                }
                                
                                JToken ownerValue = fileStatusValue["owner"];
                                if (ownerValue != null && ownerValue.Type != JTokenType.Null)
                                {
                                    string ownerInstance = ((string)ownerValue);
                                    fileStatusInstance.Owner = ownerInstance;
                                }
                                
                                JToken pathSuffixValue = fileStatusValue["pathSuffix"];
                                if (pathSuffixValue != null && pathSuffixValue.Type != JTokenType.Null)
                                {
                                    string pathSuffixInstance = ((string)pathSuffixValue);
                                    fileStatusInstance.PathSuffix = pathSuffixInstance;
                                }
                                
                                JToken permissionValue = fileStatusValue["permission"];
                                if (permissionValue != null && permissionValue.Type != JTokenType.Null)
                                {
                                    string permissionInstance = ((string)permissionValue);
                                    fileStatusInstance.Permission = permissionInstance;
                                }
                                
                                JToken replicationValue = fileStatusValue["replication"];
                                if (replicationValue != null && replicationValue.Type != JTokenType.Null)
                                {
                                    int replicationInstance = ((int)replicationValue);
                                    fileStatusInstance.Replication = replicationInstance;
                                }
                                
                                JToken typeValue = fileStatusValue["type"];
                                if (typeValue != null && typeValue.Type != JTokenType.Null)
                                {
                                    FileType typeInstance = DataLakeStoreFileSystemManagementClient.ParseFileType(((string)typeValue));
                                    fileStatusInstance.Type = typeInstance;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the home directory for the specified account.
        /// </summary>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem home path response.
        /// </returns>
        public async Task<HomeDirectoryResponse> GetHomeDirectoryAsync(string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "GetHomeDirectoryAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=GETHOMEDIRECTORY");
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    HomeDirectoryResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new HomeDirectoryResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken pathValue = responseDoc["Path"];
                            if (pathValue != null && pathValue.Type != JTokenType.Null)
                            {
                                string pathInstance = ((string)pathValue);
                                result.Path = pathInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Get the list of file status objects specified by the file path.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the file to retrieve status for.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all file
        /// status items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem file status list information response.
        /// </returns>
        public async Task<FileStatusesResponse> ListFileStatusAsync(string filePath, string accountName, DataLakeStoreFileSystemListParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "ListFileStatusAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=LISTSTATUS");
            if (parameters != null && parameters.Top != null)
            {
                queryParameters.Add("$top=" + Uri.EscapeDataString(parameters.Top.Value.ToString()));
            }
            if (parameters != null && parameters.Skip != null)
            {
                queryParameters.Add("$skip=" + Uri.EscapeDataString(parameters.Skip.Value.ToString()));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileStatusesResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FileStatusesResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken fileStatusesValue = responseDoc["FileStatuses"];
                            if (fileStatusesValue != null && fileStatusesValue.Type != JTokenType.Null)
                            {
                                FileStatuses fileStatusesInstance = new FileStatuses();
                                result.FileStatuses = fileStatusesInstance;
                                
                                JToken fileStatusArray = fileStatusesValue["FileStatus"];
                                if (fileStatusArray != null && fileStatusArray.Type != JTokenType.Null)
                                {
                                    foreach (JToken fileStatusValue in ((JArray)fileStatusArray))
                                    {
                                        FileStatusProperties fileStatusInstance = new FileStatusProperties();
                                        fileStatusesInstance.FileStatus.Add(fileStatusInstance);
                                        
                                        JToken accessTimeValue = fileStatusValue["accessTime"];
                                        if (accessTimeValue != null && accessTimeValue.Type != JTokenType.Null)
                                        {
                                            long accessTimeInstance = ((long)accessTimeValue);
                                            fileStatusInstance.AccessTime = accessTimeInstance;
                                        }
                                        
                                        JToken blockSizeValue = fileStatusValue["blockSize"];
                                        if (blockSizeValue != null && blockSizeValue.Type != JTokenType.Null)
                                        {
                                            long blockSizeInstance = ((long)blockSizeValue);
                                            fileStatusInstance.BlockSize = blockSizeInstance;
                                        }
                                        
                                        JToken childrenNumValue = fileStatusValue["childrenNum"];
                                        if (childrenNumValue != null && childrenNumValue.Type != JTokenType.Null)
                                        {
                                            long childrenNumInstance = ((long)childrenNumValue);
                                            fileStatusInstance.ChildrenNum = childrenNumInstance;
                                        }
                                        
                                        JToken fileIdValue = fileStatusValue["fileId"];
                                        if (fileIdValue != null && fileIdValue.Type != JTokenType.Null)
                                        {
                                            long fileIdInstance = ((long)fileIdValue);
                                            fileStatusInstance.FileId = fileIdInstance;
                                        }
                                        
                                        JToken groupValue = fileStatusValue["group"];
                                        if (groupValue != null && groupValue.Type != JTokenType.Null)
                                        {
                                            string groupInstance = ((string)groupValue);
                                            fileStatusInstance.Group = groupInstance;
                                        }
                                        
                                        JToken lengthValue = fileStatusValue["length"];
                                        if (lengthValue != null && lengthValue.Type != JTokenType.Null)
                                        {
                                            long lengthInstance = ((long)lengthValue);
                                            fileStatusInstance.Length = lengthInstance;
                                        }
                                        
                                        JToken modificationTimeValue = fileStatusValue["modificationTime"];
                                        if (modificationTimeValue != null && modificationTimeValue.Type != JTokenType.Null)
                                        {
                                            long modificationTimeInstance = ((long)modificationTimeValue);
                                            fileStatusInstance.ModificationTime = modificationTimeInstance;
                                        }
                                        
                                        JToken ownerValue = fileStatusValue["owner"];
                                        if (ownerValue != null && ownerValue.Type != JTokenType.Null)
                                        {
                                            string ownerInstance = ((string)ownerValue);
                                            fileStatusInstance.Owner = ownerInstance;
                                        }
                                        
                                        JToken pathSuffixValue = fileStatusValue["pathSuffix"];
                                        if (pathSuffixValue != null && pathSuffixValue.Type != JTokenType.Null)
                                        {
                                            string pathSuffixInstance = ((string)pathSuffixValue);
                                            fileStatusInstance.PathSuffix = pathSuffixInstance;
                                        }
                                        
                                        JToken permissionValue = fileStatusValue["permission"];
                                        if (permissionValue != null && permissionValue.Type != JTokenType.Null)
                                        {
                                            string permissionInstance = ((string)permissionValue);
                                            fileStatusInstance.Permission = permissionInstance;
                                        }
                                        
                                        JToken replicationValue = fileStatusValue["replication"];
                                        if (replicationValue != null && replicationValue.Type != JTokenType.Null)
                                        {
                                            int replicationInstance = ((int)replicationValue);
                                            fileStatusInstance.Replication = replicationInstance;
                                        }
                                        
                                        JToken typeValue = fileStatusValue["type"];
                                        if (typeValue != null && typeValue.Type != JTokenType.Null)
                                        {
                                            FileType typeInstance = DataLakeStoreFileSystemManagementClient.ParseFileType(((string)typeValue));
                                            fileStatusInstance.Type = typeInstance;
                                        }
                                    }
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Creates a directory.
        /// </summary>
        /// <param name='path'>
        /// Required. The path to the directory to create.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='permission'>
        /// Optional. The optional permissions to set on the directories
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public async Task<FileOperationResultResponse> MkdirsAsync(string path, string accountName, string permission, CancellationToken cancellationToken)
        {
            // Validate
            if (path == null)
            {
                throw new ArgumentNullException("path");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("path", path);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("permission", permission);
                TracingAdapter.Enter(invocationId, this, "MkdirsAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(path);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=MKDIRS");
            if (permission != null)
            {
                queryParameters.Add("permission=" + Uri.EscapeDataString(permission));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileOperationResultResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FileOperationResultResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken booleanValue = responseDoc["boolean"];
                            if (booleanValue != null && booleanValue.Type != JTokenType.Null)
                            {
                                bool booleanInstance = ((bool)booleanValue);
                                result.OperationResult = booleanInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Modifies existing ACL entries on a file or folder.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to modify ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='aclSpec'>
        /// Required. The ACL spec included in ACL modification operations in
        /// the format '[default:]user|group|other::r|-w|-x|-'
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> ModifyAclEntriesAsync(string filePath, string accountName, string aclSpec, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (aclSpec == null)
            {
                throw new ArgumentNullException("aclSpec");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("aclSpec", aclSpec);
                TracingAdapter.Enter(invocationId, this, "ModifyAclEntriesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=MODIFYACLENTRIES");
            queryParameters.Add("aclspec=" + Uri.EscapeDataString(aclSpec));
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Concatenates the list of files into the target file. This API is
        /// NOT webhdfs compliant, however supports a much larger list of
        /// files in the concatenate list.
        /// </summary>
        /// <param name='destinationPath'>
        /// Required. The path to the destination file resulting from the
        /// concatenation.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='streamContents'>
        /// Required. A list of comma seperated absolute FileSystem paths
        /// without scheme and authority. In the format: 'sources=<comma
        /// separated list>'
        /// </param>
        /// <param name='deleteSourceDirectory'>
        /// Required. Indicates two things to the system which allow for
        /// optimizations and increased concatenate performance. First, that
        /// all the streams being concatenated are in the same source
        /// directory. Second, that the source directory ONLY has streams in
        /// it that are being concatenated into the destination stream. Note
        /// that only the first requirement is strictly enforced (concatenate
        /// will ignore the flag and only delete the source streams, not the
        /// folder). If the first option is met, ALL data that was not part of
        /// the set of streams being concatenated WILL BE LOST.It is critical
        /// to only use this option if you are certain the two requirements
        /// are met.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> MsConcatAsync(string destinationPath, string accountName, Stream streamContents, bool? deleteSourceDirectory, CancellationToken cancellationToken)
        {
            // Validate
            if (destinationPath == null)
            {
                throw new ArgumentNullException("destinationPath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (streamContents == null)
            {
                throw new ArgumentNullException("streamContents");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("destinationPath", destinationPath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("streamContents", streamContents);
                tracingParameters.Add("deleteSourceDirectory", deleteSourceDirectory);
                TracingAdapter.Enter(invocationId, this, "MsConcatAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(destinationPath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=MSCONCAT");
            if (deleteSourceDirectory != null)
            {
                queryParameters.Add("deletesourcedirectory=" + Uri.EscapeDataString(deleteSourceDirectory.Value.ToString().ToLower()));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Post;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                Stream requestContent = streamContents;
                httpRequest.Content = new StreamContent(requestContent);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/octet-stream");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Gets the data associated with the file handle requested.
        /// </summary>
        /// <param name='fileOpenRequestLink'>
        /// Required. The link to the file to open including all required
        /// parameters.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The data from the file requested.
        /// </returns>
        public async Task<FileOpenResponse> OpenAsync(string fileOpenRequestLink, CancellationToken cancellationToken)
        {
            // Validate
            if (fileOpenRequestLink == null)
            {
                throw new ArgumentNullException("fileOpenRequestLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("fileOpenRequestLink", fileOpenRequestLink);
                TracingAdapter.Enter(invocationId, this, "OpenAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + fileOpenRequestLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Transfer-Encoding", "chunked");
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileOpenResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        result = new FileOpenResponse
                        {
                            FileContents = await httpResponse.Content.ReadAsByteArrayAsync().ConfigureAwait(false)
                        };
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Removes the existing ACL on a file or folder.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to remove ACL on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RemoveAclAsync(string filePath, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "RemoveAclAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=REMOVEACL");
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Removes existing ACL entries on a file or folder.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to remove ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='aclSpec'>
        /// Required. The ACL spec included in ACL removal operations in the
        /// format '[default:]user|group|other'
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RemoveAclEntriesAsync(string filePath, string accountName, string aclSpec, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (aclSpec == null)
            {
                throw new ArgumentNullException("aclSpec");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("aclSpec", aclSpec);
                TracingAdapter.Enter(invocationId, this, "RemoveAclEntriesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=REMOVEACLENTRIES");
            queryParameters.Add("aclspec=" + Uri.EscapeDataString(aclSpec));
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Removes default ACL entries on a file or folder.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to remove default ACLs
        /// on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> RemoveDefaultAclAsync(string filePath, string accountName, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                TracingAdapter.Enter(invocationId, this, "RemoveDefaultAclAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=REMOVEDEFAULTACL");
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Rename a directory or file.
        /// </summary>
        /// <param name='sourcePath'>
        /// Required. The path to the directory to move/rename.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='destinationPath'>
        /// Required. The path to move/rename the file or folder to
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public async Task<FileOperationResultResponse> RenameAsync(string sourcePath, string accountName, string destinationPath, CancellationToken cancellationToken)
        {
            // Validate
            if (sourcePath == null)
            {
                throw new ArgumentNullException("sourcePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (destinationPath == null)
            {
                throw new ArgumentNullException("destinationPath");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("sourcePath", sourcePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("destinationPath", destinationPath);
                TracingAdapter.Enter(invocationId, this, "RenameAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(sourcePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=RENAME");
            queryParameters.Add("destination=" + Uri.EscapeDataString(destinationPath));
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileOperationResultResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FileOperationResultResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken booleanValue = responseDoc["boolean"];
                            if (booleanValue != null && booleanValue.Type != JTokenType.Null)
                            {
                                bool booleanInstance = ((bool)booleanValue);
                                result.OperationResult = booleanInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets ACL entries on a file or folder.
        /// </summary>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to set ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='aclSpec'>
        /// Required. The ACL spec included in ACL creation operations in the
        /// format '[default:]user|group|other::r|-w|-x|-'
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SetAclAsync(string filePath, string accountName, string aclSpec, CancellationToken cancellationToken)
        {
            // Validate
            if (filePath == null)
            {
                throw new ArgumentNullException("filePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            if (aclSpec == null)
            {
                throw new ArgumentNullException("aclSpec");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("filePath", filePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("aclSpec", aclSpec);
                TracingAdapter.Enter(invocationId, this, "SetAclAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(filePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=SETACL");
            queryParameters.Add("aclspec=" + Uri.EscapeDataString(aclSpec));
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets the owner of a file or folder.
        /// </summary>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to set the owner on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='owner'>
        /// Optional. The username who is the owner of a file/directory, if
        /// empty remains unchanged.
        /// </param>
        /// <param name='group'>
        /// Optional. The name of a group, if empty remains unchanged.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SetOwnerAsync(string sourcePath, string accountName, string owner, string group, CancellationToken cancellationToken)
        {
            // Validate
            if (sourcePath == null)
            {
                throw new ArgumentNullException("sourcePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("sourcePath", sourcePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("owner", owner);
                tracingParameters.Add("group", group);
                TracingAdapter.Enter(invocationId, this, "SetOwnerAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(sourcePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=SETOWNER");
            if (owner != null)
            {
                queryParameters.Add("owner=" + Uri.EscapeDataString(owner));
            }
            if (group != null)
            {
                queryParameters.Add("group=" + Uri.EscapeDataString(group));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets the permission of the file or folder.
        /// </summary>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to set permissions on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='permission'>
        /// Optional. A string octal representation of the permission (i.e
        /// 'rwx')
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SetPermissionAsync(string sourcePath, string accountName, string permission, CancellationToken cancellationToken)
        {
            // Validate
            if (sourcePath == null)
            {
                throw new ArgumentNullException("sourcePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("sourcePath", sourcePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("permission", permission);
                TracingAdapter.Enter(invocationId, this, "SetPermissionAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(sourcePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=SETPERMISSION");
            if (permission != null)
            {
                queryParameters.Add("permission=" + Uri.EscapeDataString(permission));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets the value of the replication factor.
        /// </summary>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to create a replication
        /// of.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='replication'>
        /// Required. The number of replications of a file.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public async Task<FileOperationResultResponse> SetReplicationAsync(string sourcePath, string accountName, short? replication, CancellationToken cancellationToken)
        {
            // Validate
            if (sourcePath == null)
            {
                throw new ArgumentNullException("sourcePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("sourcePath", sourcePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("replication", replication);
                TracingAdapter.Enter(invocationId, this, "SetReplicationAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(sourcePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=SETREPLICATION");
            if (replication != null)
            {
                queryParameters.Add("replication=" + Uri.EscapeDataString(replication.Value.ToString()));
            }
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    FileOperationResultResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new FileOperationResultResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken booleanValue = responseDoc["boolean"];
                            if (booleanValue != null && booleanValue.Type != JTokenType.Null)
                            {
                                bool booleanInstance = ((bool)booleanValue);
                                result.OperationResult = booleanInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Sets the access or modification time on a file or folder.
        /// </summary>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to set permissions on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='modificationTime'>
        /// Required. The modification time of a file/directory. If -1 remains
        /// unchanged
        /// </param>
        /// <param name='accessTime'>
        /// Required. The access time of a file/directory. If -1 remains
        /// unchanged
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> SetTimesAsync(string sourcePath, string accountName, long modificationTime, long accessTime, CancellationToken cancellationToken)
        {
            // Validate
            if (sourcePath == null)
            {
                throw new ArgumentNullException("sourcePath");
            }
            if (accountName == null)
            {
                throw new ArgumentNullException("accountName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("sourcePath", sourcePath);
                tracingParameters.Add("accountName", accountName);
                tracingParameters.Add("modificationTime", modificationTime);
                tracingParameters.Add("accessTime", accessTime);
                TracingAdapter.Enter(invocationId, this, "SetTimesAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "https://";
            url = url + Uri.EscapeDataString(accountName);
            url = url + ".";
            if (this.Client.DataLakeServiceUri != null)
            {
                url = url + Uri.EscapeDataString(this.Client.DataLakeServiceUri);
            }
            url = url + "/webhdfs/v1/";
            url = url + Uri.EscapeDataString(sourcePath);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("op=SETTIMES");
            queryParameters.Add("modificationtime=" + Uri.EscapeDataString(modificationTime.ToString()));
            queryParameters.Add("accesstime=" + Uri.EscapeDataString(accessTime.ToString()));
            queryParameters.Add("api-version=2015-10-01-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("useragent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                httpRequest.Headers.Add("User-Agent", "Azure SDK - Microsoft.Azure.Management.DataLake.StoreFileSystem 0.9.6-preview " + this.Client.UserAgentSuffix);
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
