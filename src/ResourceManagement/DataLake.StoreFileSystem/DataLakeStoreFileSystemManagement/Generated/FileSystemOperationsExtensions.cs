// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure;
using Microsoft.Azure.Management.DataLake.StoreFileSystem;
using Microsoft.Azure.Management.DataLake.StoreFileSystem.Models;

namespace Microsoft.Azure.Management.DataLake.StoreFileSystem
{
    /// <summary>
    /// Creates a Data Lake Store filesystem management client.
    /// </summary>
    public static partial class FileSystemOperationsExtensions
    {
        /// <summary>
        /// Appends to the file specified in the link that was returned from
        /// BeginAppend.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='fileAppendRequestLink'>
        /// Required. The link to the file to append to including all required
        /// parameters.
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when appending to the file.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Append(this IFileSystemOperations operations, string fileAppendRequestLink, Stream streamContents)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).AppendAsync(fileAppendRequestLink, streamContents);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Appends to the file specified in the link that was returned from
        /// BeginAppend.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='fileAppendRequestLink'>
        /// Required. The link to the file to append to including all required
        /// parameters.
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when appending to the file.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> AppendAsync(this IFileSystemOperations operations, string fileAppendRequestLink, Stream streamContents)
        {
            return operations.AppendAsync(fileAppendRequestLink, streamContents, CancellationToken.None);
        }
        
        /// <summary>
        /// Initiates a file append request, resulting in a return of the data
        /// node location that will service the request.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to append to.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to append to the
        /// file in
        /// </param>
        /// <param name='bufferSize'>
        /// Required. The optional buffer size to use when appending data
        /// </param>
        /// <returns>
        /// The response recieved after the BeginOpen, BeginCreate and
        /// BeginAppend requests.
        /// </returns>
        public static FileCreateOpenAndAppendResponse BeginAppend(this IFileSystemOperations operations, string filePath, string accountName, long? bufferSize)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).BeginAppendAsync(filePath, accountName, bufferSize);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Initiates a file append request, resulting in a return of the data
        /// node location that will service the request.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to append to.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to append to the
        /// file in
        /// </param>
        /// <param name='bufferSize'>
        /// Required. The optional buffer size to use when appending data
        /// </param>
        /// <returns>
        /// The response recieved after the BeginOpen, BeginCreate and
        /// BeginAppend requests.
        /// </returns>
        public static Task<FileCreateOpenAndAppendResponse> BeginAppendAsync(this IFileSystemOperations operations, string filePath, string accountName, long? bufferSize)
        {
            return operations.BeginAppendAsync(filePath, accountName, bufferSize, CancellationToken.None);
        }
        
        /// <summary>
        /// Initiates a file creation request, resulting in a return of the
        /// data node location that will service the request.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to create.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to create the
        /// file in
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to use when creating the file
        /// </param>
        /// <returns>
        /// The response recieved after the BeginOpen, BeginCreate and
        /// BeginAppend requests.
        /// </returns>
        public static FileCreateOpenAndAppendResponse BeginCreate(this IFileSystemOperations operations, string filePath, string accountName, FileCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).BeginCreateAsync(filePath, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Initiates a file creation request, resulting in a return of the
        /// data node location that will service the request.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to create.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to create the
        /// file in
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to use when creating the file
        /// </param>
        /// <returns>
        /// The response recieved after the BeginOpen, BeginCreate and
        /// BeginAppend requests.
        /// </returns>
        public static Task<FileCreateOpenAndAppendResponse> BeginCreateAsync(this IFileSystemOperations operations, string filePath, string accountName, FileCreateParameters parameters)
        {
            return operations.BeginCreateAsync(filePath, accountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Initiates a file open (read) request, resulting in a return of the
        /// data node location that will service the request.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to open.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to pass to the open operation
        /// </param>
        /// <returns>
        /// The response recieved after the BeginOpen, BeginCreate and
        /// BeginAppend requests.
        /// </returns>
        public static FileCreateOpenAndAppendResponse BeginOpen(this IFileSystemOperations operations, string filePath, string accountName, FileOpenParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).BeginOpenAsync(filePath, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Initiates a file open (read) request, resulting in a return of the
        /// data node location that will service the request.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to open.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to pass to the open operation
        /// </param>
        /// <returns>
        /// The response recieved after the BeginOpen, BeginCreate and
        /// BeginAppend requests.
        /// </returns>
        public static Task<FileCreateOpenAndAppendResponse> BeginOpenAsync(this IFileSystemOperations operations, string filePath, string accountName, FileOpenParameters parameters)
        {
            return operations.BeginOpenAsync(filePath, accountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Checks if the specified access is available at the given path.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='path'>
        /// Required. The path to the file or folder to check access for.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='fsAction'>
        /// Required. File system operation read/write/execute in string form,
        /// matching regex pattern '[rwx-]{3}'
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse CheckAccess(this IFileSystemOperations operations, string path, string accountName, string fsAction)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).CheckAccessAsync(path, accountName, fsAction);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Checks if the specified access is available at the given path.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='path'>
        /// Required. The path to the file or folder to check access for.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='fsAction'>
        /// Required. File system operation read/write/execute in string form,
        /// matching regex pattern '[rwx-]{3}'
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> CheckAccessAsync(this IFileSystemOperations operations, string path, string accountName, string fsAction)
        {
            return operations.CheckAccessAsync(path, accountName, fsAction, CancellationToken.None);
        }
        
        /// <summary>
        /// Concatenates the list of files into the target file.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='destinationPath'>
        /// Required. The path to the destination file resulting from the
        /// concatenation.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='paths'>
        /// Required. A list of comma seperated absolute FileSystem paths
        /// without scheme and authority
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Concat(this IFileSystemOperations operations, string destinationPath, string accountName, string paths)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).ConcatAsync(destinationPath, accountName, paths);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Concatenates the list of files into the target file.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='destinationPath'>
        /// Required. The path to the destination file resulting from the
        /// concatenation.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='paths'>
        /// Required. A list of comma seperated absolute FileSystem paths
        /// without scheme and authority
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> ConcatAsync(this IFileSystemOperations operations, string destinationPath, string accountName, string paths)
        {
            return operations.ConcatAsync(destinationPath, accountName, paths, CancellationToken.None);
        }
        
        /// <summary>
        /// Appends to the file specified. This method supports multiple
        /// concurrent appends to the file. NOTE: that concurrent append and
        /// serial append CANNOT be used interchangeably. Once a file has been
        /// appended to using either one, it can only be appended to using
        /// that type of append.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the data lake account that the file lives in.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to append to using concurrent append.
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when appending to the file.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse ConcurrentAppend(this IFileSystemOperations operations, string accountName, string filePath, Stream streamContents)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).ConcurrentAppendAsync(accountName, filePath, streamContents);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Appends to the file specified. This method supports multiple
        /// concurrent appends to the file. NOTE: that concurrent append and
        /// serial append CANNOT be used interchangeably. Once a file has been
        /// appended to using either one, it can only be appended to using
        /// that type of append.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the data lake account that the file lives in.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to append to using concurrent append.
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when appending to the file.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> ConcurrentAppendAsync(this IFileSystemOperations operations, string accountName, string filePath, Stream streamContents)
        {
            return operations.ConcurrentAppendAsync(accountName, filePath, streamContents, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates the file specified in the link that was returned from
        /// BeginCreate.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='fileCreateRequestLink'>
        /// Required. The link to the file to create including all required
        /// parameters.
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when creating the file. This
        /// parameter is required, however it can be an empty stream. Just not
        /// null.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse Create(this IFileSystemOperations operations, string fileCreateRequestLink, Stream streamContents)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).CreateAsync(fileCreateRequestLink, streamContents);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates the file specified in the link that was returned from
        /// BeginCreate.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='fileCreateRequestLink'>
        /// Required. The link to the file to create including all required
        /// parameters.
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when creating the file. This
        /// parameter is required, however it can be an empty stream. Just not
        /// null.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> CreateAsync(this IFileSystemOperations operations, string fileCreateRequestLink, Stream streamContents)
        {
            return operations.CreateAsync(fileCreateRequestLink, streamContents, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates a symbolic link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to create a symlink of.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='destinationPath'>
        /// Required. The path to create the symlink at
        /// </param>
        /// <param name='createParent'>
        /// Required. If the parent directories do not exist, indicates if they
        /// should be created.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse CreateSymLink(this IFileSystemOperations operations, string sourcePath, string accountName, string destinationPath, bool? createParent)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).CreateSymLinkAsync(sourcePath, accountName, destinationPath, createParent);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a symbolic link.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to create a symlink of.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='destinationPath'>
        /// Required. The path to create the symlink at
        /// </param>
        /// <param name='createParent'>
        /// Required. If the parent directories do not exist, indicates if they
        /// should be created.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> CreateSymLinkAsync(this IFileSystemOperations operations, string sourcePath, string accountName, string destinationPath, bool? createParent)
        {
            return operations.CreateSymLinkAsync(sourcePath, accountName, destinationPath, createParent, CancellationToken.None);
        }
        
        /// <summary>
        /// Deletes the requested file or folder, optionally recursively.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file or folder to delete.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='recursive'>
        /// Required. The optional switch indicating if the delete should be
        /// recursive
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public static FileOperationResultResponse Delete(this IFileSystemOperations operations, string filePath, string accountName, bool recursive)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).DeleteAsync(filePath, accountName, recursive);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Deletes the requested file or folder, optionally recursively.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file or folder to delete.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='recursive'>
        /// Required. The optional switch indicating if the delete should be
        /// recursive
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public static Task<FileOperationResultResponse> DeleteAsync(this IFileSystemOperations operations, string filePath, string accountName, bool recursive)
        {
            return operations.DeleteAsync(filePath, accountName, recursive, CancellationToken.None);
        }
        
        /// <summary>
        /// Directly appends to a file with the specified content, without
        /// requiring a redirect. This API is NOT webhdfs compliant. It should
        /// be used only by tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to append to.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to append to the
        /// file in
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when appending to the file.
        /// </param>
        /// <param name='bufferSize'>
        /// Required. The optional buffer size to use when appending data
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse DirectAppend(this IFileSystemOperations operations, string filePath, string accountName, Stream streamContents, long? bufferSize)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).DirectAppendAsync(filePath, accountName, streamContents, bufferSize);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Directly appends to a file with the specified content, without
        /// requiring a redirect. This API is NOT webhdfs compliant. It should
        /// be used only by tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to append to.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to append to the
        /// file in
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when appending to the file.
        /// </param>
        /// <param name='bufferSize'>
        /// Required. The optional buffer size to use when appending data
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DirectAppendAsync(this IFileSystemOperations operations, string filePath, string accountName, Stream streamContents, long? bufferSize)
        {
            return operations.DirectAppendAsync(filePath, accountName, streamContents, bufferSize, CancellationToken.None);
        }
        
        /// <summary>
        /// Directly creates a file with the specified content, without
        /// requiring a redirect. This API is NOT webhdfs compliant. It should
        /// be used only by tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to create.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to create the
        /// file in
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when creating the file. This
        /// parameter is required, however it can be an empty stream. Just not
        /// null.
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to use when creating the file
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse DirectCreate(this IFileSystemOperations operations, string filePath, string accountName, Stream streamContents, FileCreateParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).DirectCreateAsync(filePath, accountName, streamContents, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Directly creates a file with the specified content, without
        /// requiring a redirect. This API is NOT webhdfs compliant. It should
        /// be used only by tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to create.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the Data Lake Store account to create the
        /// file in
        /// </param>
        /// <param name='streamContents'>
        /// Required. The file contents to include when creating the file. This
        /// parameter is required, however it can be an empty stream. Just not
        /// null.
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to use when creating the file
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> DirectCreateAsync(this IFileSystemOperations operations, string filePath, string accountName, Stream streamContents, FileCreateParameters parameters)
        {
            return operations.DirectCreateAsync(filePath, accountName, streamContents, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Directly opens and reads from the specified file, without requiring
        /// a redirect. This API is NOT webhdfs compliant. It should be used
        /// only by tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to open.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to pass to the open operation
        /// </param>
        /// <returns>
        /// The data from the file requested.
        /// </returns>
        public static FileOpenResponse DirectOpen(this IFileSystemOperations operations, string filePath, string accountName, FileOpenParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).DirectOpenAsync(filePath, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Directly opens and reads from the specified file, without requiring
        /// a redirect. This API is NOT webhdfs compliant. It should be used
        /// only by tools that do not rely on webhdfs interoperability.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to open.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='parameters'>
        /// Optional. The optional parameters to pass to the open operation
        /// </param>
        /// <returns>
        /// The data from the file requested.
        /// </returns>
        public static Task<FileOpenResponse> DirectOpenAsync(this IFileSystemOperations operations, string filePath, string accountName, FileOpenParameters parameters)
        {
            return operations.DirectOpenAsync(filePath, accountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets ACL entries on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to get ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem Acl information.
        /// </returns>
        public static AclStatusResponse GetAclStatus(this IFileSystemOperations operations, string filePath, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).GetAclStatusAsync(filePath, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets ACL entries on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to get ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem Acl information.
        /// </returns>
        public static Task<AclStatusResponse> GetAclStatusAsync(this IFileSystemOperations operations, string filePath, string accountName)
        {
            return operations.GetAclStatusAsync(filePath, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the file content summary object specified by the file path.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to open.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem content summary information response.
        /// </returns>
        public static ContentSummaryResponse GetContentSummary(this IFileSystemOperations operations, string filePath, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).GetContentSummaryAsync(filePath, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the file content summary object specified by the file path.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to open.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem content summary information response.
        /// </returns>
        public static Task<ContentSummaryResponse> GetContentSummaryAsync(this IFileSystemOperations operations, string filePath, string accountName)
        {
            return operations.GetContentSummaryAsync(filePath, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the file status object specified by the file path.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to retrieve status for.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem file status information response.
        /// </returns>
        public static FileStatusResponse GetFileStatus(this IFileSystemOperations operations, string filePath, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).GetFileStatusAsync(filePath, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the file status object specified by the file path.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to retrieve status for.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem file status information response.
        /// </returns>
        public static Task<FileStatusResponse> GetFileStatusAsync(this IFileSystemOperations operations, string filePath, string accountName)
        {
            return operations.GetFileStatusAsync(filePath, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the home directory for the specified account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem home path response.
        /// </returns>
        public static HomeDirectoryResponse GetHomeDirectory(this IFileSystemOperations operations, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).GetHomeDirectoryAsync(accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the home directory for the specified account.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem home path response.
        /// </returns>
        public static Task<HomeDirectoryResponse> GetHomeDirectoryAsync(this IFileSystemOperations operations, string accountName)
        {
            return operations.GetHomeDirectoryAsync(accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Get the list of file status objects specified by the file path.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to retrieve status for.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all file
        /// status items.
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem file status list information response.
        /// </returns>
        public static FileStatusesResponse ListFileStatus(this IFileSystemOperations operations, string filePath, string accountName, DataLakeStoreFileSystemListParameters parameters)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).ListFileStatusAsync(filePath, accountName, parameters);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Get the list of file status objects specified by the file path.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the file to retrieve status for.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='parameters'>
        /// Optional. Query parameters. If null is passed returns all file
        /// status items.
        /// </param>
        /// <returns>
        /// Data Lake Store filesystem file status list information response.
        /// </returns>
        public static Task<FileStatusesResponse> ListFileStatusAsync(this IFileSystemOperations operations, string filePath, string accountName, DataLakeStoreFileSystemListParameters parameters)
        {
            return operations.ListFileStatusAsync(filePath, accountName, parameters, CancellationToken.None);
        }
        
        /// <summary>
        /// Creates a directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='path'>
        /// Required. The path to the directory to create.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='permission'>
        /// Optional. The optional permissions to set on the directories
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public static FileOperationResultResponse Mkdirs(this IFileSystemOperations operations, string path, string accountName, string permission)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).MkdirsAsync(path, accountName, permission);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Creates a directory.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='path'>
        /// Required. The path to the directory to create.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='permission'>
        /// Optional. The optional permissions to set on the directories
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public static Task<FileOperationResultResponse> MkdirsAsync(this IFileSystemOperations operations, string path, string accountName, string permission)
        {
            return operations.MkdirsAsync(path, accountName, permission, CancellationToken.None);
        }
        
        /// <summary>
        /// Modifies existing ACL entries on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to modify ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='aclSpec'>
        /// Required. The ACL spec included in ACL modification operations in
        /// the format '[default:]user|group|other::r|-w|-x|-'
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse ModifyAclEntries(this IFileSystemOperations operations, string filePath, string accountName, string aclSpec)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).ModifyAclEntriesAsync(filePath, accountName, aclSpec);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Modifies existing ACL entries on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to modify ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='aclSpec'>
        /// Required. The ACL spec included in ACL modification operations in
        /// the format '[default:]user|group|other::r|-w|-x|-'
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> ModifyAclEntriesAsync(this IFileSystemOperations operations, string filePath, string accountName, string aclSpec)
        {
            return operations.ModifyAclEntriesAsync(filePath, accountName, aclSpec, CancellationToken.None);
        }
        
        /// <summary>
        /// Concatenates the list of files into the target file. This API is
        /// NOT webhdfs compliant, however supports a much larger list of
        /// files in the concatenate list.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='destinationPath'>
        /// Required. The path to the destination file resulting from the
        /// concatenation.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='streamContents'>
        /// Required. A list of comma seperated absolute FileSystem paths
        /// without scheme and authority. In the format: 'sources=<comma
        /// separated list>'
        /// </param>
        /// <param name='deleteSourceDirectory'>
        /// Required. Indicates two things to the system which allow for
        /// optimizations and increased concatenate performance. First, that
        /// all the streams being concatenated are in the same source
        /// directory. Second, that the source directory ONLY has streams in
        /// it that are being concatenated into the destination stream. Note
        /// that only the first requirement is strictly enforced (concatenate
        /// will ignore the flag and only delete the source streams, not the
        /// folder). If the first option is met, ALL data that was not part of
        /// the set of streams being concatenated WILL BE LOST.It is critical
        /// to only use this option if you are certain the two requirements
        /// are met.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse MsConcat(this IFileSystemOperations operations, string destinationPath, string accountName, Stream streamContents, bool? deleteSourceDirectory)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).MsConcatAsync(destinationPath, accountName, streamContents, deleteSourceDirectory);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Concatenates the list of files into the target file. This API is
        /// NOT webhdfs compliant, however supports a much larger list of
        /// files in the concatenate list.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='destinationPath'>
        /// Required. The path to the destination file resulting from the
        /// concatenation.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='streamContents'>
        /// Required. A list of comma seperated absolute FileSystem paths
        /// without scheme and authority. In the format: 'sources=<comma
        /// separated list>'
        /// </param>
        /// <param name='deleteSourceDirectory'>
        /// Required. Indicates two things to the system which allow for
        /// optimizations and increased concatenate performance. First, that
        /// all the streams being concatenated are in the same source
        /// directory. Second, that the source directory ONLY has streams in
        /// it that are being concatenated into the destination stream. Note
        /// that only the first requirement is strictly enforced (concatenate
        /// will ignore the flag and only delete the source streams, not the
        /// folder). If the first option is met, ALL data that was not part of
        /// the set of streams being concatenated WILL BE LOST.It is critical
        /// to only use this option if you are certain the two requirements
        /// are met.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> MsConcatAsync(this IFileSystemOperations operations, string destinationPath, string accountName, Stream streamContents, bool? deleteSourceDirectory)
        {
            return operations.MsConcatAsync(destinationPath, accountName, streamContents, deleteSourceDirectory, CancellationToken.None);
        }
        
        /// <summary>
        /// Gets the data associated with the file handle requested.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='fileOpenRequestLink'>
        /// Required. The link to the file to open including all required
        /// parameters.
        /// </param>
        /// <returns>
        /// The data from the file requested.
        /// </returns>
        public static FileOpenResponse Open(this IFileSystemOperations operations, string fileOpenRequestLink)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).OpenAsync(fileOpenRequestLink);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Gets the data associated with the file handle requested.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='fileOpenRequestLink'>
        /// Required. The link to the file to open including all required
        /// parameters.
        /// </param>
        /// <returns>
        /// The data from the file requested.
        /// </returns>
        public static Task<FileOpenResponse> OpenAsync(this IFileSystemOperations operations, string fileOpenRequestLink)
        {
            return operations.OpenAsync(fileOpenRequestLink, CancellationToken.None);
        }
        
        /// <summary>
        /// Removes the existing ACL on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to remove ACL on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse RemoveAcl(this IFileSystemOperations operations, string filePath, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).RemoveAclAsync(filePath, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Removes the existing ACL on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to remove ACL on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RemoveAclAsync(this IFileSystemOperations operations, string filePath, string accountName)
        {
            return operations.RemoveAclAsync(filePath, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Removes existing ACL entries on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to remove ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='aclSpec'>
        /// Required. The ACL spec included in ACL removal operations in the
        /// format '[default:]user|group|other'
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse RemoveAclEntries(this IFileSystemOperations operations, string filePath, string accountName, string aclSpec)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).RemoveAclEntriesAsync(filePath, accountName, aclSpec);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Removes existing ACL entries on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to remove ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='aclSpec'>
        /// Required. The ACL spec included in ACL removal operations in the
        /// format '[default:]user|group|other'
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RemoveAclEntriesAsync(this IFileSystemOperations operations, string filePath, string accountName, string aclSpec)
        {
            return operations.RemoveAclEntriesAsync(filePath, accountName, aclSpec, CancellationToken.None);
        }
        
        /// <summary>
        /// Removes default ACL entries on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to remove default ACLs
        /// on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse RemoveDefaultAcl(this IFileSystemOperations operations, string filePath, string accountName)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).RemoveDefaultAclAsync(filePath, accountName);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Removes default ACL entries on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to remove default ACLs
        /// on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> RemoveDefaultAclAsync(this IFileSystemOperations operations, string filePath, string accountName)
        {
            return operations.RemoveDefaultAclAsync(filePath, accountName, CancellationToken.None);
        }
        
        /// <summary>
        /// Rename a directory or file.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory to move/rename.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='destinationPath'>
        /// Required. The path to move/rename the file or folder to
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public static FileOperationResultResponse Rename(this IFileSystemOperations operations, string sourcePath, string accountName, string destinationPath)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).RenameAsync(sourcePath, accountName, destinationPath);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Rename a directory or file.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory to move/rename.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='destinationPath'>
        /// Required. The path to move/rename the file or folder to
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public static Task<FileOperationResultResponse> RenameAsync(this IFileSystemOperations operations, string sourcePath, string accountName, string destinationPath)
        {
            return operations.RenameAsync(sourcePath, accountName, destinationPath, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets ACL entries on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to set ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='aclSpec'>
        /// Required. The ACL spec included in ACL creation operations in the
        /// format '[default:]user|group|other::r|-w|-x|-'
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SetAcl(this IFileSystemOperations operations, string filePath, string accountName, string aclSpec)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).SetAclAsync(filePath, accountName, aclSpec);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets ACL entries on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='filePath'>
        /// Required. The path to the directory or file to set ACLs on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='aclSpec'>
        /// Required. The ACL spec included in ACL creation operations in the
        /// format '[default:]user|group|other::r|-w|-x|-'
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SetAclAsync(this IFileSystemOperations operations, string filePath, string accountName, string aclSpec)
        {
            return operations.SetAclAsync(filePath, accountName, aclSpec, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets the owner of a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to set the owner on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='owner'>
        /// Optional. The username who is the owner of a file/directory, if
        /// empty remains unchanged.
        /// </param>
        /// <param name='group'>
        /// Optional. The name of a group, if empty remains unchanged.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SetOwner(this IFileSystemOperations operations, string sourcePath, string accountName, string owner, string group)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).SetOwnerAsync(sourcePath, accountName, owner, group);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets the owner of a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to set the owner on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='owner'>
        /// Optional. The username who is the owner of a file/directory, if
        /// empty remains unchanged.
        /// </param>
        /// <param name='group'>
        /// Optional. The name of a group, if empty remains unchanged.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SetOwnerAsync(this IFileSystemOperations operations, string sourcePath, string accountName, string owner, string group)
        {
            return operations.SetOwnerAsync(sourcePath, accountName, owner, group, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets the permission of the file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to set permissions on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='permission'>
        /// Optional. A string octal representation of the permission (i.e
        /// 'rwx')
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SetPermission(this IFileSystemOperations operations, string sourcePath, string accountName, string permission)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).SetPermissionAsync(sourcePath, accountName, permission);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets the permission of the file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to set permissions on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='permission'>
        /// Optional. A string octal representation of the permission (i.e
        /// 'rwx')
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SetPermissionAsync(this IFileSystemOperations operations, string sourcePath, string accountName, string permission)
        {
            return operations.SetPermissionAsync(sourcePath, accountName, permission, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets the value of the replication factor.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to create a replication
        /// of.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='replication'>
        /// Required. The number of replications of a file.
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public static FileOperationResultResponse SetReplication(this IFileSystemOperations operations, string sourcePath, string accountName, short? replication)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).SetReplicationAsync(sourcePath, accountName, replication);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets the value of the replication factor.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to create a replication
        /// of.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='replication'>
        /// Required. The number of replications of a file.
        /// </param>
        /// <returns>
        /// The result of the request or operation.
        /// </returns>
        public static Task<FileOperationResultResponse> SetReplicationAsync(this IFileSystemOperations operations, string sourcePath, string accountName, short? replication)
        {
            return operations.SetReplicationAsync(sourcePath, accountName, replication, CancellationToken.None);
        }
        
        /// <summary>
        /// Sets the access or modification time on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to set permissions on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='modificationTime'>
        /// Required. The modification time of a file/directory. If -1 remains
        /// unchanged
        /// </param>
        /// <param name='accessTime'>
        /// Required. The access time of a file/directory. If -1 remains
        /// unchanged
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static AzureOperationResponse SetTimes(this IFileSystemOperations operations, string sourcePath, string accountName, long modificationTime, long accessTime)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IFileSystemOperations)s).SetTimesAsync(sourcePath, accountName, modificationTime, accessTime);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <summary>
        /// Sets the access or modification time on a file or folder.
        /// </summary>
        /// <param name='operations'>
        /// Reference to the
        /// Microsoft.Azure.Management.DataLake.StoreFileSystem.IFileSystemOperations.
        /// </param>
        /// <param name='sourcePath'>
        /// Required. The path to the directory or file to set permissions on.
        /// </param>
        /// <param name='accountName'>
        /// Required. The name of the account to use
        /// </param>
        /// <param name='modificationTime'>
        /// Required. The modification time of a file/directory. If -1 remains
        /// unchanged
        /// </param>
        /// <param name='accessTime'>
        /// Required. The access time of a file/directory. If -1 remains
        /// unchanged
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public static Task<AzureOperationResponse> SetTimesAsync(this IFileSystemOperations operations, string sourcePath, string accountName, long modificationTime, long accessTime)
        {
            return operations.SetTimesAsync(sourcePath, accountName, modificationTime, accessTime, CancellationToken.None);
        }
    }
}
