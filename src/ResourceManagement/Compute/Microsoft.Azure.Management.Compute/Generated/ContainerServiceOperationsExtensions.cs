// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Compute
{
    using System.Threading.Tasks;
   using Microsoft.Rest.Azure;
   using Models;

    /// <summary>
    /// Extension methods for ContainerServiceOperations.
    /// </summary>
    public static partial class ContainerServiceOperationsExtensions
    {
            /// <summary>
            /// The operation to create or update a container service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerServiceName'>
            /// The name of the container service within the given subscription and
            /// resource group.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create Container Service operation.
            /// </param>
            public static ContainerService CreateOrUpdate(this IContainerServiceOperations operations, string resourceGroupName, string containerServiceName, ContainerService parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IContainerServiceOperations)s).CreateOrUpdateAsync(resourceGroupName, containerServiceName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to create or update a container service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerServiceName'>
            /// The name of the container service within the given subscription and
            /// resource group.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create Container Service operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ContainerService> CreateOrUpdateAsync(this IContainerServiceOperations operations, string resourceGroupName, string containerServiceName, ContainerService parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, containerServiceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The operation to create or update a container service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerServiceName'>
            /// The name of the container service within the given subscription and
            /// resource group.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create Container Service operation.
            /// </param>
            public static ContainerService BeginCreateOrUpdate(this IContainerServiceOperations operations, string resourceGroupName, string containerServiceName, ContainerService parameters)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IContainerServiceOperations)s).BeginCreateOrUpdateAsync(resourceGroupName, containerServiceName, parameters), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to create or update a container service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerServiceName'>
            /// The name of the container service within the given subscription and
            /// resource group.
            /// </param>
            /// <param name='parameters'>
            /// Parameters supplied to the Create Container Service operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ContainerService> BeginCreateOrUpdateAsync(this IContainerServiceOperations operations, string resourceGroupName, string containerServiceName, ContainerService parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, containerServiceName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The operation to get a container service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerServiceName'>
            /// The name of the container service within the given subscription and
            /// resource group.
            /// </param>
            public static ContainerService Get(this IContainerServiceOperations operations, string resourceGroupName, string containerServiceName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IContainerServiceOperations)s).GetAsync(resourceGroupName, containerServiceName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to get a container service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerServiceName'>
            /// The name of the container service within the given subscription and
            /// resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<ContainerService> GetAsync(this IContainerServiceOperations operations, string resourceGroupName, string containerServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, containerServiceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// The operation to delete a container service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerServiceName'>
            /// The name of the container service within the given subscription and
            /// resource group.
            /// </param>
            public static void Delete(this IContainerServiceOperations operations, string resourceGroupName, string containerServiceName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContainerServiceOperations)s).DeleteAsync(resourceGroupName, containerServiceName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to delete a container service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerServiceName'>
            /// The name of the container service within the given subscription and
            /// resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task DeleteAsync(this IContainerServiceOperations operations, string resourceGroupName, string containerServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.DeleteWithHttpMessagesAsync(resourceGroupName, containerServiceName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// The operation to delete a container service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerServiceName'>
            /// The name of the container service within the given subscription and
            /// resource group.
            /// </param>
            public static void BeginDelete(this IContainerServiceOperations operations, string resourceGroupName, string containerServiceName)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IContainerServiceOperations)s).BeginDeleteAsync(resourceGroupName, containerServiceName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to delete a container service.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='containerServiceName'>
            /// The name of the container service within the given subscription and
            /// resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task BeginDeleteAsync(this IContainerServiceOperations operations, string resourceGroupName, string containerServiceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, containerServiceName, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// The operation to list container services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            public static System.Collections.Generic.IEnumerable<ContainerService> List(this IContainerServiceOperations operations, string resourceGroupName)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IContainerServiceOperations)s).ListAsync(resourceGroupName), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// The operation to list container services.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<System.Collections.Generic.IEnumerable<ContainerService>> ListAsync(this IContainerServiceOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
