// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Microsoft.Rest.Azure;

    /// <summary>
    /// Profile for container service master
    /// </summary>
    public partial class ContainerServiceMasterProfile
    {
        /// <summary>
        /// Initializes a new instance of the ContainerServiceMasterProfile
        /// class.
        /// </summary>
        public ContainerServiceMasterProfile() { }

        /// <summary>
        /// Initializes a new instance of the ContainerServiceMasterProfile
        /// class.
        /// </summary>
        public ContainerServiceMasterProfile(string dnsPrefix, int? count = default(int?), string fqdn = default(string))
        {
            Count = count;
            DnsPrefix = dnsPrefix;
            Fqdn = fqdn;
        }

        /// <summary>
        /// Number of masters (VMs) in the container cluster
        /// </summary>
        [JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// DNS prefix to be used to create FQDN for master
        /// </summary>
        [JsonProperty(PropertyName = "dnsPrefix")]
        public string DnsPrefix { get; set; }

        /// <summary>
        /// FDQN for the master
        /// </summary>
        [JsonProperty(PropertyName = "fqdn")]
        public string Fqdn { get; private set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (DnsPrefix == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DnsPrefix");
            }
        }
    }
}
