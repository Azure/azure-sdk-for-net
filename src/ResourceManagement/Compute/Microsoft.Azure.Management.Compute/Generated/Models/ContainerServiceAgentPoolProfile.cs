// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Profile for container service agent pool
    /// </summary>
    public partial class ContainerServiceAgentPoolProfile
    {
        /// <summary>
        /// Initializes a new instance of the ContainerServiceAgentPoolProfile
        /// class.
        /// </summary>
        public ContainerServiceAgentPoolProfile() { }

        /// <summary>
        /// Initializes a new instance of the ContainerServiceAgentPoolProfile
        /// class.
        /// </summary>
        /// <param name="name">Unique name of the agent pool profile within
        /// the context of the subscription and resource group</param>
        /// <param name="dnsPrefix">DNS prefix to be used to create FQDN for
        /// this agent pool</param>
        /// <param name="count">No. of agents (VMs) that will host docker
        /// containers</param>
        /// <param name="vmSize">Size of agent VMs. Possible values include:
        /// 'Standard_A0', 'Standard_A1', 'Standard_A2', 'Standard_A3',
        /// 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
        /// 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11',
        /// 'Standard_D1', 'Standard_D2', 'Standard_D3', 'Standard_D4',
        /// 'Standard_D11', 'Standard_D12', 'Standard_D13', 'Standard_D14',
        /// 'Standard_D1_v2', 'Standard_D2_v2', 'Standard_D3_v2',
        /// 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
        /// 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2',
        /// 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4',
        /// 'Standard_G5', 'Standard_DS1', 'Standard_DS2', 'Standard_DS3',
        /// 'Standard_DS4', 'Standard_DS11', 'Standard_DS12',
        /// 'Standard_DS13', 'Standard_DS14', 'Standard_GS1', 'Standard_GS2',
        /// 'Standard_GS3', 'Standard_GS4', 'Standard_GS5'</param>
        /// <param name="fqdn">FDQN for the agent pool</param>
        public ContainerServiceAgentPoolProfile(string name, string dnsPrefix, int? count = default(int?), string vmSize = default(string), string fqdn = default(string))
        {
            Name = name;
            Count = count;
            VmSize = vmSize;
            DnsPrefix = dnsPrefix;
            Fqdn = fqdn;
        }

        /// <summary>
        /// Gets or sets unique name of the agent pool profile within the
        /// context of the subscription and resource group
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets no. of agents (VMs) that will host docker containers
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// Gets or sets size of agent VMs. Possible values include:
        /// 'Standard_A0', 'Standard_A1', 'Standard_A2', 'Standard_A3',
        /// 'Standard_A4', 'Standard_A5', 'Standard_A6', 'Standard_A7',
        /// 'Standard_A8', 'Standard_A9', 'Standard_A10', 'Standard_A11',
        /// 'Standard_D1', 'Standard_D2', 'Standard_D3', 'Standard_D4',
        /// 'Standard_D11', 'Standard_D12', 'Standard_D13', 'Standard_D14',
        /// 'Standard_D1_v2', 'Standard_D2_v2', 'Standard_D3_v2',
        /// 'Standard_D4_v2', 'Standard_D5_v2', 'Standard_D11_v2',
        /// 'Standard_D12_v2', 'Standard_D13_v2', 'Standard_D14_v2',
        /// 'Standard_G1', 'Standard_G2', 'Standard_G3', 'Standard_G4',
        /// 'Standard_G5', 'Standard_DS1', 'Standard_DS2', 'Standard_DS3',
        /// 'Standard_DS4', 'Standard_DS11', 'Standard_DS12',
        /// 'Standard_DS13', 'Standard_DS14', 'Standard_GS1', 'Standard_GS2',
        /// 'Standard_GS3', 'Standard_GS4', 'Standard_GS5'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmSize")]
        public string VmSize { get; set; }

        /// <summary>
        /// Gets or sets DNS prefix to be used to create FQDN for this agent
        /// pool
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dnsPrefix")]
        public string DnsPrefix { get; set; }

        /// <summary>
        /// Gets FDQN for the agent pool
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fqdn")]
        public string Fqdn { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (DnsPrefix == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DnsPrefix");
            }
            if (this.Count > 100)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Count", 100);
            }
            if (this.Count < 1)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Count", 1);
            }
        }
    }
}
