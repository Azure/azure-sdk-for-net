// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Describes a storage profile.
    /// </summary>
    public partial class ImageStorageProfile
    {
        /// <summary>
        /// Initializes a new instance of the ImageStorageProfile class.
        /// </summary>
        public ImageStorageProfile() { }

        /// <summary>
        /// Initializes a new instance of the ImageStorageProfile class.
        /// </summary>
        /// <param name="osDisk">The OS disk.</param>
        /// <param name="dataDisks">The data disks.</param>
        public ImageStorageProfile(ImageOSDisk osDisk, System.Collections.Generic.IList<ImageDataDisk> dataDisks = default(System.Collections.Generic.IList<ImageDataDisk>))
        {
            OsDisk = osDisk;
            DataDisks = dataDisks;
        }

        /// <summary>
        /// Gets or sets the OS disk.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osDisk")]
        public ImageOSDisk OsDisk { get; set; }

        /// <summary>
        /// Gets or sets the data disks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataDisks")]
        public System.Collections.Generic.IList<ImageDataDisk> DataDisks { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OsDisk == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OsDisk");
            }
            if (this.OsDisk != null)
            {
                this.OsDisk.Validate();
            }
            if (this.DataDisks != null)
            {
                foreach (var element in this.DataDisks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
