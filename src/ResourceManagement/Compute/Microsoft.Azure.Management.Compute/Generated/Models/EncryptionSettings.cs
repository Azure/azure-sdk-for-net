// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using System.Linq;

    /// <summary>
    /// Encryption settings for disk or snapshot
    /// </summary>
    public partial class EncryptionSettings
    {
        /// <summary>
        /// Initializes a new instance of the EncryptionSettings class.
        /// </summary>
        public EncryptionSettings() { }

        /// <summary>
        /// Initializes a new instance of the EncryptionSettings class.
        /// </summary>
        /// <param name="enabled">Set this flag to true and provide
        /// DiskEncryptionKey and optional KeyEncryptionKey to enable
        /// encryption. Set this flag to false and remove DiskEncryptionKey
        /// and KeyEncryptionKey to disable encryption. If EncryptionSettings
        /// is null in the request object, the existing settings remain
        /// unchanged.</param>
        /// <param name="diskEncryptionKey">Key Vault Secret Url and vault id
        /// of the disk encryption key</param>
        /// <param name="keyEncryptionKey">Key Vault Key Url and vault id of
        /// the key encryption key</param>
        public EncryptionSettings(bool? enabled = default(bool?), KeyVaultAndSecretReference diskEncryptionKey = default(KeyVaultAndSecretReference), KeyVaultAndKeyReference keyEncryptionKey = default(KeyVaultAndKeyReference))
        {
            Enabled = enabled;
            DiskEncryptionKey = diskEncryptionKey;
            KeyEncryptionKey = keyEncryptionKey;
        }

        /// <summary>
        /// Gets or sets set this flag to true and provide DiskEncryptionKey
        /// and optional KeyEncryptionKey to enable encryption. Set this flag
        /// to false and remove DiskEncryptionKey and KeyEncryptionKey to
        /// disable encryption. If EncryptionSettings is null in the request
        /// object, the existing settings remain unchanged.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabled")]
        public bool? Enabled { get; set; }

        /// <summary>
        /// Gets or sets key Vault Secret Url and vault id of the disk
        /// encryption key
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskEncryptionKey")]
        public KeyVaultAndSecretReference DiskEncryptionKey { get; set; }

        /// <summary>
        /// Gets or sets key Vault Key Url and vault id of the key encryption
        /// key
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyEncryptionKey")]
        public KeyVaultAndKeyReference KeyEncryptionKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DiskEncryptionKey != null)
            {
                this.DiskEncryptionKey.Validate();
            }
            if (this.KeyEncryptionKey != null)
            {
                this.KeyEncryptionKey.Validate();
            }
        }
    }
}
