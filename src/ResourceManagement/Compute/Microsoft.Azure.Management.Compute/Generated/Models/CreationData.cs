// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator 1.0.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Compute.Models
{
    using Azure;
    using Management;
    using Compute;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Data used when creating a disk.
    /// </summary>
    public partial class CreationData
    {
        /// <summary>
        /// Initializes a new instance of the CreationData class.
        /// </summary>
        public CreationData() { }

        /// <summary>
        /// Initializes a new instance of the CreationData class.
        /// </summary>
        /// <param name="createOption">Possible values include: 'Empty',
        /// 'Attach', 'FromImage', 'Import', 'Copy', 'Restore'</param>
        /// <param name="storageAccountId">If createOption is Import, the Azure
        /// Resource Manager identifier of the storage account containing the
        /// blob to import as a disk. Required only if the blob is in a
        /// different subscription</param>
        /// <param name="imageReference">Disk source information.</param>
        /// <param name="sourceUri">If creationOption is Import, this is a SAS
        /// URI to a blob to be imported into a managed disk. If creationOption
        /// is Copy, this is a relative Uri containing the id of the source
        /// snapshot to be copied into a managed disk.</param>
        /// <param name="sourceResourceId">If createOption is Copy, this is the
        /// ARM id of the source snapshot or disk. If creationOption is
        /// Restore, this is the ARM-like id of the source disk restore
        /// point.</param>
        public CreationData(DiskCreateOption createOption, string storageAccountId = default(string), ImageDiskReference imageReference = default(ImageDiskReference), string sourceUri = default(string), string sourceResourceId = default(string))
        {
            CreateOption = createOption;
            StorageAccountId = storageAccountId;
            ImageReference = imageReference;
            SourceUri = sourceUri;
            SourceResourceId = sourceResourceId;
        }

        /// <summary>
        /// Gets or sets possible values include: 'Empty', 'Attach',
        /// 'FromImage', 'Import', 'Copy', 'Restore'
        /// </summary>
        [JsonProperty(PropertyName = "createOption")]
        public DiskCreateOption CreateOption { get; set; }

        /// <summary>
        /// Gets or sets if createOption is Import, the Azure Resource Manager
        /// identifier of the storage account containing the blob to import as
        /// a disk. Required only if the blob is in a different subscription
        /// </summary>
        [JsonProperty(PropertyName = "storageAccountId")]
        public string StorageAccountId { get; set; }

        /// <summary>
        /// Gets or sets disk source information.
        /// </summary>
        [JsonProperty(PropertyName = "imageReference")]
        public ImageDiskReference ImageReference { get; set; }

        /// <summary>
        /// Gets or sets if creationOption is Import, this is a SAS URI to a
        /// blob to be imported into a managed disk. If creationOption is Copy,
        /// this is a relative Uri containing the id of the source snapshot to
        /// be copied into a managed disk.
        /// </summary>
        [JsonProperty(PropertyName = "sourceUri")]
        public string SourceUri { get; set; }

        /// <summary>
        /// Gets or sets if createOption is Copy, this is the ARM id of the
        /// source snapshot or disk. If creationOption is Restore, this is the
        /// ARM-like id of the source disk restore point.
        /// </summary>
        [JsonProperty(PropertyName = "sourceResourceId")]
        public string SourceResourceId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ImageReference != null)
            {
                ImageReference.Validate();
            }
        }
    }
}

